define(['dart_sdk', 'packages/web_socket_channel/src/copy/io_sink.dart', 'packages/crypto/src/sha1.dart', 'packages/stream_channel/src/stream_channel_controller.dart', 'packages/async/src/delegate/stream_sink.dart'], (function load__packages__web_socket_channel__web_socket_channel_dart(dart_sdk, packages__web_socket_channel__src__copy__io_sink$46dart, packages__crypto__src__sha1$46dart, packages__stream_channel__src__stream_channel_controller$46dart, packages__async__src__delegate__stream_sink$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const async = dart_sdk.async;
  const typed_data = dart_sdk.typed_data;
  const _native_typed_data = dart_sdk._native_typed_data;
  const math = dart_sdk.math;
  const convert = dart_sdk.convert;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const html = dart_sdk.html;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const io_sink = packages__web_socket_channel__src__copy__io_sink$46dart.src__copy__io_sink;
  const sha1 = packages__crypto__src__sha1$46dart.src__sha1;
  const stream_channel = packages__stream_channel__src__stream_channel_controller$46dart.stream_channel;
  const stream_channel_controller = packages__stream_channel__src__stream_channel_controller$46dart.src__stream_channel_controller;
  const stream_sink = packages__async__src__delegate__stream_sink$46dart.src__delegate__stream_sink;
  var web_socket_channel = Object.create(dart.library);
  var _connect_html = Object.create(dart.library);
  var exception = Object.create(dart.library);
  var web_socket_impl = Object.create(dart.library);
  var channel = Object.create(dart.library);
  var html$ = Object.create(dart.library);
  var $toString = dartx.toString;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $buffer = dartx.buffer;
  var $truncate = dartx.truncate;
  var $isNotEmpty = dartx.isNotEmpty;
  var $sublist = dartx.sublist;
  var $add = dartx.add;
  var $addAll = dartx.addAll;
  var $forEach = dartx.forEach;
  var $rightShift = dartx['>>'];
  var $setRange = dartx.setRange;
  var $remove = dartx.remove;
  var $codeUnits = dartx.codeUnits;
  var $onOpen = dartx.onOpen;
  var $onError = dartx.onError;
  var $onMessage = dartx.onMessage;
  var $data = dartx.data;
  var $onClose = dartx.onClose;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    ListOfintL: () => (T.ListOfintL = dart.constFn(core.List$(T.intL())))(),
    ListLOfintL: () => (T.ListLOfintL = dart.constFn(dart.legacy(T.ListOfintL())))(),
    StreamOfListLOfintL: () => (T.StreamOfListLOfintL = dart.constFn(async.Stream$(T.ListLOfintL())))(),
    StreamLOfListLOfintL: () => (T.StreamLOfListLOfintL = dart.constFn(dart.legacy(T.StreamOfListLOfintL())))(),
    _WebSocketProtocolTransformerL: () => (T._WebSocketProtocolTransformerL = dart.constFn(dart.legacy(web_socket_impl._WebSocketProtocolTransformer)))(),
    EventSinkL: () => (T.EventSinkL = dart.constFn(dart.legacy(async.EventSink)))(),
    EventSinkLTo_WebSocketProtocolTransformerL: () => (T.EventSinkLTo_WebSocketProtocolTransformerL = dart.constFn(dart.fnType(T._WebSocketProtocolTransformerL(), [T.EventSinkL()])))(),
    Uint8ListL: () => (T.Uint8ListL = dart.constFn(dart.legacy(typed_data.Uint8List)))(),
    StreamL: () => (T.StreamL = dart.constFn(dart.legacy(async.Stream)))(),
    _WebSocketOutgoingTransformerL: () => (T._WebSocketOutgoingTransformerL = dart.constFn(dart.legacy(web_socket_impl._WebSocketOutgoingTransformer)))(),
    EventSinkOfListLOfintL: () => (T.EventSinkOfListLOfintL = dart.constFn(async.EventSink$(T.ListLOfintL())))(),
    EventSinkLOfListLOfintL: () => (T.EventSinkLOfListLOfintL = dart.constFn(dart.legacy(T.EventSinkOfListLOfintL())))(),
    EventSinkLOfListLOfintLTo_WebSocketOutgoingTransformerL: () => (T.EventSinkLOfListLOfintLTo_WebSocketOutgoingTransformerL = dart.constFn(dart.fnType(T._WebSocketOutgoingTransformerL(), [T.EventSinkLOfListLOfintL()])))(),
    _WebSocketPongL: () => (T._WebSocketPongL = dart.constFn(dart.legacy(web_socket_impl._WebSocketPong)))(),
    _WebSocketPingL: () => (T._WebSocketPingL = dart.constFn(dart.legacy(web_socket_impl._WebSocketPing)))(),
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    JSArrayOfintL: () => (T.JSArrayOfintL = dart.constFn(_interceptors.JSArray$(T.intL())))(),
    ListLOfintLToNull: () => (T.ListLOfintLToNull = dart.constFn(dart.fnType(core.Null, [T.ListLOfintL()])))(),
    JSArrayOfListLOfintL: () => (T.JSArrayOfListLOfintL = dart.constFn(_interceptors.JSArray$(T.ListLOfintL())))(),
    WebSocketImplL: () => (T.WebSocketImplL = dart.constFn(dart.legacy(web_socket_impl.WebSocketImpl)))(),
    CompleterOfWebSocketImplL: () => (T.CompleterOfWebSocketImplL = dart.constFn(async.Completer$(T.WebSocketImplL())))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    ArgumentErrorL: () => (T.ArgumentErrorL = dart.constFn(dart.legacy(core.ArgumentError)))(),
    StackTraceL: () => (T.StackTraceL = dart.constFn(dart.legacy(core.StackTrace)))(),
    dynamicAndStackTraceLToNull: () => (T.dynamicAndStackTraceLToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic, T.StackTraceL()])))(),
    dynamicToWebSocketImplL: () => (T.dynamicToWebSocketImplL = dart.constFn(dart.fnType(T.WebSocketImplL(), [dart.dynamic])))(),
    FutureL: () => (T.FutureL = dart.constFn(dart.legacy(async.Future)))(),
    VoidToFutureL: () => (T.VoidToFutureL = dart.constFn(dart.fnType(T.FutureL(), [])))(),
    dynamicToFutureL: () => (T.dynamicToFutureL = dart.constFn(dart.fnType(T.FutureL(), [dart.dynamic])))(),
    FormatExceptionL: () => (T.FormatExceptionL = dart.constFn(dart.legacy(core.FormatException)))(),
    dynamicAnddynamicToNull: () => (T.dynamicAnddynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic, dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    MapL: () => (T.MapL = dart.constFn(dart.legacy(core.Map)))(),
    dynamicToMapL: () => (T.dynamicToMapL = dart.constFn(dart.fnType(T.MapL(), [dart.dynamic])))(),
    IdentityMapOfintL$WebSocketImplL: () => (T.IdentityMapOfintL$WebSocketImplL = dart.constFn(_js_helper.IdentityMap$(T.intL(), T.WebSocketImplL())))(),
    EventL: () => (T.EventL = dart.constFn(dart.legacy(html.Event)))(),
    EventLToNull: () => (T.EventLToNull = dart.constFn(dart.fnType(core.Null, [T.EventL()])))(),
    ByteBufferL: () => (T.ByteBufferL = dart.constFn(dart.legacy(typed_data.ByteBuffer)))(),
    MessageEventL: () => (T.MessageEventL = dart.constFn(dart.legacy(html.MessageEvent)))(),
    MessageEventLToNull: () => (T.MessageEventLToNull = dart.constFn(dart.fnType(core.Null, [T.MessageEventL()])))(),
    CloseEventL: () => (T.CloseEventL = dart.constFn(dart.legacy(html.CloseEvent)))(),
    CloseEventLToNull: () => (T.CloseEventLToNull = dart.constFn(dart.fnType(core.Null, [T.CloseEventL()])))(),
    dynamicTovoid: () => (T.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 5000000
      });
    },
    get C1() {
      return C[1] = dart.const(new _js_helper.PrivateSymbol.new('_webSocket', _webSocket$0));
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: html$.BinaryType.prototype,
        [value$]: "blob",
        [name$]: "blob"
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: html$.BinaryType.prototype,
        [value$]: "arraybuffer",
        [name$]: "list"
      });
    }
  }, false);
  var C = Array(4).fill(void 0);
  var I = [
    "package:web_socket_channel/src/exception.dart",
    "package:web_socket_channel/src/copy/web_socket_impl.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/web_socket_channel-1.2.0/lib/src/copy/web_socket_impl.dart",
    "package:web_socket_channel/src/channel.dart",
    "package:web_socket_channel/html.dart"
  ];
  _connect_html.connect = function connect(uri, opts) {
    let protocols = opts && 'protocols' in opts ? opts.protocols : null;
    return new html$.HtmlWebSocketChannel.connect(uri, {protocols: protocols});
  };
  var message$ = dart.privateName(exception, "WebSocketChannelException.message");
  var inner$ = dart.privateName(exception, "WebSocketChannelException.inner");
  exception.WebSocketChannelException = class WebSocketChannelException extends core.Object {
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    get inner() {
      return this[inner$];
    }
    set inner(value) {
      super.inner = value;
    }
    toString() {
      return this.message == null ? "WebSocketChannelException" : "WebSocketChannelException: " + dart.str(this.message);
    }
  };
  (exception.WebSocketChannelException.new = function(message = null) {
    this[message$] = message;
    this[inner$] = null;
    ;
  }).prototype = exception.WebSocketChannelException.prototype;
  (exception.WebSocketChannelException.from = function(inner) {
    this[message$] = dart.toString(inner);
    this[inner$] = inner;
    ;
  }).prototype = exception.WebSocketChannelException.prototype;
  dart.addTypeTests(exception.WebSocketChannelException);
  dart.addTypeCaches(exception.WebSocketChannelException);
  exception.WebSocketChannelException[dart.implements] = () => [core.Exception];
  dart.setMethodSignature(exception.WebSocketChannelException, () => ({
    __proto__: dart.getMethods(exception.WebSocketChannelException.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(exception.WebSocketChannelException, I[0]);
  dart.setFieldSignature(exception.WebSocketChannelException, () => ({
    __proto__: dart.getFields(exception.WebSocketChannelException.__proto__),
    message: dart.finalFieldType(dart.legacy(core.String)),
    inner: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(exception.WebSocketChannelException, ['toString']);
  web_socket_impl._WebSocketMessageType = class _WebSocketMessageType extends core.Object {};
  (web_socket_impl._WebSocketMessageType.new = function() {
    ;
  }).prototype = web_socket_impl._WebSocketMessageType.prototype;
  dart.addTypeTests(web_socket_impl._WebSocketMessageType);
  dart.addTypeCaches(web_socket_impl._WebSocketMessageType);
  dart.setLibraryUri(web_socket_impl._WebSocketMessageType, I[1]);
  dart.defineLazy(web_socket_impl._WebSocketMessageType, {
    /*web_socket_impl._WebSocketMessageType.NONE*/get NONE() {
      return 0;
    },
    /*web_socket_impl._WebSocketMessageType.TEXT*/get TEXT() {
      return 1;
    },
    /*web_socket_impl._WebSocketMessageType.BINARY*/get BINARY() {
      return 2;
    }
  }, true);
  web_socket_impl._WebSocketOpcode = class _WebSocketOpcode extends core.Object {};
  (web_socket_impl._WebSocketOpcode.new = function() {
    ;
  }).prototype = web_socket_impl._WebSocketOpcode.prototype;
  dart.addTypeTests(web_socket_impl._WebSocketOpcode);
  dart.addTypeCaches(web_socket_impl._WebSocketOpcode);
  dart.setLibraryUri(web_socket_impl._WebSocketOpcode, I[1]);
  dart.defineLazy(web_socket_impl._WebSocketOpcode, {
    /*web_socket_impl._WebSocketOpcode.CONTINUATION*/get CONTINUATION() {
      return 0;
    },
    /*web_socket_impl._WebSocketOpcode.TEXT*/get TEXT() {
      return 1;
    },
    /*web_socket_impl._WebSocketOpcode.BINARY*/get BINARY() {
      return 2;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_3*/get RESERVED_3() {
      return 3;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_4*/get RESERVED_4() {
      return 4;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_5*/get RESERVED_5() {
      return 5;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_6*/get RESERVED_6() {
      return 6;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_7*/get RESERVED_7() {
      return 7;
    },
    /*web_socket_impl._WebSocketOpcode.CLOSE*/get CLOSE() {
      return 8;
    },
    /*web_socket_impl._WebSocketOpcode.PING*/get PING() {
      return 9;
    },
    /*web_socket_impl._WebSocketOpcode.PONG*/get PONG() {
      return 10;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_B*/get RESERVED_B() {
      return 11;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_C*/get RESERVED_C() {
      return 12;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_D*/get RESERVED_D() {
      return 13;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_E*/get RESERVED_E() {
      return 14;
    },
    /*web_socket_impl._WebSocketOpcode.RESERVED_F*/get RESERVED_F() {
      return 15;
    }
  }, true);
  var _state = dart.privateName(web_socket_impl, "_state");
  var _fin = dart.privateName(web_socket_impl, "_fin");
  var _opcode = dart.privateName(web_socket_impl, "_opcode");
  var _len = dart.privateName(web_socket_impl, "_len");
  var _masked = dart.privateName(web_socket_impl, "_masked");
  var _remainingLenBytes = dart.privateName(web_socket_impl, "_remainingLenBytes");
  var _remainingMaskingKeyBytes = dart.privateName(web_socket_impl, "_remainingMaskingKeyBytes");
  var _remainingPayloadBytes = dart.privateName(web_socket_impl, "_remainingPayloadBytes");
  var _unmaskingIndex = dart.privateName(web_socket_impl, "_unmaskingIndex");
  var _currentMessageType = dart.privateName(web_socket_impl, "_currentMessageType");
  var _eventSink = dart.privateName(web_socket_impl, "_eventSink");
  var _maskingBytes = dart.privateName(web_socket_impl, "_maskingBytes");
  var _payload = dart.privateName(web_socket_impl, "_payload");
  var _serverSide$ = dart.privateName(web_socket_impl, "_serverSide");
  var _isControlFrame = dart.privateName(web_socket_impl, "_isControlFrame");
  var _lengthDone = dart.privateName(web_socket_impl, "_lengthDone");
  var _maskDone = dart.privateName(web_socket_impl, "_maskDone");
  var _unmask = dart.privateName(web_socket_impl, "_unmask");
  var _controlFrameEnd = dart.privateName(web_socket_impl, "_controlFrameEnd");
  var _messageFrameEnd = dart.privateName(web_socket_impl, "_messageFrameEnd");
  var _startPayload = dart.privateName(web_socket_impl, "_startPayload");
  var _prepareForNextFrame = dart.privateName(web_socket_impl, "_prepareForNextFrame");
  web_socket_impl._WebSocketProtocolTransformer = class _WebSocketProtocolTransformer extends async.StreamTransformerBase$(dart.legacy(core.List$(dart.legacy(core.int))), dart.dynamic) {
    bind(stream) {
      T.StreamLOfListLOfintL().as(stream);
      return async.Stream.eventTransformed(stream, dart.fn(eventSink => {
        if (this[_eventSink] != null) {
          dart.throw(new core.StateError.new("WebSocket transformer already used."));
        }
        this[_eventSink] = eventSink;
        return this;
      }, T.EventSinkLTo_WebSocketProtocolTransformerL()));
    }
    addError(error, stackTrace = null) {
      this[_eventSink].addError(error, stackTrace);
    }
    close() {
      this[_eventSink].close();
    }
    add(bytes) {
      let t0;
      T.ListLOfintL().as(bytes);
      let buffer = T.Uint8ListL().is(bytes) ? bytes : _native_typed_data.NativeUint8List.fromList(bytes);
      let index = 0;
      let lastIndex = buffer[$length];
      if (this[_state] === 5) {
        dart.throw(new exception.WebSocketChannelException.new("Data on closed connection"));
      }
      if (this[_state] === 6) {
        dart.throw(new exception.WebSocketChannelException.new("Data on failed connection"));
      }
      while (index < dart.notNull(lastIndex) && this[_state] !== 5 && this[_state] !== 6) {
        let byte = buffer[$_get](index);
        if (dart.notNull(this[_state]) <= 2) {
          if (this[_state] === 0) {
            this[_fin] = (dart.notNull(byte) & 128) !== 0;
            if ((dart.notNull(byte) & (32 | 16) >>> 0) !== 0) {
              dart.throw(new exception.WebSocketChannelException.new("Protocol error"));
            }
            this[_opcode] = (dart.notNull(byte) & 15) >>> 0;
            if (dart.notNull(this[_opcode]) <= 2) {
              if (this[_opcode] === 0) {
                if (this[_currentMessageType] === 0) {
                  dart.throw(new exception.WebSocketChannelException.new("Protocol error"));
                }
              } else {
                if (!(this[_opcode] === 1 || this[_opcode] === 2)) dart.assertFailed(null, I[2], 153, 22, "_opcode == _WebSocketOpcode.TEXT ||\n                  _opcode == _WebSocketOpcode.BINARY");
                if (this[_currentMessageType] !== 0) {
                  dart.throw(new exception.WebSocketChannelException.new("Protocol error"));
                }
                this[_currentMessageType] = this[_opcode];
              }
            } else if (dart.notNull(this[_opcode]) >= 8 && dart.notNull(this[_opcode]) <= 10) {
              if (!dart.test(this[_fin])) dart.throw(new exception.WebSocketChannelException.new("Protocol error"));
            } else {
              dart.throw(new exception.WebSocketChannelException.new("Protocol error"));
            }
            this[_state] = 1;
          } else if (this[_state] === 1) {
            this[_masked] = (dart.notNull(byte) & 128) !== 0;
            this[_len] = dart.notNull(byte) & 127;
            if (dart.test(this[_isControlFrame]()) && dart.notNull(this[_len]) > 125) {
              dart.throw(new exception.WebSocketChannelException.new("Protocol error"));
            }
            if (this[_len] === 126) {
              this[_len] = 0;
              this[_remainingLenBytes] = 2;
              this[_state] = 2;
            } else if (this[_len] === 127) {
              this[_len] = 0;
              this[_remainingLenBytes] = 8;
              this[_state] = 2;
            } else {
              if (!(dart.notNull(this[_len]) < 126)) dart.assertFailed(null, I[2], 183, 20, "_len < 126");
              this[_lengthDone]();
            }
          } else {
            if (!(this[_state] === 2)) dart.assertFailed(null, I[2], 187, 18, "_state == LEN_REST");
            this[_len] = (dart.notNull(this[_len]) << 8 | dart.notNull(byte)) >>> 0;
            this[_remainingLenBytes] = dart.notNull(this[_remainingLenBytes]) - 1;
            if (this[_remainingLenBytes] === 0) {
              this[_lengthDone]();
            }
          }
        } else {
          if (this[_state] === 3) {
            this[_maskingBytes][$_set](4 - dart.notNull((t0 = this[_remainingMaskingKeyBytes], this[_remainingMaskingKeyBytes] = dart.notNull(t0) - 1, t0)), byte);
            if (this[_remainingMaskingKeyBytes] === 0) {
              this[_maskDone]();
            }
          } else {
            if (!(this[_state] === 4)) dart.assertFailed(null, I[2], 201, 18, "_state == PAYLOAD");
            let payloadLength = math.min(T.intL(), dart.notNull(lastIndex) - index, this[_remainingPayloadBytes]);
            this[_remainingPayloadBytes] = dart.notNull(this[_remainingPayloadBytes]) - payloadLength;
            if (dart.test(this[_masked])) {
              this[_unmask](index, payloadLength, buffer);
            }
            this[_payload].add(typed_data.Uint8List.view(buffer[$buffer], index, payloadLength));
            index = index + payloadLength;
            if (dart.test(this[_isControlFrame]())) {
              if (this[_remainingPayloadBytes] === 0) this[_controlFrameEnd]();
            } else {
              if (this[_currentMessageType] !== 1 && this[_currentMessageType] !== 2) {
                dart.throw(new exception.WebSocketChannelException.new("Protocol error"));
              }
              if (this[_remainingPayloadBytes] === 0) this[_messageFrameEnd]();
            }
            index = index - 1;
          }
        }
        index = index + 1;
      }
    }
    [_unmask](index, length, buffer) {
      let t2, t1, t0, t1$, t0$, t2$, t1$0, t0$0;
      if (dart.notNull(length) >= 16) {
        let startOffset = 16 - (dart.notNull(index) & 15);
        let end = dart.notNull(index) + startOffset;
        for (let i = index; dart.notNull(i) < end; i = dart.notNull(i) + 1) {
          t0 = buffer;
          t1 = i;
          t0[$_set](t1, (dart.notNull(t0[$_get](t1)) ^ dart.notNull(this[_maskingBytes][$_get](dart.notNull((t2 = this[_unmaskingIndex], this[_unmaskingIndex] = dart.notNull(t2) + 1, t2)) & 3))) >>> 0);
        }
        index = dart.notNull(index) + startOffset;
        length = dart.notNull(length) - startOffset;
        let blockCount = (dart.notNull(length) / 16)[$truncate]();
        if (blockCount > 0) {
          let mask = 0;
          for (let i = 3; i >= 0; i = i - 1) {
            mask = (mask << 8 | dart.notNull(this[_maskingBytes][$_get](dart.notNull(this[_unmaskingIndex]) + i & 3))) >>> 0;
          }
          let blockMask = new _native_typed_data.NativeInt32x4.new(mask, mask, mask, mask);
          let blockBuffer = typed_data.Int32x4List.view(buffer[$buffer], index, blockCount);
          for (let i = 0; i < dart.notNull(blockBuffer[$length]); i = i + 1) {
            t0$ = blockBuffer;
            t1$ = i;
            t0$[$_set](t1$, t0$[$_get](t1$)['^'](blockMask));
          }
          let bytes = blockCount * 16;
          index = dart.notNull(index) + bytes;
          length = dart.notNull(length) - bytes;
        }
      }
      let end = dart.notNull(index) + dart.notNull(length);
      for (let i = index; dart.notNull(i) < end; i = dart.notNull(i) + 1) {
        t0$0 = buffer;
        t1$0 = i;
        t0$0[$_set](t1$0, (dart.notNull(t0$0[$_get](t1$0)) ^ dart.notNull(this[_maskingBytes][$_get](dart.notNull((t2$ = this[_unmaskingIndex], this[_unmaskingIndex] = dart.notNull(t2$) + 1, t2$)) & 3))) >>> 0);
      }
    }
    [_lengthDone]() {
      if (dart.test(this[_masked])) {
        if (!dart.test(this[_serverSide$])) {
          dart.throw(new exception.WebSocketChannelException.new("Received masked frame from server"));
        }
        this[_state] = 3;
      } else {
        if (dart.test(this[_serverSide$])) {
          dart.throw(new exception.WebSocketChannelException.new("Received unmasked frame from client"));
        }
        this[_remainingPayloadBytes] = this[_len];
        this[_startPayload]();
      }
    }
    [_maskDone]() {
      this[_remainingPayloadBytes] = this[_len];
      this[_startPayload]();
    }
    [_startPayload]() {
      if (this[_remainingPayloadBytes] === 0) {
        if (dart.test(this[_isControlFrame]())) {
          switch (this[_opcode]) {
            case 8:
            {
              this[_state] = 5;
              this[_eventSink].close();
              break;
            }
            case 9:
            {
              this[_eventSink].add(new web_socket_impl._WebSocketPing.new());
              break;
            }
            case 10:
            {
              this[_eventSink].add(new web_socket_impl._WebSocketPong.new());
              break;
            }
          }
          this[_prepareForNextFrame]();
        } else {
          this[_messageFrameEnd]();
        }
      } else {
        this[_state] = 4;
      }
    }
    [_messageFrameEnd]() {
      if (dart.test(this[_fin])) {
        let bytes = this[_payload].takeBytes();
        switch (this[_currentMessageType]) {
          case 1:
          {
            this[_eventSink].add(convert.utf8.decode(bytes));
            break;
          }
          case 2:
          {
            this[_eventSink].add(bytes);
            break;
          }
        }
        this[_currentMessageType] = 0;
      }
      this[_prepareForNextFrame]();
    }
    [_controlFrameEnd]() {
      switch (this[_opcode]) {
        case 8:
        {
          this.closeCode = 1005;
          let payload = this[_payload].takeBytes();
          if (dart.test(payload[$isNotEmpty])) {
            if (payload[$length] === 1) {
              dart.throw(new exception.WebSocketChannelException.new("Protocol error"));
            }
            this.closeCode = (dart.notNull(payload[$_get](0)) << 8 | dart.notNull(payload[$_get](1))) >>> 0;
            if (this.closeCode === 1005) {
              dart.throw(new exception.WebSocketChannelException.new("Protocol error"));
            }
            if (dart.notNull(payload[$length]) > 2) {
              this.closeReason = convert.utf8.decode(payload[$sublist](2));
            }
          }
          this[_state] = 5;
          this[_eventSink].close();
          break;
        }
        case 9:
        {
          this[_eventSink].add(new web_socket_impl._WebSocketPing.new(this[_payload].takeBytes()));
          break;
        }
        case 10:
        {
          this[_eventSink].add(new web_socket_impl._WebSocketPong.new(this[_payload].takeBytes()));
          break;
        }
      }
      this[_prepareForNextFrame]();
    }
    [_isControlFrame]() {
      return this[_opcode] === 8 || this[_opcode] === 9 || this[_opcode] === 10;
    }
    [_prepareForNextFrame]() {
      if (this[_state] !== 5 && this[_state] !== 6) this[_state] = 0;
      this[_fin] = false;
      this[_opcode] = -1;
      this[_len] = -1;
      this[_remainingLenBytes] = -1;
      this[_remainingMaskingKeyBytes] = 4;
      this[_remainingPayloadBytes] = -1;
      this[_unmaskingIndex] = 0;
    }
  };
  (web_socket_impl._WebSocketProtocolTransformer.new = function(_serverSide = false) {
    this[_state] = 0;
    this[_fin] = false;
    this[_opcode] = -1;
    this[_len] = -1;
    this[_masked] = false;
    this[_remainingLenBytes] = -1;
    this[_remainingMaskingKeyBytes] = 4;
    this[_remainingPayloadBytes] = -1;
    this[_unmaskingIndex] = 0;
    this[_currentMessageType] = 0;
    this.closeCode = 1005;
    this.closeReason = "";
    this[_eventSink] = null;
    this[_maskingBytes] = T.ListOfintL().filled(4, 0);
    this[_payload] = _internal.BytesBuilder.new({copy: false});
    this[_serverSide$] = _serverSide;
    web_socket_impl._WebSocketProtocolTransformer.__proto__.new.call(this);
    ;
  }).prototype = web_socket_impl._WebSocketProtocolTransformer.prototype;
  dart.addTypeTests(web_socket_impl._WebSocketProtocolTransformer);
  dart.addTypeCaches(web_socket_impl._WebSocketProtocolTransformer);
  web_socket_impl._WebSocketProtocolTransformer[dart.implements] = () => [async.EventSink$(dart.legacy(core.List$(dart.legacy(core.int))))];
  dart.setMethodSignature(web_socket_impl._WebSocketProtocolTransformer, () => ({
    __proto__: dart.getMethods(web_socket_impl._WebSocketProtocolTransformer.__proto__),
    bind: dart.fnType(dart.legacy(async.Stream), [dart.legacy(core.Object)]),
    addError: dart.fnType(dart.void, [dart.legacy(core.Object)], [dart.legacy(core.StackTrace)]),
    close: dart.fnType(dart.void, []),
    add: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    [_unmask]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(typed_data.Uint8List)]),
    [_lengthDone]: dart.fnType(dart.void, []),
    [_maskDone]: dart.fnType(dart.void, []),
    [_startPayload]: dart.fnType(dart.void, []),
    [_messageFrameEnd]: dart.fnType(dart.void, []),
    [_controlFrameEnd]: dart.fnType(dart.void, []),
    [_isControlFrame]: dart.fnType(dart.legacy(core.bool), []),
    [_prepareForNextFrame]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(web_socket_impl._WebSocketProtocolTransformer, I[1]);
  dart.setFieldSignature(web_socket_impl._WebSocketProtocolTransformer, () => ({
    __proto__: dart.getFields(web_socket_impl._WebSocketProtocolTransformer.__proto__),
    [_state]: dart.fieldType(dart.legacy(core.int)),
    [_fin]: dart.fieldType(dart.legacy(core.bool)),
    [_opcode]: dart.fieldType(dart.legacy(core.int)),
    [_len]: dart.fieldType(dart.legacy(core.int)),
    [_masked]: dart.fieldType(dart.legacy(core.bool)),
    [_remainingLenBytes]: dart.fieldType(dart.legacy(core.int)),
    [_remainingMaskingKeyBytes]: dart.fieldType(dart.legacy(core.int)),
    [_remainingPayloadBytes]: dart.fieldType(dart.legacy(core.int)),
    [_unmaskingIndex]: dart.fieldType(dart.legacy(core.int)),
    [_currentMessageType]: dart.fieldType(dart.legacy(core.int)),
    closeCode: dart.fieldType(dart.legacy(core.int)),
    closeReason: dart.fieldType(dart.legacy(core.String)),
    [_eventSink]: dart.fieldType(dart.legacy(async.EventSink)),
    [_serverSide$]: dart.finalFieldType(dart.legacy(core.bool)),
    [_maskingBytes]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    [_payload]: dart.finalFieldType(dart.legacy(_internal.BytesBuilder))
  }));
  dart.defineLazy(web_socket_impl._WebSocketProtocolTransformer, {
    /*web_socket_impl._WebSocketProtocolTransformer.START*/get START() {
      return 0;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.LEN_FIRST*/get LEN_FIRST() {
      return 1;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.LEN_REST*/get LEN_REST() {
      return 2;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.MASK*/get MASK() {
      return 3;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.PAYLOAD*/get PAYLOAD() {
      return 4;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.CLOSED*/get CLOSED() {
      return 5;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.FAILURE*/get FAILURE() {
      return 6;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.FIN*/get FIN() {
      return 128;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.RSV1*/get RSV1() {
      return 64;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.RSV2*/get RSV2() {
      return 32;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.RSV3*/get RSV3() {
      return 16;
    },
    /*web_socket_impl._WebSocketProtocolTransformer.OPCODE*/get OPCODE() {
      return 15;
    }
  }, true);
  web_socket_impl._WebSocketPing = class _WebSocketPing extends core.Object {};
  (web_socket_impl._WebSocketPing.new = function(payload = null) {
    this.payload = payload;
    ;
  }).prototype = web_socket_impl._WebSocketPing.prototype;
  dart.addTypeTests(web_socket_impl._WebSocketPing);
  dart.addTypeCaches(web_socket_impl._WebSocketPing);
  dart.setLibraryUri(web_socket_impl._WebSocketPing, I[1]);
  dart.setFieldSignature(web_socket_impl._WebSocketPing, () => ({
    __proto__: dart.getFields(web_socket_impl._WebSocketPing.__proto__),
    payload: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int))))
  }));
  web_socket_impl._WebSocketPong = class _WebSocketPong extends core.Object {};
  (web_socket_impl._WebSocketPong.new = function(payload = null) {
    this.payload = payload;
    ;
  }).prototype = web_socket_impl._WebSocketPong.prototype;
  dart.addTypeTests(web_socket_impl._WebSocketPong);
  dart.addTypeCaches(web_socket_impl._WebSocketPong);
  dart.setLibraryUri(web_socket_impl._WebSocketPong, I[1]);
  dart.setFieldSignature(web_socket_impl._WebSocketPong, () => ({
    __proto__: dart.getFields(web_socket_impl._WebSocketPong.__proto__),
    payload: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.int))))
  }));
  var _outCloseCode = dart.privateName(web_socket_impl, "_outCloseCode");
  var _outCloseReason = dart.privateName(web_socket_impl, "_outCloseReason");
  web_socket_impl._WebSocketOutgoingTransformer = class _WebSocketOutgoingTransformer extends async.StreamTransformerBase$(dart.dynamic, dart.legacy(core.List$(dart.legacy(core.int)))) {
    bind(stream) {
      T.StreamL().as(stream);
      return T.StreamOfListLOfintL().eventTransformed(stream, dart.fn(eventSink => {
        if (this[_eventSink] != null) {
          dart.throw(new core.StateError.new("WebSocket transformer already used"));
        }
        this[_eventSink] = eventSink;
        return this;
      }, T.EventSinkLOfListLOfintLTo_WebSocketOutgoingTransformerL()));
    }
    add(message) {
      if (T._WebSocketPongL().is(message)) {
        this.addFrame(10, message.payload);
        return;
      }
      if (T._WebSocketPingL().is(message)) {
        this.addFrame(9, message.payload);
        return;
      }
      let data = null;
      let opcode = null;
      if (message != null) {
        if (T.StringL().is(message)) {
          opcode = 1;
          data = convert.utf8.encode(message);
        } else if (T.ListLOfintL().is(message)) {
          opcode = 2;
          data = message;
        } else {
          dart.throw(new core.ArgumentError.new(message));
        }
      } else {
        opcode = 1;
      }
      this.addFrame(opcode, data);
    }
    addError(error, stackTrace = null) {
      this[_eventSink].addError(error, stackTrace);
    }
    close() {
      let code = this.webSocket[_outCloseCode];
      let reason = this.webSocket[_outCloseReason];
      let data = null;
      if (code != null) {
        data = T.JSArrayOfintL().of([]);
        data[$add](dart.notNull(code) >> 8 & 255);
        data[$add](dart.notNull(code) & 255);
        if (reason != null) {
          data[$addAll](convert.utf8.encode(reason));
        }
      }
      this.addFrame(8, data);
      this[_eventSink].close();
    }
    addFrame(opcode, data) {
      web_socket_impl._WebSocketOutgoingTransformer.createFrame(opcode, data, this.webSocket[_serverSide$], false)[$forEach](dart.fn(e => {
        this[_eventSink].add(e);
      }, T.ListLOfintLToNull()));
    }
    static createFrame(opcode, data, serverSide, compressed) {
      let t0, t0$, t0$0, t0$1, t1, t0$2, t1$, t0$3, t1$0, t0$4;
      let mask = !dart.test(serverSide);
      let dataLength = data == null ? 0 : data[$length];
      let headerSize = mask ? 6 : 2;
      if (dart.notNull(dataLength) > 65535) {
        headerSize = headerSize + 8;
      } else if (dart.notNull(dataLength) > 125) {
        headerSize = headerSize + 2;
      }
      let header = _native_typed_data.NativeUint8List.new(headerSize);
      let index = 0;
      let hoc = (128 | (dart.test(compressed) ? 64 : 0) | (dart.notNull(opcode) & 15) >>> 0) >>> 0;
      header[$_set]((t0 = index, index = t0 + 1, t0), hoc);
      let lengthBytes = 1;
      if (dart.notNull(dataLength) > 65535) {
        header[$_set]((t0$ = index, index = t0$ + 1, t0$), 127);
        lengthBytes = 8;
      } else if (dart.notNull(dataLength) > 125) {
        header[$_set]((t0$0 = index, index = t0$0 + 1, t0$0), 126);
        lengthBytes = 2;
      }
      for (let i = 0; i < lengthBytes; i = i + 1) {
        header[$_set]((t0$1 = index, index = t0$1 + 1, t0$1), dataLength[$rightShift]((lengthBytes - 1 - i) * 8) & 255);
      }
      if (mask) {
        t0$2 = header;
        t1 = 1;
        t0$2[$_set](t1, (dart.notNull(t0$2[$_get](t1)) | 1 << 7) >>> 0);
        let maskBytes = T.JSArrayOfintL().of([web_socket_impl._random.nextInt(256), web_socket_impl._random.nextInt(256), web_socket_impl._random.nextInt(256), web_socket_impl._random.nextInt(256)]);
        header[$setRange](index, index + 4, maskBytes);
        index = index + 4;
        if (data != null) {
          let list = null;
          if (opcode === 1 && T.Uint8ListL().is(data)) {
            list = data;
          } else {
            if (T.Uint8ListL().is(data)) {
              list = _native_typed_data.NativeUint8List.fromList(data);
            } else {
              list = _native_typed_data.NativeUint8List.new(data[$length]);
              for (let i = 0; i < dart.notNull(data[$length]); i = i + 1) {
                if (dart.notNull(data[$_get](i)) < 0 || 255 < dart.notNull(data[$_get](i))) {
                  dart.throw(new core.ArgumentError.new("List element is not a byte value " + "(value " + dart.str(data[$_get](i)) + " at index " + dart.str(i) + ")"));
                }
                list[$_set](i, data[$_get](i));
              }
            }
          }
          let blockCount = (dart.notNull(list[$length]) / 16)[$truncate]();
          if (blockCount > 0) {
            let mask = 0;
            for (let i = 3; i >= 0; i = i - 1) {
              mask = (mask << 8 | dart.notNull(maskBytes[$_get](i))) >>> 0;
            }
            let blockMask = new _native_typed_data.NativeInt32x4.new(mask, mask, mask, mask);
            let blockBuffer = typed_data.Int32x4List.view(list[$buffer], 0, blockCount);
            for (let i = 0; i < dart.notNull(blockBuffer[$length]); i = i + 1) {
              t0$3 = blockBuffer;
              t1$ = i;
              t0$3[$_set](t1$, t0$3[$_get](t1$)['^'](blockMask));
            }
          }
          for (let i = blockCount * 16; i < dart.notNull(list[$length]); i = i + 1) {
            t0$4 = list;
            t1$0 = i;
            t0$4[$_set](t1$0, (dart.notNull(t0$4[$_get](t1$0)) ^ dart.notNull(maskBytes[$_get](i & 3))) >>> 0);
          }
          data = list;
        }
      }
      if (!(index === headerSize)) dart.assertFailed(null, I[2], 558, 12, "index == headerSize");
      if (data == null) {
        return T.JSArrayOfListLOfintL().of([header]);
      } else {
        return T.JSArrayOfListLOfintL().of([header, data]);
      }
    }
  };
  (web_socket_impl._WebSocketOutgoingTransformer.new = function(webSocket) {
    this[_eventSink] = null;
    this.webSocket = webSocket;
    web_socket_impl._WebSocketOutgoingTransformer.__proto__.new.call(this);
    ;
  }).prototype = web_socket_impl._WebSocketOutgoingTransformer.prototype;
  dart.addTypeTests(web_socket_impl._WebSocketOutgoingTransformer);
  dart.addTypeCaches(web_socket_impl._WebSocketOutgoingTransformer);
  web_socket_impl._WebSocketOutgoingTransformer[dart.implements] = () => [async.EventSink];
  dart.setMethodSignature(web_socket_impl._WebSocketOutgoingTransformer, () => ({
    __proto__: dart.getMethods(web_socket_impl._WebSocketOutgoingTransformer.__proto__),
    bind: dart.fnType(dart.legacy(async.Stream$(dart.legacy(core.List$(dart.legacy(core.int))))), [dart.legacy(core.Object)]),
    add: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    addError: dart.fnType(dart.void, [dart.legacy(core.Object)], [dart.legacy(core.StackTrace)]),
    close: dart.fnType(dart.void, []),
    addFrame: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.List$(dart.legacy(core.int)))])
  }));
  dart.setLibraryUri(web_socket_impl._WebSocketOutgoingTransformer, I[1]);
  dart.setFieldSignature(web_socket_impl._WebSocketOutgoingTransformer, () => ({
    __proto__: dart.getFields(web_socket_impl._WebSocketOutgoingTransformer.__proto__),
    webSocket: dart.finalFieldType(dart.legacy(web_socket_impl.WebSocketImpl)),
    [_eventSink]: dart.fieldType(dart.legacy(async.EventSink$(dart.legacy(core.List$(dart.legacy(core.int))))))
  }));
  var _controller = dart.privateName(web_socket_impl, "_controller");
  var _subscription = dart.privateName(web_socket_impl, "_subscription");
  var _issuedPause = dart.privateName(web_socket_impl, "_issuedPause");
  var _closed = dart.privateName(web_socket_impl, "_closed");
  var _closeCompleter = dart.privateName(web_socket_impl, "_closeCompleter");
  var _completer = dart.privateName(web_socket_impl, "_completer");
  var _onListen = dart.privateName(web_socket_impl, "_onListen");
  var _onPause = dart.privateName(web_socket_impl, "_onPause");
  var _onResume = dart.privateName(web_socket_impl, "_onResume");
  var _cancel = dart.privateName(web_socket_impl, "_cancel");
  var _done = dart.privateName(web_socket_impl, "_done");
  var _ensureController = dart.privateName(web_socket_impl, "_ensureController");
  web_socket_impl._WebSocketConsumer = class _WebSocketConsumer extends core.Object {
    [_onListen]() {
      if (this[_subscription] != null) {
        this[_subscription].cancel();
      }
    }
    [_onPause]() {
      if (this[_subscription] != null) {
        this[_subscription].pause();
      } else {
        this[_issuedPause] = true;
      }
    }
    [_onResume]() {
      if (this[_subscription] != null) {
        this[_subscription].resume();
      } else {
        this[_issuedPause] = false;
      }
    }
    [_cancel]() {
      if (this[_subscription] != null) {
        let subscription = this[_subscription];
        this[_subscription] = null;
        subscription.cancel();
      }
    }
    [_ensureController]() {
      if (this[_controller] != null) return;
      this[_controller] = async.StreamController.new({sync: true, onPause: dart.bind(this, _onPause), onResume: dart.bind(this, _onResume), onCancel: dart.bind(this, _onListen)});
      let stream = new web_socket_impl._WebSocketOutgoingTransformer.new(this.webSocket).bind(this[_controller].stream);
      this.sink.addStream(stream).then(core.Null, dart.fn(_ => {
        this[_done]();
        this[_closeCompleter].complete(this.webSocket);
      }, T.dynamicToNull()), {onError: dart.fn((error, stackTrace) => {
          this[_closed] = true;
          this[_cancel]();
          if (T.ArgumentErrorL().is(error)) {
            if (!dart.test(this[_done](error, stackTrace))) {
              this[_closeCompleter].completeError(error, stackTrace);
            }
          } else {
            this[_done]();
            this[_closeCompleter].complete(this.webSocket);
          }
        }, T.dynamicAndStackTraceLToNull())});
    }
    [_done](error = null, stackTrace = null) {
      if (this[_completer] == null) return false;
      if (error != null) {
        this[_completer].completeError(error, stackTrace);
      } else {
        this[_completer].complete(this.webSocket);
      }
      this[_completer] = null;
      return true;
    }
    addStream(stream) {
      T.StreamL().as(stream);
      if (dart.test(this[_closed])) {
        stream.listen(null).cancel();
        return async.Future.value(this.webSocket);
      }
      this[_ensureController]();
      this[_completer] = async.Completer.new();
      this[_subscription] = stream.listen(dart.fn(data => {
        this[_controller].add(data);
      }, T.dynamicToNull()), {onDone: dart.bind(this, _done), onError: dart.bind(this, _done), cancelOnError: true});
      if (dart.test(this[_issuedPause])) {
        this[_subscription].pause();
        this[_issuedPause] = false;
      }
      return this[_completer].future;
    }
    close() {
      this[_ensureController]();
      const closeSocket = () => {
        return this.sink.close().catchError(dart.fn(_ => {
        }, T.dynamicToNull())).then(dart.dynamic, dart.fn(_ => this.webSocket, T.dynamicToWebSocketImplL()));
      };
      dart.fn(closeSocket, T.VoidToFutureL());
      this[_controller].close();
      return this[_closeCompleter].future.then(dart.dynamic, dart.fn(_ => closeSocket(), T.dynamicToFutureL()));
    }
    add(data) {
      if (dart.test(this[_closed])) return;
      this[_ensureController]();
      this[_controller].add(data);
    }
    closeSocket() {
      this[_closed] = true;
      this[_cancel]();
      this.close();
    }
  };
  (web_socket_impl._WebSocketConsumer.new = function(webSocket, sink) {
    this[_controller] = null;
    this[_subscription] = null;
    this[_issuedPause] = false;
    this[_closed] = false;
    this[_closeCompleter] = T.CompleterOfWebSocketImplL().new();
    this[_completer] = null;
    this.webSocket = webSocket;
    this.sink = sink;
    ;
  }).prototype = web_socket_impl._WebSocketConsumer.prototype;
  dart.addTypeTests(web_socket_impl._WebSocketConsumer);
  dart.addTypeCaches(web_socket_impl._WebSocketConsumer);
  web_socket_impl._WebSocketConsumer[dart.implements] = () => [async.StreamConsumer];
  dart.setMethodSignature(web_socket_impl._WebSocketConsumer, () => ({
    __proto__: dart.getMethods(web_socket_impl._WebSocketConsumer.__proto__),
    [_onListen]: dart.fnType(dart.void, []),
    [_onPause]: dart.fnType(dart.void, []),
    [_onResume]: dart.fnType(dart.void, []),
    [_cancel]: dart.fnType(dart.void, []),
    [_ensureController]: dart.fnType(dart.void, []),
    [_done]: dart.fnType(dart.legacy(core.bool), [], [dart.dynamic, dart.legacy(core.StackTrace)]),
    addStream: dart.fnType(dart.legacy(async.Future), [dart.legacy(core.Object)]),
    close: dart.fnType(dart.legacy(async.Future), []),
    add: dart.fnType(dart.void, [dart.dynamic]),
    closeSocket: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(web_socket_impl._WebSocketConsumer, I[1]);
  dart.setFieldSignature(web_socket_impl._WebSocketConsumer, () => ({
    __proto__: dart.getFields(web_socket_impl._WebSocketConsumer.__proto__),
    webSocket: dart.finalFieldType(dart.legacy(web_socket_impl.WebSocketImpl)),
    sink: dart.finalFieldType(dart.legacy(async.StreamSink$(dart.legacy(core.List$(dart.legacy(core.int)))))),
    [_controller]: dart.fieldType(dart.legacy(async.StreamController)),
    [_subscription]: dart.fieldType(dart.legacy(async.StreamSubscription)),
    [_issuedPause]: dart.fieldType(dart.legacy(core.bool)),
    [_closed]: dart.fieldType(dart.legacy(core.bool)),
    [_closeCompleter]: dart.finalFieldType(dart.legacy(async.Completer)),
    [_completer]: dart.fieldType(dart.legacy(async.Completer))
  }));
  var protocol$ = dart.privateName(web_socket_impl, "WebSocketImpl.protocol");
  var _sink = dart.privateName(web_socket_impl, "_sink");
  var _readyState = dart.privateName(web_socket_impl, "_readyState");
  var _writeClosed = dart.privateName(web_socket_impl, "_writeClosed");
  var _closeCode = dart.privateName(web_socket_impl, "_closeCode");
  var _closeReason = dart.privateName(web_socket_impl, "_closeReason");
  var _pingInterval = dart.privateName(web_socket_impl, "_pingInterval");
  var _pingTimer = dart.privateName(web_socket_impl, "_pingTimer");
  var _consumer = dart.privateName(web_socket_impl, "_consumer");
  var _closeTimer = dart.privateName(web_socket_impl, "_closeTimer");
  var _close = dart.privateName(web_socket_impl, "_close");
  var _serviceId = dart.privateName(web_socket_impl, "_serviceId");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var __serviceId = dart.privateName(web_socket_impl, "_ServiceObject.__serviceId");
  var __serviceId$ = dart.privateName(web_socket_impl, "__serviceId");
  web_socket_impl._ServiceObject = class _ServiceObject extends core.Object {
    get [__serviceId$]() {
      return this[__serviceId];
    }
    set [__serviceId$](value) {
      this[__serviceId] = value;
    }
    get [_serviceId]() {
      let t0;
      if (this[__serviceId$] === 0) this[__serviceId$] = (t0 = web_socket_impl._nextServiceId, web_socket_impl._nextServiceId = dart.notNull(t0) + 1, t0);
      return this[__serviceId$];
    }
  };
  (web_socket_impl._ServiceObject.new = function() {
    this[__serviceId] = 0;
    ;
  }).prototype = web_socket_impl._ServiceObject.prototype;
  dart.addTypeTests(web_socket_impl._ServiceObject);
  dart.addTypeCaches(web_socket_impl._ServiceObject);
  dart.setGetterSignature(web_socket_impl._ServiceObject, () => ({
    __proto__: dart.getGetters(web_socket_impl._ServiceObject.__proto__),
    [_serviceId]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(web_socket_impl._ServiceObject, I[1]);
  dart.setFieldSignature(web_socket_impl._ServiceObject, () => ({
    __proto__: dart.getFields(web_socket_impl._ServiceObject.__proto__),
    [__serviceId$]: dart.fieldType(dart.legacy(core.int))
  }));
  const Stream__ServiceObject$36 = class Stream__ServiceObject extends async.Stream {};
  (Stream__ServiceObject$36.new = function() {
    web_socket_impl._ServiceObject.new.call(this);
    Stream__ServiceObject$36.__proto__.new.call(this);
  }).prototype = Stream__ServiceObject$36.prototype;
  (Stream__ServiceObject$36._internal = function() {
    web_socket_impl._ServiceObject.new.call(this);
    Stream__ServiceObject$36.__proto__._internal.call(this);
  }).prototype = Stream__ServiceObject$36.prototype;
  dart.applyMixin(Stream__ServiceObject$36, web_socket_impl._ServiceObject);
  web_socket_impl.WebSocketImpl = class WebSocketImpl extends Stream__ServiceObject$36 {
    get protocol() {
      return this[protocol$];
    }
    set protocol(value) {
      super.protocol = value;
    }
    listen(onData, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      return this[_controller].stream.listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
    }
    get pingInterval() {
      return this[_pingInterval];
    }
    set pingInterval(interval) {
      if (dart.test(this[_writeClosed])) return;
      if (this[_pingTimer] != null) this[_pingTimer].cancel();
      this[_pingInterval] = interval;
      if (this[_pingInterval] == null) return;
      this[_pingTimer] = async.Timer.new(this[_pingInterval], dart.fn(() => {
        if (dart.test(this[_writeClosed])) return;
        this[_consumer].add(new web_socket_impl._WebSocketPing.new());
        this[_pingTimer] = async.Timer.new(this[_pingInterval], dart.fn(() => {
          this[_close](1001);
        }, T.VoidToNull()));
      }, T.VoidToNull()));
    }
    get readyState() {
      return this[_readyState];
    }
    get extensions() {
      return null;
    }
    get closeCode() {
      return this[_closeCode];
    }
    get closeReason() {
      return this[_closeReason];
    }
    add(data) {
      this[_sink].add(data);
    }
    addError(error, stackTrace = null) {
      this[_sink].addError(error, stackTrace);
    }
    addStream(stream) {
      T.StreamL().as(stream);
      return this[_sink].addStream(stream);
    }
    get done() {
      return this[_sink].done;
    }
    close(code = null, reason = null) {
      if (dart.test(web_socket_impl.WebSocketImpl._isReservedStatusCode(code))) {
        dart.throw(new exception.WebSocketChannelException.new("Reserved status code " + dart.str(code)));
      }
      if (this[_outCloseCode] == null) {
        this[_outCloseCode] = code;
        this[_outCloseReason] = reason;
      }
      if (!dart.test(this[_controller].isClosed)) {
        if (!dart.test(this[_controller].hasListener) && this[_subscription] != null) {
          this[_controller].stream.drain(dart.dynamic).catchError(dart.fn(_ => new _js_helper.LinkedMap.new(), T.dynamicToMapL()));
        }
        this[_closeTimer] == null ? this[_closeTimer] = async.Timer.new(C[0] || CT.C0, dart.fn(() => {
          this[_closeCode] = this[_outCloseCode];
          this[_closeReason] = this[_outCloseReason];
          if (this[_subscription] != null) this[_subscription].cancel();
          this[_controller].close();
          web_socket_impl.WebSocketImpl._webSockets[$remove](this[_serviceId]);
        }, T.VoidToNull())) : null;
      }
      return this[_sink].close();
    }
    [_close](code = null, reason = null) {
      if (dart.test(this[_writeClosed])) return;
      if (this[_outCloseCode] == null) {
        this[_outCloseCode] = code;
        this[_outCloseReason] = reason;
      }
      this[_writeClosed] = true;
      this[_consumer].closeSocket();
      web_socket_impl.WebSocketImpl._webSockets[$remove](this[_serviceId]);
    }
    static _isReservedStatusCode(code) {
      return code != null && (dart.notNull(code) < 1000 || code === 1004 || code === 1005 || code === 1006 || dart.notNull(code) > 1011 && dart.notNull(code) < 1015 || dart.notNull(code) >= 1015 && dart.notNull(code) < 3000);
    }
  };
  (web_socket_impl.WebSocketImpl.fromSocket = function(stream, sink, protocol, _serverSide = false) {
    this[_controller] = null;
    this[_subscription] = null;
    this[_sink] = null;
    this[_readyState] = 0;
    this[_writeClosed] = false;
    this[_closeCode] = null;
    this[_closeReason] = null;
    this[_pingInterval] = null;
    this[_pingTimer] = null;
    this[_consumer] = null;
    this[_outCloseCode] = null;
    this[_outCloseReason] = null;
    this[_closeTimer] = null;
    this[protocol$] = protocol;
    this[_serverSide$] = _serverSide;
    web_socket_impl.WebSocketImpl.__proto__.new.call(this);
    this[_consumer] = new web_socket_impl._WebSocketConsumer.new(this, sink);
    this[_sink] = new io_sink.StreamSinkImpl.new(this[_consumer]);
    this[_readyState] = 1;
    let transformer = new web_socket_impl._WebSocketProtocolTransformer.new(this[_serverSide$]);
    this[_subscription] = transformer.bind(stream).listen(dart.fn(data => {
      if (T._WebSocketPingL().is(data)) {
        if (!dart.test(this[_writeClosed])) this[_consumer].add(new web_socket_impl._WebSocketPong.new(data.payload));
      } else if (T._WebSocketPongL().is(data)) {
        this.pingInterval = this[_pingInterval];
      } else {
        this[_controller].add(data);
      }
    }, T.dynamicToNull()), {onError: dart.fn((error, stackTrace) => {
        if (this[_closeTimer] != null) this[_closeTimer].cancel();
        if (T.FormatExceptionL().is(error)) {
          this[_close](1007);
        } else {
          this[_close](1002);
        }
        this[_closeCode] = this[_outCloseCode];
        this[_closeReason] = this[_outCloseReason];
        this[_controller].close();
      }, T.dynamicAnddynamicToNull()), onDone: dart.fn(() => {
        if (this[_closeTimer] != null) this[_closeTimer].cancel();
        if (this[_readyState] === 1) {
          this[_readyState] = 2;
          if (!dart.test(web_socket_impl.WebSocketImpl._isReservedStatusCode(transformer.closeCode))) {
            this[_close](transformer.closeCode, transformer.closeReason);
          } else {
            this[_close]();
          }
          this[_readyState] = 3;
        }
        this[_closeCode] = transformer.closeCode;
        this[_closeReason] = transformer.closeReason;
        this[_controller].close();
      }, T.VoidToNull()), cancelOnError: true});
    this[_subscription].pause();
    this[_controller] = async.StreamController.new({sync: true, onListen: dart.fn(() => this[_subscription].resume(), T.VoidTovoid()), onCancel: dart.fn(() => {
        this[_subscription].cancel();
        this[_subscription] = null;
      }, T.VoidToNull()), onPause: dart.bind(this[_subscription], 'pause'), onResume: dart.bind(this[_subscription], 'resume')});
    web_socket_impl.WebSocketImpl._webSockets[$_set](this[_serviceId], this);
  }).prototype = web_socket_impl.WebSocketImpl.prototype;
  dart.addTypeTests(web_socket_impl.WebSocketImpl);
  dart.addTypeCaches(web_socket_impl.WebSocketImpl);
  web_socket_impl.WebSocketImpl[dart.implements] = () => [async.StreamSink];
  dart.setMethodSignature(web_socket_impl.WebSocketImpl, () => ({
    __proto__: dart.getMethods(web_socket_impl.WebSocketImpl.__proto__),
    listen: dart.fnType(dart.legacy(async.StreamSubscription), [dart.legacy(dart.fnType(dart.void, [dart.dynamic]))], {cancelOnError: dart.legacy(core.bool), onDone: dart.legacy(dart.fnType(dart.void, [])), onError: dart.legacy(core.Function)}, {}),
    add: dart.fnType(dart.void, [dart.legacy(core.Object)]),
    addError: dart.fnType(dart.void, [dart.legacy(core.Object)], [dart.legacy(core.StackTrace)]),
    addStream: dart.fnType(dart.legacy(async.Future), [dart.legacy(core.Object)]),
    close: dart.fnType(dart.legacy(async.Future), [], [dart.legacy(core.int), dart.legacy(core.String)]),
    [_close]: dart.fnType(dart.void, [], [dart.legacy(core.int), dart.legacy(core.String)])
  }));
  dart.setGetterSignature(web_socket_impl.WebSocketImpl, () => ({
    __proto__: dart.getGetters(web_socket_impl.WebSocketImpl.__proto__),
    pingInterval: dart.legacy(core.Duration),
    readyState: dart.legacy(core.int),
    extensions: dart.legacy(core.String),
    closeCode: dart.legacy(core.int),
    closeReason: dart.legacy(core.String),
    done: dart.legacy(async.Future)
  }));
  dart.setSetterSignature(web_socket_impl.WebSocketImpl, () => ({
    __proto__: dart.getSetters(web_socket_impl.WebSocketImpl.__proto__),
    pingInterval: dart.legacy(core.Duration)
  }));
  dart.setLibraryUri(web_socket_impl.WebSocketImpl, I[1]);
  dart.setFieldSignature(web_socket_impl.WebSocketImpl, () => ({
    __proto__: dart.getFields(web_socket_impl.WebSocketImpl.__proto__),
    protocol: dart.finalFieldType(dart.legacy(core.String)),
    [_controller]: dart.fieldType(dart.legacy(async.StreamController)),
    [_subscription]: dart.fieldType(dart.legacy(async.StreamSubscription)),
    [_sink]: dart.fieldType(dart.legacy(async.StreamSink)),
    [_serverSide$]: dart.finalFieldType(dart.legacy(core.bool)),
    [_readyState]: dart.fieldType(dart.legacy(core.int)),
    [_writeClosed]: dart.fieldType(dart.legacy(core.bool)),
    [_closeCode]: dart.fieldType(dart.legacy(core.int)),
    [_closeReason]: dart.fieldType(dart.legacy(core.String)),
    [_pingInterval]: dart.fieldType(dart.legacy(core.Duration)),
    [_pingTimer]: dart.fieldType(dart.legacy(async.Timer)),
    [_consumer]: dart.fieldType(dart.legacy(web_socket_impl._WebSocketConsumer)),
    [_outCloseCode]: dart.fieldType(dart.legacy(core.int)),
    [_outCloseReason]: dart.fieldType(dart.legacy(core.String)),
    [_closeTimer]: dart.fieldType(dart.legacy(async.Timer))
  }));
  dart.defineLazy(web_socket_impl.WebSocketImpl, {
    /*web_socket_impl.WebSocketImpl._webSockets*/get _webSockets() {
      return new (T.IdentityMapOfintL$WebSocketImplL()).new();
    },
    /*web_socket_impl.WebSocketImpl.DEFAULT_WINDOW_BITS*/get DEFAULT_WINDOW_BITS() {
      return 15;
    },
    /*web_socket_impl.WebSocketImpl.PER_MESSAGE_DEFLATE*/get PER_MESSAGE_DEFLATE() {
      return "permessage-deflate";
    }
  }, true);
  dart.defineLazy(web_socket_impl, {
    /*web_socket_impl.webSocketGUID*/get webSocketGUID() {
      return "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
    },
    /*web_socket_impl._random*/get _random() {
      return math.Random.new();
    },
    /*web_socket_impl._nextServiceId*/get _nextServiceId() {
      return 1;
    },
    set _nextServiceId(_) {}
  }, true);
  var _webSocket = dart.privateName(channel, "_webSocket");
  channel.WebSocketChannel = class WebSocketChannel extends stream_channel.StreamChannelMixin {
    get protocol() {
      return this[_webSocket].protocol;
    }
    get closeCode() {
      return this[_webSocket].closeCode;
    }
    get closeReason() {
      return this[_webSocket].closeReason;
    }
    get stream() {
      return new async.StreamView.new(this[_webSocket]);
    }
    get sink() {
      return new channel.WebSocketSink.__(this[_webSocket]);
    }
    static signKey(key) {
      return convert.base64.encode(sha1.sha1.convert((dart.notNull(key) + dart.notNull(web_socket_impl.webSocketGUID))[$codeUnits]).bytes);
    }
    static connect(uri, opts) {
      let protocols = opts && 'protocols' in opts ? opts.protocols : null;
      return _connect_html.connect(uri, {protocols: protocols});
    }
  };
  (channel.WebSocketChannel.new = function(channel, opts) {
    let t0;
    let protocol = opts && 'protocol' in opts ? opts.protocol : null;
    let pingInterval = opts && 'pingInterval' in opts ? opts.pingInterval : null;
    let serverSide = opts && 'serverSide' in opts ? opts.serverSide : true;
    this[_webSocket] = (t0 = new web_socket_impl.WebSocketImpl.fromSocket(channel.stream, channel.sink, protocol, serverSide), (() => {
      t0.pingInterval = pingInterval;
      return t0;
    })());
    ;
  }).prototype = channel.WebSocketChannel.prototype;
  dart.addTypeTests(channel.WebSocketChannel);
  dart.addTypeCaches(channel.WebSocketChannel);
  dart.setGetterSignature(channel.WebSocketChannel, () => ({
    __proto__: dart.getGetters(channel.WebSocketChannel.__proto__),
    protocol: dart.legacy(core.String),
    closeCode: dart.legacy(core.int),
    closeReason: dart.legacy(core.String),
    stream: dart.legacy(async.Stream),
    sink: dart.legacy(channel.WebSocketSink)
  }));
  dart.setLibraryUri(channel.WebSocketChannel, I[3]);
  dart.setFieldSignature(channel.WebSocketChannel, () => ({
    __proto__: dart.getFields(channel.WebSocketChannel.__proto__),
    [_webSocket]: dart.finalFieldType(dart.legacy(web_socket_impl.WebSocketImpl))
  }));
  channel.WebSocketSink = class WebSocketSink extends stream_sink.DelegatingStreamSink {
    close(closeCode = null, closeReason = null) {
      return this[_webSocket].close(closeCode, closeReason);
    }
  };
  (channel.WebSocketSink.__ = function(webSocket) {
    this[_webSocket] = webSocket;
    channel.WebSocketSink.__proto__.new.call(this, webSocket);
    ;
  }).prototype = channel.WebSocketSink.prototype;
  dart.addTypeTests(channel.WebSocketSink);
  dart.addTypeCaches(channel.WebSocketSink);
  dart.setMethodSignature(channel.WebSocketSink, () => ({
    __proto__: dart.getMethods(channel.WebSocketSink.__proto__),
    close: dart.fnType(dart.legacy(async.Future), [], [dart.legacy(core.int), dart.legacy(core.String)])
  }));
  dart.setLibraryUri(channel.WebSocketSink, I[3]);
  dart.setFieldSignature(channel.WebSocketSink, () => ({
    __proto__: dart.getFields(channel.WebSocketSink.__proto__),
    [_webSocket]: dart.finalFieldType(dart.legacy(web_socket_impl.WebSocketImpl))
  }));
  var _webSocket$ = dart.privateName(html$, "HtmlWebSocketChannel._webSocket");
  var _closeCode$ = dart.privateName(html$, "_closeCode");
  var _closeReason$ = dart.privateName(html$, "_closeReason");
  var _localCloseCode = dart.privateName(html$, "_localCloseCode");
  var _localCloseReason = dart.privateName(html$, "_localCloseReason");
  var _controller$ = dart.privateName(html$, "_controller");
  var _sink$ = dart.privateName(html$, "_sink");
  var _webSocket$0 = dart.privateName(html$, "_webSocket");
  var _listen = dart.privateName(html$, "_listen");
  html$.HtmlWebSocketChannel = class HtmlWebSocketChannel extends stream_channel.StreamChannelMixin {
    get [_webSocket$0]() {
      return this[_webSocket$];
    }
    set [_webSocket$0](value) {
      super[_webSocket$0] = value;
    }
    get protocol() {
      return this[_webSocket$0].protocol;
    }
    get closeCode() {
      return this[_closeCode$];
    }
    get closeReason() {
      return this[_closeReason$];
    }
    get bufferedAmount() {
      return this[_webSocket$0].bufferedAmount;
    }
    get stream() {
      return this[_controller$].foreign.stream;
    }
    get sink() {
      return this[_sink$];
    }
    [_listen]() {
      this[_controller$].local.stream.listen(dart.fn(message => this[_webSocket$0].send(message), T.dynamicTovoid()), {onDone: dart.fn(() => {
          if (this[_localCloseCode] != null && this[_localCloseReason] != null) {
            this[_webSocket$0].close(this[_localCloseCode], this[_localCloseReason]);
          } else if (this[_localCloseCode] != null) {
            this[_webSocket$0].close(this[_localCloseCode]);
          } else {
            this[_webSocket$0].close();
          }
        }, T.VoidToNull())});
    }
    get [_webSocket]() {
      return T.WebSocketImplL().as(this.noSuchMethod(new core._Invocation.getter(C[1] || CT.C1)));
    }
  };
  (html$.HtmlWebSocketChannel.connect = function(url, opts) {
    let t1, t0;
    let protocols = opts && 'protocols' in opts ? opts.protocols : null;
    let binaryType = opts && 'binaryType' in opts ? opts.binaryType : null;
    html$.HtmlWebSocketChannel.new.call(this, (t0 = html.WebSocket.new(dart.toString(url), protocols), (() => {
      t0.binaryType = (t1 = binaryType, t1 == null ? html$.BinaryType.list : t1).value;
      return t0;
    })()));
  }).prototype = html$.HtmlWebSocketChannel.prototype;
  (html$.HtmlWebSocketChannel.new = function(_webSocket) {
    this[_closeCode$] = null;
    this[_closeReason$] = null;
    this[_localCloseCode] = null;
    this[_localCloseReason] = null;
    this[_controller$] = new stream_channel_controller.StreamChannelController.new({sync: true, allowForeignErrors: false});
    this[_sink$] = null;
    this[_webSocket$] = _webSocket;
    this[_sink$] = new html$._HtmlWebSocketSink.new(this);
    if (this[_webSocket$0].readyState === 1) {
      this[_listen]();
    } else {
      this[_webSocket$0][$onOpen].first.then(core.Null, dart.fn(_ => {
        this[_listen]();
      }, T.EventLToNull()));
    }
    this[_webSocket$0][$onError].first.then(core.Null, dart.fn(_ => {
      this[_controller$].local.sink.addError(new exception.WebSocketChannelException.new("WebSocket connection failed."));
      this[_controller$].local.sink.close();
    }, T.EventLToNull()));
    this[_webSocket$0][$onMessage].listen(dart.fn(event => {
      let data = event[$data];
      if (T.ByteBufferL().is(data)) data = dart.dsend(data, 'asUint8List', []);
      this[_controller$].local.sink.add(data);
    }, T.MessageEventLToNull()));
    this[_webSocket$0][$onClose].first.then(core.Null, dart.fn(event => {
      this[_closeCode$] = event.code;
      this[_closeReason$] = event.reason;
      this[_controller$].local.sink.close();
    }, T.CloseEventLToNull()));
  }).prototype = html$.HtmlWebSocketChannel.prototype;
  dart.addTypeTests(html$.HtmlWebSocketChannel);
  dart.addTypeCaches(html$.HtmlWebSocketChannel);
  html$.HtmlWebSocketChannel[dart.implements] = () => [channel.WebSocketChannel];
  dart.setMethodSignature(html$.HtmlWebSocketChannel, () => ({
    __proto__: dart.getMethods(html$.HtmlWebSocketChannel.__proto__),
    [_listen]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(html$.HtmlWebSocketChannel, () => ({
    __proto__: dart.getGetters(html$.HtmlWebSocketChannel.__proto__),
    protocol: dart.legacy(core.String),
    closeCode: dart.legacy(core.int),
    closeReason: dart.legacy(core.String),
    bufferedAmount: dart.legacy(core.int),
    stream: dart.legacy(async.Stream),
    sink: dart.legacy(channel.WebSocketSink),
    [_webSocket]: dart.legacy(web_socket_impl.WebSocketImpl)
  }));
  dart.setLibraryUri(html$.HtmlWebSocketChannel, I[4]);
  dart.setFieldSignature(html$.HtmlWebSocketChannel, () => ({
    __proto__: dart.getFields(html$.HtmlWebSocketChannel.__proto__),
    [_webSocket$0]: dart.finalFieldType(dart.legacy(html.WebSocket)),
    [_closeCode$]: dart.fieldType(dart.legacy(core.int)),
    [_closeReason$]: dart.fieldType(dart.legacy(core.String)),
    [_localCloseCode]: dart.fieldType(dart.legacy(core.int)),
    [_localCloseReason]: dart.fieldType(dart.legacy(core.String)),
    [_controller$]: dart.finalFieldType(dart.legacy(stream_channel_controller.StreamChannelController)),
    [_sink$]: dart.fieldType(dart.legacy(channel.WebSocketSink))
  }));
  var _channel = dart.privateName(html$, "_channel");
  html$._HtmlWebSocketSink = class _HtmlWebSocketSink extends stream_sink.DelegatingStreamSink {
    close(closeCode = null, closeReason = null) {
      this[_channel][_localCloseCode] = closeCode;
      this[_channel][_localCloseReason] = closeReason;
      return super.close();
    }
    get [_webSocket]() {
      return T.WebSocketImplL().as(this.noSuchMethod(new core._Invocation.getter(C[1] || CT.C1)));
    }
  };
  (html$._HtmlWebSocketSink.new = function(channel) {
    this[_channel] = channel;
    html$._HtmlWebSocketSink.__proto__.new.call(this, channel[_controller$].foreign.sink);
    ;
  }).prototype = html$._HtmlWebSocketSink.prototype;
  dart.addTypeTests(html$._HtmlWebSocketSink);
  dart.addTypeCaches(html$._HtmlWebSocketSink);
  html$._HtmlWebSocketSink[dart.implements] = () => [channel.WebSocketSink];
  dart.setMethodSignature(html$._HtmlWebSocketSink, () => ({
    __proto__: dart.getMethods(html$._HtmlWebSocketSink.__proto__),
    close: dart.fnType(dart.legacy(async.Future), [], [dart.legacy(core.int), dart.legacy(core.String)])
  }));
  dart.setGetterSignature(html$._HtmlWebSocketSink, () => ({
    __proto__: dart.getGetters(html$._HtmlWebSocketSink.__proto__),
    [_webSocket]: dart.legacy(web_socket_impl.WebSocketImpl)
  }));
  dart.setLibraryUri(html$._HtmlWebSocketSink, I[4]);
  dart.setFieldSignature(html$._HtmlWebSocketSink, () => ({
    __proto__: dart.getFields(html$._HtmlWebSocketSink.__proto__),
    [_channel]: dart.finalFieldType(dart.legacy(html$.HtmlWebSocketChannel))
  }));
  var name$ = dart.privateName(html$, "BinaryType.name");
  var value$ = dart.privateName(html$, "BinaryType.value");
  html$.BinaryType = class BinaryType extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    toString() {
      return this.name;
    }
  };
  (html$.BinaryType.__ = function(name, value) {
    this[name$] = name;
    this[value$] = value;
    ;
  }).prototype = html$.BinaryType.prototype;
  dart.addTypeTests(html$.BinaryType);
  dart.addTypeCaches(html$.BinaryType);
  dart.setMethodSignature(html$.BinaryType, () => ({
    __proto__: dart.getMethods(html$.BinaryType.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(html$.BinaryType, I[4]);
  dart.setFieldSignature(html$.BinaryType, () => ({
    __proto__: dart.getFields(html$.BinaryType.__proto__),
    name: dart.finalFieldType(dart.legacy(core.String)),
    value: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(html$.BinaryType, ['toString']);
  dart.defineLazy(html$.BinaryType, {
    /*html$.BinaryType.blob*/get blob() {
      return C[2] || CT.C2;
    },
    /*html$.BinaryType.list*/get list() {
      return C[3] || CT.C3;
    }
  }, true);
  dart.trackLibraries("packages/web_socket_channel/web_socket_channel.dart", {
    "package:web_socket_channel/web_socket_channel.dart": web_socket_channel,
    "package:web_socket_channel/src/_connect_html.dart": _connect_html,
    "package:web_socket_channel/src/exception.dart": exception,
    "package:web_socket_channel/src/copy/web_socket_impl.dart": web_socket_impl,
    "package:web_socket_channel/src/channel.dart": channel,
    "package:web_socket_channel/html.dart": html$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["src/_connect_html.dart","src/exception.dart","src/copy/web_socket_impl.dart","src/channel.dart","html.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2CAc6B;QAAuB;AAChD,UAAqB,wCAAQ,GAAG,cAAa,SAAS;EAAC;;;;ICP5C;;;;;;IAGP;;;;;;;AASe,YAAA,AAAQ,wBACvB,8BACA,AAAqC,yCAAR;IAAQ;;;IATX;IAAkB,eAAE;;EAAI;uDAEzB;IACjB,iBAAQ,cAAN,KAAK;IACT,eAAE,KAAK;;;;;;;;;;;;;;;;;;;;;ECiBrB;;;;;MAHmB,0CAAI;;;MACJ,0CAAI;;;MACJ,4CAAM;;;;;;;EAoBzB;;;;;MAhBmB,6CAAY;;;MACZ,qCAAI;;;MACJ,uCAAM;;;MACN,2CAAU;;;MACV,2CAAU;;;MACV,2CAAU;;;MACV,2CAAU;;;MACV,2CAAU;;;MACV,sCAAK;;;MACL,qCAAI;;;MACJ,qCAAI;;;MACJ,2CAAU;;;MACV,2CAAU;;;MACV,2CAAU;;;MACV,2CAAU;;;MACV,2CAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAiDL;AACpB,YAAc,+BAAiB,MAAM,EAAE,QAAW;AAChD,YAAI,AAAW;AAC0C,UAAvD,WAAM,wBAAW;;AAEG,QAAtB,mBAAa,SAAS;AACtB,cAAO;;IAEX;aAGqB,OAAmB;AACA,MAAtC,AAAW,0BAAS,KAAK,EAAE,UAAU;IACvC;;AAIoB,MAAlB,AAAW;IACb;QAImB;;;AACb,mBAAe,kBAAN,KAAK,IAAgB,KAAK,GAAa,4CAAS,KAAK;AAC9D,kBAAQ;AACR,sBAAY,AAAO,MAAD;AACtB,UAAI,AAAO;AACmD,QAA5D,WAAM,4CAA0B;;AAElC,UAAI,AAAO;AACmD,QAA5D,WAAM,4CAA0B;;AAElC,aAAQ,AAAM,KAAD,gBAAG,SAAS,KAAK,AAAO,sBAAa,AAAO;AACnD,mBAAO,AAAM,MAAA,QAAC,KAAK;AACvB,YAAW,aAAP;AACF,cAAI,AAAO;AACe,YAAxB,aAAoB,CAAP,aAAL,IAAI,aAAW;AAEvB,gBAA2B,CAAjB,aAAL,IAAI,IAAS,qBAAY;AAEqB,cAAjD,WAAM,4CAA0B;;AAGT,YAAzB,gBAAgB,cAAL,IAAI;AAEf,gBAAY,aAAR;AACF,kBAAI,AAAQ;AACV,oBAAI,AAAoB;AAC2B,kBAAjD,WAAM,4CAA0B;;;AAGlC,sBAAO,AAAQ,AAAyB,uBACpC,AAAQ;AACZ,oBAAI,AAAoB;AAC2B,kBAAjD,WAAM,4CAA0B;;AAEL,gBAA7B,4BAAsB;;kBAEnB,KAAY,aAAR,uBACC,aAAR;AAEF,6BAAK,aAAM,AAAiD,WAA3C,4CAA0B;;AAEM,cAAjD,WAAM,4CAA0B;;AAEhB,YAAlB;gBACK,KAAI,AAAO;AACY,YAA5B,gBAAwB,CAAR,aAAL,IAAI,IAAG,SAAS;AACT,YAAlB,aAAY,aAAL,IAAI,IAAG;AACd,0BAAI,4BAA0B,aAAL,cAAO;AACmB,cAAjD,WAAM,4CAA0B;;AAElC,gBAAI,AAAK,eAAG;AACF,cAAR,aAAO;AACe,cAAtB,2BAAqB;AACJ,cAAjB;kBACK,KAAI,AAAK,eAAG;AACT,cAAR,aAAO;AACe,cAAtB,2BAAqB;AACJ,cAAjB;;AAEA,oBAAY,aAAL,cAAO;AACD,cAAb;;;AAGF,kBAAO,AAAO;AACS,YAAvB,aAAiB,CAAL,aAAL,eAAQ,iBAAI,IAAI;AACH,YAApB,2BAAkB,aAAlB,4BAAkB;AAClB,gBAAI,AAAmB,6BAAG;AACX,cAAb;;;;AAIJ,cAAI,AAAO;AAC4C,YAArD,AAAa,2BAAC,AAAE,kBAA2B,sCAAzB,qDAAyB,SAAM,IAAI;AACrD,gBAAI,AAA0B,oCAAG;AACpB,cAAX;;;AAGF,kBAAO,AAAO;AAEV,gCAAgB,mBAAc,aAAV,SAAS,IAAG,KAAK,EAAE;AACJ,YAAvC,+BAAuB,aAAvB,gCAA0B,aAAa;AAEvC,0BAAI;AACmC,cAArC,cAAQ,KAAK,EAAE,aAAa,EAAE,MAAM;;AAG2B,YAAjE,AAAS,mBAAc,0BAAK,AAAO,MAAD,WAAS,KAAK,EAAE,aAAa;AACzC,YAAtB,QAAA,AAAM,KAAD,GAAI,aAAa;AACtB,0BAAI;AACF,kBAAI,AAAuB,iCAAG,GAAG,AAAkB;;AAEnD,kBAAI,AAAoB,mCACpB,AAAoB;AAC2B,gBAAjD,WAAM,4CAA0B;;AAElC,kBAAI,AAAuB,iCAAG,GAAG,AAAkB;;AAI9C,YAAP,QAAA,AAAK,KAAA;;;AAKF,QAAP,QAAA,AAAK,KAAA;;IAET;cAEiB,OAAW,QAAkB;;AAG5C,UAAW,aAAP,MAAM;AAEF,0BAAyB,MAAS,aAAN,KAAK,IAAG;AACpC,kBAAY,aAAN,KAAK,IAAG,WAAW;AAC/B,iBAAS,IAAI,KAAK,EAAI,aAAF,CAAC,IAAG,GAAG,EAAE,IAAC,aAAD,CAAC;AACqB,eAAjD,MAAM;eAAC,CAAC;UAAF,cAAI,cAAJ,8BAAO,AAAa,2BAAmB,cAAH,4BAAf,2CAAe,UAAK;;AAE7B,QAApB,QAAM,aAAN,KAAK,IAAI,WAAW;AACC,QAArB,SAAO,aAAP,MAAM,IAAI,WAAW;AACf,yBAAoB,cAAP,MAAM;AACzB,YAAI,AAAW,UAAD,GAAG;AAEX,qBAAO;AACX,mBAAS,IAAI,GAAG,AAAE,CAAD,IAAI,GAAG,IAAA,AAAC,CAAA;AACsC,YAA7D,OAAmB,CAAX,AAAK,IAAD,IAAI,iBAAK,AAAa,2BAAkB,AAAK,aAArB,yBAAkB,CAAC,GAAI;;AAEzD,0BAAY,yCAAQ,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAC1C,4BAA0B,4BAAK,AAAO,MAAD,WAAS,KAAK,EAAE,UAAU;AACnE,mBAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAY,WAAD,YAAS,IAAA,AAAC,CAAA;AACZ,kBAA3B,WAAW;kBAAC,CAAC;YAAF,gBAAA,AAAI,qBAAG,SAAS;;AAEvB,sBAAQ,AAAW,UAAD;AACV,UAAd,QAAM,aAAN,KAAK,IAAI,KAAK;AACC,UAAf,SAAO,aAAP,MAAM,IAAI,KAAK;;;AAIb,gBAAY,aAAN,KAAK,iBAAG,MAAM;AAC1B,eAAS,IAAI,KAAK,EAAI,aAAF,CAAC,IAAG,GAAG,EAAE,IAAC,aAAD,CAAC;AACqB,eAAjD,MAAM;eAAC,CAAC;QAAF,kBAAI,cAAJ,kCAAO,AAAa,2BAAmB,cAAH,6BAAf,4CAAe,WAAK;;IAEnD;;AAGE,oBAAI;AACF,uBAAK;AACiE,UAApE,WAAM,4CAA0B;;AAErB,QAAb;;AAEA,sBAAI;AACoE,UAAtE,WAAM,4CAA0B;;AAEL,QAA7B,+BAAyB;AACV,QAAf;;IAEJ;;AAG+B,MAA7B,+BAAyB;AACV,MAAf;IACF;;AAKE,UAAI,AAAuB,iCAAG;AAC5B,sBAAI;AACF,kBAAQ;;;AAEW,cAAf;AACkB,cAAlB,AAAW;AACX;;;;AAEgC,cAAhC,AAAW,qBAAI;AACf;;;;AAEgC,cAAhC,AAAW,qBAAI;AACf;;;AAEkB,UAAtB;;AAEkB,UAAlB;;;AAGc,QAAhB;;IAEJ;;AAGE,oBAAI;AACE,oBAAQ,AAAS;AAErB,gBAAQ;;;AAE8B,YAAlC,AAAW,qBAAI,AAAK,oBAAO,KAAK;AAChC;;;;AAEqB,YAArB,AAAW,qBAAI,KAAK;AACpB;;;AAE4C,QAAhD;;AAEoB,MAAtB;IACF;;AAGE,cAAQ;;;AAE0C,UAA9C;AACI,wBAAU,AAAS;AACvB,wBAAI,AAAQ,OAAD;AACT,gBAAI,AAAQ,AAAO,OAAR,cAAW;AAC6B,cAAjD,WAAM,4CAA0B;;AAEM,YAAxC,iBAA4B,CAAL,aAAX,AAAO,OAAA,QAAC,OAAM,iBAAI,AAAO,OAAA,QAAC;AACtC,gBAAI,AAAU;AACqC,cAAjD,WAAM,4CAA0B;;AAElC,gBAAmB,aAAf,AAAQ,OAAD,aAAU;AAC0B,cAA7C,mBAAc,AAAK,oBAAO,AAAQ,OAAD,WAAS;;;AAG/B,UAAf;AACkB,UAAlB,AAAW;AACX;;;;AAGoD,UAApD,AAAW,qBAAI,uCAAe,AAAS;AACvC;;;;AAGoD,UAApD,AAAW,qBAAI,uCAAe,AAAS;AACvC;;;AAEkB,MAAtB;IACF;;AAGE,YAAO,AAAQ,AACsB,wBAAjC,AAAQ,uBACR,AAAQ;IACd;;AAGE,UAAI,AAAO,sBAAa,AAAO,oBAAY,AAAc;AAC7C,MAAZ,aAAO;AACK,MAAZ,gBAAU,CAAC;AACF,MAAT,aAAO,CAAC;AACe,MAAvB,2BAAqB,CAAC;AACO,MAA7B,kCAA4B;AACD,MAA3B,+BAAyB,CAAC;AACP,MAAnB,wBAAkB;IACpB;;gEAxRoC;IAnBhC;IACC,aAAO;IACR,gBAAU,CAAC;IACX,aAAO,CAAC;IACP,gBAAU;IACX,2BAAqB,CAAC;IACtB,kCAA4B;IAC5B,+BAAyB,CAAC;IAC1B,wBAAkB;IAClB;IACA;IACG,mBAAc;IAE2C;IAGhD,sBAAqB,sBAAO,GAAG;IAC5B,iBAAW,kCAAmB;IAEb;AAApC;;EAAyD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAhCxC,mDAAK;;;MACL,uDAAS;;;MACT,sDAAQ;;;MACR,kDAAI;;;MACJ,qDAAO;;;MACP,oDAAM;;;MACN,qDAAO;;;MACP,iDAAG;;;MACH,kDAAI;;;MACJ,kDAAI;;;MACJ,kDAAI;;;MACJ,oDAAM;;;;;;IAkTF;;EAAS;;;;;;;;;;IAKT;;EAAS;;;;;;;;;;;;qBAYA;AAC5B,YAAO,0CAAmC,MAAM,EAC5C,QAAsB;AACxB,YAAI,AAAW;AACyC,UAAtD,WAAM,wBAAW;;AAEG,QAAtB,mBAAa,SAAS;AACtB,cAAO;;IAEX;QAGS;AACP,UAAY,uBAAR,OAAO;AACuC,QAAhD,kBAAgC,AAAQ,OAAD;AACvC;;AAEF,UAAY,uBAAR,OAAO;AACuC,QAAhD,iBAAgC,AAAQ,OAAD;AACvC;;AAEQ;AACN;AACJ,UAAI,AAAQ,OAAD;AACT,YAAY,eAAR,OAAO;AACqB,UAA9B;AAC2B,UAA3B,OAAO,AAAK,oBAAO,OAAO;cACrB,KAAY,mBAAR,OAAO;AACgB,UAAhC;AACc,UAAd,OAAO,OAAO;;AAEc,UAA5B,WAAM,2BAAc,OAAO;;;AAGC,QAA9B;;AAEoB,MAAtB,cAAS,MAAM,EAAE,IAAI;IACvB;aAGqB,OAAmB;AACA,MAAtC,AAAW,0BAAS,KAAK,EAAE,UAAU;IACvC;;AAIM,iBAAO,AAAU;AACjB,mBAAS,AAAU;AACb;AACV,UAAI,AAAK,IAAD;AACQ,QAAd,OAAY;AACgB,QAA5B,AAAK,IAAD,OAAW,AAAM,aAAX,IAAI,KAAI,IAAK;AACF,QAArB,AAAK,IAAD,OAAU,aAAL,IAAI,IAAG;AAChB,YAAI,AAAO,MAAD;AACwB,UAAhC,AAAK,IAAD,UAAQ,AAAK,oBAAO,MAAM;;;AAGI,MAAtC,iBAAiC,IAAI;AACnB,MAAlB,AAAW;IACb;aAEkB,QAAkB;AAUhC,MATF,AAOK,0DANG,MAAM,EACN,IAAI,EACJ,AAAU,8BAGV,iBACK,QAAC;AACK,QAAjB,AAAW,qBAAI,CAAC;;IAEpB;uBAGQ,QAAkB,MAAW,YAAiB;;AAChD,iBAAO,WAAC,UAAU;AAClB,uBAAa,AAAK,IAAD,WAAW,IAAI,AAAK,IAAD;AAEpC,uBAAc,IAAI,GAAI,IAAI;AAC9B,UAAe,aAAX,UAAU,IAAG;AACA,QAAf,aAAA,AAAW,UAAD,GAAI;YACT,KAAe,aAAX,UAAU,IAAG;AACP,QAAf,aAAA,AAAW,UAAD,GAAI;;AAEZ,mBAAS,uCAAU,UAAU;AAC7B,kBAAQ;AAGR,gBACsD,CADd,iBACvC,UAAU,SAAwC,KAC3C,cAAP,MAAM;AAEU,MAArB,AAAM,MAAA,SAAM,KAAL,KAAK,uBAAM,GAAG;AAEjB,wBAAc;AAClB,UAAe,aAAX,UAAU,IAAG;AACM,QAArB,AAAM,MAAA,SAAM,MAAL,KAAK,yBAAM;AACH,QAAf,cAAc;YACT,KAAe,aAAX,UAAU,IAAG;AACD,QAArB,AAAM,MAAA,SAAM,OAAL,KAAK,2BAAM;AACH,QAAf,cAAc;;AAGhB,eAAS,IAAI,GAAG,AAAE,CAAD,GAAG,WAAW,EAAE,IAAA,AAAC,CAAA;AACoC,QAApE,AAAM,MAAA,SAAM,OAAL,KAAK,2BAAM,AAAW,AAAiC,UAAlC,cAA6B,CAAtB,AAAY,AAAK,WAAN,GAAG,IAAK,CAAC,IAAI,KAAK;;AAElE,UAAI,IAAI;AACa,eAAnB,MAAM;aAAC;QAAD,gBAAI,cAAJ,mBAAO,AAAE,KAAG;AACd,wBAAY,sBACd,AAAQ,gCAAQ,MAChB,AAAQ,gCAAQ,MAChB,AAAQ,gCAAQ,MAChB,AAAQ,gCAAQ;AAE0B,QAA5C,AAAO,MAAD,YAAU,KAAK,EAAE,AAAM,KAAD,GAAG,GAAG,SAAS;AACjC,QAAV,QAAA,AAAM,KAAD,GAAI;AACT,YAAI,AAAK,IAAD;AACI;AAGV,cAAI,AAAO,MAAD,UAAkC,kBAAL,IAAI;AAC9B,YAAX,OAAO,IAAI;;AAEX,gBAAS,kBAAL,IAAI;AACyB,cAA/B,OAAiB,4CAAS,IAAI;;AAED,cAA7B,OAAO,uCAAU,AAAK,IAAD;AACrB,uBAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAK,IAAD,YAAS,IAAA,AAAC,CAAA;AAChC,oBAAY,aAAR,AAAI,IAAA,QAAC,CAAC,KAAI,KAAK,AAAI,mBAAE,AAAI,IAAA,QAAC,CAAC;AAEQ,kBADrC,WAAM,2BAAa,AAAC,sCAChB,qBAAU,AAAI,IAAA,QAAC,CAAC,KAAE,wBAAW,CAAC;;AAEnB,gBAAjB,AAAI,IAAA,QAAC,CAAC,EAAI,AAAI,IAAA,QAAC,CAAC;;;;AAKlB,2BAAyB,cAAZ,AAAK,IAAD;AACrB,cAAI,AAAW,UAAD,GAAG;AAEX,uBAAO;AACX,qBAAS,IAAI,GAAG,AAAE,CAAD,IAAI,GAAG,IAAA,AAAC,CAAA;AACU,cAAjC,OAAmB,CAAX,AAAK,IAAD,IAAI,iBAAK,AAAS,SAAA,QAAC,CAAC;;AAE9B,4BAAY,yCAAQ,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI;AAC1C,8BAA0B,4BAAK,AAAK,IAAD,WAAS,GAAG,UAAU;AAC7D,qBAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAY,WAAD,YAAS,IAAA,AAAC,CAAA;AACZ,qBAA3B,WAAW;oBAAC,CAAC;cAAF,iBAAA,AAAI,sBAAG,SAAS;;;AAI/B,mBAAS,IAAI,AAAW,UAAD,OAAe,AAAE,CAAD,gBAAG,AAAK,IAAD,YAAS,IAAA,AAAC,CAAA;AAC3B,mBAA3B,IAAI;mBAAC,CAAC;YAAF,kBAAI,cAAJ,kCAAO,AAAS,SAAA,QAAC,AAAE,CAAD,GAAG;;AAEhB,UAAX,OAAO,IAAI;;;AAGf,YAAO,AAAM,KAAD,KAAI,UAAU;AAC1B,UAAI,AAAK,IAAD;AACN,cAAO,8BAAC,MAAM;;AAEd,cAAO,8BAAC,MAAM,EAAE,IAAI;;IAExB;;gEAvKmC;IAFd;IAEc;AAAnC;;EAA6C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuL3C,UAAI,AAAc;AACM,QAAtB,AAAc;;IAElB;;AAGE,UAAI,AAAc;AACK,QAArB,AAAc;;AAEK,QAAnB,qBAAe;;IAEnB;;AAGE,UAAI,AAAc;AACM,QAAtB,AAAc;;AAEM,QAApB,qBAAe;;IAEnB;;AAGE,UAAI,AAAc;AACZ,2BAAe;AACC,QAApB,sBAAgB;AACK,QAArB,AAAa,YAAD;;IAEhB;;AAGE,UAAI,AAAY,2BAAS;AAKD,MAJxB,oBAAc,kCACJ,yBACG,qCACC,sCACA;AACV,mBACA,AAAyC,sDAAX,qBAAgB,AAAY;AAe5D,MAdF,AAAK,AAAkB,oBAAR,MAAM,kBAAO,QAAC;AACpB,QAAP;AACmC,QAAnC,AAAgB,+BAAS;uCACf,SAAC,OAAkB;AACf,UAAd,gBAAU;AACD,UAAT;AACA,cAAU,sBAAN,KAAK;AACP,2BAAK,YAAM,KAAK,EAAE,UAAU;AACsB,cAAhD,AAAgB,oCAAc,KAAK,EAAE,UAAU;;;AAG1C,YAAP;AACmC,YAAnC,AAAgB,+BAAS;;;IAG/B;YAEY,cAAkB;AAC5B,UAAI,AAAW,0BAAS,MAAO;AAC/B,UAAI,AAAM,KAAD;AACoC,QAA3C,AAAW,+BAAc,KAAK,EAAE,UAAU;;AAEZ,QAA9B,AAAW,0BAAS;;AAEL,MAAjB,mBAAa;AACb,YAAO;IACT;;qBAGqB;AACnB,oBAAI;AAC0B,QAA5B,AAAO,AAAa,MAAd,QAAQ;AACd,cAAc,oBAAM;;AAEH,MAAnB;AACwB,MAAxB,mBAAa;AAGyC,MAFtD,sBAAgB,AAAO,MAAD,QAAQ,QAAC;AACR,QAArB,AAAY,sBAAI,IAAI;gDACX,iCAAgB,6BAAsB;AACjD,oBAAI;AACmB,QAArB,AAAc;AACM,QAApB,qBAAe;;AAEjB,YAAO,AAAW;IACpB;;AAIqB,MAAnB;AACA,YAAO;AACL,cAAO,AAAK,AAAQ,AAAmB,8BAAR,QAAC;kDAAY,QAAC,KAAM;;;AAGlC,MAAnB,AAAY;AACZ,YAAO,AAAgB,AAAO,iDAAK,QAAC,KAAM,WAAW;IACvD;QAES;AACP,oBAAI,gBAAS;AACM,MAAnB;AACqB,MAArB,AAAY,sBAAI,IAAI;IACtB;;AAGgB,MAAd,gBAAU;AACD,MAAT;AACO,MAAP;IACF;;qDA5GwB,WAAgB;IAPvB;IACE;IACd,qBAAe;IACf,gBAAU;IACC,wBAAkB;IACxB;IAEc;IAAgB;;EAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiTzC;;;;;;;;AAEF,UAAI,AAAY,uBAAG,GAAG,AAA8B,sBAAF,KAAd,oFAAc;AAClD,YAAO;IACT;;;IAJI,oBAAc;;EASpB;;;;;;;;;;;;;;;;;;;;;;;IArMe;;;;;;WA8EoC;UACnC;UAAyB;UAAa;AAClD,YAAO,AAAY,AAAO,iCAAO,MAAM,YAC1B,OAAO,UAAU,MAAM,iBAAiB,aAAa;IACpE;;AAE6B;IAAa;qBAEhB;AACxB,oBAAI,qBAAc;AAClB,UAAI,AAAW,0BAAS,AAAW,AAAQ;AACnB,MAAxB,sBAAgB,QAAQ;AAExB,UAAI,AAAc,6BAAS;AASzB,MAPF,mBAAa,gBAAM,qBAAe;AAChC,sBAAI,qBAAc;AACa,QAA/B,AAAU,oBAAI;AAIZ,QAHF,mBAAa,gBAAM,qBAAe;AAEE,UAAlC;;;IAGN;;AAEsB;IAAW;;AAER;IAAI;;AACR;IAAU;;AACL;IAAY;QAG7B;AACQ,MAAf,AAAM,gBAAI,IAAI;IAChB;aAGc,OAAmB;AACE,MAAjC,AAAM,qBAAS,KAAK,EAAE,UAAU;IAClC;;qBAGwB;AAAW,YAAA,AAAM,uBAAU,MAAM;IAAC;;AAEvC,YAAA,AAAM;IAAI;UAGX,aAAa;AAC7B,oBAAI,oDAAsB,IAAI;AACiC,QAA7D,WAAM,4CAA0B,AAA4B,mCAAL,IAAI;;AAE7D,UAAI,AAAc;AACI,QAApB,sBAAgB,IAAI;AACI,QAAxB,wBAAkB,MAAM;;AAE1B,qBAAK,AAAY;AAMf,uBAAK,AAAY,kCAAe,AAAc;AACI,UAAhD,AAAY,AAAO,AAAQ,wDAAW,QAAC,KAAM;;AAU7C,QAPU,4BAAZ,oBAAgB,+BAAkC;AAEtB,UAA1B,mBAAa;AACiB,UAA9B,qBAAe;AACf,cAAI,AAAc,6BAAS,AAAc,AAAQ;AAC9B,UAAnB,AAAY;AACkB,UAA9B,AAAY,mDAAO;8BANT;;AASd,YAAO,AAAM;IACf;aAEiB,aAAa;AAC5B,oBAAI,qBAAc;AAClB,UAAI,AAAc;AACI,QAApB,sBAAgB,IAAI;AACI,QAAxB,wBAAkB,MAAM;;AAEP,MAAnB,qBAAe;AACQ,MAAvB,AAAU;AACoB,MAA9B,AAAY,mDAAO;IACrB;iCAMsC;AACpC,YAAO,AAAK,AAAQ,KAAT,aACD,aAAL,IAAI,YACD,AAAK,IAAD,aACJ,AAAK,IAAD,aACJ,AAAK,IAAD,aACE,aAAL,IAAI,YACI,aAAL,IAAI,YACF,aAAL,IAAI,aAA0C,aAAL,IAAI,IAAG;IAC3D;;uDA/JsB,QAA8B,MAAW,UACrD;IAnBO;IACE;IACR;IAGP;IACC,qBAAe;IAChB;IACG;IACE;IACH;IACa;IAEf;IACG;IACD;IAGyD;IACrD;AAFV;AAG4C,IAA1C,kBAAY,2CAAmB,MAAM,IAAI;AACR,IAAjC,cAAQ,+BAAe;AACK,IAA5B;AAEI,sBAAc,sDAA8B;AAoCzB,IAnCvB,sBAAgB,AAAY,AAAa,WAAd,MAAM,MAAM,SAAS,QAAC;AAC/C,UAAS,uBAAL,IAAI;AACN,uBAAK,qBAAc,AAAU,AAAiC,oBAA7B,uCAAe,AAAK,IAAD;YAC/C,KAAS,uBAAL,IAAI;AAEe,QAA5B,oBAAe;;AAEM,QAArB,AAAY,sBAAI,IAAI;;qCAEZ,SAAC,OAAO;AAClB,YAAI,AAAY,2BAAS,AAAY,AAAQ;AAC7C,YAAU,wBAAN,KAAK;AAC2C,UAAlD;;AAEsC,UAAtC;;AAGwB,QAA1B,mBAAa;AACiB,QAA9B,qBAAe;AACI,QAAnB,AAAY;+CACH;AACT,YAAI,AAAY,2BAAS,AAAY,AAAQ;AAC7C,YAAI,AAAY;AACiB,UAA/B;AACA,yBAAK,oDAAsB,AAAY,WAAD;AACkB,YAAtD,aAAO,AAAY,WAAD,YAAY,AAAY,WAAD;;AAEjC,YAAR;;AAE4B,UAA9B;;AAGgC,QAAlC,mBAAa,AAAY,WAAD;AACc,QAAtC,qBAAe,AAAY,WAAD;AACP,QAAnB,AAAY;yCACI;AACG,IAArB,AAAc;AASqB,IARnC,oBAAc,kCACJ,gBACI,cAAM,AAAc,yDACpB;AACc,QAAtB,AAAc;AACM,QAApB,sBAAgB;mCAEK,UAAd,yCACe,UAAd;AAEgB,IAA9B,AAAW,iDAAC,kBAAc;EAC5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA/EqC,yCAAW;YAAuB;;MACtD,iDAAmB;;;MAChB,iDAAmB;;;;;MA1pB5B,6BAAa;;;MAEpB,uBAAO;YAAG;;MAk1BZ,8BAAc;YAAG;;;;;;;ACx0BI,YAAA,AAAW;IAAQ;;AAOrB,YAAA,AAAW;IAAS;;AAOf,YAAA,AAAW;IAAW;;AAG3B,sCAAW;IAAW;;AAOjB,YAAc,8BAAE;IAAW;mBASxB;AAG3B,YAAe,AACV,uBAAO,AAAK,AAAyC,kBAAX,CAAjB,aAAJ,GAAG,iBAAG;IAClC;mBAkCqC;UAAuB;AACxD,mCAAiB,GAAG,cAAa,SAAS;IAAC;;2CAbL;;QAC9B;QAAmB;QAAmB;IACjC,yBAAgB,6CACvB,AAAQ,OAAD,SAAS,AAAQ,OAAD,OAAO,QAAQ,EAAE,UAAU,GAD3B;AAEvB,wBAAe,YAAY;;;;;;;;;;;;;;;;;;;;;UAgCnB,kBAAkB;AAChC,YAAA,AAAW,wBAAM,SAAS,EAAE,WAAW;IAAC;;uCAdd;IACb,mBAAE,SAAS;AACtB,mDAAM,SAAS;;EAAC;;;;;;;;;;;;;;;;;;;;;;ICxGN;;;;;;;AAGO,YAAA,AAAW;IAAQ;;AAGrB;IAAU;;AAIL;IAAY;;AAKZ,YAAA,AAAW;IAAc;;AAe9B,YAAA,AAAY,AAAQ;IAAM;;AAKrB;IAAK;;AAsE3B,MAZF,AAAY,AAAM,AAAO,uCAAO,QAAC,WAAY,AAAW,wBAAK,OAAO,gCACxD;AAIV,cAAI,AAAgB,iCAAW,AAAkB;AACK,YAApD,AAAW,yBAAM,uBAAiB;gBAC7B,KAAI,AAAgB;AACQ,YAAjC,AAAW,yBAAM;;AAEC,YAAlB,AAAW;;;IAGjB;;;;;iDAzD6B;;QACP;QAAsB;oDACjC,mBAAc,cAAJ,GAAG,GAAa,SAAS,GAAnC;AACD,sBAA6C,CAApB,KAAX,UAAU,EAAV,aAAyB;;;EAAY;6CAGnC;IAhDtB;IAIG;IAUH;IAMG;IAID,qBACF,iEAA8B,0BAA0B;IAI9C;IAmBY;AACQ,IAAhC,eAAQ,iCAAmB;AAE3B,QAAI,AAAW,AAAW;AACf,MAAT;;AAME,MAFF,AAAW,AAAO,AAAM,kDAAK,QAAC;AACnB,QAAT;;;AAUF,IAJF,AAAW,AAAQ,AAAM,mDAAK,QAAC;AAE2C,MADxE,AAAY,AAAM,AACb,uCAAS,4CAA0B;AACV,MAA9B,AAAY,AAAM,AAAK;;AAOvB,IAJF,AAAW,AAAU,sCAAO,QAAC;AACvB,iBAAO,AAAM,KAAD;AAChB,UAAS,mBAAL,IAAI,GAAgB,AAAyB,OAAb,WAAL,IAAI;AACH,MAAhC,AAAY,AAAM,AAAK,kCAAI,IAAI;;AAS/B,IAJF,AAAW,AAAQ,AAAM,mDAAK,QAAC;AACN,MAAvB,oBAAa,AAAM,KAAD;AACS,MAA3B,sBAAe,AAAM,KAAD;AACU,MAA9B,AAAY,AAAM,AAAK;;EAE3B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA8BkB,kBAAkB;AACE,MAApC,AAAS,kCAAkB,SAAS;AACI,MAAxC,AAAS,oCAAoB,WAAW;AACxC,YAAa;IACf;;;;;2CATwC;IACzB,iBAAE,OAAO;AAClB,sDAAM,AAAQ,AAAY,AAAQ,OAArB;;EAA0B;;;;;;;;;;;;;;;;;;;;IAoBhC;;;;;;IAGA;;;;;;;AAKQ;IAAI;;kCAHD,MAAW;IAAX;IAAW;;EAAM;;;;;;;;;;;;;;;;MAX5B,qBAAI;;;MAGJ,qBAAI","file":"../../../../../../../../../../packages/web_socket_channel/web_socket_channel.dart.lib.js"}');
  // Exports:
  return {
    web_socket_channel: web_socket_channel,
    src___connect_html: _connect_html,
    src__exception: exception,
    src__copy__web_socket_impl: web_socket_impl,
    src__channel: channel,
    html: html$
  };
}));

//# sourceMappingURL=web_socket_channel.dart.lib.js.map
