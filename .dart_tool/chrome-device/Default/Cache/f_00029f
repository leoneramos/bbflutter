define(['dart_sdk', 'packages/dio/src/interceptors/log.dart', 'packages/parse_server_sdk/src/network/dio_adapter_js.dart', 'packages/http/src/io_client.dart', 'packages/http/src/multipart_request.dart', 'packages/parse_server_sdk/src/network/parse_websocket_html.dart', 'packages/web_socket_channel/src/copy/web_socket_impl.dart', 'packages/path/src/path_set.dart', 'packages/mime_type/mime_type.dart', 'packages/uuid/uuid.dart', 'packages/sembast/sembast_io.dart', 'packages/sembast_web/sembast_web.dart', 'packages/sembast/src/sembast_codec.dart', 'packages/xxtea/xxtea.dart'], (function load__packages__parse_server_sdk__src__network__parse_dio_client_dart(dart_sdk, packages__dio__src__interceptors__log$46dart, packages__parse_server_sdk__src__network__dio_adapter_js$46dart, packages__http__src__io_client$46dart, packages__http__src__multipart_request$46dart, packages__parse_server_sdk__src__network__parse_websocket_html$46dart, packages__web_socket_channel__src__copy__web_socket_impl$46dart, packages__path__src__path_set$46dart, packages__mime_type__mime_type$46dart, packages__uuid__uuid$46dart, packages__sembast__sembast_io$46dart, packages__sembast_web__sembast_web$46dart, packages__sembast__src__sembast_codec$46dart, packages__xxtea__xxtea$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _internal = dart_sdk._internal;
  const async = dart_sdk.async;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const _http = dart_sdk._http;
  const convert = dart_sdk.convert;
  const io = dart_sdk.io;
  const collection = dart_sdk.collection;
  const math = dart_sdk.math;
  const typed_data = dart_sdk.typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const dio_error = packages__dio__src__interceptors__log$46dart.src__dio_error;
  const options$ = packages__dio__src__interceptors__log$46dart.src__options;
  const dio = packages__dio__src__interceptors__log$46dart.src__dio;
  const adapter = packages__dio__src__interceptors__log$46dart.src__adapter;
  const transformer = packages__dio__src__interceptors__log$46dart.src__transformer;
  const dio_mixin = packages__dio__src__interceptors__log$46dart.src__dio_mixin;
  const response = packages__dio__src__interceptors__log$46dart.src__response;
  const cancel_token = packages__dio__src__interceptors__log$46dart.src__cancel_token;
  const dio_adapter_js = packages__parse_server_sdk__src__network__dio_adapter_js$46dart.src__network__dio_adapter_js;
  const io_client = packages__http__src__io_client$46dart.src__io_client;
  const client = packages__http__src__multipart_request$46dart.src__client;
  const request$ = packages__http__src__multipart_request$46dart.src__request;
  const base_client = packages__http__src__multipart_request$46dart.src__base_client;
  const streamed_response = packages__http__src__multipart_request$46dart.src__streamed_response;
  const base_request = packages__http__src__multipart_request$46dart.src__base_request;
  const parse_websocket_html = packages__parse_server_sdk__src__network__parse_websocket_html$46dart.src__network__parse_websocket_html;
  const channel = packages__web_socket_channel__src__copy__web_socket_impl$46dart.src__channel;
  const path = packages__path__src__path_set$46dart.path;
  const mime_type = packages__mime_type__mime_type$46dart.mime_type;
  const uuid = packages__uuid__uuid$46dart.uuid;
  const sembast_io = packages__sembast__sembast_io$46dart.sembast_io;
  const sembast_web = packages__sembast_web__sembast_web$46dart.sembast_web;
  const store_ref = packages__sembast__src__sembast_codec$46dart.src__api__store_ref;
  const store_ref_impl = packages__sembast__src__sembast_codec$46dart.src__store_ref_impl;
  const record_ref_impl = packages__sembast__src__sembast_codec$46dart.src__record_ref_impl;
  const database = packages__sembast__src__sembast_codec$46dart.src__api__v2__database;
  const codec = packages__sembast__src__sembast_codec$46dart.src__api__codec;
  const xxtea = packages__xxtea__xxtea$46dart.xxtea;
  var parse_dio_client = Object.create(dart.library);
  var parse_http_client = Object.create(dart.library);
  var parse_server_sdk = Object.create(dart.library);
  var $_set = dartx._set;
  var $_get = dartx._get;
  var $isNotEmpty = dartx.isNotEmpty;
  var $forEach = dartx.forEach;
  var $toLowerCase = dartx.toLowerCase;
  var $toString = dartx.toString;
  var $noSuchMethod = dartx.noSuchMethod;
  var $addAll = dartx.addAll;
  var $containsKey = dartx.containsKey;
  var $length = dartx.length;
  var $contains = dartx.contains;
  var $replaceAll = dartx.replaceAll;
  var $values = dartx.values;
  var $toList = dartx.toList;
  var $remove = dartx.remove;
  var $runtimeType = dartx.runtimeType;
  var $clear = dartx.clear;
  var $add = dartx.add;
  var $map = dartx.map;
  var $putIfAbsent = dartx.putIfAbsent;
  var $isEmpty = dartx.isEmpty;
  var $first = dartx.first;
  var $where = dartx.where;
  var $replaceFirst = dartx.replaceFirst;
  var $replaceRange = dartx.replaceRange;
  var $containsValue = dartx.containsValue;
  var $sublist = dartx.sublist;
  var $cast = dartx.cast;
  var $abs = dartx.abs;
  var $split = dartx.split;
  var $startsWith = dartx.startsWith;
  var $substring = dartx.substring;
  var $compareTo = dartx.compareTo;
  var $removeAt = dartx.removeAt;
  var $keys = dartx.keys;
  var $insert = dartx.insert;
  var $removeLast = dartx.removeLast;
  var $toInt = dartx.toInt;
  var $toDouble = dartx.toDouble;
  dart._checkModuleNullSafetyMode(false);
  var T$ = {
    ListOfint: () => (T$.ListOfint = dart.constFn(core.List$(core.int)))(),
    IdentityMapOfString$dynamic: () => (T$.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    StringAndStringTovoid: () => (T$.StringAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.String])))(),
    StringAnddynamicTovoid: () => (T$.StringAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [core.String, dart.dynamic])))(),
    HttpClientAdapterN: () => (T$.HttpClientAdapterN = dart.constFn(dart.nullable(adapter.HttpClientAdapter)))(),
    TransformerN: () => (T$.TransformerN = dart.constFn(dart.nullable(transformer.Transformer)))(),
    BaseOptionsN: () => (T$.BaseOptionsN = dart.constFn(dart.nullable(options$.BaseOptions)))(),
    StringN: () => (T$.StringN = dart.constFn(dart.nullable(core.String)))(),
    JSArrayOfint: () => (T$.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    ListOfintAndListOfintToListOfint: () => (T$.ListOfintAndListOfintToListOfint = dart.constFn(dart.fnType(T$.ListOfint(), [T$.ListOfint(), T$.ListOfint()])))(),
    SecurityContextN: () => (T$.SecurityContextN = dart.constFn(dart.nullable(io.SecurityContext)))(),
    __ToParseHTTPClient: () => (T$.__ToParseHTTPClient = dart.constFn(dart.fnType(parse_http_client.ParseHTTPClient, [], {securityContext: T$.SecurityContextN()}, {sendSessionId: core.bool})))(),
    __ToParseFileBase: () => (T$.__ToParseFileBase = dart.constFn(dart.fnType(parse_server_sdk.ParseFileBase, [], {name: T$.StringN(), url: T$.StringN()}, {})))(),
    VoidToParseObject: () => (T$.VoidToParseObject = dart.constFn(dart.fnType(parse_server_sdk.ParseObject, [])))(),
    LinkedMapOfString$VoidToParseObject: () => (T$.LinkedMapOfString$VoidToParseObject = dart.constFn(_js_helper.LinkedMap$(core.String, T$.VoidToParseObject())))(),
    ParseApiRQL: () => (T$.ParseApiRQL = dart.constFn(dart.legacy(parse_server_sdk.ParseApiRQ)))(),
    ParseNetworkResponseTypeL: () => (T$.ParseNetworkResponseTypeL = dart.constFn(dart.legacy(parse_server_sdk.ParseNetworkResponseType)))(),
    ParseConnectivityResultL: () => (T$.ParseConnectivityResultL = dart.constFn(dart.legacy(parse_server_sdk.ParseConnectivityResult)))(),
    LiveQueryEventL: () => (T$.LiveQueryEventL = dart.constFn(dart.legacy(parse_server_sdk.LiveQueryEvent)))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    IdentityMapOfString$Function: () => (T$.IdentityMapOfString$Function = dart.constFn(_js_helper.IdentityMap$(core.String, core.Function)))(),
    LiveQueryClientEventL: () => (T$.LiveQueryClientEventL = dart.constFn(dart.legacy(parse_server_sdk.LiveQueryClientEvent)))(),
    LiveQueryClientEventTovoid: () => (T$.LiveQueryClientEventTovoid = dart.constFn(dart.fnType(dart.void, [parse_server_sdk.LiveQueryClientEvent])))(),
    voidTovoid: () => (T$.voidTovoid = dart.constFn(dart.fnType(dart.void, [dart.void])))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    SubscriptionOfParseObject: () => (T$.SubscriptionOfParseObject = dart.constFn(parse_server_sdk.Subscription$(parse_server_sdk.ParseObject)))(),
    IdentityMapOfint$SubscriptionOfParseObject: () => (T$.IdentityMapOfint$SubscriptionOfParseObject = dart.constFn(_js_helper.IdentityMap$(core.int, T$.SubscriptionOfParseObject())))(),
    StreamControllerOfLiveQueryClientEvent: () => (T$.StreamControllerOfLiveQueryClientEvent = dart.constFn(async.StreamController$(parse_server_sdk.LiveQueryClientEvent)))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    VoidToFutureOfvoid: () => (T$.VoidToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [])))(),
    SubscriptionOfParseObjectTovoid: () => (T$.SubscriptionOfParseObjectTovoid = dart.constFn(dart.fnType(dart.void, [T$.SubscriptionOfParseObject()])))(),
    LiveQueryClientEventTobool: () => (T$.LiveQueryClientEventTobool = dart.constFn(dart.fnType(core.bool, [parse_server_sdk.LiveQueryClientEvent])))(),
    dynamicTovoid: () => (T$.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),
    FutureOfParseResponse: () => (T$.FutureOfParseResponse = dart.constFn(async.Future$(parse_server_sdk.ParseResponse)))(),
    ObjectToFutureOfParseResponse: () => (T$.ObjectToFutureOfParseResponse = dart.constFn(dart.fnType(T$.FutureOfParseResponse(), [core.Object])))(),
    IdentityMapOfString$String: () => (T$.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))(),
    ListOfString: () => (T$.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListNOfString: () => (T$.ListNOfString = dart.constFn(dart.nullable(T$.ListOfString())))(),
    LinkedMapOfString$dynamic: () => (T$.LinkedMapOfString$dynamic = dart.constFn(_js_helper.LinkedMap$(core.String, dart.dynamic)))(),
    MapOfString$dynamic: () => (T$.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    MapEntryOfString$dynamic: () => (T$.MapEntryOfString$dynamic = dart.constFn(core.MapEntry$(core.String, dart.dynamic)))(),
    JSArrayOfMapEntryOfString$dynamic: () => (T$.JSArrayOfMapEntryOfString$dynamic = dart.constFn(_interceptors.JSArray$(T$.MapEntryOfString$dynamic())))(),
    MapEntryOfString$dynamicToMapEntryOfString$dynamic: () => (T$.MapEntryOfString$dynamicToMapEntryOfString$dynamic = dart.constFn(dart.fnType(T$.MapEntryOfString$dynamic(), [T$.MapEntryOfString$dynamic()])))(),
    VoidToString: () => (T$.VoidToString = dart.constFn(dart.fnType(core.String, [])))(),
    MapEntryOfString$dynamicTobool: () => (T$.MapEntryOfString$dynamicTobool = dart.constFn(dart.fnType(core.bool, [T$.MapEntryOfString$dynamic()])))(),
    IdentityMapOfString$_ACLPermissions: () => (T$.IdentityMapOfString$_ACLPermissions = dart.constFn(_js_helper.IdentityMap$(core.String, parse_server_sdk._ACLPermissions)))(),
    StringAnd_ACLPermissionsTovoid: () => (T$.StringAnd_ACLPermissionsTovoid = dart.constFn(dart.fnType(dart.void, [core.String, parse_server_sdk._ACLPermissions])))(),
    MapNOfString$dynamic: () => (T$.MapNOfString$dynamic = dart.constFn(dart.nullable(T$.MapOfString$dynamic())))(),
    _HashSetOfParseObject: () => (T$._HashSetOfParseObject = dart.constFn(collection._HashSet$(parse_server_sdk.ParseObject)))(),
    _HashSetOfParseFileBase: () => (T$._HashSetOfParseFileBase = dart.constFn(collection._HashSet$(parse_server_sdk.ParseFileBase)))(),
    JSArrayOfParseObject: () => (T$.JSArrayOfParseObject = dart.constFn(_interceptors.JSArray$(parse_server_sdk.ParseObject)))(),
    ListOfParseObject: () => (T$.ListOfParseObject = dart.constFn(core.List$(parse_server_sdk.ParseObject)))(),
    JSArrayOfListOfParseObject: () => (T$.JSArrayOfListOfParseObject = dart.constFn(_interceptors.JSArray$(T$.ListOfParseObject())))(),
    ParseObjectTodynamic: () => (T$.ParseObjectTodynamic = dart.constFn(dart.fnType(dart.dynamic, [parse_server_sdk.ParseObject])))(),
    FutureOrOfParseObject: () => (T$.FutureOrOfParseObject = dart.constFn(async.FutureOr$(parse_server_sdk.ParseObject)))(),
    IdentityMapOfint$String: () => (T$.IdentityMapOfint$String = dart.constFn(_js_helper.IdentityMap$(core.int, core.String)))(),
    IdentityMapOfString$StringN: () => (T$.IdentityMapOfString$StringN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.StringN())))(),
    Uint8ListN: () => (T$.Uint8ListN = dart.constFn(dart.nullable(typed_data.Uint8List)))(),
    StreamOfListOfint: () => (T$.StreamOfListOfint = dart.constFn(async.Stream$(T$.ListOfint())))(),
    JSArrayOfListOfint: () => (T$.JSArrayOfListOfint = dart.constFn(_interceptors.JSArray$(T$.ListOfint())))(),
    ParseInstallationN: () => (T$.ParseInstallationN = dart.constFn(dart.nullable(parse_server_sdk.ParseInstallation)))(),
    FutureOfList: () => (T$.FutureOfList = dart.constFn(async.Future$(core.List)))(),
    QueryBuilderOfParseObject: () => (T$.QueryBuilderOfParseObject = dart.constFn(parse_server_sdk.QueryBuilder$(parse_server_sdk.ParseObject)))(),
    boolN: () => (T$.boolN = dart.constFn(dart.nullable(core.bool)))(),
    ParseResponseN: () => (T$.ParseResponseN = dart.constFn(dart.nullable(parse_server_sdk.ParseResponse)))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    ListN: () => (T$.ListN = dart.constFn(dart.nullable(core.List)))(),
    FutureOrOfboolN: () => (T$.FutureOrOfboolN = dart.constFn(async.FutureOr$(T$.boolN())))(),
    doubleN: () => (T$.doubleN = dart.constFn(dart.nullable(core.double)))(),
    FutureOrOfdoubleN: () => (T$.FutureOrOfdoubleN = dart.constFn(async.FutureOr$(T$.doubleN())))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))(),
    FutureOrOfintN: () => (T$.FutureOrOfintN = dart.constFn(async.FutureOr$(T$.intN())))(),
    FutureOrOfStringN: () => (T$.FutureOrOfStringN = dart.constFn(async.FutureOr$(T$.StringN())))(),
    FutureOrOfListNOfString: () => (T$.FutureOrOfListNOfString = dart.constFn(async.FutureOr$(T$.ListNOfString())))(),
    StoreRefOfString$String: () => (T$.StoreRefOfString$String = dart.constFn(store_ref.StoreRef$(core.String, core.String)))(),
    FutureOfbool: () => (T$.FutureOfbool = dart.constFn(async.Future$(core.bool)))(),
    StringL: () => (T$.StringL = dart.constFn(dart.legacy(core.String)))(),
    VoidToMapOfString$dynamic: () => (T$.VoidToMapOfString$dynamic = dart.constFn(dart.fnType(T$.MapOfString$dynamic(), [])))(),
    StringToString: () => (T$.StringToString = dart.constFn(dart.fnType(core.String, [core.String])))(),
    JSArrayOfFutureOfvoid: () => (T$.JSArrayOfFutureOfvoid = dart.constFn(_interceptors.JSArray$(T$.FutureOfvoid())))(),
    ParseResponseToFutureOfvoid: () => (T$.ParseResponseToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [parse_server_sdk.ParseResponse])))(),
    LiveQueryClientEventToFutureOfvoid: () => (T$.LiveQueryClientEventToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [parse_server_sdk.LiveQueryClientEvent])))(),
    ParseResponseToNull: () => (T$.ParseResponseToNull = dart.constFn(dart.fnType(core.Null, [parse_server_sdk.ParseResponse])))(),
    FutureOfNull: () => (T$.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    LinkedMapOfPathKey$dynamic: () => (T$.LinkedMapOfPathKey$dynamic = dart.constFn(_js_helper.LinkedMap$(parse_server_sdk.PathKey, dart.dynamic)))(),
    MapOfPathKey$dynamic: () => (T$.MapOfPathKey$dynamic = dart.constFn(core.Map$(parse_server_sdk.PathKey, dart.dynamic)))(),
    VoidToMapOfPathKey$dynamic: () => (T$.VoidToMapOfPathKey$dynamic = dart.constFn(dart.fnType(T$.MapOfPathKey$dynamic(), [])))(),
    ParseObjectToFutureOfNull: () => (T$.ParseObjectToFutureOfNull = dart.constFn(dart.fnType(T$.FutureOfNull(), [parse_server_sdk.ParseObject])))(),
    SubscriptionOfParseObjectToNull: () => (T$.SubscriptionOfParseObjectToNull = dart.constFn(dart.fnType(core.Null, [T$.SubscriptionOfParseObject()])))(),
    VoidTodynamic: () => (T$.VoidTodynamic = dart.constFn(dart.fnType(dart.dynamic, [])))(),
    ParseRelationOfParseObject: () => (T$.ParseRelationOfParseObject = dart.constFn(parse_server_sdk.ParseRelation$(parse_server_sdk.ParseObject)))(),
    dynamicTodynamic: () => (T$.dynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic])))(),
    dynamicAnddynamicTovoid: () => (T$.dynamicAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, dart.dynamic])))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T$);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const(new _js_helper.PrivateSymbol.new('_#Dio#options#isSet', __Dio_options_isSet));
    },
    get C1() {
      return C[1] = dart.const(new _js_helper.PrivateSymbol.new('_#Dio#httpClientAdapter', __Dio_httpClientAdapter));
    },
    get C2() {
      return C[2] = dart.const(new _js_helper.PrivateSymbol.new('_#Dio#httpClientAdapter#isSet', __Dio_httpClientAdapter_isSet));
    },
    get C3() {
      return C[3] = dart.const(new _js_helper.PrivateSymbol.new('_#Dio#transformer#isSet', __Dio_transformer_isSet));
    },
    get C4() {
      return C[4] = dart.const(new _js_helper.PrivateSymbol.new('_#Dio#transformer', __Dio_transformer));
    },
    get C5() {
      return C[5] = dart.const(new _js_helper.PrivateSymbol.new('_#Dio#options', __Dio_options));
    },
    get C6() {
      return C[6] = dart.const(new _js_helper.PrivateSymbol.new('_#Dio#options#isSet=', __Dio_options_isSet_));
    },
    get C7() {
      return C[7] = dart.const(new _js_helper.PrivateSymbol.new('_#Dio#httpClientAdapter=', __Dio_httpClientAdapter_));
    },
    get C8() {
      return C[8] = dart.const(new _js_helper.PrivateSymbol.new('_#Dio#httpClientAdapter#isSet=', __Dio_httpClientAdapter_isSet_));
    },
    get C9() {
      return C[9] = dart.const(new _js_helper.PrivateSymbol.new('_#Dio#transformer#isSet=', __Dio_transformer_isSet_));
    },
    get C10() {
      return C[10] = dart.const(new _js_helper.PrivateSymbol.new('_#Dio#transformer=', __Dio_transformer_));
    },
    get C11() {
      return C[11] = dart.const(new _js_helper.PrivateSymbol.new('_#Dio#options=', __Dio_options_));
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.healthCheck",
        index: 0
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.get",
        index: 1
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.getAll",
        index: 2
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.unset",
        index: 3
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.create",
        index: 4
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.save",
        index: 5
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.query",
        index: 6
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.delete",
        index: 7
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.currentUser",
        index: 8
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.signUp",
        index: 9
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.login",
        index: 10
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.logout",
        index: 11
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.loginAnonymous",
        index: 12
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.loginWith",
        index: 13
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.verificationEmailRequest",
        index: 14
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.requestPasswordReset",
        index: 15
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.destroy",
        index: 16
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.all",
        index: 17
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.execute",
        index: 18
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.executeObjectionFunction",
        index: 19
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.upload",
        index: 20
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.add",
        index: 21
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.addAll",
        index: 22
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.addUnique",
        index: 23
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.remove",
        index: 24
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.removeAll",
        index: 25
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.increment",
        index: 26
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.decrement",
        index: 27
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.getConfigs",
        index: 28
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.addConfig",
        index: 29
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.liveQuery",
        index: 30
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: parse_server_sdk.ParseApiRQ.prototype,
        [_name$]: "ParseApiRQ.batch",
        index: 31
      });
    },
    get C44() {
      return C[44] = dart.constList([C[12] || CT.C12, C[13] || CT.C13, C[14] || CT.C14, C[15] || CT.C15, C[16] || CT.C16, C[17] || CT.C17, C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20, C[21] || CT.C21, C[22] || CT.C22, C[23] || CT.C23, C[24] || CT.C24, C[25] || CT.C25, C[26] || CT.C26, C[27] || CT.C27, C[28] || CT.C28, C[29] || CT.C29, C[30] || CT.C30, C[31] || CT.C31, C[32] || CT.C32, C[33] || CT.C33, C[34] || CT.C34, C[35] || CT.C35, C[36] || CT.C36, C[37] || CT.C37, C[38] || CT.C38, C[39] || CT.C39, C[40] || CT.C40, C[41] || CT.C41, C[42] || CT.C42, C[43] || CT.C43], T$.ParseApiRQL());
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: parse_server_sdk.ParseNetworkResponseType.prototype,
        [_name$]: "ParseNetworkResponseType.json",
        index: 0
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: parse_server_sdk.ParseNetworkResponseType.prototype,
        [_name$]: "ParseNetworkResponseType.stream",
        index: 1
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: parse_server_sdk.ParseNetworkResponseType.prototype,
        [_name$]: "ParseNetworkResponseType.plain",
        index: 2
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: parse_server_sdk.ParseNetworkResponseType.prototype,
        [_name$]: "ParseNetworkResponseType.bytes",
        index: 3
      });
    },
    get C49() {
      return C[49] = dart.constList([C[45] || CT.C45, C[46] || CT.C46, C[47] || CT.C47, C[48] || CT.C48], T$.ParseNetworkResponseTypeL());
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: parse_server_sdk.ParseConnectivityResult.prototype,
        [_name$]: "ParseConnectivityResult.wifi",
        index: 0
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: parse_server_sdk.ParseConnectivityResult.prototype,
        [_name$]: "ParseConnectivityResult.mobile",
        index: 1
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: parse_server_sdk.ParseConnectivityResult.prototype,
        [_name$]: "ParseConnectivityResult.none",
        index: 2
      });
    },
    get C53() {
      return C[53] = dart.constList([C[50] || CT.C50, C[51] || CT.C51, C[52] || CT.C52], T$.ParseConnectivityResultL());
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: parse_server_sdk.LiveQueryEvent.prototype,
        [_name$]: "LiveQueryEvent.create",
        index: 0
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: parse_server_sdk.LiveQueryEvent.prototype,
        [_name$]: "LiveQueryEvent.enter",
        index: 1
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: parse_server_sdk.LiveQueryEvent.prototype,
        [_name$]: "LiveQueryEvent.update",
        index: 2
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: parse_server_sdk.LiveQueryEvent.prototype,
        [_name$]: "LiveQueryEvent.leave",
        index: 3
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: parse_server_sdk.LiveQueryEvent.prototype,
        [_name$]: "LiveQueryEvent.delete",
        index: 4
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: parse_server_sdk.LiveQueryEvent.prototype,
        [_name$]: "LiveQueryEvent.error",
        index: 5
      });
    },
    get C60() {
      return C[60] = dart.constList([C[54] || CT.C54, C[55] || CT.C55, C[56] || CT.C56, C[57] || CT.C57, C[58] || CT.C58, C[59] || CT.C59], T$.LiveQueryEventL());
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: parse_server_sdk.LiveQueryClientEvent.prototype,
        [_name$]: "LiveQueryClientEvent.CONNECTED",
        index: 0
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: parse_server_sdk.LiveQueryClientEvent.prototype,
        [_name$]: "LiveQueryClientEvent.DISCONNECTED",
        index: 1
      });
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: parse_server_sdk.LiveQueryClientEvent.prototype,
        [_name$]: "LiveQueryClientEvent.USER_DISCONNECTED",
        index: 2
      });
    },
    get C64() {
      return C[64] = dart.constList([C[61] || CT.C61, C[62] || CT.C62, C[63] || CT.C63], T$.LiveQueryClientEventL());
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: uuid.Uuid.prototype,
        [Uuid_options]: null
      });
    },
    get C66() {
      return C[66] = dart.constList([], T$.StringL());
    }
  }, false);
  var C = Array(67).fill(void 0);
  var I = [
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/network/parse_dio_client.dart",
    "package:parse_server_sdk/parse_server_sdk.dart",
    "package:parse_server_sdk/src/network/parse_dio_client.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/network/parse_http_client.dart",
    "package:parse_server_sdk/src/network/parse_http_client.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/parse_server_sdk.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/data/parse_core_data.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/data/parse_subclass_handler.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/enums/parse_enum_api_rq.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/network/options.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/network/parse_client.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/network/parse_connectivity.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/network/parse_live_query.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/network/parse_query.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/objects/parse_acl.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/objects/parse_base.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/objects/parse_config.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/objects/parse_object.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/objects/parse_error.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/objects/parse_file_base.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/objects/parse_file_web.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/objects/parse_function.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/objects/parse_geo_point.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/objects/parse_installation.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/objects/parse_relation.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/objects/parse_session.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/objects/parse_user.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/objects/response/parse_response_builder.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/storage/core_store_memory.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/storage/core_store_sem_impl.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/storage/xxtea_codec.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/utils/parse_date_format.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/utils/parse_live_list.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/objects/response/parse_error_response.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/objects/response/parse_exception_response.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/objects/response/parse_response_utils.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/objects/response/parse_success_no_results.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/utils/parse_decoder.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/utils/parse_encoder.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/utils/parse_logger.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/utils/parse_login_helpers.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/parse_server_sdk-3.0.0/lib/src/utils/parse_utils.dart"
  ];
  var __ParseDioClient__client = dart.privateName(parse_dio_client, "_#ParseDioClient#_client");
  var __ParseDioClient__client_isSet = dart.privateName(parse_dio_client, "_#ParseDioClient#_client#isSet");
  var _client = dart.privateName(parse_dio_client, "_client");
  parse_server_sdk.ParseClient = class ParseClient extends core.Object {
    get data() {
      return parse_server_sdk.ParseCoreData.new();
    }
  };
  (parse_server_sdk.ParseClient.new = function() {
    ;
  }).prototype = parse_server_sdk.ParseClient.prototype;
  dart.addTypeTests(parse_server_sdk.ParseClient);
  dart.addTypeCaches(parse_server_sdk.ParseClient);
  dart.setGetterSignature(parse_server_sdk.ParseClient, () => ({
    __proto__: dart.getGetters(parse_server_sdk.ParseClient.__proto__),
    data: parse_server_sdk.ParseCoreData
  }));
  dart.setLibraryUri(parse_server_sdk.ParseClient, I[1]);
  parse_dio_client.ParseDioClient = class ParseDioClient extends parse_server_sdk.ParseClient {
    get [_client]() {
      let t0;
      return dart.test(this[__ParseDioClient__client_isSet]) ? (t0 = this[__ParseDioClient__client], t0) : dart.throw(new _internal.LateError.fieldNI("_client"));
    }
    set [_client](t0) {
      if (t0 == null) dart.nullFailed(I[0], 17, 24, "null");
      this[__ParseDioClient__client_isSet] = true;
      this[__ParseDioClient__client] = t0;
    }
    get(path, opts) {
      if (path == null) dart.nullFailed(I[0], 21, 12, "path");
      let options = opts && 'options' in opts ? opts.options : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      return async.async(parse_server_sdk.ParseNetworkResponse, (function* get() {
        let t1, t2;
        try {
          let dioResponse = (yield this[_client].get(core.String, path, {options: new parse_dio_client._Options.new({headers: (t1 = options, t1 == null ? null : t1.headers)})}));
          return new parse_server_sdk.ParseNetworkResponse.new({data: dart.nullCheck(dioResponse.data), statusCode: dart.nullCheck(dioResponse.statusCode)});
        } catch (e) {
          let error = dart.getThrown(e);
          if (dio_error.DioError.is(error)) {
            return new parse_server_sdk.ParseNetworkResponse.new({data: core.String.as((t2 = error.response, t2 == null ? null : t2.data)), statusCode: dart.nullCheck(dart.nullCheck(error.response).statusCode)});
          } else
            throw e;
        }
      }).bind(this));
    }
    getBytes(path, opts) {
      if (path == null) dart.nullFailed(I[0], 40, 12, "path");
      let options = opts && 'options' in opts ? opts.options : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      return async.async(parse_server_sdk.ParseNetworkByteResponse, (function* getBytes() {
        let t2, t3;
        try {
          let dioResponse = (yield this[_client].get(T$.ListOfint(), path, {options: new parse_dio_client._Options.new({headers: (t2 = options, t2 == null ? null : t2.headers), responseType: options$.ResponseType.bytes})}));
          return new parse_server_sdk.ParseNetworkByteResponse.new({bytes: dioResponse.data, statusCode: dart.nullCheck(dioResponse.statusCode)});
        } catch (e) {
          let error = dart.getThrown(e);
          if (dio_error.DioError.is(error)) {
            return new parse_server_sdk.ParseNetworkByteResponse.new({data: core.String.as((t3 = error.response, t3 == null ? null : t3.data)), statusCode: dart.nullCheck(dart.nullCheck(error.response).statusCode)});
          } else
            throw e;
        }
      }).bind(this));
    }
    put(path, opts) {
      if (path == null) dart.nullFailed(I[0], 59, 43, "path");
      let data = opts && 'data' in opts ? opts.data : null;
      let options = opts && 'options' in opts ? opts.options : null;
      return async.async(parse_server_sdk.ParseNetworkResponse, (function* put() {
        let t3, t4;
        try {
          let dioResponse = (yield this[_client].put(core.String, path, {data: data, options: new parse_dio_client._Options.new({headers: (t3 = options, t3 == null ? null : t3.headers)})}));
          return new parse_server_sdk.ParseNetworkResponse.new({data: dart.nullCheck(dioResponse.data), statusCode: dart.nullCheck(dioResponse.statusCode)});
        } catch (e) {
          let error = dart.getThrown(e);
          if (dio_error.DioError.is(error)) {
            return new parse_server_sdk.ParseNetworkResponse.new({data: core.String.as((t4 = error.response, t4 == null ? null : t4.data)), statusCode: dart.nullCheck(dart.nullCheck(error.response).statusCode)});
          } else
            throw e;
        }
      }).bind(this));
    }
    post(path, opts) {
      if (path == null) dart.nullFailed(I[0], 76, 44, "path");
      let data = opts && 'data' in opts ? opts.data : null;
      let options = opts && 'options' in opts ? opts.options : null;
      return async.async(parse_server_sdk.ParseNetworkResponse, (function* post() {
        let t4, t5;
        try {
          let dioResponse = (yield this[_client].post(core.String, path, {data: data, options: new parse_dio_client._Options.new({headers: (t4 = options, t4 == null ? null : t4.headers)})}));
          return new parse_server_sdk.ParseNetworkResponse.new({data: dart.nullCheck(dioResponse.data), statusCode: dart.nullCheck(dioResponse.statusCode)});
        } catch (e) {
          let error = dart.getThrown(e);
          if (dio_error.DioError.is(error)) {
            return new parse_server_sdk.ParseNetworkResponse.new({data: core.String.as((t5 = error.response, t5 == null ? null : t5.data)), statusCode: dart.nullCheck(dart.nullCheck(error.response).statusCode)});
          } else
            throw e;
        }
      }).bind(this));
    }
    postBytes(path, opts) {
      if (path == null) dart.nullFailed(I[0], 93, 49, "path");
      let data = opts && 'data' in opts ? opts.data : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
      return async.async(parse_server_sdk.ParseNetworkResponse, (function* postBytes() {
        let t5, t6;
        try {
          let dioResponse = (yield this[_client].post(core.String, path, {data: data, options: new parse_dio_client._Options.new({headers: (t5 = options, t5 == null ? null : t5.headers)}), onSendProgress: onSendProgress}));
          return new parse_server_sdk.ParseNetworkResponse.new({data: dart.nullCheck(dioResponse.data), statusCode: dart.nullCheck(dioResponse.statusCode)});
        } catch (e) {
          let error = dart.getThrown(e);
          if (dio_error.DioError.is(error)) {
            return new parse_server_sdk.ParseNetworkResponse.new({data: core.String.as((t6 = error.response, t6 == null ? null : t6.data)), statusCode: dart.nullCheck(dart.nullCheck(error.response).statusCode)});
          } else
            throw e;
        }
      }).bind(this));
    }
    delete(path, opts) {
      if (path == null) dart.nullFailed(I[0], 113, 46, "path");
      let options = opts && 'options' in opts ? opts.options : null;
      return async.async(parse_server_sdk.ParseNetworkResponse, (function* $delete() {
        let t6, t7;
        try {
          let dioResponse = (yield this[_client].delete(core.String, path, {options: new parse_dio_client._Options.new({headers: (t6 = options, t6 == null ? null : t6.headers)})}));
          return new parse_server_sdk.ParseNetworkResponse.new({data: dart.nullCheck(dioResponse.data), statusCode: dart.nullCheck(dioResponse.statusCode)});
        } catch (e) {
          let error = dart.getThrown(e);
          if (dio_error.DioError.is(error)) {
            return new parse_server_sdk.ParseNetworkResponse.new({data: core.String.as((t7 = error.response, t7 == null ? null : t7.data)), statusCode: dart.nullCheck(dart.nullCheck(error.response).statusCode)});
          } else
            throw e;
        }
      }).bind(this));
    }
  };
  (parse_dio_client.ParseDioClient.new = function(opts) {
    let sendSessionId = opts && 'sendSessionId' in opts ? opts.sendSessionId : false;
    if (sendSessionId == null) dart.nullFailed(I[0], 10, 13, "sendSessionId");
    let securityContext = opts && 'securityContext' in opts ? opts.securityContext : null;
    this[__ParseDioClient__client] = null;
    this[__ParseDioClient__client_isSet] = false;
    this[_client] = new parse_dio_client._ParseDioClient.new({sendSessionId: sendSessionId, securityContext: securityContext});
  }).prototype = parse_dio_client.ParseDioClient.prototype;
  dart.addTypeTests(parse_dio_client.ParseDioClient);
  dart.addTypeCaches(parse_dio_client.ParseDioClient);
  dart.setMethodSignature(parse_dio_client.ParseDioClient, () => ({
    __proto__: dart.getMethods(parse_dio_client.ParseDioClient.__proto__),
    get: dart.fnType(async.Future$(parse_server_sdk.ParseNetworkResponse), [core.String], {onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(parse_server_sdk.ParseNetworkOptions)}, {}),
    getBytes: dart.fnType(async.Future$(parse_server_sdk.ParseNetworkByteResponse), [core.String], {onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(parse_server_sdk.ParseNetworkOptions)}, {}),
    put: dart.fnType(async.Future$(parse_server_sdk.ParseNetworkResponse), [core.String], {data: dart.nullable(core.String), options: dart.nullable(parse_server_sdk.ParseNetworkOptions)}, {}),
    post: dart.fnType(async.Future$(parse_server_sdk.ParseNetworkResponse), [core.String], {data: dart.nullable(core.String), options: dart.nullable(parse_server_sdk.ParseNetworkOptions)}, {}),
    postBytes: dart.fnType(async.Future$(parse_server_sdk.ParseNetworkResponse), [core.String], {data: dart.nullable(async.Stream$(core.List$(core.int))), onSendProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(parse_server_sdk.ParseNetworkOptions)}, {}),
    delete: dart.fnType(async.Future$(parse_server_sdk.ParseNetworkResponse), [core.String], {options: dart.nullable(parse_server_sdk.ParseNetworkOptions)}, {})
  }));
  dart.setGetterSignature(parse_dio_client.ParseDioClient, () => ({
    __proto__: dart.getGetters(parse_dio_client.ParseDioClient.__proto__),
    [_client]: parse_dio_client._ParseDioClient
  }));
  dart.setSetterSignature(parse_dio_client.ParseDioClient, () => ({
    __proto__: dart.getSetters(parse_dio_client.ParseDioClient.__proto__),
    [_client]: parse_dio_client._ParseDioClient
  }));
  dart.setLibraryUri(parse_dio_client.ParseDioClient, I[2]);
  dart.setFieldSignature(parse_dio_client.ParseDioClient, () => ({
    __proto__: dart.getFields(parse_dio_client.ParseDioClient.__proto__),
    [__ParseDioClient__client]: dart.fieldType(dart.nullable(parse_dio_client._ParseDioClient)),
    [__ParseDioClient__client_isSet]: dart.fieldType(core.bool)
  }));
  var _userAgent = dart.privateName(parse_dio_client, "_userAgent");
  var _sendSessionId = dart.privateName(parse_dio_client, "_sendSessionId");
  var _logCUrl = dart.privateName(parse_dio_client, "_logCUrl");
  var __Dio_options_isSet = dart.privateName(parse_dio_client, "_#Dio#options#isSet");
  var __Dio_options_isSet$ = dart.privateName(dio, "_#Dio#options#isSet");
  var __Dio_httpClientAdapter = dart.privateName(parse_dio_client, "_#Dio#httpClientAdapter");
  var __Dio_httpClientAdapter$ = dart.privateName(dio, "_#Dio#httpClientAdapter");
  var __Dio_httpClientAdapter_isSet = dart.privateName(parse_dio_client, "_#Dio#httpClientAdapter#isSet");
  var __Dio_httpClientAdapter_isSet$ = dart.privateName(dio, "_#Dio#httpClientAdapter#isSet");
  var __Dio_transformer_isSet = dart.privateName(parse_dio_client, "_#Dio#transformer#isSet");
  var __Dio_transformer_isSet$ = dart.privateName(dio, "_#Dio#transformer#isSet");
  var __Dio_transformer = dart.privateName(parse_dio_client, "_#Dio#transformer");
  var __Dio_transformer$ = dart.privateName(dio, "_#Dio#transformer");
  var __Dio_options = dart.privateName(parse_dio_client, "_#Dio#options");
  var __Dio_options$ = dart.privateName(dio, "_#Dio#options");
  var __Dio_options_isSet_ = dart.privateName(parse_dio_client, "_#Dio#options#isSet=");
  var __Dio_httpClientAdapter_ = dart.privateName(parse_dio_client, "_#Dio#httpClientAdapter=");
  var __Dio_httpClientAdapter_isSet_ = dart.privateName(parse_dio_client, "_#Dio#httpClientAdapter#isSet=");
  var __Dio_transformer_isSet_ = dart.privateName(parse_dio_client, "_#Dio#transformer#isSet=");
  var __Dio_transformer_ = dart.privateName(parse_dio_client, "_#Dio#transformer=");
  var __Dio_options_ = dart.privateName(parse_dio_client, "_#Dio#options=");
  const Object_DioMixin$36 = class Object_DioMixin extends core.Object {};
  (Object_DioMixin$36.new = function() {
    dio_mixin.DioMixin.new.call(this);
  }).prototype = Object_DioMixin$36.prototype;
  dart.applyMixin(Object_DioMixin$36, dio_mixin.DioMixin);
  parse_dio_client._ParseDioClient = class _ParseDioClient extends Object_DioMixin$36 {
    request(T, path, opts) {
      let t7;
      if (path == null) dart.nullFailed(I[0], 145, 12, "path");
      let data = opts && 'data' in opts ? opts.data : null;
      let queryParameters = opts && 'queryParameters' in opts ? opts.queryParameters : null;
      let cancelToken = opts && 'cancelToken' in opts ? opts.cancelToken : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      options == null ? options = new options$.Options.new() : null;
      t7 = options;
      t7.headers == null ? t7.headers = new (T$.IdentityMapOfString$dynamic()).new() : null;
      if (0 !== 0.0) {
        dart.nullCheck(options.headers)[$_set]("user-agent", this[_userAgent]);
      }
      dart.nullCheck(options.headers)[$_set]("X-Parse-Application-Id", this.parseCoreData.applicationId);
      if (dart.test(this[_sendSessionId]) && this.parseCoreData.sessionId != null && dart.nullCheck(options.headers)[$_get]("X-Parse-Session-Token") == null) dart.nullCheck(options.headers)[$_set]("X-Parse-Session-Token", this.parseCoreData.sessionId);
      if (this.parseCoreData.clientKey != null) dart.nullCheck(options.headers)[$_set]("X-Parse-Client-Key", this.parseCoreData.clientKey);
      if (this.parseCoreData.masterKey != null) dart.nullCheck(options.headers)[$_set]("X-Parse-Master-Key", this.parseCoreData.masterKey);
      if (this.additionalHeaders != null && dart.test(dart.nullCheck(this.additionalHeaders)[$isNotEmpty])) {
        dart.nullCheck(this.additionalHeaders)[$forEach](dart.fn((key, value) => {
          let t9, t8, t7;
          if (key == null) dart.nullFailed(I[0], 172, 28, "key");
          if (value == null) dart.nullFailed(I[0], 172, 40, "value");
          t7 = dart.nullCheck(dart.nullCheck(options).headers);
          t8 = key;
          t9 = value;
          t7[$_set](t8, t9);
          return t9;
        }, T$.StringAndStringTovoid()));
      }
      if (dart.test(this.parseCoreData.debug)) {
        this[_logCUrl](options, data, path);
      }
      return super.request(T, path, {data: data, queryParameters: queryParameters, cancelToken: cancelToken, options: options, onSendProgress: onSendProgress, onReceiveProgress: onReceiveProgress});
    }
    [_logCUrl](options, data, url) {
      if (options == null) dart.nullFailed(I[0], 190, 29, "options");
      if (url == null) dart.nullFailed(I[0], 190, 59, "url");
      let curlCmd = "curl";
      curlCmd = curlCmd + (" -X " + dart.nullCheck(options.method));
      let compressed = false;
      dart.nullCheck(options.headers)[$forEach](dart.fn((name, value) => {
        let t7;
        if (name == null) dart.nullFailed(I[0], 194, 38, "name");
        if (name[$toLowerCase]() === "accept-encoding" && (t7 = value, t7 == null ? null : dart.toString(t7)[$toLowerCase]()) === "gzip") {
          compressed = true;
        }
        curlCmd = curlCmd + (" -H '" + dart.str(name) + ": " + dart.str(value) + "'");
      }, T$.StringAnddynamicTovoid()));
      curlCmd = curlCmd + ((compressed ? " --compressed " : " ") + dart.notNull(url));
      curlCmd = curlCmd + ("\n\n " + dart.str(core.Uri.decodeFull(url)));
      core.print("╭-- Parse Request");
      core.print(curlCmd);
      core.print("╰--");
    }
    get [__Dio_options_isSet$]() {
      return this[$noSuchMethod](new core._Invocation.getter(C[0] || CT.C0));
    }
    get [__Dio_httpClientAdapter$]() {
      return T$.HttpClientAdapterN().as(this[$noSuchMethod](new core._Invocation.getter(C[1] || CT.C1)));
    }
    get [__Dio_httpClientAdapter_isSet$]() {
      return this[$noSuchMethod](new core._Invocation.getter(C[2] || CT.C2));
    }
    get [__Dio_transformer_isSet$]() {
      return this[$noSuchMethod](new core._Invocation.getter(C[3] || CT.C3));
    }
    get [__Dio_transformer$]() {
      return T$.TransformerN().as(this[$noSuchMethod](new core._Invocation.getter(C[4] || CT.C4)));
    }
    get [__Dio_options$]() {
      return T$.BaseOptionsN().as(this[$noSuchMethod](new core._Invocation.getter(C[5] || CT.C5)));
    }
    set [__Dio_options_isSet$](value) {
      return this[$noSuchMethod](new core._Invocation.setter(C[6] || CT.C6, value));
    }
    set [__Dio_httpClientAdapter$](value) {
      return this[$noSuchMethod](new core._Invocation.setter(C[7] || CT.C7, value));
    }
    set [__Dio_httpClientAdapter_isSet$](value) {
      return this[$noSuchMethod](new core._Invocation.setter(C[8] || CT.C8, value));
    }
    set [__Dio_transformer_isSet$](value) {
      return this[$noSuchMethod](new core._Invocation.setter(C[9] || CT.C9, value));
    }
    set [__Dio_transformer$](value) {
      return this[$noSuchMethod](new core._Invocation.setter(C[10] || CT.C10, value));
    }
    set [__Dio_options$](value) {
      return this[$noSuchMethod](new core._Invocation.setter(C[11] || CT.C11, value));
    }
  };
  (parse_dio_client._ParseDioClient.new = function(opts) {
    let sendSessionId = opts && 'sendSessionId' in opts ? opts.sendSessionId : false;
    if (sendSessionId == null) dart.nullFailed(I[0], 131, 25, "sendSessionId");
    let securityContext = opts && 'securityContext' in opts ? opts.securityContext : null;
    this[_userAgent] = "Flutter Parse SDK" + " " + "3.0.0";
    this.parseCoreData = parse_server_sdk.ParseCoreData.new();
    this.additionalHeaders = null;
    this[_sendSessionId] = sendSessionId;
    parse_dio_client._ParseDioClient.__proto__.new.call(this);
    this.options = new options$.BaseOptions.new();
    this.httpClientAdapter = dio_adapter_js.createHttpClientAdapter(securityContext);
  }).prototype = parse_dio_client._ParseDioClient.prototype;
  dart.addTypeTests(parse_dio_client._ParseDioClient);
  dart.addTypeCaches(parse_dio_client._ParseDioClient);
  parse_dio_client._ParseDioClient[dart.implements] = () => [dio.Dio];
  dart.setMethodSignature(parse_dio_client._ParseDioClient, () => ({
    __proto__: dart.getMethods(parse_dio_client._ParseDioClient.__proto__),
    request: dart.gFnType(T => [async.Future$(response.Response$(T)), [core.String], {cancelToken: dart.nullable(cancel_token.CancelToken), data: dart.dynamic, onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), onSendProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(options$.Options), queryParameters: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}], T => [dart.nullable(core.Object)]),
    [_logCUrl]: dart.fnType(dart.void, [options$.Options, dart.dynamic, core.String])
  }));
  dart.setGetterSignature(parse_dio_client._ParseDioClient, () => ({
    __proto__: dart.getGetters(parse_dio_client._ParseDioClient.__proto__),
    [__Dio_options_isSet$]: dart.dynamic,
    [__Dio_httpClientAdapter$]: dart.nullable(adapter.HttpClientAdapter),
    [__Dio_httpClientAdapter_isSet$]: dart.dynamic,
    [__Dio_transformer_isSet$]: dart.dynamic,
    [__Dio_transformer$]: dart.nullable(transformer.Transformer),
    [__Dio_options$]: dart.nullable(options$.BaseOptions)
  }));
  dart.setSetterSignature(parse_dio_client._ParseDioClient, () => ({
    __proto__: dart.getSetters(parse_dio_client._ParseDioClient.__proto__),
    [__Dio_options_isSet$]: dart.dynamic,
    [__Dio_httpClientAdapter$]: dart.nullable(adapter.HttpClientAdapter),
    [__Dio_httpClientAdapter_isSet$]: dart.dynamic,
    [__Dio_transformer_isSet$]: dart.dynamic,
    [__Dio_transformer$]: dart.nullable(transformer.Transformer),
    [__Dio_options$]: dart.nullable(options$.BaseOptions)
  }));
  dart.setLibraryUri(parse_dio_client._ParseDioClient, I[2]);
  dart.setFieldSignature(parse_dio_client._ParseDioClient, () => ({
    __proto__: dart.getFields(parse_dio_client._ParseDioClient.__proto__),
    [_sendSessionId]: dart.finalFieldType(core.bool),
    [_userAgent]: dart.finalFieldType(core.String),
    parseCoreData: dart.fieldType(parse_server_sdk.ParseCoreData),
    additionalHeaders: dart.fieldType(dart.nullable(core.Map$(core.String, core.String)))
  }));
  parse_dio_client._Options = class _Options extends options$.Options {};
  (parse_dio_client._Options.new = function(opts) {
    let t8, t7;
    let method = opts && 'method' in opts ? opts.method : null;
    let sendTimeout = opts && 'sendTimeout' in opts ? opts.sendTimeout : null;
    let receiveTimeout = opts && 'receiveTimeout' in opts ? opts.receiveTimeout : null;
    let extra = opts && 'extra' in opts ? opts.extra : null;
    let headers = opts && 'headers' in opts ? opts.headers : null;
    let responseType = opts && 'responseType' in opts ? opts.responseType : null;
    let contentType = opts && 'contentType' in opts ? opts.contentType : null;
    let validateStatus = opts && 'validateStatus' in opts ? opts.validateStatus : null;
    let receiveDataWhenStatusError = opts && 'receiveDataWhenStatusError' in opts ? opts.receiveDataWhenStatusError : null;
    let followRedirects = opts && 'followRedirects' in opts ? opts.followRedirects : null;
    let maxRedirects = opts && 'maxRedirects' in opts ? opts.maxRedirects : null;
    let requestEncoder = opts && 'requestEncoder' in opts ? opts.requestEncoder : null;
    let responseDecoder = opts && 'responseDecoder' in opts ? opts.responseDecoder : null;
    parse_dio_client._Options.__proto__.new.call(this, {method: method, sendTimeout: sendTimeout, receiveTimeout: receiveTimeout, extra: extra, headers: headers, responseType: responseType, contentType: T$.StringN().as((t7 = contentType, t7 == null ? (t8 = headers, t8 == null ? new (T$.IdentityMapOfString$dynamic()).new() : t8)[$_get]("content-type") : t7)), validateStatus: validateStatus, receiveDataWhenStatusError: receiveDataWhenStatusError, followRedirects: followRedirects, maxRedirects: maxRedirects, requestEncoder: requestEncoder, responseDecoder: responseDecoder});
    ;
  }).prototype = parse_dio_client._Options.prototype;
  dart.addTypeTests(parse_dio_client._Options);
  dart.addTypeCaches(parse_dio_client._Options);
  dart.setLibraryUri(parse_dio_client._Options, I[2]);
  var __ParseHTTPClient__client = dart.privateName(parse_http_client, "_#ParseHTTPClient#_client");
  var __ParseHTTPClient__client_isSet = dart.privateName(parse_http_client, "_#ParseHTTPClient#_client#isSet");
  var _client$ = dart.privateName(parse_http_client, "_client");
  parse_http_client.ParseHTTPClient = class ParseHTTPClient extends parse_server_sdk.ParseClient {
    get [_client$]() {
      let t7;
      return dart.test(this[__ParseHTTPClient__client_isSet]) ? (t7 = this[__ParseHTTPClient__client], t7) : dart.throw(new _internal.LateError.fieldNI("_client"));
    }
    set [_client$](t7) {
      if (t7 == null) dart.nullFailed(I[3], 17, 25, "null");
      this[__ParseHTTPClient__client_isSet] = true;
      this[__ParseHTTPClient__client] = t7;
    }
    get(path, opts) {
      if (path == null) dart.nullFailed(I[3], 21, 12, "path");
      let options = opts && 'options' in opts ? opts.options : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      return async.async(parse_server_sdk.ParseNetworkResponse, (function* get() {
        let t8;
        let response = (yield this[_client$].get(core.Uri.parse(path), {headers: (t8 = options, t8 == null ? null : t8.headers)}));
        return new parse_server_sdk.ParseNetworkResponse.new({data: response.body, statusCode: response.statusCode});
      }).bind(this));
    }
    getBytes(path, opts) {
      if (path == null) dart.nullFailed(I[3], 35, 12, "path");
      let options = opts && 'options' in opts ? opts.options : null;
      let onReceiveProgress = opts && 'onReceiveProgress' in opts ? opts.onReceiveProgress : null;
      return async.async(parse_server_sdk.ParseNetworkByteResponse, (function* getBytes() {
        let t8;
        let response = (yield this[_client$].get(core.Uri.parse(path), {headers: (t8 = options, t8 == null ? null : t8.headers)}));
        return new parse_server_sdk.ParseNetworkByteResponse.new({bytes: response.bodyBytes, statusCode: response.statusCode});
      }).bind(this));
    }
    put(path, opts) {
      if (path == null) dart.nullFailed(I[3], 49, 12, "path");
      let data = opts && 'data' in opts ? opts.data : null;
      let options = opts && 'options' in opts ? opts.options : null;
      return async.async(parse_server_sdk.ParseNetworkResponse, (function* put() {
        let t8;
        let response = (yield this[_client$].put(core.Uri.parse(path), {body: data, headers: (t8 = options, t8 == null ? null : t8.headers)}));
        return new parse_server_sdk.ParseNetworkResponse.new({data: response.body, statusCode: response.statusCode});
      }).bind(this));
    }
    post(path, opts) {
      if (path == null) dart.nullFailed(I[3], 64, 12, "path");
      let data = opts && 'data' in opts ? opts.data : null;
      let options = opts && 'options' in opts ? opts.options : null;
      return async.async(parse_server_sdk.ParseNetworkResponse, (function* post() {
        let t8;
        let response = (yield this[_client$].post(core.Uri.parse(path), {body: data, headers: (t8 = options, t8 == null ? null : t8.headers)}));
        return new parse_server_sdk.ParseNetworkResponse.new({data: response.body, statusCode: response.statusCode});
      }).bind(this));
    }
    postBytes(path, opts) {
      if (path == null) dart.nullFailed(I[3], 79, 12, "path");
      let data = opts && 'data' in opts ? opts.data : null;
      let options = opts && 'options' in opts ? opts.options : null;
      let onSendProgress = opts && 'onSendProgress' in opts ? opts.onSendProgress : null;
      return async.async(parse_server_sdk.ParseNetworkResponse, (function* postBytes() {
        let t8, t8$;
        let response = (yield this[_client$].post(core.Uri.parse(path), {body: (yield (t8 = data, t8 == null ? null : t8.fold(T$.ListOfint(), T$.JSArrayOfint().of([]), dart.fn((previous, element) => {
            let t9;
            if (previous == null) dart.nullFailed(I[3], 88, 22, "previous");
            if (element == null) dart.nullFailed(I[3], 88, 42, "element");
            t9 = previous;
            return (() => {
              t9[$addAll](element);
              return t9;
            })();
          }, T$.ListOfintAndListOfintToListOfint())))), headers: (t8$ = options, t8$ == null ? null : t8$.headers)}));
        return new parse_server_sdk.ParseNetworkResponse.new({data: response.body, statusCode: response.statusCode});
      }).bind(this));
    }
    delete(path, opts) {
      if (path == null) dart.nullFailed(I[3], 96, 46, "path");
      let options = opts && 'options' in opts ? opts.options : null;
      return async.async(parse_server_sdk.ParseNetworkResponse, (function* $delete() {
        let t8;
        let response = (yield this[_client$].delete(core.Uri.parse(path), {headers: (t8 = options, t8 == null ? null : t8.headers)}));
        return new parse_server_sdk.ParseNetworkResponse.new({data: response.body, statusCode: response.statusCode});
      }).bind(this));
    }
  };
  (parse_http_client.ParseHTTPClient.new = function(opts) {
    let sendSessionId = opts && 'sendSessionId' in opts ? opts.sendSessionId : false;
    if (sendSessionId == null) dart.nullFailed(I[3], 10, 13, "sendSessionId");
    let securityContext = opts && 'securityContext' in opts ? opts.securityContext : null;
    this[__ParseHTTPClient__client] = null;
    this[__ParseHTTPClient__client_isSet] = false;
    this[_client$] = new parse_http_client._ParseHTTPClient.new({sendSessionId: sendSessionId, securityContext: securityContext});
  }).prototype = parse_http_client.ParseHTTPClient.prototype;
  dart.addTypeTests(parse_http_client.ParseHTTPClient);
  dart.addTypeCaches(parse_http_client.ParseHTTPClient);
  dart.setMethodSignature(parse_http_client.ParseHTTPClient, () => ({
    __proto__: dart.getMethods(parse_http_client.ParseHTTPClient.__proto__),
    get: dart.fnType(async.Future$(parse_server_sdk.ParseNetworkResponse), [core.String], {onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(parse_server_sdk.ParseNetworkOptions)}, {}),
    getBytes: dart.fnType(async.Future$(parse_server_sdk.ParseNetworkByteResponse), [core.String], {onReceiveProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(parse_server_sdk.ParseNetworkOptions)}, {}),
    put: dart.fnType(async.Future$(parse_server_sdk.ParseNetworkResponse), [core.String], {data: dart.nullable(core.String), options: dart.nullable(parse_server_sdk.ParseNetworkOptions)}, {}),
    post: dart.fnType(async.Future$(parse_server_sdk.ParseNetworkResponse), [core.String], {data: dart.nullable(core.String), options: dart.nullable(parse_server_sdk.ParseNetworkOptions)}, {}),
    postBytes: dart.fnType(async.Future$(parse_server_sdk.ParseNetworkResponse), [core.String], {data: dart.nullable(async.Stream$(core.List$(core.int))), onSendProgress: dart.nullable(dart.fnType(dart.void, [core.int, core.int])), options: dart.nullable(parse_server_sdk.ParseNetworkOptions)}, {}),
    delete: dart.fnType(async.Future$(parse_server_sdk.ParseNetworkResponse), [core.String], {options: dart.nullable(parse_server_sdk.ParseNetworkOptions)}, {})
  }));
  dart.setGetterSignature(parse_http_client.ParseHTTPClient, () => ({
    __proto__: dart.getGetters(parse_http_client.ParseHTTPClient.__proto__),
    [_client$]: parse_http_client._ParseHTTPClient
  }));
  dart.setSetterSignature(parse_http_client.ParseHTTPClient, () => ({
    __proto__: dart.getSetters(parse_http_client.ParseHTTPClient.__proto__),
    [_client$]: parse_http_client._ParseHTTPClient
  }));
  dart.setLibraryUri(parse_http_client.ParseHTTPClient, I[4]);
  dart.setFieldSignature(parse_http_client.ParseHTTPClient, () => ({
    __proto__: dart.getFields(parse_http_client.ParseHTTPClient.__proto__),
    [__ParseHTTPClient__client]: dart.fieldType(dart.nullable(parse_http_client._ParseHTTPClient)),
    [__ParseHTTPClient__client_isSet]: dart.fieldType(core.bool)
  }));
  var _userAgent$ = dart.privateName(parse_http_client, "_userAgent");
  var _sendSessionId$ = dart.privateName(parse_http_client, "_sendSessionId");
  var _logCUrl$ = dart.privateName(parse_http_client, "_logCUrl");
  parse_http_client._ParseHTTPClient = class _ParseHTTPClient extends base_client.BaseClient {
    send(request) {
      if (request == null) dart.nullFailed(I[3], 124, 55, "request");
      if (0 !== 0.0) {
        request.headers[$_set]("user-agent", this[_userAgent$]);
      }
      request.headers[$_set]("X-Parse-Application-Id", this.parseCoreData.applicationId);
      if (dart.test(this[_sendSessionId$]) && this.parseCoreData.sessionId != null && request.headers[$_get]("X-Parse-Session-Token") == null) request.headers[$_set]("X-Parse-Session-Token", dart.nullCheck(this.parseCoreData.sessionId));
      if (this.parseCoreData.clientKey != null) request.headers[$_set]("X-Parse-Client-Key", dart.nullCheck(this.parseCoreData.clientKey));
      if (this.parseCoreData.masterKey != null) request.headers[$_set]("X-Parse-Master-Key", dart.nullCheck(this.parseCoreData.masterKey));
      if (this.additionalHeaders != null && dart.test(dart.nullCheck(this.additionalHeaders)[$isNotEmpty])) {
        dart.nullCheck(this.additionalHeaders)[$forEach](dart.fn((key, value) => {
          let t10, t9, t8;
          if (key == null) dart.nullFailed(I[3], 142, 28, "key");
          if (value == null) dart.nullFailed(I[3], 142, 40, "value");
          t8 = request.headers;
          t9 = key;
          t10 = value;
          t8[$_set](t9, t10);
          return t10;
        }, T$.StringAndStringTovoid()));
      }
      if (dart.test(this.parseCoreData.debug)) {
        this[_logCUrl$](request);
      }
      return this[_client$].send(request);
    }
    [_logCUrl$](request) {
      if (request == null) dart.nullFailed(I[3], 152, 34, "request");
      let curlCmd = "curl";
      curlCmd = curlCmd + (" -X " + dart.notNull(request.method));
      let compressed = false;
      request.headers[$forEach](dart.fn((name, value) => {
        if (name == null) dart.nullFailed(I[3], 156, 37, "name");
        if (value == null) dart.nullFailed(I[3], 156, 50, "value");
        if (name[$toLowerCase]() === "accept-encoding" && value[$toLowerCase]() === "gzip") {
          compressed = true;
        }
        curlCmd = curlCmd + (" -H '" + dart.str(name) + ": " + dart.str(value) + "'");
      }, T$.StringAndStringTovoid()));
      if (request.method === "POST" || request.method === "PUT") {
        if (request$.Request.is(request)) {
          let body = convert.latin1.decode(request.bodyBytes);
          curlCmd = curlCmd + (" -d '" + dart.str(body) + "'");
        }
      }
      curlCmd = curlCmd + ((compressed ? " --compressed " : " ") + dart.notNull(dart.toString(request.url)));
      curlCmd = curlCmd + ("\n\n " + dart.str(core.Uri.decodeFull(dart.toString(request.url))));
      core.print("╭-- Parse Request");
      core.print(curlCmd);
      core.print("╰--");
    }
  };
  (parse_http_client._ParseHTTPClient.new = function(opts) {
    let sendSessionId = opts && 'sendSessionId' in opts ? opts.sendSessionId : false;
    if (sendSessionId == null) dart.nullFailed(I[3], 110, 13, "sendSessionId");
    let securityContext = opts && 'securityContext' in opts ? opts.securityContext : null;
    this[_userAgent$] = "Flutter Parse SDK" + " " + "3.0.0";
    this.parseCoreData = parse_server_sdk.ParseCoreData.new();
    this.additionalHeaders = null;
    this[_sendSessionId$] = sendSessionId;
    this[_client$] = securityContext != null ? new io_client.IOClient.new(_http.HttpClient.new({context: securityContext})) : client.Client.new();
    ;
  }).prototype = parse_http_client._ParseHTTPClient.prototype;
  dart.addTypeTests(parse_http_client._ParseHTTPClient);
  dart.addTypeCaches(parse_http_client._ParseHTTPClient);
  dart.setMethodSignature(parse_http_client._ParseHTTPClient, () => ({
    __proto__: dart.getMethods(parse_http_client._ParseHTTPClient.__proto__),
    send: dart.fnType(async.Future$(streamed_response.StreamedResponse), [base_request.BaseRequest]),
    [_logCUrl$]: dart.fnType(dart.void, [base_request.BaseRequest])
  }));
  dart.setLibraryUri(parse_http_client._ParseHTTPClient, I[4]);
  dart.setFieldSignature(parse_http_client._ParseHTTPClient, () => ({
    __proto__: dart.getFields(parse_http_client._ParseHTTPClient.__proto__),
    [_client$]: dart.finalFieldType(client.Client),
    [_sendSessionId$]: dart.finalFieldType(core.bool),
    [_userAgent$]: dart.finalFieldType(core.String),
    parseCoreData: dart.fieldType(parse_server_sdk.ParseCoreData),
    additionalHeaders: dart.fieldType(dart.nullable(core.Map$(core.String, core.String)))
  }));
  var _hasBeenInitialized = dart.privateName(parse_server_sdk, "_hasBeenInitialized");
  var _name$ = dart.privateName(parse_server_sdk, "_name");
  parse_server_sdk.Parse = class Parse extends core.Object {
    initialize(appId, serverUrl, opts) {
      if (appId == null) dart.nullFailed(I[5], 85, 12, "appId");
      if (serverUrl == null) dart.nullFailed(I[5], 86, 12, "serverUrl");
      let debug = opts && 'debug' in opts ? opts.debug : false;
      if (debug == null) dart.nullFailed(I[5], 87, 10, "debug");
      let appName = opts && 'appName' in opts ? opts.appName : null;
      let appVersion = opts && 'appVersion' in opts ? opts.appVersion : null;
      let appPackageName = opts && 'appPackageName' in opts ? opts.appPackageName : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let liveQueryUrl = opts && 'liveQueryUrl' in opts ? opts.liveQueryUrl : null;
      let clientKey = opts && 'clientKey' in opts ? opts.clientKey : null;
      let masterKey = opts && 'masterKey' in opts ? opts.masterKey : null;
      let sessionId = opts && 'sessionId' in opts ? opts.sessionId : null;
      let autoSendSessionId = opts && 'autoSendSessionId' in opts ? opts.autoSendSessionId : true;
      if (autoSendSessionId == null) dart.nullFailed(I[5], 96, 10, "autoSendSessionId");
      let securityContext = opts && 'securityContext' in opts ? opts.securityContext : null;
      let coreStore = opts && 'coreStore' in opts ? opts.coreStore : null;
      let registeredSubClassMap = opts && 'registeredSubClassMap' in opts ? opts.registeredSubClassMap : null;
      let parseUserConstructor = opts && 'parseUserConstructor' in opts ? opts.parseUserConstructor : null;
      let parseFileConstructor = opts && 'parseFileConstructor' in opts ? opts.parseFileConstructor : null;
      let liveListRetryIntervals = opts && 'liveListRetryIntervals' in opts ? opts.liveListRetryIntervals : null;
      let connectivityProvider = opts && 'connectivityProvider' in opts ? opts.connectivityProvider : null;
      let fileDirectory = opts && 'fileDirectory' in opts ? opts.fileDirectory : null;
      let appResumedStream = opts && 'appResumedStream' in opts ? opts.appResumedStream : null;
      let clientCreator = opts && 'clientCreator' in opts ? opts.clientCreator : null;
      return async.async(parse_server_sdk.Parse, (function* initialize() {
        let url = parse_server_sdk.removeTrailingSlash(serverUrl);
        yield parse_server_sdk.ParseCoreData.init(appId, url, {debug: debug, appName: appName, appVersion: appVersion, appPackageName: appPackageName, locale: locale, liveQueryUrl: liveQueryUrl, masterKey: masterKey, clientKey: clientKey, sessionId: sessionId, autoSendSessionId: autoSendSessionId, securityContext: securityContext, store: coreStore, registeredSubClassMap: registeredSubClassMap, parseUserConstructor: parseUserConstructor, parseFileConstructor: parseFileConstructor, liveListRetryIntervals: liveListRetryIntervals, connectivityProvider: connectivityProvider, fileDirectory: fileDirectory, appResumedStream: appResumedStream, clientCreator: clientCreator});
        this[_hasBeenInitialized] = true;
        return this;
      }).bind(this));
    }
    hasParseBeenInitialized() {
      return this[_hasBeenInitialized];
    }
    healthCheck(opts) {
      let debug = opts && 'debug' in opts ? opts.debug : null;
      let client = opts && 'client' in opts ? opts.client : null;
      let sendSessionIdByDefault = opts && 'sendSessionIdByDefault' in opts ? opts.sendSessionIdByDefault : null;
      return async.async(parse_server_sdk.ParseResponse, function* healthCheck() {
        let t9, t11, t10, t9$, t8;
        let _debug = parse_server_sdk.isDebugEnabled({objectLevelDebug: debug});
        let _client = (t8 = client, t8 == null ? (t9$ = parse_server_sdk.ParseCoreData.new(), t10 = (t9 = sendSessionIdByDefault, t9 == null ? parse_server_sdk.ParseCoreData.new().autoSendSessionId : t9), t11 = parse_server_sdk.ParseCoreData.new().securityContext, t9$.clientCreator({sendSessionId: t10, securityContext: t11})) : t8);
        let type = C[12] || CT.C12;
        try {
          let response = (yield _client.get(dart.str(parse_server_sdk.ParseCoreData.new().serverUrl) + "/health"));
          return parse_server_sdk.handleResponse(parse_server_sdk.Parse, null, response, type, _debug, "parseBase");
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            return parse_server_sdk.handleException(e, type, _debug, "parseBase");
          } else
            throw e$;
        }
      });
    }
  };
  (parse_server_sdk.Parse.new = function() {
    this[_hasBeenInitialized] = false;
    ;
  }).prototype = parse_server_sdk.Parse.prototype;
  dart.addTypeTests(parse_server_sdk.Parse);
  dart.addTypeCaches(parse_server_sdk.Parse);
  dart.setMethodSignature(parse_server_sdk.Parse, () => ({
    __proto__: dart.getMethods(parse_server_sdk.Parse.__proto__),
    initialize: dart.fnType(async.Future$(parse_server_sdk.Parse), [core.String, core.String], {appName: dart.nullable(core.String), appPackageName: dart.nullable(core.String), appResumedStream: dart.nullable(async.Stream$(dart.void)), appVersion: dart.nullable(core.String), autoSendSessionId: core.bool, clientCreator: dart.nullable(dart.fnType(parse_server_sdk.ParseClient, [], {securityContext: dart.nullable(io.SecurityContext)}, {sendSessionId: core.bool})), clientKey: dart.nullable(core.String), connectivityProvider: dart.nullable(parse_server_sdk.ParseConnectivityProvider), coreStore: dart.nullable(parse_server_sdk.CoreStore), debug: core.bool, fileDirectory: dart.nullable(core.String), liveListRetryIntervals: dart.nullable(core.List$(core.int)), liveQueryUrl: dart.nullable(core.String), locale: dart.nullable(core.String), masterKey: dart.nullable(core.String), parseFileConstructor: dart.nullable(dart.fnType(parse_server_sdk.ParseFileBase, [], {name: dart.nullable(core.String), url: dart.nullable(core.String)}, {})), parseUserConstructor: dart.nullable(dart.fnType(parse_server_sdk.ParseUser, [dart.nullable(core.String), dart.nullable(core.String), dart.nullable(core.String)], {client: dart.nullable(parse_server_sdk.ParseClient), debug: dart.nullable(core.bool), sessionToken: dart.nullable(core.String)}, {})), registeredSubClassMap: dart.nullable(core.Map$(core.String, dart.fnType(parse_server_sdk.ParseObject, []))), securityContext: dart.nullable(io.SecurityContext), sessionId: dart.nullable(core.String)}, {}),
    hasParseBeenInitialized: dart.fnType(core.bool, []),
    healthCheck: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), [], {client: dart.nullable(parse_server_sdk.ParseClient), debug: dart.nullable(core.bool), sendSessionIdByDefault: dart.nullable(core.bool)}, {})
  }));
  dart.setLibraryUri(parse_server_sdk.Parse, I[1]);
  dart.setFieldSignature(parse_server_sdk.Parse, () => ({
    __proto__: dart.getFields(parse_server_sdk.Parse.__proto__),
    [_hasBeenInitialized]: dart.fieldType(core.bool)
  }));
  var applicationId$ = dart.privateName(parse_server_sdk, "ParseCoreData.applicationId");
  var serverUrl$ = dart.privateName(parse_server_sdk, "ParseCoreData.serverUrl");
  var appName = dart.privateName(parse_server_sdk, "ParseCoreData.appName");
  var appVersion = dart.privateName(parse_server_sdk, "ParseCoreData.appVersion");
  var appPackageName = dart.privateName(parse_server_sdk, "ParseCoreData.appPackageName");
  var locale = dart.privateName(parse_server_sdk, "ParseCoreData.locale");
  var liveQueryURL = dart.privateName(parse_server_sdk, "ParseCoreData.liveQueryURL");
  var masterKey = dart.privateName(parse_server_sdk, "ParseCoreData.masterKey");
  var clientKey = dart.privateName(parse_server_sdk, "ParseCoreData.clientKey");
  var sessionId = dart.privateName(parse_server_sdk, "ParseCoreData.sessionId");
  var securityContext = dart.privateName(parse_server_sdk, "ParseCoreData.securityContext");
  var connectivityProvider = dart.privateName(parse_server_sdk, "ParseCoreData.connectivityProvider");
  var fileDirectory = dart.privateName(parse_server_sdk, "ParseCoreData.fileDirectory");
  var appResumedStream = dart.privateName(parse_server_sdk, "ParseCoreData.appResumedStream");
  var __ParseCoreData_autoSendSessionId = dart.privateName(parse_server_sdk, "_#ParseCoreData#autoSendSessionId");
  var __ParseCoreData_autoSendSessionId_isSet = dart.privateName(parse_server_sdk, "_#ParseCoreData#autoSendSessionId#isSet");
  var __ParseCoreData_debug = dart.privateName(parse_server_sdk, "_#ParseCoreData#debug");
  var __ParseCoreData_debug_isSet = dart.privateName(parse_server_sdk, "_#ParseCoreData#debug#isSet");
  var __ParseCoreData_storage = dart.privateName(parse_server_sdk, "_#ParseCoreData#storage");
  var __ParseCoreData_storage_isSet = dart.privateName(parse_server_sdk, "_#ParseCoreData#storage#isSet");
  var __ParseCoreData__subClassHandler = dart.privateName(parse_server_sdk, "_#ParseCoreData#_subClassHandler");
  var __ParseCoreData__subClassHandler_isSet = dart.privateName(parse_server_sdk, "_#ParseCoreData#_subClassHandler#isSet");
  var __ParseCoreData_liveListRetryIntervals = dart.privateName(parse_server_sdk, "_#ParseCoreData#liveListRetryIntervals");
  var __ParseCoreData_liveListRetryIntervals_isSet = dart.privateName(parse_server_sdk, "_#ParseCoreData#liveListRetryIntervals#isSet");
  var __ParseCoreData_clientCreator = dart.privateName(parse_server_sdk, "_#ParseCoreData#clientCreator");
  var __ParseCoreData_clientCreator_isSet = dart.privateName(parse_server_sdk, "_#ParseCoreData#clientCreator#isSet");
  var _subClassHandler = dart.privateName(parse_server_sdk, "_subClassHandler");
  parse_server_sdk.ParseCoreData = class ParseCoreData extends core.Object {
    get applicationId() {
      return this[applicationId$];
    }
    set applicationId(value) {
      this[applicationId$] = value;
    }
    get serverUrl() {
      return this[serverUrl$];
    }
    set serverUrl(value) {
      this[serverUrl$] = value;
    }
    get appName() {
      return this[appName];
    }
    set appName(value) {
      this[appName] = value;
    }
    get appVersion() {
      return this[appVersion];
    }
    set appVersion(value) {
      this[appVersion] = value;
    }
    get appPackageName() {
      return this[appPackageName];
    }
    set appPackageName(value) {
      this[appPackageName] = value;
    }
    get locale() {
      return this[locale];
    }
    set locale(value) {
      this[locale] = value;
    }
    get liveQueryURL() {
      return this[liveQueryURL];
    }
    set liveQueryURL(value) {
      this[liveQueryURL] = value;
    }
    get masterKey() {
      return this[masterKey];
    }
    set masterKey(value) {
      this[masterKey] = value;
    }
    get clientKey() {
      return this[clientKey];
    }
    set clientKey(value) {
      this[clientKey] = value;
    }
    get sessionId() {
      return this[sessionId];
    }
    set sessionId(value) {
      this[sessionId] = value;
    }
    get securityContext() {
      return this[securityContext];
    }
    set securityContext(value) {
      this[securityContext] = value;
    }
    get connectivityProvider() {
      return this[connectivityProvider];
    }
    set connectivityProvider(value) {
      this[connectivityProvider] = value;
    }
    get fileDirectory() {
      return this[fileDirectory];
    }
    set fileDirectory(value) {
      this[fileDirectory] = value;
    }
    get appResumedStream() {
      return this[appResumedStream];
    }
    set appResumedStream(value) {
      this[appResumedStream] = value;
    }
    static new() {
      return parse_server_sdk.ParseCoreData._instance;
    }
    static get _instance() {
      let t9;
      return dart.test(parse_server_sdk.ParseCoreData['_#_instance#isSet']) ? (t9 = parse_server_sdk.ParseCoreData['_#_instance'], t9) : dart.throw(new _internal.LateError.fieldNI("_instance"));
    }
    static set _instance(t9) {
      if (t9 == null) dart.nullFailed(I[6], 9, 29, "null");
      parse_server_sdk.ParseCoreData['_#_instance#isSet'] = true;
      parse_server_sdk.ParseCoreData['_#_instance'] = t9;
    }
    static get instance() {
      return parse_server_sdk.ParseCoreData._instance;
    }
    static init(appId, serverUrl, opts) {
      if (appId == null) dart.nullFailed(I[6], 18, 12, "appId");
      if (serverUrl == null) dart.nullFailed(I[6], 19, 12, "serverUrl");
      let debug = opts && 'debug' in opts ? opts.debug : null;
      if (debug == null) dart.nullFailed(I[6], 20, 19, "debug");
      let appName = opts && 'appName' in opts ? opts.appName : null;
      let appVersion = opts && 'appVersion' in opts ? opts.appVersion : null;
      let appPackageName = opts && 'appPackageName' in opts ? opts.appPackageName : null;
      let locale = opts && 'locale' in opts ? opts.locale : null;
      let liveQueryUrl = opts && 'liveQueryUrl' in opts ? opts.liveQueryUrl : null;
      let masterKey = opts && 'masterKey' in opts ? opts.masterKey : null;
      let clientKey = opts && 'clientKey' in opts ? opts.clientKey : null;
      let sessionId = opts && 'sessionId' in opts ? opts.sessionId : null;
      let autoSendSessionId = opts && 'autoSendSessionId' in opts ? opts.autoSendSessionId : null;
      if (autoSendSessionId == null) dart.nullFailed(I[6], 29, 19, "autoSendSessionId");
      let securityContext = opts && 'securityContext' in opts ? opts.securityContext : null;
      let store = opts && 'store' in opts ? opts.store : null;
      let registeredSubClassMap = opts && 'registeredSubClassMap' in opts ? opts.registeredSubClassMap : null;
      let parseUserConstructor = opts && 'parseUserConstructor' in opts ? opts.parseUserConstructor : null;
      let parseFileConstructor = opts && 'parseFileConstructor' in opts ? opts.parseFileConstructor : null;
      let liveListRetryIntervals = opts && 'liveListRetryIntervals' in opts ? opts.liveListRetryIntervals : null;
      let connectivityProvider = opts && 'connectivityProvider' in opts ? opts.connectivityProvider : null;
      let fileDirectory = opts && 'fileDirectory' in opts ? opts.fileDirectory : null;
      let appResumedStream = opts && 'appResumedStream' in opts ? opts.appResumedStream : null;
      let clientCreator = opts && 'clientCreator' in opts ? opts.clientCreator : null;
      return async.async(dart.void, function* init() {
        let t10, t10$, t10$0;
        parse_server_sdk.ParseCoreData._instance = new parse_server_sdk.ParseCoreData._init(appId, serverUrl);
        parse_server_sdk.ParseCoreData._instance.storage = (t10 = store, t10 == null ? new parse_server_sdk.CoreStoreMemoryImp.new() : t10);
        parse_server_sdk.ParseCoreData._instance.debug = debug;
        parse_server_sdk.ParseCoreData._instance.appName = appName;
        parse_server_sdk.ParseCoreData._instance.appVersion = appVersion;
        parse_server_sdk.ParseCoreData._instance.appPackageName = appPackageName;
        parse_server_sdk.ParseCoreData._instance.locale = locale;
        parse_server_sdk.ParseCoreData._instance.liveQueryURL = liveQueryUrl;
        parse_server_sdk.ParseCoreData._instance.clientKey = clientKey;
        parse_server_sdk.ParseCoreData._instance.masterKey = masterKey;
        parse_server_sdk.ParseCoreData._instance.sessionId = sessionId;
        parse_server_sdk.ParseCoreData._instance.autoSendSessionId = autoSendSessionId;
        parse_server_sdk.ParseCoreData._instance.securityContext = securityContext;
        parse_server_sdk.ParseCoreData._instance.liveListRetryIntervals = (t10$ = liveListRetryIntervals, t10$ == null ? true ? T$.JSArrayOfint().of([0, 500, 1000, 2000, 5000]) : T$.JSArrayOfint().of([0, 500, 1000, 2000, 5000, 10000]) : t10$);
        parse_server_sdk.ParseCoreData._instance[_subClassHandler] = new parse_server_sdk.ParseSubClassHandler.new({registeredSubClassMap: registeredSubClassMap, parseUserConstructor: parseUserConstructor, parseFileConstructor: parseFileConstructor});
        parse_server_sdk.ParseCoreData._instance.connectivityProvider = connectivityProvider;
        parse_server_sdk.ParseCoreData._instance.fileDirectory = fileDirectory;
        parse_server_sdk.ParseCoreData._instance.appResumedStream = appResumedStream;
        parse_server_sdk.ParseCoreData._instance.clientCreator = (t10$0 = clientCreator, t10$0 == null ? dart.fn(opts => {
          let securityContext = opts && 'securityContext' in opts ? opts.securityContext : null;
          let sendSessionId = opts && 'sendSessionId' in opts ? opts.sendSessionId : null;
          if (sendSessionId == null) dart.nullFailed(I[6], 68, 26, "sendSessionId");
          return new parse_http_client.ParseHTTPClient.new({sendSessionId: sendSessionId, securityContext: securityContext});
        }, T$.__ToParseHTTPClient()) : t10$0);
      });
    }
    get autoSendSessionId() {
      let t10;
      return dart.test(this[__ParseCoreData_autoSendSessionId_isSet]) ? (t10 = this[__ParseCoreData_autoSendSessionId], t10) : dart.throw(new _internal.LateError.fieldNI("autoSendSessionId"));
    }
    set autoSendSessionId(t10) {
      if (t10 == null) dart.nullFailed(I[6], 83, 13, "null");
      this[__ParseCoreData_autoSendSessionId_isSet] = true;
      this[__ParseCoreData_autoSendSessionId] = t10;
    }
    get debug() {
      let t11;
      return dart.test(this[__ParseCoreData_debug_isSet]) ? (t11 = this[__ParseCoreData_debug], t11) : dart.throw(new _internal.LateError.fieldNI("debug"));
    }
    set debug(t11) {
      if (t11 == null) dart.nullFailed(I[6], 85, 13, "null");
      this[__ParseCoreData_debug_isSet] = true;
      this[__ParseCoreData_debug] = t11;
    }
    get storage() {
      let t12;
      return dart.test(this[__ParseCoreData_storage_isSet]) ? (t12 = this[__ParseCoreData_storage], t12) : dart.throw(new _internal.LateError.fieldNI("storage"));
    }
    set storage(t12) {
      if (t12 == null) dart.nullFailed(I[6], 86, 18, "null");
      this[__ParseCoreData_storage_isSet] = true;
      this[__ParseCoreData_storage] = t12;
    }
    get [_subClassHandler]() {
      let t13;
      return dart.test(this[__ParseCoreData__subClassHandler_isSet]) ? (t13 = this[__ParseCoreData__subClassHandler], t13) : dart.throw(new _internal.LateError.fieldNI("_subClassHandler"));
    }
    set [_subClassHandler](t13) {
      if (t13 == null) dart.nullFailed(I[6], 87, 29, "null");
      this[__ParseCoreData__subClassHandler_isSet] = true;
      this[__ParseCoreData__subClassHandler] = t13;
    }
    get liveListRetryIntervals() {
      let t14;
      return dart.test(this[__ParseCoreData_liveListRetryIntervals_isSet]) ? (t14 = this[__ParseCoreData_liveListRetryIntervals], t14) : dart.throw(new _internal.LateError.fieldNI("liveListRetryIntervals"));
    }
    set liveListRetryIntervals(t14) {
      if (t14 == null) dart.nullFailed(I[6], 88, 18, "null");
      this[__ParseCoreData_liveListRetryIntervals_isSet] = true;
      this[__ParseCoreData_liveListRetryIntervals] = t14;
    }
    get clientCreator() {
      let t15;
      return dart.test(this[__ParseCoreData_clientCreator_isSet]) ? (t15 = this[__ParseCoreData_clientCreator], t15) : dart.throw(new _internal.LateError.fieldNI("clientCreator"));
    }
    set clientCreator(t15) {
      if (t15 == null) dart.nullFailed(I[6], 92, 27, "null");
      this[__ParseCoreData_clientCreator_isSet] = true;
      this[__ParseCoreData_clientCreator] = t15;
    }
    registerSubClass(className, objectConstructor) {
      if (className == null) dart.nullFailed(I[6], 95, 14, "className");
      if (objectConstructor == null) dart.nullFailed(I[6], 95, 48, "objectConstructor");
      this[_subClassHandler].registerSubClass(className, objectConstructor);
    }
    registerUserSubClass(parseUserConstructor) {
      if (parseUserConstructor == null) dart.nullFailed(I[6], 99, 50, "parseUserConstructor");
      this[_subClassHandler].registerUserSubClass(parseUserConstructor);
    }
    registerFileSubClass(parseFileConstructor) {
      if (parseFileConstructor == null) dart.nullFailed(I[6], 103, 50, "parseFileConstructor");
      this[_subClassHandler].registerFileSubClass(parseFileConstructor);
    }
    createObject(classname) {
      if (classname == null) dart.nullFailed(I[6], 107, 35, "classname");
      return this[_subClassHandler].createObject(classname);
    }
    createParseUser(username, password, emailAddress, opts) {
      let sessionToken = opts && 'sessionToken' in opts ? opts.sessionToken : null;
      let debug = opts && 'debug' in opts ? opts.debug : null;
      let client = opts && 'client' in opts ? opts.client : null;
      return this[_subClassHandler].createParseUser(username, password, emailAddress, {sessionToken: sessionToken, debug: debug, client: client});
    }
    createFile(opts) {
      let url = opts && 'url' in opts ? opts.url : null;
      let name = opts && 'name' in opts ? opts.name : null;
      return this[_subClassHandler].createFile({name: name, url: url});
    }
    setSessionId(sessionId) {
      if (sessionId == null) dart.nullFailed(I[6], 125, 28, "sessionId");
      this.sessionId = sessionId;
    }
    getStore() {
      return this.storage;
    }
    toString() {
      return dart.str(this.applicationId) + " " + dart.str(this.masterKey);
    }
  };
  (parse_server_sdk.ParseCoreData._init = function(applicationId, serverUrl) {
    if (applicationId == null) dart.nullFailed(I[6], 7, 28, "applicationId");
    if (serverUrl == null) dart.nullFailed(I[6], 7, 48, "serverUrl");
    this[appName] = null;
    this[appVersion] = null;
    this[appPackageName] = null;
    this[locale] = null;
    this[liveQueryURL] = null;
    this[masterKey] = null;
    this[clientKey] = null;
    this[sessionId] = null;
    this[__ParseCoreData_autoSendSessionId] = null;
    this[__ParseCoreData_autoSendSessionId_isSet] = false;
    this[securityContext] = null;
    this[__ParseCoreData_debug] = null;
    this[__ParseCoreData_debug_isSet] = false;
    this[__ParseCoreData_storage] = null;
    this[__ParseCoreData_storage_isSet] = false;
    this[__ParseCoreData__subClassHandler] = null;
    this[__ParseCoreData__subClassHandler_isSet] = false;
    this[__ParseCoreData_liveListRetryIntervals] = null;
    this[__ParseCoreData_liveListRetryIntervals_isSet] = false;
    this[connectivityProvider] = null;
    this[fileDirectory] = null;
    this[appResumedStream] = null;
    this[__ParseCoreData_clientCreator] = null;
    this[__ParseCoreData_clientCreator_isSet] = false;
    this[applicationId$] = applicationId;
    this[serverUrl$] = serverUrl;
    ;
  }).prototype = parse_server_sdk.ParseCoreData.prototype;
  dart.addTypeTests(parse_server_sdk.ParseCoreData);
  dart.addTypeCaches(parse_server_sdk.ParseCoreData);
  dart.setMethodSignature(parse_server_sdk.ParseCoreData, () => ({
    __proto__: dart.getMethods(parse_server_sdk.ParseCoreData.__proto__),
    registerSubClass: dart.fnType(dart.void, [core.String, dart.fnType(parse_server_sdk.ParseObject, [])]),
    registerUserSubClass: dart.fnType(dart.void, [dart.fnType(parse_server_sdk.ParseUser, [dart.nullable(core.String), dart.nullable(core.String), dart.nullable(core.String)], {client: dart.nullable(parse_server_sdk.ParseClient), debug: dart.nullable(core.bool), sessionToken: dart.nullable(core.String)}, {})]),
    registerFileSubClass: dart.fnType(dart.void, [dart.fnType(parse_server_sdk.ParseFileBase, [], {name: dart.nullable(core.String), url: dart.nullable(core.String)}, {})]),
    createObject: dart.fnType(parse_server_sdk.ParseObject, [core.String]),
    createParseUser: dart.fnType(parse_server_sdk.ParseUser, [dart.nullable(core.String), dart.nullable(core.String), dart.nullable(core.String)], {client: dart.nullable(parse_server_sdk.ParseClient), debug: dart.nullable(core.bool), sessionToken: dart.nullable(core.String)}, {}),
    createFile: dart.fnType(parse_server_sdk.ParseFileBase, [], {name: dart.nullable(core.String), url: dart.nullable(core.String)}, {}),
    setSessionId: dart.fnType(dart.void, [core.String]),
    getStore: dart.fnType(parse_server_sdk.CoreStore, [])
  }));
  dart.setGetterSignature(parse_server_sdk.ParseCoreData, () => ({
    __proto__: dart.getGetters(parse_server_sdk.ParseCoreData.__proto__),
    autoSendSessionId: core.bool,
    debug: core.bool,
    storage: parse_server_sdk.CoreStore,
    [_subClassHandler]: parse_server_sdk.ParseSubClassHandler,
    liveListRetryIntervals: core.List$(core.int),
    clientCreator: dart.fnType(parse_server_sdk.ParseClient, [], {securityContext: dart.nullable(io.SecurityContext)}, {sendSessionId: core.bool})
  }));
  dart.setSetterSignature(parse_server_sdk.ParseCoreData, () => ({
    __proto__: dart.getSetters(parse_server_sdk.ParseCoreData.__proto__),
    autoSendSessionId: core.bool,
    debug: core.bool,
    storage: parse_server_sdk.CoreStore,
    [_subClassHandler]: parse_server_sdk.ParseSubClassHandler,
    liveListRetryIntervals: core.List$(core.int),
    clientCreator: dart.fnType(parse_server_sdk.ParseClient, [], {securityContext: dart.nullable(io.SecurityContext)}, {sendSessionId: core.bool})
  }));
  dart.setLibraryUri(parse_server_sdk.ParseCoreData, I[1]);
  dart.setFieldSignature(parse_server_sdk.ParseCoreData, () => ({
    __proto__: dart.getFields(parse_server_sdk.ParseCoreData.__proto__),
    applicationId: dart.fieldType(core.String),
    serverUrl: dart.fieldType(core.String),
    appName: dart.fieldType(dart.nullable(core.String)),
    appVersion: dart.fieldType(dart.nullable(core.String)),
    appPackageName: dart.fieldType(dart.nullable(core.String)),
    locale: dart.fieldType(dart.nullable(core.String)),
    liveQueryURL: dart.fieldType(dart.nullable(core.String)),
    masterKey: dart.fieldType(dart.nullable(core.String)),
    clientKey: dart.fieldType(dart.nullable(core.String)),
    sessionId: dart.fieldType(dart.nullable(core.String)),
    [__ParseCoreData_autoSendSessionId]: dart.fieldType(dart.nullable(core.bool)),
    [__ParseCoreData_autoSendSessionId_isSet]: dart.fieldType(core.bool),
    securityContext: dart.fieldType(dart.nullable(io.SecurityContext)),
    [__ParseCoreData_debug]: dart.fieldType(dart.nullable(core.bool)),
    [__ParseCoreData_debug_isSet]: dart.fieldType(core.bool),
    [__ParseCoreData_storage]: dart.fieldType(dart.nullable(parse_server_sdk.CoreStore)),
    [__ParseCoreData_storage_isSet]: dart.fieldType(core.bool),
    [__ParseCoreData__subClassHandler]: dart.fieldType(dart.nullable(parse_server_sdk.ParseSubClassHandler)),
    [__ParseCoreData__subClassHandler_isSet]: dart.fieldType(core.bool),
    [__ParseCoreData_liveListRetryIntervals]: dart.fieldType(dart.nullable(core.List$(core.int))),
    [__ParseCoreData_liveListRetryIntervals_isSet]: dart.fieldType(core.bool),
    connectivityProvider: dart.fieldType(dart.nullable(parse_server_sdk.ParseConnectivityProvider)),
    fileDirectory: dart.fieldType(dart.nullable(core.String)),
    appResumedStream: dart.fieldType(dart.nullable(async.Stream$(dart.void))),
    [__ParseCoreData_clientCreator]: dart.fieldType(dart.nullable(dart.fnType(parse_server_sdk.ParseClient, [], {securityContext: dart.nullable(io.SecurityContext)}, {sendSessionId: core.bool}))),
    [__ParseCoreData_clientCreator_isSet]: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(parse_server_sdk.ParseCoreData, ['toString']);
  dart.defineLazy(parse_server_sdk.ParseCoreData, {
    /*parse_server_sdk.ParseCoreData['_#_instance']*/get ['_#_instance']() {
      return null;
    },
    set ['_#_instance'](_) {},
    /*parse_server_sdk.ParseCoreData['_#_instance#isSet']*/get ['_#_instance#isSet']() {
      return false;
    },
    set ['_#_instance#isSet'](_) {}
  }, false);
  var __ParseSubClassHandler__subClassMap = dart.privateName(parse_server_sdk, "_#ParseSubClassHandler#_subClassMap");
  var __ParseSubClassHandler__subClassMap_isSet = dart.privateName(parse_server_sdk, "_#ParseSubClassHandler#_subClassMap#isSet");
  var _parseUserConstructor = dart.privateName(parse_server_sdk, "_parseUserConstructor");
  var _parseFileConstructor = dart.privateName(parse_server_sdk, "_parseFileConstructor");
  var _subClassMap = dart.privateName(parse_server_sdk, "_subClassMap");
  parse_server_sdk.ParseSubClassHandler = class ParseSubClassHandler extends core.Object {
    get [_subClassMap]() {
      let t16;
      return dart.test(this[__ParseSubClassHandler__subClassMap_isSet]) ? (t16 = this[__ParseSubClassHandler__subClassMap], t16) : dart.throw(new _internal.LateError.fieldNI("_subClassMap"));
    }
    set [_subClassMap](t16) {
      if (t16 == null) dart.nullFailed(I[7], 22, 44, "null");
      this[__ParseSubClassHandler__subClassMap_isSet] = true;
      this[__ParseSubClassHandler__subClassMap] = t16;
    }
    registerSubClass(className, objectConstructor) {
      if (className == null) dart.nullFailed(I[7], 33, 14, "className");
      if (objectConstructor == null) dart.nullFailed(I[7], 33, 48, "objectConstructor");
      if (className !== "_User" && className !== "_Installation" && className !== "_Session" && className !== "ParseFile") this[_subClassMap][$_set](className, objectConstructor);
    }
    registerUserSubClass(parseUserConstructor) {
      if (parseUserConstructor == null) dart.nullFailed(I[7], 41, 50, "parseUserConstructor");
      this[_parseUserConstructor] = parseUserConstructor;
    }
    registerFileSubClass(parseFileConstructor) {
      if (parseFileConstructor == null) dart.nullFailed(I[7], 45, 50, "parseFileConstructor");
      this[_parseFileConstructor] = parseFileConstructor;
    }
    createObject(classname) {
      if (classname == null) dart.nullFailed(I[7], 49, 35, "classname");
      if (classname === "_User") {
        return this.createParseUser(null, null, null);
      }
      if (dart.test(this[_subClassMap][$containsKey](classname))) {
        return dart.nullCheck(this[_subClassMap][$_get](classname))();
      }
      return new parse_server_sdk.ParseObject.new(classname);
    }
    createParseUser(username, password, emailAddress, opts) {
      let sessionToken = opts && 'sessionToken' in opts ? opts.sessionToken : null;
      let debug = opts && 'debug' in opts ? opts.debug : null;
      let client = opts && 'client' in opts ? opts.client : null;
      return this[_parseUserConstructor] != null ? dart.nullCheck(this[_parseUserConstructor])(username, password, emailAddress, {sessionToken: sessionToken, debug: debug, client: client}) : new parse_server_sdk.ParseUser.new(username, password, emailAddress, {sessionToken: sessionToken, debug: debug, client: client});
    }
    createFile(opts) {
      let t18, t17;
      let name = opts && 'name' in opts ? opts.name : null;
      let url = opts && 'url' in opts ? opts.url : null;
      t17 = name;
      t18 = url;
      return this[_parseFileConstructor]({name: t17, url: t18});
    }
  };
  (parse_server_sdk.ParseSubClassHandler.new = function(opts) {
    let t16;
    let registeredSubClassMap = opts && 'registeredSubClassMap' in opts ? opts.registeredSubClassMap : null;
    let parseUserConstructor = opts && 'parseUserConstructor' in opts ? opts.parseUserConstructor : null;
    let parseFileConstructor = opts && 'parseFileConstructor' in opts ? opts.parseFileConstructor : null;
    this[__ParseSubClassHandler__subClassMap] = null;
    this[__ParseSubClassHandler__subClassMap_isSet] = false;
    this[_parseUserConstructor] = null;
    this[_parseFileConstructor] = dart.fn(opts => {
      let name = opts && 'name' in opts ? opts.name : null;
      let url = opts && 'url' in opts ? opts.url : null;
      if (true) {
        return new parse_server_sdk.ParseWebFile.new(null, {name: dart.nullCheck(name), url: url});
      } else {
        return new parse_server_sdk.ParseFile.new(null, {name: name, url: url});
      }
    }, T$.__ToParseFileBase());
    this[_subClassMap] = (t16 = registeredSubClassMap, t16 == null ? new (T$.LinkedMapOfString$VoidToParseObject()).new() : t16);
    this[_parseUserConstructor] = parseUserConstructor;
    if (parseFileConstructor != null) this[_parseFileConstructor] = parseFileConstructor;
  }).prototype = parse_server_sdk.ParseSubClassHandler.prototype;
  dart.addTypeTests(parse_server_sdk.ParseSubClassHandler);
  dart.addTypeCaches(parse_server_sdk.ParseSubClassHandler);
  dart.setMethodSignature(parse_server_sdk.ParseSubClassHandler, () => ({
    __proto__: dart.getMethods(parse_server_sdk.ParseSubClassHandler.__proto__),
    registerSubClass: dart.fnType(dart.void, [core.String, dart.fnType(parse_server_sdk.ParseObject, [])]),
    registerUserSubClass: dart.fnType(dart.void, [dart.fnType(parse_server_sdk.ParseUser, [dart.nullable(core.String), dart.nullable(core.String), dart.nullable(core.String)], {client: dart.nullable(parse_server_sdk.ParseClient), debug: dart.nullable(core.bool), sessionToken: dart.nullable(core.String)}, {})]),
    registerFileSubClass: dart.fnType(dart.void, [dart.fnType(parse_server_sdk.ParseFileBase, [], {name: dart.nullable(core.String), url: dart.nullable(core.String)}, {})]),
    createObject: dart.fnType(parse_server_sdk.ParseObject, [core.String]),
    createParseUser: dart.fnType(parse_server_sdk.ParseUser, [dart.nullable(core.String), dart.nullable(core.String), dart.nullable(core.String)], {client: dart.nullable(parse_server_sdk.ParseClient), debug: dart.nullable(core.bool), sessionToken: dart.nullable(core.String)}, {}),
    createFile: dart.fnType(parse_server_sdk.ParseFileBase, [], {name: dart.nullable(core.String), url: dart.nullable(core.String)}, {})
  }));
  dart.setGetterSignature(parse_server_sdk.ParseSubClassHandler, () => ({
    __proto__: dart.getGetters(parse_server_sdk.ParseSubClassHandler.__proto__),
    [_subClassMap]: core.Map$(core.String, dart.fnType(parse_server_sdk.ParseObject, []))
  }));
  dart.setSetterSignature(parse_server_sdk.ParseSubClassHandler, () => ({
    __proto__: dart.getSetters(parse_server_sdk.ParseSubClassHandler.__proto__),
    [_subClassMap]: core.Map$(core.String, dart.fnType(parse_server_sdk.ParseObject, []))
  }));
  dart.setLibraryUri(parse_server_sdk.ParseSubClassHandler, I[1]);
  dart.setFieldSignature(parse_server_sdk.ParseSubClassHandler, () => ({
    __proto__: dart.getFields(parse_server_sdk.ParseSubClassHandler.__proto__),
    [__ParseSubClassHandler__subClassMap]: dart.fieldType(dart.nullable(core.Map$(core.String, dart.fnType(parse_server_sdk.ParseObject, [])))),
    [__ParseSubClassHandler__subClassMap_isSet]: dart.fieldType(core.bool),
    [_parseUserConstructor]: dart.fieldType(dart.nullable(dart.fnType(parse_server_sdk.ParseUser, [dart.nullable(core.String), dart.nullable(core.String), dart.nullable(core.String)], {client: dart.nullable(parse_server_sdk.ParseClient), debug: dart.nullable(core.bool), sessionToken: dart.nullable(core.String)}, {}))),
    [_parseFileConstructor]: dart.fieldType(dart.fnType(parse_server_sdk.ParseFileBase, [], {name: dart.nullable(core.String), url: dart.nullable(core.String)}, {}))
  }));
  parse_server_sdk.ParseApiRQ = class ParseApiRQ extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (parse_server_sdk.ParseApiRQ.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[8], 4, 6, "index");
    if (_name == null) dart.nullFailed(I[8], 4, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = parse_server_sdk.ParseApiRQ.prototype;
  dart.addTypeTests(parse_server_sdk.ParseApiRQ);
  dart.addTypeCaches(parse_server_sdk.ParseApiRQ);
  dart.setLibraryUri(parse_server_sdk.ParseApiRQ, I[1]);
  dart.setFieldSignature(parse_server_sdk.ParseApiRQ, () => ({
    __proto__: dart.getFields(parse_server_sdk.ParseApiRQ.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(parse_server_sdk.ParseApiRQ, ['toString']);
  parse_server_sdk.ParseApiRQ.healthCheck = C[12] || CT.C12;
  parse_server_sdk.ParseApiRQ.get = C[13] || CT.C13;
  parse_server_sdk.ParseApiRQ.getAll = C[14] || CT.C14;
  parse_server_sdk.ParseApiRQ.unset = C[15] || CT.C15;
  parse_server_sdk.ParseApiRQ.create = C[16] || CT.C16;
  parse_server_sdk.ParseApiRQ.save = C[17] || CT.C17;
  parse_server_sdk.ParseApiRQ.query = C[18] || CT.C18;
  parse_server_sdk.ParseApiRQ.delete = C[19] || CT.C19;
  parse_server_sdk.ParseApiRQ.currentUser = C[20] || CT.C20;
  parse_server_sdk.ParseApiRQ.signUp = C[21] || CT.C21;
  parse_server_sdk.ParseApiRQ.login = C[22] || CT.C22;
  parse_server_sdk.ParseApiRQ.logout = C[23] || CT.C23;
  parse_server_sdk.ParseApiRQ.loginAnonymous = C[24] || CT.C24;
  parse_server_sdk.ParseApiRQ.loginWith = C[25] || CT.C25;
  parse_server_sdk.ParseApiRQ.verificationEmailRequest = C[26] || CT.C26;
  parse_server_sdk.ParseApiRQ.requestPasswordReset = C[27] || CT.C27;
  parse_server_sdk.ParseApiRQ.destroy = C[28] || CT.C28;
  parse_server_sdk.ParseApiRQ.all = C[29] || CT.C29;
  parse_server_sdk.ParseApiRQ.execute = C[30] || CT.C30;
  parse_server_sdk.ParseApiRQ.executeObjectionFunction = C[31] || CT.C31;
  parse_server_sdk.ParseApiRQ.upload = C[32] || CT.C32;
  parse_server_sdk.ParseApiRQ.add = C[33] || CT.C33;
  parse_server_sdk.ParseApiRQ.addAll = C[34] || CT.C34;
  parse_server_sdk.ParseApiRQ.addUnique = C[35] || CT.C35;
  parse_server_sdk.ParseApiRQ.remove = C[36] || CT.C36;
  parse_server_sdk.ParseApiRQ.removeAll = C[37] || CT.C37;
  parse_server_sdk.ParseApiRQ.increment = C[38] || CT.C38;
  parse_server_sdk.ParseApiRQ.decrement = C[39] || CT.C39;
  parse_server_sdk.ParseApiRQ.getConfigs = C[40] || CT.C40;
  parse_server_sdk.ParseApiRQ.addConfig = C[41] || CT.C41;
  parse_server_sdk.ParseApiRQ.liveQuery = C[42] || CT.C42;
  parse_server_sdk.ParseApiRQ.batch = C[43] || CT.C43;
  parse_server_sdk.ParseApiRQ.values = C[44] || CT.C44;
  var headers$ = dart.privateName(parse_server_sdk, "ParseNetworkOptions.headers");
  parse_server_sdk.ParseNetworkOptions = class ParseNetworkOptions extends core.Object {
    get headers() {
      return this[headers$];
    }
    set headers(value) {
      super.headers = value;
    }
  };
  (parse_server_sdk.ParseNetworkOptions.new = function(opts) {
    let headers = opts && 'headers' in opts ? opts.headers : null;
    this[headers$] = headers;
    ;
  }).prototype = parse_server_sdk.ParseNetworkOptions.prototype;
  dart.addTypeTests(parse_server_sdk.ParseNetworkOptions);
  dart.addTypeCaches(parse_server_sdk.ParseNetworkOptions);
  dart.setLibraryUri(parse_server_sdk.ParseNetworkOptions, I[1]);
  dart.setFieldSignature(parse_server_sdk.ParseNetworkOptions, () => ({
    __proto__: dart.getFields(parse_server_sdk.ParseNetworkOptions.__proto__),
    headers: dart.finalFieldType(dart.nullable(core.Map$(core.String, core.String)))
  }));
  parse_server_sdk.ParseNetworkResponseType = class ParseNetworkResponseType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (parse_server_sdk.ParseNetworkResponseType.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[9], 10, 6, "index");
    if (_name == null) dart.nullFailed(I[9], 10, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = parse_server_sdk.ParseNetworkResponseType.prototype;
  dart.addTypeTests(parse_server_sdk.ParseNetworkResponseType);
  dart.addTypeCaches(parse_server_sdk.ParseNetworkResponseType);
  dart.setLibraryUri(parse_server_sdk.ParseNetworkResponseType, I[1]);
  dart.setFieldSignature(parse_server_sdk.ParseNetworkResponseType, () => ({
    __proto__: dart.getFields(parse_server_sdk.ParseNetworkResponseType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(parse_server_sdk.ParseNetworkResponseType, ['toString']);
  parse_server_sdk.ParseNetworkResponseType.json = C[45] || CT.C45;
  parse_server_sdk.ParseNetworkResponseType.stream = C[46] || CT.C46;
  parse_server_sdk.ParseNetworkResponseType.plain = C[47] || CT.C47;
  parse_server_sdk.ParseNetworkResponseType.bytes = C[48] || CT.C48;
  parse_server_sdk.ParseNetworkResponseType.values = C[49] || CT.C49;
  var data$ = dart.privateName(parse_server_sdk, "ParseNetworkResponse.data");
  var statusCode$ = dart.privateName(parse_server_sdk, "ParseNetworkResponse.statusCode");
  parse_server_sdk.ParseNetworkResponse = class ParseNetworkResponse extends core.Object {
    get data() {
      return this[data$];
    }
    set data(value) {
      super.data = value;
    }
    get statusCode() {
      return this[statusCode$];
    }
    set statusCode(value) {
      super.statusCode = value;
    }
  };
  (parse_server_sdk.ParseNetworkResponse.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : null;
    if (data == null) dart.nullFailed(I[10], 83, 19, "data");
    let statusCode = opts && 'statusCode' in opts ? opts.statusCode : -1;
    if (statusCode == null) dart.nullFailed(I[10], 84, 10, "statusCode");
    this[data$] = data;
    this[statusCode$] = statusCode;
    ;
  }).prototype = parse_server_sdk.ParseNetworkResponse.prototype;
  dart.addTypeTests(parse_server_sdk.ParseNetworkResponse);
  dart.addTypeCaches(parse_server_sdk.ParseNetworkResponse);
  dart.setLibraryUri(parse_server_sdk.ParseNetworkResponse, I[1]);
  dart.setFieldSignature(parse_server_sdk.ParseNetworkResponse, () => ({
    __proto__: dart.getFields(parse_server_sdk.ParseNetworkResponse.__proto__),
    data: dart.finalFieldType(core.String),
    statusCode: dart.finalFieldType(core.int)
  }));
  var bytes$ = dart.privateName(parse_server_sdk, "ParseNetworkByteResponse.bytes");
  parse_server_sdk.ParseNetworkByteResponse = class ParseNetworkByteResponse extends parse_server_sdk.ParseNetworkResponse {
    get bytes() {
      return this[bytes$];
    }
    set bytes(value) {
      super.bytes = value;
    }
  };
  (parse_server_sdk.ParseNetworkByteResponse.new = function(opts) {
    let bytes = opts && 'bytes' in opts ? opts.bytes : null;
    let data = opts && 'data' in opts ? opts.data : "byte response";
    if (data == null) dart.nullFailed(I[10], 94, 18, "data");
    let statusCode = opts && 'statusCode' in opts ? opts.statusCode : -1;
    if (statusCode == null) dart.nullFailed(I[10], 95, 15, "statusCode");
    this[bytes$] = bytes;
    parse_server_sdk.ParseNetworkByteResponse.__proto__.new.call(this, {data: data, statusCode: statusCode});
    ;
  }).prototype = parse_server_sdk.ParseNetworkByteResponse.prototype;
  dart.addTypeTests(parse_server_sdk.ParseNetworkByteResponse);
  dart.addTypeCaches(parse_server_sdk.ParseNetworkByteResponse);
  dart.setLibraryUri(parse_server_sdk.ParseNetworkByteResponse, I[1]);
  dart.setFieldSignature(parse_server_sdk.ParseNetworkByteResponse, () => ({
    __proto__: dart.getFields(parse_server_sdk.ParseNetworkByteResponse.__proto__),
    bytes: dart.finalFieldType(dart.nullable(core.List$(core.int)))
  }));
  parse_server_sdk.ParseConnectivityResult = class ParseConnectivityResult extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (parse_server_sdk.ParseConnectivityResult.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[11], 4, 6, "index");
    if (_name == null) dart.nullFailed(I[11], 4, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = parse_server_sdk.ParseConnectivityResult.prototype;
  dart.addTypeTests(parse_server_sdk.ParseConnectivityResult);
  dart.addTypeCaches(parse_server_sdk.ParseConnectivityResult);
  dart.setLibraryUri(parse_server_sdk.ParseConnectivityResult, I[1]);
  dart.setFieldSignature(parse_server_sdk.ParseConnectivityResult, () => ({
    __proto__: dart.getFields(parse_server_sdk.ParseConnectivityResult.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(parse_server_sdk.ParseConnectivityResult, ['toString']);
  parse_server_sdk.ParseConnectivityResult.wifi = C[50] || CT.C50;
  parse_server_sdk.ParseConnectivityResult.mobile = C[51] || CT.C51;
  parse_server_sdk.ParseConnectivityResult.none = C[52] || CT.C52;
  parse_server_sdk.ParseConnectivityResult.values = C[53] || CT.C53;
  parse_server_sdk.ParseConnectivityProvider = class ParseConnectivityProvider extends core.Object {};
  (parse_server_sdk.ParseConnectivityProvider.new = function() {
    ;
  }).prototype = parse_server_sdk.ParseConnectivityProvider.prototype;
  dart.addTypeTests(parse_server_sdk.ParseConnectivityProvider);
  dart.addTypeCaches(parse_server_sdk.ParseConnectivityProvider);
  dart.setLibraryUri(parse_server_sdk.ParseConnectivityProvider, I[1]);
  parse_server_sdk.LiveQueryEvent = class LiveQueryEvent extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (parse_server_sdk.LiveQueryEvent.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[12], 3, 6, "index");
    if (_name == null) dart.nullFailed(I[12], 3, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = parse_server_sdk.LiveQueryEvent.prototype;
  dart.addTypeTests(parse_server_sdk.LiveQueryEvent);
  dart.addTypeCaches(parse_server_sdk.LiveQueryEvent);
  dart.setLibraryUri(parse_server_sdk.LiveQueryEvent, I[1]);
  dart.setFieldSignature(parse_server_sdk.LiveQueryEvent, () => ({
    __proto__: dart.getFields(parse_server_sdk.LiveQueryEvent.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(parse_server_sdk.LiveQueryEvent, ['toString']);
  parse_server_sdk.LiveQueryEvent.create = C[54] || CT.C54;
  parse_server_sdk.LiveQueryEvent.enter = C[55] || CT.C55;
  parse_server_sdk.LiveQueryEvent.update = C[56] || CT.C56;
  parse_server_sdk.LiveQueryEvent.leave = C[57] || CT.C57;
  parse_server_sdk.LiveQueryEvent.delete = C[58] || CT.C58;
  parse_server_sdk.LiveQueryEvent.error = C[59] || CT.C59;
  parse_server_sdk.LiveQueryEvent.values = C[60] || CT.C60;
  var query$ = dart.privateName(parse_server_sdk, "Subscription.query");
  var requestId$ = dart.privateName(parse_server_sdk, "Subscription.requestId");
  var eventCallbacks = dart.privateName(parse_server_sdk, "Subscription.eventCallbacks");
  var _copyObject = dart.privateName(parse_server_sdk, "_copyObject");
  var _enabled = dart.privateName(parse_server_sdk, "_enabled");
  var _liveQueryEvent = dart.privateName(parse_server_sdk, "_liveQueryEvent");
  const _is_Subscription_default = Symbol('_is_Subscription_default');
  parse_server_sdk.Subscription$ = dart.generic(T => {
    var QueryBuilderOfT = () => (QueryBuilderOfT = dart.constFn(parse_server_sdk.QueryBuilder$(T)))();
    class Subscription extends core.Object {
      get query() {
        return this[query$];
      }
      set query(value) {
        this[query$] = QueryBuilderOfT().as(value);
      }
      get requestId() {
        return this[requestId$];
      }
      set requestId(value) {
        this[requestId$] = value;
      }
      get eventCallbacks() {
        return this[eventCallbacks];
      }
      set eventCallbacks(value) {
        this[eventCallbacks] = value;
      }
      on(op, callback) {
        if (op == null) dart.nullFailed(I[12], 25, 26, "op");
        if (callback == null) dart.nullFailed(I[12], 25, 39, "callback");
        this.eventCallbacks[$_set](this[_liveQueryEvent][$_get](op.index), callback);
      }
      get copyObject() {
        return this[_copyObject];
      }
    }
    (Subscription.new = function(query, requestId, opts) {
      if (query == null) dart.nullFailed(I[12], 8, 21, "query");
      if (requestId == null) dart.nullFailed(I[12], 8, 33, "requestId");
      let copyObject = opts && 'copyObject' in opts ? opts.copyObject : null;
      this[_copyObject] = null;
      this[_enabled] = false;
      this[_liveQueryEvent] = T$.JSArrayOfString().of(["create", "enter", "update", "leave", "delete", "error"]);
      this[eventCallbacks] = new (T$.IdentityMapOfString$Function()).new();
      this[query$] = query;
      this[requestId$] = requestId;
      this[_copyObject] = copyObject;
    }).prototype = Subscription.prototype;
    dart.addTypeTests(Subscription);
    Subscription.prototype[_is_Subscription_default] = true;
    dart.addTypeCaches(Subscription);
    dart.setMethodSignature(Subscription, () => ({
      __proto__: dart.getMethods(Subscription.__proto__),
      on: dart.fnType(dart.void, [parse_server_sdk.LiveQueryEvent, core.Function])
    }));
    dart.setGetterSignature(Subscription, () => ({
      __proto__: dart.getGetters(Subscription.__proto__),
      copyObject: dart.nullable(T)
    }));
    dart.setLibraryUri(Subscription, I[1]);
    dart.setFieldSignature(Subscription, () => ({
      __proto__: dart.getFields(Subscription.__proto__),
      query: dart.fieldType(parse_server_sdk.QueryBuilder$(T)),
      [_copyObject]: dart.fieldType(dart.nullable(T)),
      requestId: dart.fieldType(core.int),
      [_enabled]: dart.fieldType(core.bool),
      [_liveQueryEvent]: dart.finalFieldType(core.List$(core.String)),
      eventCallbacks: dart.fieldType(core.Map$(core.String, core.Function))
    }));
    return Subscription;
  });
  parse_server_sdk.Subscription = parse_server_sdk.Subscription$();
  dart.addTypeTests(parse_server_sdk.Subscription, _is_Subscription_default);
  parse_server_sdk.LiveQueryClientEvent = class LiveQueryClientEvent extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (parse_server_sdk.LiveQueryClientEvent.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[12], 34, 6, "index");
    if (_name == null) dart.nullFailed(I[12], 34, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = parse_server_sdk.LiveQueryClientEvent.prototype;
  dart.addTypeTests(parse_server_sdk.LiveQueryClientEvent);
  dart.addTypeCaches(parse_server_sdk.LiveQueryClientEvent);
  dart.setLibraryUri(parse_server_sdk.LiveQueryClientEvent, I[1]);
  dart.setFieldSignature(parse_server_sdk.LiveQueryClientEvent, () => ({
    __proto__: dart.getFields(parse_server_sdk.LiveQueryClientEvent.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(parse_server_sdk.LiveQueryClientEvent, ['toString']);
  parse_server_sdk.LiveQueryClientEvent.CONNECTED = C[61] || CT.C61;
  parse_server_sdk.LiveQueryClientEvent.DISCONNECTED = C[62] || CT.C62;
  parse_server_sdk.LiveQueryClientEvent.USER_DISCONNECTED = C[63] || CT.C63;
  parse_server_sdk.LiveQueryClientEvent.values = C[64] || CT.C64;
  var debug$ = dart.privateName(parse_server_sdk, "LiveQueryReconnectingController.debug");
  var _retryState = dart.privateName(parse_server_sdk, "_retryState");
  var _isOnline = dart.privateName(parse_server_sdk, "_isOnline");
  var _isConnected = dart.privateName(parse_server_sdk, "_isConnected");
  var _userDisconnected = dart.privateName(parse_server_sdk, "_userDisconnected");
  var _currentTimer = dart.privateName(parse_server_sdk, "_currentTimer");
  var _reconnect$ = dart.privateName(parse_server_sdk, "_reconnect");
  var _eventStream$ = dart.privateName(parse_server_sdk, "_eventStream");
  var _connectivityChanged = dart.privateName(parse_server_sdk, "_connectivityChanged");
  var _setReconnect = dart.privateName(parse_server_sdk, "_setReconnect");
  parse_server_sdk.LiveQueryReconnectingController = class LiveQueryReconnectingController extends core.Object {
    get debug() {
      return this[debug$];
    }
    set debug(value) {
      super.debug = value;
    }
    static get retryInterval() {
      return parse_server_sdk.ParseCoreData.new().liveListRetryIntervals;
    }
    [_connectivityChanged](state) {
      if (state == null) dart.nullFailed(I[12], 92, 53, "state");
      if (!dart.test(this[_isOnline]) && state != parse_server_sdk.ParseConnectivityResult.none) {
        this[_retryState] = 0;
      }
      this[_isOnline] = state != parse_server_sdk.ParseConnectivityResult.none;
      if (state == parse_server_sdk.ParseConnectivityResult.none) {
        this[_isConnected] = false;
      }
      if (dart.test(this.debug)) {
        core.print("LiveQueryReconnectingController" + ": " + dart.str(state));
      }
      this[_setReconnect]();
    }
    [_setReconnect]() {
      if (dart.test(this[_isOnline]) && !dart.test(this[_isConnected]) && this[_currentTimer] == null && !dart.test(this[_userDisconnected]) && dart.notNull(parse_server_sdk.LiveQueryReconnectingController.retryInterval[$_get](this[_retryState])) >= 0) {
        this[_currentTimer] = async.Timer.new(new core.Duration.new({milliseconds: parse_server_sdk.LiveQueryReconnectingController.retryInterval[$_get](this[_retryState])}), dart.fn(() => {
          this[_currentTimer] = null;
          dart.dsend(this, _reconnect$, []);
        }, T$.VoidTovoid()));
        if (dart.test(this.debug)) core.print("LiveQueryReconnectingController" + ": Retrytimer set to " + dart.str(parse_server_sdk.LiveQueryReconnectingController.retryInterval[$_get](this[_retryState])) + "ms");
        if (dart.notNull(this[_retryState]) < dart.notNull(parse_server_sdk.LiveQueryReconnectingController.retryInterval[$length]) - 1) {
          this[_retryState] = dart.notNull(this[_retryState]) + 1;
        }
      }
    }
  };
  (parse_server_sdk.LiveQueryReconnectingController.new = function(_reconnect, _eventStream, debug) {
    let t17;
    if (_reconnect == null) dart.nullFailed(I[12], 38, 10, "_reconnect");
    if (_eventStream == null) dart.nullFailed(I[12], 39, 10, "_eventStream");
    if (debug == null) dart.nullFailed(I[12], 40, 10, "debug");
    this[_retryState] = 0;
    this[_isOnline] = false;
    this[_isConnected] = false;
    this[_userDisconnected] = false;
    this[_currentTimer] = null;
    this[_reconnect$] = _reconnect;
    this[_eventStream$] = _eventStream;
    this[debug$] = debug;
    let connectivityProvider = parse_server_sdk.ParseCoreData.new().connectivityProvider;
    if (connectivityProvider != null) {
      connectivityProvider.checkConnectivity().then(dart.void, dart.bind(this, _connectivityChanged));
      connectivityProvider.connectivityStream.listen(dart.bind(this, _connectivityChanged));
    } else {
      core.print("LiveQuery does not work, if there is no ParseConnectivityProvider provided.");
    }
    this[_eventStream$].listen(dart.fn(event => {
      if (event == null) dart.nullFailed(I[12], 51, 47, "event");
      switch (event) {
        case C[61] || CT.C61:
        {
          this[_isConnected] = true;
          this[_retryState] = 0;
          this[_userDisconnected] = false;
          break;
        }
        case C[62] || CT.C62:
        {
          this[_isConnected] = false;
          this[_setReconnect]();
          break;
        }
        case C[63] || CT.C63:
        {
          this[_userDisconnected] = true;
          if (this[_currentTimer] != null) {
            dart.nullCheck(this[_currentTimer]).cancel();
            this[_currentTimer] = null;
          }
          break;
        }
        default:
        {
          dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
        }
      }
      if (dart.test(this.debug)) {
        core.print("LiveQueryReconnectingController" + ": " + dart.str(event));
      }
    }, T$.LiveQueryClientEventTovoid()));
    t17 = parse_server_sdk.ParseCoreData.new().appResumedStream;
    t17 == null ? null : t17.listen(dart.fn(_ => this[_setReconnect](), T$.voidTovoid()));
  }).prototype = parse_server_sdk.LiveQueryReconnectingController.prototype;
  dart.addTypeTests(parse_server_sdk.LiveQueryReconnectingController);
  dart.addTypeCaches(parse_server_sdk.LiveQueryReconnectingController);
  dart.setMethodSignature(parse_server_sdk.LiveQueryReconnectingController, () => ({
    __proto__: dart.getMethods(parse_server_sdk.LiveQueryReconnectingController.__proto__),
    [_connectivityChanged]: dart.fnType(dart.void, [parse_server_sdk.ParseConnectivityResult]),
    [_setReconnect]: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(parse_server_sdk.LiveQueryReconnectingController, I[1]);
  dart.setFieldSignature(parse_server_sdk.LiveQueryReconnectingController, () => ({
    __proto__: dart.getFields(parse_server_sdk.LiveQueryReconnectingController.__proto__),
    [_reconnect$]: dart.finalFieldType(core.Function),
    [_eventStream$]: dart.finalFieldType(async.Stream$(parse_server_sdk.LiveQueryClientEvent)),
    debug: dart.finalFieldType(core.bool),
    [_retryState]: dart.fieldType(core.int),
    [_isOnline]: dart.fieldType(core.bool),
    [_isConnected]: dart.fieldType(core.bool),
    [_userDisconnected]: dart.fieldType(core.bool),
    [_currentTimer]: dart.fieldType(dart.nullable(async.Timer))
  }));
  dart.defineLazy(parse_server_sdk.LiveQueryReconnectingController, {
    /*parse_server_sdk.LiveQueryReconnectingController.DEBUG_TAG*/get DEBUG_TAG() {
      return "LiveQueryReconnectingController";
    }
  }, false);
  var _webSocket = dart.privateName(parse_server_sdk, "_webSocket");
  var __LiveQueryClient__debug = dart.privateName(parse_server_sdk, "_#LiveQueryClient#_debug");
  var __LiveQueryClient__debug_isSet = dart.privateName(parse_server_sdk, "_#LiveQueryClient#_debug#isSet");
  var __LiveQueryClient__sendSessionId = dart.privateName(parse_server_sdk, "_#LiveQueryClient#_sendSessionId");
  var __LiveQueryClient__sendSessionId_isSet = dart.privateName(parse_server_sdk, "_#LiveQueryClient#_sendSessionId#isSet");
  var _channel = dart.privateName(parse_server_sdk, "_channel");
  var _liveQueryURL = dart.privateName(parse_server_sdk, "_liveQueryURL");
  var _connecting = dart.privateName(parse_server_sdk, "_connecting");
  var __LiveQueryClient__clientEventStreamController = dart.privateName(parse_server_sdk, "_#LiveQueryClient#_clientEventStreamController");
  var __LiveQueryClient__clientEventStreamController_isSet = dart.privateName(parse_server_sdk, "_#LiveQueryClient#_clientEventStreamController#isSet");
  var __LiveQueryClient__clientEventStream = dart.privateName(parse_server_sdk, "_#LiveQueryClient#_clientEventStream");
  var __LiveQueryClient__clientEventStream_isSet = dart.privateName(parse_server_sdk, "_#LiveQueryClient#_clientEventStream#isSet");
  var __LiveQueryClient_reconnectingController = dart.privateName(parse_server_sdk, "_#LiveQueryClient#reconnectingController");
  var __LiveQueryClient_reconnectingController_isSet = dart.privateName(parse_server_sdk, "_#LiveQueryClient#reconnectingController#isSet");
  var _requestSubscription = dart.privateName(parse_server_sdk, "_requestSubscription");
  var _clientEventStreamController = dart.privateName(parse_server_sdk, "_clientEventStreamController");
  var _clientEventStream = dart.privateName(parse_server_sdk, "_clientEventStream");
  var _debug = dart.privateName(parse_server_sdk, "_debug");
  var _sendSessionId$0 = dart.privateName(parse_server_sdk, "_sendSessionId");
  var _connect = dart.privateName(parse_server_sdk, "_connect");
  var _connectLiveQuery = dart.privateName(parse_server_sdk, "_connectLiveQuery");
  var _requestIdGenerator = dart.privateName(parse_server_sdk, "_requestIdGenerator");
  var _subscribeLiveQuery = dart.privateName(parse_server_sdk, "_subscribeLiveQuery");
  var _handleMessage = dart.privateName(parse_server_sdk, "_handleMessage");
  parse_server_sdk.LiveQueryClient = class LiveQueryClient extends core.Object {
    static new() {
      return parse_server_sdk.LiveQueryClient._getInstance();
    }
    static get instance() {
      return parse_server_sdk.LiveQueryClient._getInstance();
    }
    static _getInstance(opts) {
      let debug = opts && 'debug' in opts ? opts.debug : null;
      let autoSendSessionId = opts && 'autoSendSessionId' in opts ? opts.autoSendSessionId : null;
      parse_server_sdk.LiveQueryClient._instance == null ? parse_server_sdk.LiveQueryClient._instance = new parse_server_sdk.LiveQueryClient._internal({debug: debug, autoSendSessionId: autoSendSessionId}) : null;
      return dart.nullCheck(parse_server_sdk.LiveQueryClient._instance);
    }
    get getClientEventStream() {
      return this[_clientEventStream];
    }
    get [_debug]() {
      let t17;
      return dart.test(this[__LiveQueryClient__debug_isSet]) ? (t17 = this[__LiveQueryClient__debug], t17) : dart.throw(new _internal.LateError.fieldNI("_debug"));
    }
    set [_debug](t17) {
      if (t17 == null) dart.nullFailed(I[12], 163, 13, "null");
      this[__LiveQueryClient__debug_isSet] = true;
      this[__LiveQueryClient__debug] = t17;
    }
    get [_sendSessionId$0]() {
      let t18;
      return dart.test(this[__LiveQueryClient__sendSessionId_isSet]) ? (t18 = this[__LiveQueryClient__sendSessionId], t18) : dart.throw(new _internal.LateError.fieldNI("_sendSessionId"));
    }
    set [_sendSessionId$0](t18) {
      if (t18 == null) dart.nullFailed(I[12], 164, 13, "null");
      this[__LiveQueryClient__sendSessionId_isSet] = true;
      this[__LiveQueryClient__sendSessionId] = t18;
    }
    get [_clientEventStreamController]() {
      let t19;
      return dart.test(this[__LiveQueryClient__clientEventStreamController_isSet]) ? (t19 = this[__LiveQueryClient__clientEventStreamController], t19) : dart.throw(new _internal.LateError.fieldNI("_clientEventStreamController"));
    }
    set [_clientEventStreamController](t19) {
      if (t19 == null) dart.nullFailed(I[12], 168, 47, "null");
      this[__LiveQueryClient__clientEventStreamController_isSet] = true;
      this[__LiveQueryClient__clientEventStreamController] = t19;
    }
    get [_clientEventStream]() {
      let t20;
      return dart.test(this[__LiveQueryClient__clientEventStream_isSet]) ? (t20 = this[__LiveQueryClient__clientEventStream], t20) : dart.throw(new _internal.LateError.fieldNI("_clientEventStream"));
    }
    set [_clientEventStream](t20) {
      if (t20 == null) dart.nullFailed(I[12], 169, 37, "null");
      this[__LiveQueryClient__clientEventStream_isSet] = true;
      this[__LiveQueryClient__clientEventStream] = t20;
    }
    get reconnectingController() {
      let t21;
      return dart.test(this[__LiveQueryClient_reconnectingController_isSet]) ? (t21 = this[__LiveQueryClient_reconnectingController], t21) : dart.throw(new _internal.LateError.fieldNI("reconnectingController"));
    }
    set reconnectingController(t21) {
      if (t21 == null) dart.nullFailed(I[12], 170, 40, "null");
      this[__LiveQueryClient_reconnectingController_isSet] = true;
      this[__LiveQueryClient_reconnectingController] = t21;
    }
    reconnect(opts) {
      let userInitialized = opts && 'userInitialized' in opts ? opts.userInitialized : false;
      if (userInitialized == null) dart.nullFailed(I[12], 174, 32, "userInitialized");
      return async.async(dart.void, (function* reconnect() {
        yield this[_connect]({userInitialized: userInitialized});
        this[_connectLiveQuery]();
      }).bind(this));
    }
    readyState() {
      if (this[_webSocket] != null) {
        return dart.nullCheck(this[_webSocket]).readyState;
      }
      return 0;
    }
    disconnect(opts) {
      let userInitialized = opts && 'userInitialized' in opts ? opts.userInitialized : false;
      if (userInitialized == null) dart.nullFailed(I[12], 186, 36, "userInitialized");
      return async.async(dart.dynamic, (function* disconnect() {
        if (this[_webSocket] != null && dart.nullCheck(this[_webSocket]).readyState === 1) {
          if (dart.test(this[_debug])) {
            core.print("LiveQuery: " + ": Socket closed");
          }
          yield dart.nullCheck(this[_webSocket]).close();
          this[_webSocket] = null;
        }
        if (this[_channel] != null && dart.nullCheck(this[_channel]).sink != null) {
          if (dart.test(this[_debug])) {
            core.print("LiveQuery: " + ": close");
          }
          yield dart.nullCheck(this[_channel]).sink.close();
          this[_channel] = null;
        }
        this[_requestSubscription][$values][$toList]()[$forEach](dart.fn(subscription => {
          if (subscription == null) dart.nullFailed(I[12], 202, 64, "subscription");
          subscription[_enabled] = false;
        }, T$.SubscriptionOfParseObjectTovoid()));
        this[_connecting] = false;
        if (dart.test(userInitialized)) this[_clientEventStreamController].sink.add(parse_server_sdk.LiveQueryClientEvent.USER_DISCONNECTED);
      }).bind(this));
    }
    subscribe(T, query, opts) {
      if (query == null) dart.nullFailed(I[12], 212, 23, "query");
      let copyObject = opts && 'copyObject' in opts ? opts.copyObject : null;
      return async.async(parse_server_sdk.Subscription$(T), (function* subscribe() {
        if (this[_webSocket] == null) {
          yield this[_clientEventStream].any(dart.fn(event => {
            if (event == null) dart.nullFailed(I[12], 215, 58, "event");
            return event == parse_server_sdk.LiveQueryClientEvent.CONNECTED;
          }, T$.LiveQueryClientEventTobool()));
        }
        let requestId = this[_requestIdGenerator]();
        let subscription = new (parse_server_sdk.Subscription$(T)).new(query, requestId, {copyObject: copyObject});
        this[_requestSubscription][$_set](requestId, subscription);
        this[_subscribeLiveQuery](subscription);
        return subscription;
      }).bind(this));
    }
    unSubscribe(T, subscription) {
      if (subscription == null) dart.nullFailed(I[12], 228, 59, "subscription");
      let unsubscribeMessage = new (T$.IdentityMapOfString$dynamic()).from(["op", "unsubscribe", "requestId", subscription.requestId]);
      if (this[_channel] != null && dart.nullCheck(this[_channel]).sink != null) {
        if (dart.test(this[_debug])) {
          core.print("LiveQuery: " + ": UnsubscribeMessage: " + dart.str(unsubscribeMessage));
        }
        dart.nullCheck(this[_channel]).sink.add(convert.jsonEncode(unsubscribeMessage));
        subscription[_enabled] = false;
        this[_requestSubscription][$remove](subscription.requestId);
      }
    }
    [_requestIdGenerator]() {
      let t22;
      t22 = parse_server_sdk.LiveQueryClient._requestIdCount;
      parse_server_sdk.LiveQueryClient._requestIdCount = dart.notNull(t22) + 1;
      return t22;
    }
    [_connect](opts) {
      let userInitialized = opts && 'userInitialized' in opts ? opts.userInitialized : false;
      if (userInitialized == null) dart.nullFailed(I[12], 250, 34, "userInitialized");
      return async.async(dart.dynamic, (function* _connect() {
        if (dart.test(this[_connecting])) {
          core.print("already connecting");
          return T$.FutureOfvoid().value(null);
        }
        yield this.disconnect({userInitialized: userInitialized});
        this[_connecting] = true;
        try {
          this[_webSocket] = (yield parse_websocket_html.WebSocket.connect(dart.nullCheck(this[_liveQueryURL])));
          this[_connecting] = false;
          if (this[_webSocket] != null && dart.nullCheck(this[_webSocket]).readyState === 1) {
            if (dart.test(this[_debug])) {
              core.print("LiveQuery: " + ": Socket opened");
            }
          } else {
            if (dart.test(this[_debug])) {
              core.print("LiveQuery: " + ": Error when connection client");
            }
            return T$.FutureOfvoid().value(null);
          }
          this[_channel] = dart.nullCheck(this[_webSocket]).createWebSocketChannel();
          dart.nullCheck(this[_channel]).stream.listen(dart.fn(message => {
            this[_handleMessage](core.String.as(message));
          }, T$.dynamicTovoid()), {onDone: dart.fn(() => {
              this[_clientEventStreamController].sink.add(parse_server_sdk.LiveQueryClientEvent.DISCONNECTED);
              if (dart.test(this[_debug])) {
                core.print("LiveQuery: " + ": Done");
              }
            }, T$.VoidTovoid()), onError: dart.fn(error => {
              if (error == null) dart.nullFailed(I[12], 281, 27, "error");
              this[_clientEventStreamController].sink.add(parse_server_sdk.LiveQueryClientEvent.DISCONNECTED);
              if (dart.test(this[_debug])) {
                core.print("LiveQuery: " + ": Error: " + dart.str(dart.toString(dart.runtimeType(error))));
              }
              return T$.FutureOfParseResponse().value(parse_server_sdk.handleException(core.Exception.new(error), parse_server_sdk.ParseApiRQ.liveQuery, this[_debug], !true ? "IOWebSocketChannel" : "HtmlWebSocketChannel"));
            }, T$.ObjectToFutureOfParseResponse())});
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            this[_connecting] = false;
            this[_clientEventStreamController].sink.add(parse_server_sdk.LiveQueryClientEvent.DISCONNECTED);
            if (dart.test(this[_debug])) {
              core.print("LiveQuery: " + ": Error: " + dart.str(dart.toString(e)));
            }
            return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.liveQuery, this[_debug], "LiveQuery");
          } else
            throw e$;
        }
      }).bind(this));
    }
    [_connectLiveQuery]() {
      if (this[_channel] == null || dart.nullCheck(this[_channel]).sink == null) {
        return;
      }
      let connectMessage = new (T$.IdentityMapOfString$String()).from(["op", "connect", "applicationId", parse_server_sdk.ParseCoreData.new().applicationId]);
      if (dart.test(this[_sendSessionId$0]) && parse_server_sdk.ParseCoreData.new().sessionId != null) {
        connectMessage[$_set]("sessionToken", dart.nullCheck(parse_server_sdk.ParseCoreData.new().sessionId));
      }
      if (parse_server_sdk.ParseCoreData.new().clientKey != null) connectMessage[$_set]("clientKey", dart.nullCheck(parse_server_sdk.ParseCoreData.new().clientKey));
      if (parse_server_sdk.ParseCoreData.new().masterKey != null) connectMessage[$_set]("masterKey", dart.nullCheck(parse_server_sdk.ParseCoreData.new().masterKey));
      if (dart.test(this[_debug])) {
        core.print("LiveQuery: " + ": ConnectMessage: " + dart.str(connectMessage));
      }
      dart.nullCheck(this[_channel]).sink.add(convert.jsonEncode(connectMessage));
    }
    [_subscribeLiveQuery](subscription) {
      let t23;
      if (subscription == null) dart.nullFailed(I[12], 330, 41, "subscription");
      if (dart.test(subscription[_enabled])) {
        return;
      }
      subscription[_enabled] = true;
      let query = subscription.query;
      let keysToReturn = T$.ListNOfString().as((t23 = query.limiters[$_get]("keys"), t23 == null ? null : dart.dsend(t23, 'split', [","])));
      query.limiters[$clear]();
      let _where = query.buildQuery()[$replaceAll]("where=", "");
      let _whereMap = new (T$.LinkedMapOfString$dynamic()).new();
      if (_where !== "") {
        _whereMap = T$.MapOfString$dynamic().as(convert.json.decode(_where));
      }
      let subscribeMessage = new (T$.IdentityMapOfString$dynamic()).from(["op", "subscribe", "requestId", subscription.requestId, "query", (() => {
          let t23 = new (T$.IdentityMapOfString$dynamic()).new();
          t23[$_set]("className", dart.nullCheck(query.object).parseClassName);
          t23[$_set]("where", _whereMap);
          if (keysToReturn != null && dart.test(keysToReturn[$isNotEmpty])) t23[$_set]("fields", keysToReturn);
          return t23;
        })()]);
      if (dart.test(this[_sendSessionId$0]) && parse_server_sdk.ParseCoreData.new().sessionId != null) {
        subscribeMessage[$_set]("sessionToken", parse_server_sdk.ParseCoreData.new().sessionId);
      }
      if (dart.test(this[_debug])) {
        core.print("LiveQuery: " + ": SubscribeMessage: " + dart.str(subscribeMessage));
      }
      dart.nullCheck(this[_channel]).sink.add(convert.jsonEncode(subscribeMessage));
    }
    [_handleMessage](message) {
      let t24, t24$;
      if (message == null) dart.nullFailed(I[12], 367, 30, "message");
      if (dart.test(this[_debug])) {
        core.print("LiveQuery: " + ": Listen: " + dart.str(message));
      }
      let actionData = T$.MapOfString$dynamic().as(convert.jsonDecode(message));
      let subscription = null;
      if (dart.test(actionData[$containsKey]("op")) && dart.equals(actionData[$_get]("op"), "connected")) {
        core.print("ReSubScription:" + dart.str(this[_requestSubscription]));
        this[_requestSubscription][$values][$toList]()[$forEach](dart.fn(subcription => {
          if (subcription == null) dart.nullFailed(I[12], 378, 66, "subcription");
          this[_subscribeLiveQuery](subcription);
        }, T$.SubscriptionOfParseObjectTovoid()));
        this[_clientEventStreamController].sink.add(parse_server_sdk.LiveQueryClientEvent.CONNECTED);
        return;
      }
      if (dart.test(actionData[$containsKey]("requestId"))) {
        subscription = this[_requestSubscription][$_get](actionData[$_get]("requestId"));
      }
      if (subscription == null) {
        return;
      }
      if (dart.test(subscription.eventCallbacks[$containsKey](actionData[$_get]("op")))) {
        if (dart.test(actionData[$containsKey]("object"))) {
          let map = T$.MapOfString$dynamic().as(actionData[$_get]("object"));
          let className = T$.StringN().as(map[$_get]("className"));
          if (className === "_User") {
            dart.dcall(dart.nullCheck(subscription.eventCallbacks[$_get](actionData[$_get]("op"))), [(t24 = subscription.copyObject, t24 == null ? parse_server_sdk.ParseCoreData.instance.createParseUser(null, null, null) : t24).fromJson(map)]);
          } else {
            dart.dcall(dart.nullCheck(subscription.eventCallbacks[$_get](actionData[$_get]("op"))), [(t24$ = subscription.copyObject, t24$ == null ? parse_server_sdk.ParseCoreData.instance.createObject(dart.nullCheck(className)) : t24$).fromJson(map)]);
          }
        } else {
          dart.dcall(dart.nullCheck(subscription.eventCallbacks[$_get](actionData[$_get]("op"))), [actionData]);
        }
      }
    }
  };
  (parse_server_sdk.LiveQueryClient._internal = function(opts) {
    let t17;
    let debug = opts && 'debug' in opts ? opts.debug : null;
    let autoSendSessionId = opts && 'autoSendSessionId' in opts ? opts.autoSendSessionId : null;
    this[_webSocket] = null;
    this[__LiveQueryClient__debug] = null;
    this[__LiveQueryClient__debug_isSet] = false;
    this[__LiveQueryClient__sendSessionId] = null;
    this[__LiveQueryClient__sendSessionId_isSet] = false;
    this[_channel] = null;
    this[_liveQueryURL] = null;
    this[_connecting] = false;
    this[__LiveQueryClient__clientEventStreamController] = null;
    this[__LiveQueryClient__clientEventStreamController_isSet] = false;
    this[__LiveQueryClient__clientEventStream] = null;
    this[__LiveQueryClient__clientEventStream_isSet] = false;
    this[__LiveQueryClient_reconnectingController] = null;
    this[__LiveQueryClient_reconnectingController_isSet] = false;
    this[_requestSubscription] = new (T$.IdentityMapOfint$SubscriptionOfParseObject()).new();
    this[_clientEventStreamController] = T$.StreamControllerOfLiveQueryClientEvent().new();
    this[_clientEventStream] = this[_clientEventStreamController].stream.asBroadcastStream();
    this[_debug] = parse_server_sdk.isDebugEnabled({objectLevelDebug: debug});
    this[_sendSessionId$0] = (t17 = autoSendSessionId, t17 == null ? parse_server_sdk.ParseCoreData.new().autoSendSessionId : t17);
    this[_liveQueryURL] = parse_server_sdk.ParseCoreData.new().liveQueryURL;
    if (!(this[_liveQueryURL] != null)) dart.assertFailed("liveQueryUrl is not set. For how to setup Live Queries, see https://github.com/parse-community/Parse-SDK-Flutter/tree/master/packages/flutter#live-queries.", I[12], 138, 12, "_liveQueryURL != null");
    if (dart.nullCheck(this[_liveQueryURL])[$contains]("https")) {
      this[_liveQueryURL] = dart.nullCheck(this[_liveQueryURL])[$replaceAll]("https", "wss");
    } else if (dart.nullCheck(this[_liveQueryURL])[$contains]("http")) {
      this[_liveQueryURL] = dart.nullCheck(this[_liveQueryURL])[$replaceAll]("http", "ws");
    }
    this.reconnectingController = new parse_server_sdk.LiveQueryReconnectingController.new(dart.fn(() => this.reconnect({userInitialized: false}), T$.VoidToFutureOfvoid()), this.getClientEventStream, this[_debug]);
  }).prototype = parse_server_sdk.LiveQueryClient.prototype;
  dart.addTypeTests(parse_server_sdk.LiveQueryClient);
  dart.addTypeCaches(parse_server_sdk.LiveQueryClient);
  dart.setMethodSignature(parse_server_sdk.LiveQueryClient, () => ({
    __proto__: dart.getMethods(parse_server_sdk.LiveQueryClient.__proto__),
    reconnect: dart.fnType(async.Future$(dart.void), [], {userInitialized: core.bool}, {}),
    readyState: dart.fnType(core.int, []),
    disconnect: dart.fnType(async.Future, [], {userInitialized: core.bool}, {}),
    subscribe: dart.gFnType(T => [async.Future$(parse_server_sdk.Subscription$(T)), [parse_server_sdk.QueryBuilder$(T)], {copyObject: dart.nullable(T)}, {}], T => [parse_server_sdk.ParseObject]),
    unSubscribe: dart.gFnType(T => [dart.void, [parse_server_sdk.Subscription$(T)]], T => [parse_server_sdk.ParseObject]),
    [_requestIdGenerator]: dart.fnType(core.int, []),
    [_connect]: dart.fnType(async.Future, [], {userInitialized: core.bool}, {}),
    [_connectLiveQuery]: dart.fnType(dart.void, []),
    [_subscribeLiveQuery]: dart.fnType(dart.void, [parse_server_sdk.Subscription$(parse_server_sdk.ParseObject)]),
    [_handleMessage]: dart.fnType(dart.void, [core.String])
  }));
  dart.setGetterSignature(parse_server_sdk.LiveQueryClient, () => ({
    __proto__: dart.getGetters(parse_server_sdk.LiveQueryClient.__proto__),
    getClientEventStream: async.Stream$(parse_server_sdk.LiveQueryClientEvent),
    [_debug]: core.bool,
    [_sendSessionId$0]: core.bool,
    [_clientEventStreamController]: async.StreamController$(parse_server_sdk.LiveQueryClientEvent),
    [_clientEventStream]: async.Stream$(parse_server_sdk.LiveQueryClientEvent),
    reconnectingController: parse_server_sdk.LiveQueryReconnectingController
  }));
  dart.setSetterSignature(parse_server_sdk.LiveQueryClient, () => ({
    __proto__: dart.getSetters(parse_server_sdk.LiveQueryClient.__proto__),
    [_debug]: core.bool,
    [_sendSessionId$0]: core.bool,
    [_clientEventStreamController]: async.StreamController$(parse_server_sdk.LiveQueryClientEvent),
    [_clientEventStream]: async.Stream$(parse_server_sdk.LiveQueryClientEvent),
    reconnectingController: parse_server_sdk.LiveQueryReconnectingController
  }));
  dart.setLibraryUri(parse_server_sdk.LiveQueryClient, I[1]);
  dart.setFieldSignature(parse_server_sdk.LiveQueryClient, () => ({
    __proto__: dart.getFields(parse_server_sdk.LiveQueryClient.__proto__),
    [_webSocket]: dart.fieldType(dart.nullable(parse_websocket_html.WebSocket)),
    [__LiveQueryClient__debug]: dart.fieldType(dart.nullable(core.bool)),
    [__LiveQueryClient__debug_isSet]: dart.fieldType(core.bool),
    [__LiveQueryClient__sendSessionId]: dart.fieldType(dart.nullable(core.bool)),
    [__LiveQueryClient__sendSessionId_isSet]: dart.fieldType(core.bool),
    [_channel]: dart.fieldType(dart.nullable(channel.WebSocketChannel)),
    [_liveQueryURL]: dart.fieldType(dart.nullable(core.String)),
    [_connecting]: dart.fieldType(core.bool),
    [__LiveQueryClient__clientEventStreamController]: dart.fieldType(dart.nullable(async.StreamController$(parse_server_sdk.LiveQueryClientEvent))),
    [__LiveQueryClient__clientEventStreamController_isSet]: dart.fieldType(core.bool),
    [__LiveQueryClient__clientEventStream]: dart.fieldType(dart.nullable(async.Stream$(parse_server_sdk.LiveQueryClientEvent))),
    [__LiveQueryClient__clientEventStream_isSet]: dart.fieldType(core.bool),
    [__LiveQueryClient_reconnectingController]: dart.fieldType(dart.nullable(parse_server_sdk.LiveQueryReconnectingController)),
    [__LiveQueryClient_reconnectingController_isSet]: dart.fieldType(core.bool),
    [_requestSubscription]: dart.finalFieldType(core.Map$(core.int, parse_server_sdk.Subscription$(parse_server_sdk.ParseObject)))
  }));
  dart.defineLazy(parse_server_sdk.LiveQueryClient, {
    /*parse_server_sdk.LiveQueryClient._instance*/get _instance() {
      return null;
    },
    set _instance(_) {},
    /*parse_server_sdk.LiveQueryClient._requestIdCount*/get _requestIdCount() {
      return 1;
    },
    set _requestIdCount(_) {}
  }, false);
  var __LiveQuery_client = dart.privateName(parse_server_sdk, "_#LiveQuery#client");
  var __LiveQuery_client_isSet = dart.privateName(parse_server_sdk, "_#LiveQuery#client#isSet");
  parse_server_sdk.LiveQuery = class LiveQuery extends core.Object {
    get client() {
      let t24;
      return dart.test(this[__LiveQuery_client_isSet]) ? (t24 = this[__LiveQuery_client], t24) : dart.throw(new _internal.LateError.fieldNI("client"));
    }
    set client(t24) {
      if (t24 == null) dart.nullFailed(I[12], 422, 24, "null");
      this[__LiveQuery_client_isSet] = true;
      this[__LiveQuery_client] = t24;
    }
  };
  (parse_server_sdk.LiveQuery.new = function(opts) {
    let t24;
    let debug = opts && 'debug' in opts ? opts.debug : null;
    let autoSendSessionId = opts && 'autoSendSessionId' in opts ? opts.autoSendSessionId : null;
    this[_debug] = null;
    this[_sendSessionId$0] = null;
    this[__LiveQuery_client] = null;
    this[__LiveQuery_client_isSet] = false;
    this[_debug] = parse_server_sdk.isDebugEnabled({objectLevelDebug: debug});
    this[_sendSessionId$0] = (t24 = autoSendSessionId, t24 == null ? parse_server_sdk.ParseCoreData.new().autoSendSessionId : t24);
    this.client = parse_server_sdk.LiveQueryClient._getInstance({debug: this[_debug], autoSendSessionId: this[_sendSessionId$0]});
  }).prototype = parse_server_sdk.LiveQuery.prototype;
  dart.addTypeTests(parse_server_sdk.LiveQuery);
  dart.addTypeCaches(parse_server_sdk.LiveQuery);
  dart.setGetterSignature(parse_server_sdk.LiveQuery, () => ({
    __proto__: dart.getGetters(parse_server_sdk.LiveQuery.__proto__),
    client: parse_server_sdk.LiveQueryClient
  }));
  dart.setSetterSignature(parse_server_sdk.LiveQuery, () => ({
    __proto__: dart.getSetters(parse_server_sdk.LiveQuery.__proto__),
    client: parse_server_sdk.LiveQueryClient
  }));
  dart.setLibraryUri(parse_server_sdk.LiveQuery, I[1]);
  dart.setFieldSignature(parse_server_sdk.LiveQuery, () => ({
    __proto__: dart.getFields(parse_server_sdk.LiveQuery.__proto__),
    [_debug]: dart.fieldType(dart.nullable(core.bool)),
    [_sendSessionId$0]: dart.fieldType(dart.nullable(core.bool)),
    [__LiveQuery_client]: dart.fieldType(dart.nullable(parse_server_sdk.LiveQueryClient)),
    [__LiveQuery_client_isSet]: dart.fieldType(core.bool)
  }));
  var object$ = dart.privateName(parse_server_sdk, "QueryBuilder.object");
  var queries = dart.privateName(parse_server_sdk, "QueryBuilder.queries");
  var limiters = dart.privateName(parse_server_sdk, "QueryBuilder.limiters");
  var _buildQueryWithColumnValueAndOperator = dart.privateName(parse_server_sdk, "_buildQueryWithColumnValueAndOperator");
  var _buildQueryRelational = dart.privateName(parse_server_sdk, "_buildQueryRelational");
  var _buildQueryRelationalKey = dart.privateName(parse_server_sdk, "_buildQueryRelationalKey");
  var _buildQueryCount = dart.privateName(parse_server_sdk, "_buildQueryCount");
  var _checkForMultipleColumnInstances = dart.privateName(parse_server_sdk, "_checkForMultipleColumnInstances");
  const _is_QueryBuilder_default = Symbol('_is_QueryBuilder_default');
  parse_server_sdk.QueryBuilder$ = dart.generic(T => {
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    class QueryBuilder extends core.Object {
      get object() {
        return this[object$];
      }
      set object(value) {
        this[object$] = TN().as(value);
      }
      get queries() {
        return this[queries];
      }
      set queries(value) {
        this[queries] = value;
      }
      get limiters() {
        return this[limiters];
      }
      set limiters(value) {
        super.limiters = value;
      }
      setLimit(limit) {
        if (limit == null) dart.nullFailed(I[13], 41, 21, "limit");
        this.limiters[$_set]("limit", limit);
      }
      setAmountToSkip(skip) {
        if (skip == null) dart.nullFailed(I[13], 46, 28, "skip");
        this.limiters[$_set]("skip", skip);
      }
      whereEquals(where) {
        if (where == null) dart.nullFailed(I[13], 51, 27, "where");
        this.limiters[$_set]("where", where);
      }
      orderByAscending(order) {
        if (order == null) dart.nullFailed(I[13], 59, 32, "order");
        if (!dart.test(this.limiters[$containsKey]("order"))) {
          this.limiters[$_set]("order", order);
        } else {
          this.limiters[$_set]("order", dart.dsend(dart.dsend(this.limiters[$_get]("order"), '+', [","]), '+', [order]));
        }
      }
      orderByDescending(order) {
        if (order == null) dart.nullFailed(I[13], 71, 33, "order");
        if (!dart.test(this.limiters[$containsKey]("order"))) {
          this.limiters[$_set]("order", "-" + dart.str(order));
        } else {
          this.limiters[$_set]("order", dart.dsend(dart.dsend(this.limiters[$_get]("order"), '+', [","]), '+', ["-" + dart.str(order)]));
        }
      }
      keysToReturn(keys) {
        if (keys == null) dart.nullFailed(I[13], 83, 34, "keys");
        this.limiters[$_set]("keys", this.concatenateArray(keys));
      }
      excludeKeys(keys) {
        if (keys == null) dart.nullFailed(I[13], 90, 33, "keys");
        this.limiters[$_set]("excludeKeys", this.concatenateArray(keys));
      }
      includeObject(objectTypes) {
        if (objectTypes == null) dart.nullFailed(I[13], 95, 35, "objectTypes");
        this.limiters[$_set]("include", this.concatenateArray(objectTypes));
      }
      whereStartsWith(column, query, opts) {
        if (column == null) dart.nullFailed(I[13], 100, 31, "column");
        if (query == null) dart.nullFailed(I[13], 100, 46, "query");
        let caseSensitive = opts && 'caseSensitive' in opts ? opts.caseSensitive : false;
        if (caseSensitive == null) dart.nullFailed(I[13], 101, 13, "caseSensitive");
        if (dart.test(caseSensitive)) {
          this.queries[$add](new (T$.MapEntryOfString$dynamic()).__("SINGLE_QUERY", "\"" + dart.str(column) + "\":{\"$regex\": \"^" + dart.str(query) + "\"}"));
        } else {
          this.queries[$add](new (T$.MapEntryOfString$dynamic()).__("SINGLE_QUERY", "\"" + dart.str(column) + "\":{\"$regex\": \"^" + dart.str(query) + "\", \"$options\": \"i\"}"));
        }
      }
      whereEndsWith(column, query, opts) {
        if (column == null) dart.nullFailed(I[13], 112, 29, "column");
        if (query == null) dart.nullFailed(I[13], 112, 44, "query");
        let caseSensitive = opts && 'caseSensitive' in opts ? opts.caseSensitive : false;
        if (caseSensitive == null) dart.nullFailed(I[13], 113, 13, "caseSensitive");
        if (dart.test(caseSensitive)) {
          this.queries[$add](new (T$.MapEntryOfString$dynamic()).__("SINGLE_QUERY", "\"" + dart.str(column) + "\":{\"$regex\": \"" + dart.str(query) + "^\"}"));
        } else {
          this.queries[$add](new (T$.MapEntryOfString$dynamic()).__("SINGLE_QUERY", "\"" + dart.str(column) + "\":{\"$regex\": \"" + dart.str(query) + "^\", \"$options\": \"i\"}"));
        }
      }
      whereEqualTo(column, value) {
        if (column == null) dart.nullFailed(I[13], 124, 28, "column");
        this.queries[$add](this[_buildQueryWithColumnValueAndOperator](new (T$.MapEntryOfString$dynamic()).__(column, value), "NO_OP"));
      }
      whereLessThan(column, value) {
        if (column == null) dart.nullFailed(I[13], 131, 29, "column");
        this.queries[$add](this[_buildQueryWithColumnValueAndOperator](new (T$.MapEntryOfString$dynamic()).__(column, value), "$lt"));
      }
      whereLessThanOrEqualTo(column, value) {
        if (column == null) dart.nullFailed(I[13], 138, 38, "column");
        this.queries[$add](this[_buildQueryWithColumnValueAndOperator](new (T$.MapEntryOfString$dynamic()).__(column, value), "$lte"));
      }
      whereGreaterThan(column, value) {
        if (column == null) dart.nullFailed(I[13], 145, 32, "column");
        this.queries[$add](this[_buildQueryWithColumnValueAndOperator](new (T$.MapEntryOfString$dynamic()).__(column, value), "$gt"));
      }
      whereGreaterThanOrEqualsTo(column, value) {
        if (column == null) dart.nullFailed(I[13], 152, 42, "column");
        this.queries[$add](this[_buildQueryWithColumnValueAndOperator](new (T$.MapEntryOfString$dynamic()).__(column, value), "$gte"));
      }
      whereNotEqualTo(column, value) {
        if (column == null) dart.nullFailed(I[13], 158, 31, "column");
        this.queries[$add](this[_buildQueryWithColumnValueAndOperator](new (T$.MapEntryOfString$dynamic()).__(column, value), "$ne"));
      }
      whereContainedIn(column, value) {
        if (column == null) dart.nullFailed(I[13], 164, 32, "column");
        if (value == null) dart.nullFailed(I[13], 164, 54, "value");
        this.queries[$add](this[_buildQueryWithColumnValueAndOperator](new (T$.MapEntryOfString$dynamic()).__(column, value), "$in"));
      }
      whereNotContainedIn(column, value) {
        if (column == null) dart.nullFailed(I[13], 170, 35, "column");
        if (value == null) dart.nullFailed(I[13], 170, 57, "value");
        this.queries[$add](this[_buildQueryWithColumnValueAndOperator](new (T$.MapEntryOfString$dynamic()).__(column, value), "$nin"));
      }
      whereValueExists(column, value) {
        if (column == null) dart.nullFailed(I[13], 176, 32, "column");
        if (value == null) dart.nullFailed(I[13], 176, 45, "value");
        this.queries[$add](this[_buildQueryWithColumnValueAndOperator](new (T$.MapEntryOfString$dynamic()).__(column, value), "$exists"));
      }
      whereRelatedTo(column, className, objectId) {
        if (column == null) dart.nullFailed(I[13], 182, 30, "column");
        if (className == null) dart.nullFailed(I[13], 182, 45, "className");
        if (objectId == null) dart.nullFailed(I[13], 182, 63, "objectId");
        this.queries[$add](new (T$.MapEntryOfString$dynamic()).__("SINGLE_QUERY", "\"$relatedTo\":{\"object\":{\"__type\":\"Pointer\",\"className\":\"" + dart.str(className) + "\",\"objectId\":\"" + dart.str(objectId) + "\"},\"key\":\"" + dart.str(column) + "\"}"));
      }
      selectKeys(column, value) {
        if (column == null) dart.nullFailed(I[13], 188, 26, "column");
        this.queries[$add](this[_buildQueryWithColumnValueAndOperator](new (T$.MapEntryOfString$dynamic()).__(column, value), "$select"));
      }
      dontSelectKeys(column, value) {
        if (column == null) dart.nullFailed(I[13], 194, 30, "column");
        this.queries[$add](this[_buildQueryWithColumnValueAndOperator](new (T$.MapEntryOfString$dynamic()).__(column, value), "$dontSelect"));
      }
      whereArrayContainsAll(column, value) {
        if (column == null) dart.nullFailed(I[13], 200, 37, "column");
        if (value == null) dart.nullFailed(I[13], 200, 59, "value");
        this.queries[$add](this[_buildQueryWithColumnValueAndOperator](new (T$.MapEntryOfString$dynamic()).__(column, value), "$all"));
      }
      regEx(column, value) {
        if (column == null) dart.nullFailed(I[13], 207, 21, "column");
        if (value == null) dart.nullFailed(I[13], 207, 36, "value");
        this.queries[$add](this[_buildQueryWithColumnValueAndOperator](new (T$.MapEntryOfString$dynamic()).__(column, value), "$regex"));
      }
      whereContains(column, value, opts) {
        if (column == null) dart.nullFailed(I[13], 213, 29, "column");
        if (value == null) dart.nullFailed(I[13], 213, 44, "value");
        let caseSensitive = opts && 'caseSensitive' in opts ? opts.caseSensitive : false;
        if (caseSensitive == null) dart.nullFailed(I[13], 214, 13, "caseSensitive");
        if (dart.test(caseSensitive)) {
          this.queries[$add](new (T$.MapEntryOfString$dynamic()).__("SINGLE_QUERY", "\"" + dart.str(column) + "\":{\"$regex\": \"" + dart.str(value) + "\"}"));
        } else {
          this.queries[$add](new (T$.MapEntryOfString$dynamic()).__("SINGLE_QUERY", "\"" + dart.str(column) + "\":{\"$regex\": \"" + dart.str(value) + "\", \"$options\": \"i\"}"));
        }
      }
      whereContainsWholeWord(column, query, opts) {
        if (column == null) dart.nullFailed(I[13], 226, 38, "column");
        if (query == null) dart.nullFailed(I[13], 226, 53, "query");
        let caseSensitive = opts && 'caseSensitive' in opts ? opts.caseSensitive : false;
        if (caseSensitive == null) dart.nullFailed(I[13], 227, 13, "caseSensitive");
        let orderByScore = opts && 'orderByScore' in opts ? opts.orderByScore : true;
        if (orderByScore == null) dart.nullFailed(I[13], 227, 41, "orderByScore");
        this.queries[$add](new (T$.MapEntryOfString$dynamic()).__("SINGLE_QUERY", "\"" + dart.str(column) + "\":{\"$text\":{\"$search\":{\"$term\": \"" + dart.str(query) + "\", \"$caseSensitive\": " + dart.str(caseSensitive) + " }}}"));
        if (dart.test(orderByScore)) {
          this.orderByDescending("score");
        }
      }
      whereNear(column, point) {
        if (column == null) dart.nullFailed(I[13], 236, 25, "column");
        if (point == null) dart.nullFailed(I[13], 236, 47, "point");
        let latitude = point.latitude;
        let longitude = point.longitude;
        this.queries[$add](new (T$.MapEntryOfString$dynamic()).__("SINGLE_QUERY", "\"" + dart.str(column) + "\":{\"$nearSphere\":{\"__type\":\"GeoPoint\",\"latitude\":" + dart.str(latitude) + ",\"longitude\":" + dart.str(longitude) + "}}"));
      }
      whereWithinMiles(column, point, maxDistance) {
        if (column == null) dart.nullFailed(I[13], 245, 14, "column");
        if (point == null) dart.nullFailed(I[13], 245, 36, "point");
        if (maxDistance == null) dart.nullFailed(I[13], 245, 50, "maxDistance");
        let latitude = point.latitude;
        let longitude = point.longitude;
        this.queries[$add](new (T$.MapEntryOfString$dynamic()).__("SINGLE_QUERY", "\"" + dart.str(column) + "\":{\"$nearSphere\":{\"__type\":\"GeoPoint\",\"latitude\":" + dart.str(latitude) + ",\"longitude\":" + dart.str(longitude) + "},\"$maxDistanceInMiles\":" + dart.str(maxDistance) + "}"));
      }
      whereWithinKilometers(column, point, maxDistance) {
        if (column == null) dart.nullFailed(I[13], 255, 14, "column");
        if (point == null) dart.nullFailed(I[13], 255, 36, "point");
        if (maxDistance == null) dart.nullFailed(I[13], 255, 50, "maxDistance");
        let latitude = point.latitude;
        let longitude = point.longitude;
        this.queries[$add](new (T$.MapEntryOfString$dynamic()).__("SINGLE_QUERY", "\"" + dart.str(column) + "\":{\"$nearSphere\":{\"__type\":\"GeoPoint\",\"latitude\":" + dart.str(latitude) + ",\"longitude\":" + dart.str(longitude) + "},\"$maxDistanceInKilometers\":" + dart.str(maxDistance) + "}"));
      }
      whereWithinRadians(column, point, maxDistance) {
        if (column == null) dart.nullFailed(I[13], 265, 14, "column");
        if (point == null) dart.nullFailed(I[13], 265, 36, "point");
        if (maxDistance == null) dart.nullFailed(I[13], 265, 50, "maxDistance");
        let latitude = point.latitude;
        let longitude = point.longitude;
        this.queries[$add](new (T$.MapEntryOfString$dynamic()).__("SINGLE_QUERY", "\"" + dart.str(column) + "\":{\"$nearSphere\":{\"__type\":\"GeoPoint\",\"latitude\":" + dart.str(latitude) + ",\"longitude\":" + dart.str(longitude) + "},\"$maxDistanceInRadians\":" + dart.str(maxDistance) + "}"));
      }
      whereWithinGeoBox(column, southwest, northeast) {
        if (column == null) dart.nullFailed(I[13], 275, 14, "column");
        if (southwest == null) dart.nullFailed(I[13], 275, 36, "southwest");
        if (northeast == null) dart.nullFailed(I[13], 275, 61, "northeast");
        let latitudeS = southwest.latitude;
        let longitudeS = southwest.longitude;
        let latitudeN = northeast.latitude;
        let longitudeN = northeast.longitude;
        this.queries[$add](new (T$.MapEntryOfString$dynamic()).__("SINGLE_QUERY", "\"" + dart.str(column) + "\":{\"$within\":{\"$box\": [{\"__type\": \"GeoPoint\",\"latitude\":" + dart.str(latitudeS) + ",\"longitude\":" + dart.str(longitudeS) + "},{\"__type\": \"GeoPoint\",\"latitude\":" + dart.str(latitudeN) + ",\"longitude\":" + dart.str(longitudeN) + "}]}}"));
      }
      whereMatchesQuery(E, column, query) {
        if (column == null) dart.nullFailed(I[13], 287, 56, "column");
        if (query == null) dart.nullFailed(I[13], 287, 80, "query");
        let inQuery = query[_buildQueryRelational](dart.nullCheck(query.object).parseClassName);
        this.queries[$add](new (T$.MapEntryOfString$dynamic()).__("SINGLE_QUERY", "\"" + dart.str(column) + "\":{\"$inQuery\":" + dart.str(inQuery) + "}"));
      }
      whereDoesNotMatchQuery(E, column, query) {
        if (column == null) dart.nullFailed(I[13], 296, 61, "column");
        if (query == null) dart.nullFailed(I[13], 296, 85, "query");
        let inQuery = query[_buildQueryRelational](dart.nullCheck(query.object).parseClassName);
        this.queries[$add](new (T$.MapEntryOfString$dynamic()).__("SINGLE_QUERY", "\"" + dart.str(column) + "\":{\"$notInQuery\":" + dart.str(inQuery) + "}"));
      }
      whereMatchesKeyInQuery(E, column, keyInQuery, query) {
        if (column == null) dart.nullFailed(I[13], 306, 14, "column");
        if (keyInQuery == null) dart.nullFailed(I[13], 306, 29, "keyInQuery");
        if (query == null) dart.nullFailed(I[13], 306, 57, "query");
        if (dart.test(query.queries[$isEmpty])) {
          dart.throw(new core.ArgumentError.new("query conditions is required"));
        }
        if (dart.test(this.limiters[$containsKey]("order"))) {
          dart.throw(new core.ArgumentError.new("order is not allowed"));
        }
        if (dart.test(this.limiters[$containsKey]("include"))) {
          dart.throw(new core.ArgumentError.new("include is not allowed"));
        }
        let inQuery = query[_buildQueryRelationalKey](dart.nullCheck(query.object).parseClassName, keyInQuery);
        this.queries[$add](new (T$.MapEntryOfString$dynamic()).__("SINGLE_QUERY", "\"" + dart.str(column) + "\":{\"$select\":" + dart.str(inQuery) + "}"));
      }
      whereDoesNotMatchKeyInQuery(E, column, keyInQuery, query) {
        if (column == null) dart.nullFailed(I[13], 326, 14, "column");
        if (keyInQuery == null) dart.nullFailed(I[13], 326, 29, "keyInQuery");
        if (query == null) dart.nullFailed(I[13], 326, 57, "query");
        if (dart.test(query.queries[$isEmpty])) {
          dart.throw(new core.ArgumentError.new("query conditions is required"));
        }
        if (dart.test(this.limiters[$containsKey]("order"))) {
          dart.throw(new core.ArgumentError.new("order is not allowed"));
        }
        if (dart.test(this.limiters[$containsKey]("include"))) {
          dart.throw(new core.ArgumentError.new("include is not allowed"));
        }
        let inQuery = query[_buildQueryRelationalKey](dart.nullCheck(query.object).parseClassName, keyInQuery);
        this.queries[$add](new (T$.MapEntryOfString$dynamic()).__("SINGLE_QUERY", "\"" + dart.str(column) + "\":{\"$dontSelect\":" + dart.str(inQuery) + "}"));
      }
      query(T, opts) {
        let progressCallback = opts && 'progressCallback' in opts ? opts.progressCallback : null;
        return async.async(parse_server_sdk.ParseResponse, (function* query() {
          return dart.nullCheck(this.object).query(T, this.buildQuery(), {progressCallback: progressCallback});
        }).bind(this));
      }
      distinct(T, className) {
        if (className == null) dart.nullFailed(I[13], 356, 14, "className");
        return async.async(parse_server_sdk.ParseResponse, (function* distinct() {
          let queryString = "distinct=" + dart.str(className);
          return dart.nullCheck(this.object).distinct(T, queryString);
        }).bind(this));
      }
      count() {
        return async.async(parse_server_sdk.ParseResponse, (function* count() {
          return dart.nullCheck(this.object).query(parse_server_sdk.ParseObject, this[_buildQueryCount]());
        }).bind(this));
      }
      buildQuery() {
        this.queries = this[_checkForMultipleColumnInstances](this.queries);
        return "where={" + dart.str(this.buildQueries(this.queries)) + "}" + dart.str(this.getLimiters(this.limiters));
      }
      [_buildQueryRelational](className) {
        if (className == null) dart.nullFailed(I[13], 373, 39, "className");
        this.queries = this[_checkForMultipleColumnInstances](this.queries);
        return "{\"where\":{" + dart.str(this.buildQueries(this.queries)) + "},\"className\":\"" + dart.str(className) + "\"" + dart.str(this.getLimitersRelational(this.limiters)) + "}";
      }
      [_buildQueryRelationalKey](className, keyInQuery) {
        if (className == null) dart.nullFailed(I[13], 379, 42, "className");
        if (keyInQuery == null) dart.nullFailed(I[13], 379, 60, "keyInQuery");
        this.queries = this[_checkForMultipleColumnInstances](this.queries);
        return "{\"query\":{\"className\":\"" + dart.str(className) + "\",\"where\":{" + dart.str(this.buildQueries(this.queries)) + "}},\"key\":\"" + dart.str(keyInQuery) + "\"}";
      }
      [_buildQueryCount]() {
        this.queries = this[_checkForMultipleColumnInstances](this.queries);
        return "where={" + dart.str(this.buildQueries(this.queries)) + "}&count=1";
      }
      buildQueries(queries) {
        if (queries == null) dart.nullFailed(I[13], 391, 55, "queries");
        let queryBuilder = "";
        for (let item of queries) {
          if (dart.equals(item, queries[$first])) {
            queryBuilder = queryBuilder + dart.notNull(core.String.as(item.value));
          } else {
            queryBuilder = queryBuilder + ("," + dart.str(item.value));
          }
        }
        return queryBuilder;
      }
      concatenateArray(queries) {
        if (queries == null) dart.nullFailed(I[13], 405, 40, "queries");
        let queryBuilder = "";
        for (let item of queries) {
          if (item == queries[$first]) {
            queryBuilder = queryBuilder + dart.notNull(item);
          } else {
            queryBuilder = queryBuilder + ("," + dart.str(item));
          }
        }
        return queryBuilder;
      }
      [_buildQueryWithColumnValueAndOperator](columnAndValue, queryOperator) {
        if (columnAndValue == null) dart.nullFailed(I[13], 422, 33, "columnAndValue");
        if (queryOperator == null) dart.nullFailed(I[13], 422, 56, "queryOperator");
        let key = columnAndValue.key;
        let value = parse_server_sdk.convertValueToCorrectType(parse_server_sdk.parseEncode(columnAndValue.value));
        if (queryOperator === "NO_OP") {
          return new (T$.MapEntryOfString$dynamic()).__("NO_OP", "\"" + dart.str(key) + "\": " + dart.str(convert.jsonEncode(value)));
        } else {
          let queryString = "\"" + dart.str(key) + "\":";
          let queryOperatorAndValueMap = new (T$.LinkedMapOfString$dynamic()).new();
          queryOperatorAndValueMap[$_set](queryOperator, parse_server_sdk.parseEncode(value));
          let formattedQueryOperatorAndValue = convert.jsonEncode(queryOperatorAndValueMap);
          queryString = queryString + dart.str(formattedQueryOperatorAndValue);
          return new (T$.MapEntryOfString$dynamic()).__(key, queryString);
        }
      }
      [_checkForMultipleColumnInstances](queries) {
        if (queries == null) dart.nullFailed(I[13], 445, 39, "queries");
        let sanitizedQueries = T$.JSArrayOfMapEntryOfString$dynamic().of([]);
        let keysAlreadyCompacted = T$.JSArrayOfString().of([]);
        for (let query of queries) {
          if (query.key === "NO_OP" || query.key === "SINGLE_QUERY") {
            sanitizedQueries[$add](new (T$.MapEntryOfString$dynamic()).__("NO_OP", query.value));
          }
          if (!dart.test(keysAlreadyCompacted[$contains](query.key)) && query.key !== "NO_OP" && query.key !== "SINGLE_QUERY") {
            keysAlreadyCompacted[$add](query.key);
            let listOfQueriesCompact = queries[$where](dart.fn(entry => {
              if (entry == null) dart.nullFailed(I[13], 467, 47, "entry");
              return query.key == entry.key;
            }, T$.MapEntryOfString$dynamicTobool()))[$toList]();
            let queryStart = "\"" + dart.str(query.key) + "\":";
            let queryEnd = "";
            for (let queryToCompact of listOfQueriesCompact) {
              let queryToCompactValue = dart.toString(queryToCompact.value);
              queryToCompactValue = queryToCompactValue[$replaceFirst]("{", "");
              queryToCompactValue = queryToCompactValue[$replaceRange](queryToCompactValue.length - 1, queryToCompactValue.length, "");
              if (dart.equals(listOfQueriesCompact[$first], queryToCompact)) {
                queryEnd = queryEnd + queryToCompactValue[$replaceAll](queryStart, " ");
              } else {
                queryEnd = queryEnd + queryToCompactValue[$replaceAll](queryStart, ", ");
              }
            }
            sanitizedQueries[$add](new (T$.MapEntryOfString$dynamic()).__(query.key, queryStart = queryStart + ("{" + queryEnd + "}")));
          }
        }
        return sanitizedQueries;
      }
      getLimiters(map) {
        if (map == null) dart.nullFailed(I[13], 496, 43, "map");
        let result = "";
        map[$forEach](dart.fn((key, value) => {
          if (key == null) dart.nullFailed(I[13], 498, 25, "key");
          result = result + ("&" + dart.str(key) + "=" + dart.str(value));
        }, T$.StringAnddynamicTovoid()));
        return result;
      }
      getLimitersRelational(map) {
        if (map == null) dart.nullFailed(I[13], 505, 53, "map");
        let result = "";
        map[$forEach](dart.fn((key, value) => {
          if (key == null) dart.nullFailed(I[13], 507, 25, "key");
          if (result[$isNotEmpty]) {
            result = result + (",\"" + dart.str(key) + "\":" + dart.str(value));
          } else {
            result = "\"" + dart.str(key) + "\":" + dart.str(value);
          }
        }, T$.StringAnddynamicTovoid()));
        return result;
      }
    }
    (QueryBuilder.new = function(object) {
      this[queries] = T$.JSArrayOfMapEntryOfString$dynamic().of([]);
      this[limiters] = new (T$.LinkedMapOfString$dynamic()).new();
      this[object$] = object;
      ;
    }).prototype = QueryBuilder.prototype;
    (QueryBuilder.name_ = function(classname) {
      if (classname == null) dart.nullFailed(I[13], 8, 28, "classname");
      QueryBuilder.new.call(this, TN().as(parse_server_sdk.ParseCoreData.instance.createObject(classname)));
    }).prototype = QueryBuilder.prototype;
    (QueryBuilder.or = function(object, list) {
      if (list == null) dart.nullFailed(I[13], 11, 54, "list");
      this[queries] = T$.JSArrayOfMapEntryOfString$dynamic().of([]);
      this[limiters] = new (T$.LinkedMapOfString$dynamic()).new();
      this[object$] = object;
      let query = "\"$or\":[";
      for (let i = 0; i < dart.notNull(list[$length]); i = i + 1) {
        if (i > 0) {
          query = query + ",";
        }
        query = query + ("{" + dart.notNull(list[$_get](i).buildQueries(list[$_get](i).queries)) + "}");
      }
      query = query + "]";
      this.queries[$add](new (T$.MapEntryOfString$dynamic()).__("NO_OP", query));
    }).prototype = QueryBuilder.prototype;
    (QueryBuilder.copy = function(query) {
      if (query == null) dart.nullFailed(I[13], 23, 37, "query");
      this[queries] = T$.JSArrayOfMapEntryOfString$dynamic().of([]);
      this[limiters] = new (T$.LinkedMapOfString$dynamic()).new();
      this[object$] = null;
      this.object = query.object;
      this.queries = query.queries[$map](T$.MapEntryOfString$dynamic(), dart.fn(entry => {
        if (entry == null) dart.nullFailed(I[13], 26, 41, "entry");
        return new (T$.MapEntryOfString$dynamic()).__(entry.key, dart.toString(entry.value));
      }, T$.MapEntryOfString$dynamicToMapEntryOfString$dynamic()))[$toList]();
      query.limiters[$forEach](dart.fn((key, value) => {
        if (key == null) dart.nullFailed(I[13], 29, 36, "key");
        return this.limiters[$putIfAbsent](key, dart.fn(() => dart.toString(value), T$.VoidToString()));
      }, T$.StringAnddynamicTovoid()));
    }).prototype = QueryBuilder.prototype;
    dart.addTypeTests(QueryBuilder);
    QueryBuilder.prototype[_is_QueryBuilder_default] = true;
    dart.addTypeCaches(QueryBuilder);
    dart.setMethodSignature(QueryBuilder, () => ({
      __proto__: dart.getMethods(QueryBuilder.__proto__),
      setLimit: dart.fnType(dart.void, [core.int]),
      setAmountToSkip: dart.fnType(dart.void, [core.int]),
      whereEquals: dart.fnType(dart.void, [core.String]),
      orderByAscending: dart.fnType(dart.void, [core.String]),
      orderByDescending: dart.fnType(dart.void, [core.String]),
      keysToReturn: dart.fnType(dart.void, [core.List$(core.String)]),
      excludeKeys: dart.fnType(dart.void, [core.List$(core.String)]),
      includeObject: dart.fnType(dart.void, [core.List$(core.String)]),
      whereStartsWith: dart.fnType(dart.void, [core.String, core.String], {caseSensitive: core.bool}, {}),
      whereEndsWith: dart.fnType(dart.void, [core.String, core.String], {caseSensitive: core.bool}, {}),
      whereEqualTo: dart.fnType(dart.void, [core.String, dart.dynamic]),
      whereLessThan: dart.fnType(dart.void, [core.String, dart.dynamic]),
      whereLessThanOrEqualTo: dart.fnType(dart.void, [core.String, dart.dynamic]),
      whereGreaterThan: dart.fnType(dart.void, [core.String, dart.dynamic]),
      whereGreaterThanOrEqualsTo: dart.fnType(dart.void, [core.String, dart.dynamic]),
      whereNotEqualTo: dart.fnType(dart.void, [core.String, dart.dynamic]),
      whereContainedIn: dart.fnType(dart.void, [core.String, core.List]),
      whereNotContainedIn: dart.fnType(dart.void, [core.String, core.List]),
      whereValueExists: dart.fnType(dart.void, [core.String, core.bool]),
      whereRelatedTo: dart.fnType(dart.void, [core.String, core.String, core.String]),
      selectKeys: dart.fnType(dart.void, [core.String, dart.dynamic]),
      dontSelectKeys: dart.fnType(dart.void, [core.String, dart.dynamic]),
      whereArrayContainsAll: dart.fnType(dart.void, [core.String, core.List]),
      regEx: dart.fnType(dart.void, [core.String, core.String]),
      whereContains: dart.fnType(dart.void, [core.String, core.String], {caseSensitive: core.bool}, {}),
      whereContainsWholeWord: dart.fnType(dart.void, [core.String, core.String], {caseSensitive: core.bool, orderByScore: core.bool}, {}),
      whereNear: dart.fnType(dart.void, [core.String, parse_server_sdk.ParseGeoPoint]),
      whereWithinMiles: dart.fnType(dart.void, [core.String, parse_server_sdk.ParseGeoPoint, core.double]),
      whereWithinKilometers: dart.fnType(dart.void, [core.String, parse_server_sdk.ParseGeoPoint, core.double]),
      whereWithinRadians: dart.fnType(dart.void, [core.String, parse_server_sdk.ParseGeoPoint, core.double]),
      whereWithinGeoBox: dart.fnType(dart.void, [core.String, parse_server_sdk.ParseGeoPoint, parse_server_sdk.ParseGeoPoint]),
      whereMatchesQuery: dart.gFnType(E => [dart.void, [core.String, parse_server_sdk.QueryBuilder$(E)]], E => [parse_server_sdk.ParseObject]),
      whereDoesNotMatchQuery: dart.gFnType(E => [dart.void, [core.String, parse_server_sdk.QueryBuilder$(E)]], E => [parse_server_sdk.ParseObject]),
      whereMatchesKeyInQuery: dart.gFnType(E => [dart.void, [core.String, core.String, parse_server_sdk.QueryBuilder$(E)]], E => [parse_server_sdk.ParseObject]),
      whereDoesNotMatchKeyInQuery: dart.gFnType(E => [dart.void, [core.String, core.String, parse_server_sdk.QueryBuilder$(E)]], E => [parse_server_sdk.ParseObject]),
      query: dart.gFnType(T => [async.Future$(parse_server_sdk.ParseResponse), [], {progressCallback: dart.nullable(dart.fnType(dart.void, [core.int, core.int]))}, {}], T => [parse_server_sdk.ParseObject]),
      distinct: dart.gFnType(T => [async.Future$(parse_server_sdk.ParseResponse), [core.String]], T => [parse_server_sdk.ParseObject]),
      count: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), []),
      buildQuery: dart.fnType(core.String, []),
      [_buildQueryRelational]: dart.fnType(core.String, [core.String]),
      [_buildQueryRelationalKey]: dart.fnType(core.String, [core.String, core.String]),
      [_buildQueryCount]: dart.fnType(core.String, []),
      buildQueries: dart.fnType(core.String, [core.List$(core.MapEntry$(core.String, dart.dynamic))]),
      concatenateArray: dart.fnType(core.String, [core.List$(core.String)]),
      [_buildQueryWithColumnValueAndOperator]: dart.fnType(core.MapEntry$(core.String, dart.dynamic), [core.MapEntry$(core.String, dart.dynamic), core.String]),
      [_checkForMultipleColumnInstances]: dart.fnType(core.List$(core.MapEntry$(core.String, dart.dynamic)), [core.List$(core.MapEntry$(core.String, dart.dynamic))]),
      getLimiters: dart.fnType(core.String, [core.Map$(core.String, dart.dynamic)]),
      getLimitersRelational: dart.fnType(core.String, [core.Map$(core.String, dart.dynamic)])
    }));
    dart.setLibraryUri(QueryBuilder, I[1]);
    dart.setFieldSignature(QueryBuilder, () => ({
      __proto__: dart.getFields(QueryBuilder.__proto__),
      object: dart.fieldType(dart.nullable(T)),
      queries: dart.fieldType(core.List$(core.MapEntry$(core.String, dart.dynamic))),
      limiters: dart.finalFieldType(core.Map$(core.String, dart.dynamic))
    }));
    return QueryBuilder;
  });
  parse_server_sdk.QueryBuilder = parse_server_sdk.QueryBuilder$();
  dart.defineLazy(parse_server_sdk.QueryBuilder, {
    /*parse_server_sdk.QueryBuilder._NO_OPERATOR_NEEDED*/get _NO_OPERATOR_NEEDED() {
      return "NO_OP";
    },
    /*parse_server_sdk.QueryBuilder._SINGLE_QUERY*/get _SINGLE_QUERY() {
      return "SINGLE_QUERY";
    }
  }, false);
  dart.addTypeTests(parse_server_sdk.QueryBuilder, _is_QueryBuilder_default);
  var _publicKEY = dart.privateName(parse_server_sdk, "_publicKEY");
  var _permissionsById = dart.privateName(parse_server_sdk, "_permissionsById");
  var _setPermissionsIfNonEmpty = dart.privateName(parse_server_sdk, "_setPermissionsIfNonEmpty");
  parse_server_sdk.ParseACL = class ParseACL extends core.Object {
    [_setPermissionsIfNonEmpty](opts) {
      let userId = opts && 'userId' in opts ? opts.userId : null;
      if (userId == null) dart.nullFailed(I[14], 24, 24, "userId");
      let readPermission = opts && 'readPermission' in opts ? opts.readPermission : null;
      if (readPermission == null) dart.nullFailed(I[14], 25, 21, "readPermission");
      let writePermission = opts && 'writePermission' in opts ? opts.writePermission : null;
      if (writePermission == null) dart.nullFailed(I[14], 26, 21, "writePermission");
      if (!(dart.test(readPermission) || dart.test(writePermission))) {
        this[_permissionsById][$remove](userId);
      } else {
        this[_permissionsById][$_set](userId, new parse_server_sdk._ACLPermissions.new(readPermission, writePermission));
      }
    }
    getPublicReadAccess() {
      return this.getReadAccess({userId: this[_publicKEY]});
    }
    setPublicReadAccess(opts) {
      let allowed = opts && 'allowed' in opts ? opts.allowed : null;
      if (allowed == null) dart.nullFailed(I[14], 41, 43, "allowed");
      this.setReadAccess({userId: this[_publicKEY], allowed: allowed});
    }
    getPublicWriteAccess() {
      return this.getWriteAccess({userId: this[_publicKEY]});
    }
    setPublicWriteAccess(opts) {
      let allowed = opts && 'allowed' in opts ? opts.allowed : null;
      if (allowed == null) dart.nullFailed(I[14], 51, 44, "allowed");
      this.setWriteAccess({userId: this[_publicKEY], allowed: allowed});
    }
    setReadAccess(opts) {
      let userId = opts && 'userId' in opts ? opts.userId : null;
      if (userId == null) dart.nullFailed(I[14], 56, 39, "userId");
      let allowed = opts && 'allowed' in opts ? opts.allowed : true;
      if (allowed == null) dart.nullFailed(I[14], 56, 52, "allowed");
      let writePermission = this.getWriteAccess({userId: userId});
      this[_setPermissionsIfNonEmpty]({userId: userId, readPermission: allowed, writePermission: writePermission});
    }
    getReadAccess(opts) {
      let t25, t25$;
      let userId = opts && 'userId' in opts ? opts.userId : null;
      if (userId == null) dart.nullFailed(I[14], 67, 39, "userId");
      t25$ = (t25 = this[_permissionsById][$_get](userId), t25 == null ? null : t25.readPermission);
      return t25$ == null ? false : t25$;
    }
    setWriteAccess(opts) {
      let userId = opts && 'userId' in opts ? opts.userId : null;
      if (userId == null) dart.nullFailed(I[14], 72, 40, "userId");
      let allowed = opts && 'allowed' in opts ? opts.allowed : true;
      if (allowed == null) dart.nullFailed(I[14], 72, 53, "allowed");
      let readPermission = this.getReadAccess({userId: userId});
      this[_setPermissionsIfNonEmpty]({userId: userId, readPermission: readPermission, writePermission: allowed});
    }
    getWriteAccess(opts) {
      let t25, t25$;
      let userId = opts && 'userId' in opts ? opts.userId : null;
      if (userId == null) dart.nullFailed(I[14], 83, 40, "userId");
      t25$ = (t25 = this[_permissionsById][$_get](userId), t25 == null ? null : t25.writePermission);
      return t25$ == null ? false : t25$;
    }
    toJson() {
      let map = new (T$.IdentityMapOfString$dynamic()).new();
      this[_permissionsById][$forEach](dart.fn((user, permission) => {
        if (user == null) dart.nullFailed(I[14], 89, 38, "user");
        if (permission == null) dart.nullFailed(I[14], 89, 60, "permission");
        map[$_set](user, permission.toJson());
      }, T$.StringAnd_ACLPermissionsTovoid()));
      return map;
    }
    toString() {
      return convert.json.encode(this.toJson());
    }
    fromJson(map) {
      if (map == null) dart.nullFailed(I[14], 98, 42, "map");
      let parseACL = new parse_server_sdk.ParseACL.new();
      map[$forEach](dart.fn((userId, permission) => {
        if (userId == null) dart.nullFailed(I[14], 101, 25, "userId");
        if (dart.dsend(permission, '_get', ["read"]) != null) {
          parseACL.setReadAccess({userId: userId, allowed: core.bool.as(dart.dsend(permission, '_get', ["read"]))});
        }
        if (dart.dsend(permission, '_get', ["write"]) != null) {
          parseACL.setWriteAccess({userId: userId, allowed: core.bool.as(dart.dsend(permission, '_get', ["write"]))});
        }
      }, T$.StringAnddynamicTovoid()));
      return parseACL;
    }
  };
  (parse_server_sdk.ParseACL.new = function(opts) {
    let owner = opts && 'owner' in opts ? opts.owner : null;
    this[_publicKEY] = "*";
    this[_permissionsById] = new (T$.IdentityMapOfString$_ACLPermissions()).new();
    if (owner != null) {
      this.setReadAccess({userId: dart.nullCheck(owner.objectId), allowed: true});
      this.setWriteAccess({userId: dart.nullCheck(owner.objectId), allowed: true});
    }
  }).prototype = parse_server_sdk.ParseACL.prototype;
  dart.addTypeTests(parse_server_sdk.ParseACL);
  dart.addTypeCaches(parse_server_sdk.ParseACL);
  dart.setMethodSignature(parse_server_sdk.ParseACL, () => ({
    __proto__: dart.getMethods(parse_server_sdk.ParseACL.__proto__),
    [_setPermissionsIfNonEmpty]: dart.fnType(dart.void, [], {}, {readPermission: core.bool, userId: core.String, writePermission: core.bool}),
    getPublicReadAccess: dart.fnType(core.bool, []),
    setPublicReadAccess: dart.fnType(dart.void, [], {}, {allowed: core.bool}),
    getPublicWriteAccess: dart.fnType(core.bool, []),
    setPublicWriteAccess: dart.fnType(dart.void, [], {}, {allowed: core.bool}),
    setReadAccess: dart.fnType(dart.void, [], {allowed: core.bool}, {userId: core.String}),
    getReadAccess: dart.fnType(core.bool, [], {}, {userId: core.String}),
    setWriteAccess: dart.fnType(dart.void, [], {allowed: core.bool}, {userId: core.String}),
    getWriteAccess: dart.fnType(core.bool, [], {}, {userId: core.String}),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    fromJson: dart.fnType(parse_server_sdk.ParseACL, [core.Map$(core.String, dart.dynamic)])
  }));
  dart.setLibraryUri(parse_server_sdk.ParseACL, I[1]);
  dart.setFieldSignature(parse_server_sdk.ParseACL, () => ({
    __proto__: dart.getFields(parse_server_sdk.ParseACL.__proto__),
    [_publicKEY]: dart.finalFieldType(core.String),
    [_permissionsById]: dart.finalFieldType(core.Map$(core.String, parse_server_sdk._ACLPermissions))
  }));
  dart.defineExtensionMethods(parse_server_sdk.ParseACL, ['toString']);
  var _keyReadPermission = dart.privateName(parse_server_sdk, "_keyReadPermission");
  var _keyWritePermission = dart.privateName(parse_server_sdk, "_keyWritePermission");
  var _readPermission$ = dart.privateName(parse_server_sdk, "_readPermission");
  var _writePermission$ = dart.privateName(parse_server_sdk, "_writePermission");
  parse_server_sdk._ACLPermissions = class _ACLPermissions extends core.Object {
    get readPermission() {
      return this[_readPermission$];
    }
    get writePermission() {
      return this[_writePermission$];
    }
    toJson() {
      return new (T$.IdentityMapOfString$dynamic()).from([this[_keyReadPermission], this[_readPermission$], this[_keyWritePermission], this[_writePermission$]]);
    }
  };
  (parse_server_sdk._ACLPermissions.new = function(_readPermission, _writePermission) {
    if (_readPermission == null) dart.nullFailed(I[14], 114, 24, "_readPermission");
    if (_writePermission == null) dart.nullFailed(I[14], 114, 46, "_writePermission");
    this[_keyReadPermission] = "read";
    this[_keyWritePermission] = "write";
    this[_readPermission$] = _readPermission;
    this[_writePermission$] = _writePermission;
    ;
  }).prototype = parse_server_sdk._ACLPermissions.prototype;
  dart.addTypeTests(parse_server_sdk._ACLPermissions);
  dart.addTypeCaches(parse_server_sdk._ACLPermissions);
  dart.setMethodSignature(parse_server_sdk._ACLPermissions, () => ({
    __proto__: dart.getMethods(parse_server_sdk._ACLPermissions.__proto__),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setGetterSignature(parse_server_sdk._ACLPermissions, () => ({
    __proto__: dart.getGetters(parse_server_sdk._ACLPermissions.__proto__),
    readPermission: core.bool,
    writePermission: core.bool
  }));
  dart.setLibraryUri(parse_server_sdk._ACLPermissions, I[1]);
  dart.setFieldSignature(parse_server_sdk._ACLPermissions, () => ({
    __proto__: dart.getFields(parse_server_sdk._ACLPermissions.__proto__),
    [_keyReadPermission]: dart.finalFieldType(core.String),
    [_keyWritePermission]: dart.finalFieldType(core.String),
    [_readPermission$]: dart.finalFieldType(core.bool),
    [_writePermission$]: dart.finalFieldType(core.bool)
  }));
  var parseClassName = dart.privateName(parse_server_sdk, "ParseBase.parseClassName");
  var _dirty = dart.privateName(parse_server_sdk, "_dirty");
  var _unsavedChanges = dart.privateName(parse_server_sdk, "_unsavedChanges");
  var _savingChanges = dart.privateName(parse_server_sdk, "_savingChanges");
  var _objectData = dart.privateName(parse_server_sdk, "_objectData");
  var _isDirty = dart.privateName(parse_server_sdk, "_isDirty");
  var _areChildrenDirty = dart.privateName(parse_server_sdk, "_areChildrenDirty");
  var _getObjectData = dart.privateName(parse_server_sdk, "_getObjectData");
  var _setObjectData = dart.privateName(parse_server_sdk, "_setObjectData");
  parse_server_sdk.ParseBase = class ParseBase extends core.Object {
    get parseClassName() {
      return this[parseClassName];
    }
    set parseClassName(value) {
      this[parseClassName] = value;
    }
    get objectId() {
      return this.get(core.String, "objectId");
    }
    set objectId(objectId) {
      return this.set(T$.StringN(), "objectId", objectId);
    }
    isDirty(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      if (key != null) {
        return this[_unsavedChanges][$_get](key) != null;
      }
      return this[_isDirty](true);
    }
    [_isDirty](considerChildren) {
      if (considerChildren == null) dart.nullFailed(I[15], 24, 22, "considerChildren");
      if (dart.test(this[_dirty]) || dart.test(this[_unsavedChanges][$isNotEmpty]) || this.objectId == null) {
        return true;
      }
      if (dart.test(considerChildren)) {
        return this[_areChildrenDirty](new collection._HashSet.new());
      }
      return false;
    }
    [_areChildrenDirty](seenObjects) {
      if (seenObjects == null) dart.nullFailed(I[15], 35, 39, "seenObjects");
      if (dart.test(seenObjects.contains(this))) {
        return false;
      }
      seenObjects.add(this);
      if (dart.test(this[_dirty]) || dart.test(this[_unsavedChanges][$isNotEmpty])) {
        return true;
      }
      let match = false;
      this[_getObjectData]()[$forEach](dart.fn((key, value) => {
        if (key == null) dart.nullFailed(I[15], 44, 38, "key");
        if (parse_server_sdk.ParseObject.is(value) && dart.test(value[_areChildrenDirty](seenObjects))) {
          match = true;
        }
      }, T$.StringAnddynamicTovoid()));
      return match;
    }
    get createdAt() {
      if (typeof this.get(dart.dynamic, "createdAt") == 'string') {
        let dateAsString = this.get(core.String, "createdAt");
        return dateAsString != null ? parse_server_sdk._parseDateFormat.parse(dateAsString) : null;
      } else {
        return this.get(core.DateTime, "createdAt");
      }
    }
    get updatedAt() {
      if (typeof this.get(dart.dynamic, "updatedAt") == 'string') {
        let dateAsString = this.get(core.String, "updatedAt");
        return dateAsString != null ? parse_server_sdk._parseDateFormat.parse(dateAsString) : null;
      } else {
        return this.get(core.DateTime, "updatedAt");
      }
    }
    toJson(opts) {
      let full = opts && 'full' in opts ? opts.full : false;
      if (full == null) dart.nullFailed(I[15], 75, 10, "full");
      let forApiRQ = opts && 'forApiRQ' in opts ? opts.forApiRQ : false;
      if (forApiRQ == null) dart.nullFailed(I[15], 76, 10, "forApiRQ");
      let allowCustomObjectId = opts && 'allowCustomObjectId' in opts ? opts.allowCustomObjectId : false;
      if (allowCustomObjectId == null) dart.nullFailed(I[15], 77, 10, "allowCustomObjectId");
      let map = new (T$.IdentityMapOfString$dynamic()).from(["className", this.parseClassName]);
      if (this.objectId != null) {
        map[$_set]("objectId", this.objectId);
      }
      if (this.createdAt != null) {
        map[$_set]("createdAt", parse_server_sdk._parseDateFormat.format(dart.nullCheck(this.createdAt)));
      }
      if (this.updatedAt != null) {
        map[$_set]("updatedAt", parse_server_sdk._parseDateFormat.format(dart.nullCheck(this.updatedAt)));
      }
      let target = dart.test(forApiRQ) ? this[_unsavedChanges] : this[_getObjectData]();
      target[$forEach](dart.fn((key, value) => {
        if (key == null) dart.nullFailed(I[15], 97, 28, "key");
        if (!dart.test(map[$containsKey](key))) {
          map[$_set](key, parse_server_sdk.parseEncode(value, {full: full}));
        }
      }, T$.StringAnddynamicTovoid()));
      if (dart.test(forApiRQ)) {
        map[$remove]("createdAt");
        map[$remove]("updatedAt");
        map[$remove]("className");
        if (!dart.test(allowCustomObjectId)) {
          map[$remove]("objectId");
        }
        map[$remove]("sessionToken");
      }
      return map;
    }
    toString() {
      return convert.json.encode(this.toJson());
    }
    fromJson(objectData) {
      if (objectData == null) dart.nullFailed(I[15], 121, 41, "objectData");
      objectData[$forEach](dart.fn((key, value) => {
        if (key == null) dart.nullFailed(I[15], 122, 32, "key");
        if (key == this.parseClassName || key === "__type") {
        } else if (key === "objectId") {
          this[_getObjectData]()[$_set]("objectId", value);
        } else if (key === "createdAt") {
          if (typeof "createdAt" == 'string') {
            this[_getObjectData]()[$_set]("createdAt", parse_server_sdk._parseDateFormat.parse(core.String.as(value)));
          } else {
            this[_getObjectData]()[$_set]("createdAt", value);
          }
        } else if (key === "updatedAt") {
          if (typeof "updatedAt" == 'string') {
            this[_getObjectData]()[$_set]("updatedAt", parse_server_sdk._parseDateFormat.parse(core.String.as(value)));
          } else {
            this[_getObjectData]()[$_set]("updatedAt", parse_server_sdk._parseDateFormat.parse(core.String.as(value)));
          }
        } else if (key === "ACL") {
          this[_getObjectData]()[$_set]("ACL", new parse_server_sdk.ParseACL.new().fromJson(T$.MapOfString$dynamic().as(value)));
        } else {
          this[_getObjectData]()[$_set](key, parse_server_sdk.parseDecode(value));
        }
      }, T$.StringAnddynamicTovoid()));
      return this;
    }
    copy() {
      return this.fromJson(this.toJson());
    }
    [_setObjectData](objectData) {
      if (objectData == null) dart.nullFailed(I[15], 155, 44, "objectData");
      return this[_objectData] = objectData;
    }
    [_getObjectData]() {
      return this[_objectData];
    }
    containsValue(value) {
      if (value == null) dart.nullFailed(I[15], 162, 29, "value");
      return this[_getObjectData]()[$containsValue](value);
    }
    containsKey(key) {
      if (key == null) dart.nullFailed(I[15], 166, 27, "key");
      return this[_getObjectData]()[$containsKey](key);
    }
    _get(key) {
      if (key == null) dart.nullFailed(I[15], 170, 30, "key");
      return this.get(dart.dynamic, key);
    }
    _set(key, value$) {
      let value = value$;
      if (key == null) dart.nullFailed(I[15], 174, 28, "key");
      this.set(dart.dynamic, key, value);
      return value$;
    }
    saveInStorage(key) {
      if (key == null) dart.nullFailed(I[15], 179, 37, "key");
      return async.async(dart.void, (function* saveInStorage() {
        let objectJson = convert.json.encode(this.toJson({full: true}));
        yield parse_server_sdk.ParseCoreData.new().getStore().setString(key, objectJson);
      }).bind(this));
    }
    clearUnsavedChanges() {
      this[_unsavedChanges][$clear]();
    }
    set(T, key, value, opts) {
      if (key == null) dart.nullFailed(I[15], 193, 22, "key");
      let forceUpdate = opts && 'forceUpdate' in opts ? opts.forceUpdate : true;
      if (forceUpdate == null) dart.nullFailed(I[15], 193, 42, "forceUpdate");
      if (dart.test(this[_getObjectData]()[$containsKey](key))) {
        if (dart.equals(this[_getObjectData]()[$_get](key), value) && !dart.test(forceUpdate)) {
          return;
        }
        this[_getObjectData]()[$_set](key, new parse_server_sdk.ParseMergeTool.new().mergeWithPrevious(this[_unsavedChanges][$_get](key), value));
      } else {
        this[_getObjectData]()[$_set](key, value);
      }
      this[_unsavedChanges][$_set](key, this[_getObjectData]()[$_get](key));
    }
    get(T, key, opts) {
      if (key == null) dart.nullFailed(I[15], 211, 20, "key");
      let defaultValue = opts && 'defaultValue' in opts ? opts.defaultValue : null;
      if (dart.test(this[_getObjectData]()[$containsKey](key))) {
        return dart.nullable(T).as(this[_getObjectData]()[$_get](key));
      } else {
        return defaultValue;
      }
    }
    pin() {
      return async.async(core.bool, (function* pin() {
        if (this.objectId != null) {
          yield this.unpin();
          let objectMap = T$.MapNOfString$dynamic().as(parse_server_sdk.parseEncode(this, {full: true}));
          let json = convert.jsonEncode(objectMap);
          yield parse_server_sdk.ParseCoreData.new().getStore().setString(dart.nullCheck(this.objectId), json);
          return true;
        } else {
          return false;
        }
      }).bind(this));
    }
    unpin(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      return async.async(core.bool, (function* unpin() {
        let t25;
        if (this.objectId != null || key != null) {
          yield parse_server_sdk.ParseCoreData.new().getStore().remove((t25 = key, t25 == null ? dart.nullCheck(this.objectId) : t25));
          return true;
        }
        return false;
      }).bind(this));
    }
    fromPin(objectId) {
      if (objectId == null) dart.nullFailed(I[15], 249, 26, "objectId");
      return async.async(dart.dynamic, (function* fromPin() {
        let coreStore = parse_server_sdk.ParseCoreData.new().getStore();
        let itemFromStore = (yield coreStore.getString(objectId));
        if (itemFromStore != null) {
          return this.fromJson(T$.MapOfString$dynamic().as(convert.json.decode(itemFromStore)));
        }
        return null;
      }).bind(this));
    }
    toPointer() {
      return parse_server_sdk.encodeObject(this.parseClassName, dart.nullCheck(this.objectId));
    }
    setACL(ParseACL, acl) {
      this.set(ParseACL, "ACL", acl);
    }
    getACL() {
      if (dart.test(this[_getObjectData]()[$containsKey]("ACL"))) {
        return parse_server_sdk.ParseACL.as(this[_getObjectData]()[$_get]("ACL"));
      } else {
        return new parse_server_sdk.ParseACL.new();
      }
    }
  };
  (parse_server_sdk.ParseBase.new = function() {
    this[parseClassName] = "ParseBase";
    this[_dirty] = false;
    this[_unsavedChanges] = new (T$.LinkedMapOfString$dynamic()).new();
    this[_savingChanges] = new (T$.LinkedMapOfString$dynamic()).new();
    this[_objectData] = new (T$.LinkedMapOfString$dynamic()).new();
    ;
  }).prototype = parse_server_sdk.ParseBase.prototype;
  dart.addTypeTests(parse_server_sdk.ParseBase);
  dart.addTypeCaches(parse_server_sdk.ParseBase);
  dart.setMethodSignature(parse_server_sdk.ParseBase, () => ({
    __proto__: dart.getMethods(parse_server_sdk.ParseBase.__proto__),
    isDirty: dart.fnType(core.bool, [], {key: dart.nullable(core.String)}, {}),
    [_isDirty]: dart.fnType(core.bool, [core.bool]),
    [_areChildrenDirty]: dart.fnType(core.bool, [core.Set]),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [], {allowCustomObjectId: core.bool, forApiRQ: core.bool, full: core.bool}, {}),
    fromJson: dart.fnType(dart.dynamic, [core.Map$(core.String, dart.dynamic)]),
    copy: dart.fnType(dart.dynamic, []),
    [_setObjectData]: dart.fnType(dart.void, [core.Map$(core.String, dart.dynamic)]),
    [_getObjectData]: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    containsValue: dart.fnType(core.bool, [core.Object]),
    containsKey: dart.fnType(core.bool, [core.String]),
    _get: dart.fnType(dart.dynamic, [core.String]),
    _set: dart.fnType(dart.void, [core.String, dart.dynamic]),
    saveInStorage: dart.fnType(async.Future$(dart.void), [core.String]),
    clearUnsavedChanges: dart.fnType(dart.void, []),
    set: dart.gFnType(T => [dart.void, [core.String, T], {forceUpdate: core.bool}, {}], T => [dart.nullable(core.Object)]),
    get: dart.gFnType(T => [dart.nullable(T), [core.String], {defaultValue: dart.nullable(T)}, {}], T => [dart.nullable(core.Object)]),
    pin: dart.fnType(async.Future$(core.bool), []),
    unpin: dart.fnType(async.Future$(core.bool), [], {key: dart.nullable(core.String)}, {}),
    fromPin: dart.fnType(dart.dynamic, [core.String]),
    toPointer: dart.fnType(core.Map$(core.String, dart.dynamic), []),
    setACL: dart.gFnType(ParseACL => [dart.void, [ParseACL]], ParseACL => [dart.nullable(core.Object)]),
    getACL: dart.fnType(parse_server_sdk.ParseACL, [])
  }));
  dart.setGetterSignature(parse_server_sdk.ParseBase, () => ({
    __proto__: dart.getGetters(parse_server_sdk.ParseBase.__proto__),
    objectId: dart.nullable(core.String),
    createdAt: dart.nullable(core.DateTime),
    updatedAt: dart.nullable(core.DateTime)
  }));
  dart.setSetterSignature(parse_server_sdk.ParseBase, () => ({
    __proto__: dart.getSetters(parse_server_sdk.ParseBase.__proto__),
    objectId: dart.nullable(core.String)
  }));
  dart.setLibraryUri(parse_server_sdk.ParseBase, I[1]);
  dart.setFieldSignature(parse_server_sdk.ParseBase, () => ({
    __proto__: dart.getFields(parse_server_sdk.ParseBase.__proto__),
    parseClassName: dart.fieldType(core.String),
    [_dirty]: dart.finalFieldType(core.bool),
    [_unsavedChanges]: dart.finalFieldType(core.Map$(core.String, dart.dynamic)),
    [_savingChanges]: dart.finalFieldType(core.Map$(core.String, dart.dynamic)),
    [_objectData]: dart.fieldType(core.Map$(core.String, dart.dynamic))
  }));
  dart.defineExtensionMethods(parse_server_sdk.ParseBase, ['toString']);
  parse_server_sdk.ParseCloneable = class ParseCloneable extends core.Object {};
  (parse_server_sdk.ParseCloneable.new = function() {
    ;
  }).prototype = parse_server_sdk.ParseCloneable.prototype;
  dart.addTypeTests(parse_server_sdk.ParseCloneable);
  dart.addTypeCaches(parse_server_sdk.ParseCloneable);
  dart.setLibraryUri(parse_server_sdk.ParseCloneable, I[1]);
  var _client$0 = dart.privateName(parse_server_sdk, "_client");
  var __ParseObject__path = dart.privateName(parse_server_sdk, "_#ParseObject#_path");
  var __ParseObject__path_isSet = dart.privateName(parse_server_sdk, "_#ParseObject#_path#isSet");
  var __ParseObject__aggregatepath = dart.privateName(parse_server_sdk, "_#ParseObject#_aggregatepath");
  var __ParseObject__aggregatepath_isSet = dart.privateName(parse_server_sdk, "_#ParseObject#_aggregatepath#isSet");
  var __ParseObject__debug = dart.privateName(parse_server_sdk, "_#ParseObject#_debug");
  var __ParseObject__debug_isSet = dart.privateName(parse_server_sdk, "_#ParseObject#_debug#isSet");
  var __ParseObject__client = dart.privateName(parse_server_sdk, "_#ParseObject#_client");
  var __ParseObject__client_isSet = dart.privateName(parse_server_sdk, "_#ParseObject#_client#isSet");
  var _path = dart.privateName(parse_server_sdk, "_path");
  var _aggregatepath = dart.privateName(parse_server_sdk, "_aggregatepath");
  var _saveChanges = dart.privateName(parse_server_sdk, "_saveChanges");
  var _saveChildren = dart.privateName(parse_server_sdk, "_saveChildren");
  var _revertSavingChanges = dart.privateName(parse_server_sdk, "_revertSavingChanges");
  var _collectionDirtyChildren = dart.privateName(parse_server_sdk, "_collectionDirtyChildren");
  var _canbeSerialized = dart.privateName(parse_server_sdk, "_canbeSerialized");
  var _getRequestJson = dart.privateName(parse_server_sdk, "_getRequestJson");
  var _arrayOperation = dart.privateName(parse_server_sdk, "_arrayOperation");
  parse_server_sdk.ParseObject = class ParseObject extends parse_server_sdk.ParseBase {
    clone(map) {
      let t27;
      if (map == null) dart.nullFailed(I[17], 27, 38, "map");
      t27 = new parse_server_sdk.ParseObject.clone(this.parseClassName);
      return (() => {
        t27.fromJson(map);
        return t27;
      })();
    }
    get [_path]() {
      let t27;
      return dart.test(this[__ParseObject__path_isSet]) ? (t27 = this[__ParseObject__path], t27) : dart.throw(new _internal.LateError.fieldNI("_path"));
    }
    set [_path](t27) {
      if (t27 == null) dart.nullFailed(I[17], 30, 15, "null");
      this[__ParseObject__path_isSet] = true;
      this[__ParseObject__path] = t27;
    }
    get [_aggregatepath]() {
      let t28;
      return dart.test(this[__ParseObject__aggregatepath_isSet]) ? (t28 = this[__ParseObject__aggregatepath], t28) : dart.throw(new _internal.LateError.fieldNI("_aggregatepath"));
    }
    set [_aggregatepath](t28) {
      if (t28 == null) dart.nullFailed(I[17], 31, 15, "null");
      this[__ParseObject__aggregatepath_isSet] = true;
      this[__ParseObject__aggregatepath] = t28;
    }
    get [_debug]() {
      let t29;
      return dart.test(this[__ParseObject__debug_isSet]) ? (t29 = this[__ParseObject__debug], t29) : dart.throw(new _internal.LateError.fieldNI("_debug"));
    }
    set [_debug](t29) {
      if (t29 == null) dart.nullFailed(I[17], 32, 13, "null");
      this[__ParseObject__debug_isSet] = true;
      this[__ParseObject__debug] = t29;
    }
    get [_client$0]() {
      let t30;
      return dart.test(this[__ParseObject__client_isSet]) ? (t30 = this[__ParseObject__client], t30) : dart.throw(new _internal.LateError.fieldNI("_client"));
    }
    set [_client$0](t30) {
      if (t30 == null) dart.nullFailed(I[17], 33, 20, "null");
      this[__ParseObject__client_isSet] = true;
      this[__ParseObject__client] = t30;
    }
    getObject(objectId) {
      if (objectId == null) dart.nullFailed(I[17], 36, 42, "objectId");
      return async.async(parse_server_sdk.ParseResponse, (function* getObject() {
        try {
          let uri = dart.str(this[_path]) + "/" + dart.str(objectId);
          let url = parse_server_sdk.getSanitisedUri(this[_client$0], uri);
          let result = (yield this[_client$0].get(dart.toString(url)));
          return parse_server_sdk.handleResponse(parse_server_sdk.ParseObject, this, result, parse_server_sdk.ParseApiRQ.get, this[_debug], this.parseClassName);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.get, this[_debug], this.parseClassName);
          } else
            throw e$;
        }
      }).bind(this));
    }
    getAll() {
      return async.async(parse_server_sdk.ParseResponse, (function* getAll() {
        try {
          let url = parse_server_sdk.getSanitisedUri(this[_client$0], dart.str(this[_path]));
          let result = (yield this[_client$0].get(dart.toString(url)));
          return parse_server_sdk.handleResponse(parse_server_sdk.ParseObject, this, result, parse_server_sdk.ParseApiRQ.getAll, this[_debug], this.parseClassName);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.getAll, this[_debug], this.parseClassName);
          } else
            throw e$;
        }
      }).bind(this));
    }
    create(opts) {
      let allowCustomObjectId = opts && 'allowCustomObjectId' in opts ? opts.allowCustomObjectId : false;
      if (allowCustomObjectId == null) dart.nullFailed(I[17], 62, 38, "allowCustomObjectId");
      return async.async(parse_server_sdk.ParseResponse, (function* create() {
        try {
          let url = parse_server_sdk.getSanitisedUri(this[_client$0], dart.str(this[_path]));
          let body = convert.json.encode(this.toJson({forApiRQ: true, allowCustomObjectId: allowCustomObjectId}));
          this[_saveChanges]();
          let result = (yield this[_client$0].post(dart.toString(url), {data: body}));
          return parse_server_sdk.handleResponse(parse_server_sdk.ParseObject, this, result, parse_server_sdk.ParseApiRQ.create, this[_debug], this.parseClassName);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.create, this[_debug], this.parseClassName);
          } else
            throw e$;
        }
      }).bind(this));
    }
    update() {
      return async.async(parse_server_sdk.ParseResponse, (function* update() {
        try {
          let url = parse_server_sdk.getSanitisedUri(this[_client$0], dart.str(this[_path]) + "/" + dart.str(this.objectId));
          let body = convert.json.encode(this.toJson({forApiRQ: true}));
          this[_saveChanges]();
          let headers = new (T$.IdentityMapOfString$String()).from(["content-type", "application/json"]);
          let result = (yield this[_client$0].put(dart.toString(url), {data: body, options: new parse_server_sdk.ParseNetworkOptions.new({headers: headers})}));
          return parse_server_sdk.handleResponse(parse_server_sdk.ParseObject, this, result, parse_server_sdk.ParseApiRQ.save, this[_debug], this.parseClassName);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.save, this[_debug], this.parseClassName);
          } else
            throw e$;
        }
      }).bind(this));
    }
    save() {
      return async.async(parse_server_sdk.ParseResponse, (function* save() {
        let childrenResponse = (yield this[_saveChildren](this));
        if (dart.test(childrenResponse.success)) {
          let response = null;
          if (this.objectId == null) {
            response = (yield this.create());
          } else if (dart.test(this[_isDirty](false))) {
            response = (yield this.update());
          }
          if (response != null) {
            if (dart.test(response.success)) {
              this[_savingChanges][$clear]();
            } else {
              this[_revertSavingChanges]();
            }
            return response;
          }
        }
        return childrenResponse;
      }).bind(this));
    }
    [_saveChildren](object) {
      return async.async(parse_server_sdk.ParseResponse, (function* _saveChildren() {
        let t35;
        let uniqueObjects = new (T$._HashSetOfParseObject()).new();
        let uniqueFiles = new (T$._HashSetOfParseFileBase()).new();
        if (!dart.test(this[_collectionDirtyChildren](object, uniqueObjects, uniqueFiles, new (T$._HashSetOfParseObject()).new(), new (T$._HashSetOfParseObject()).new()))) {
          let response = new parse_server_sdk.ParseResponse.new();
          return response;
        }
        if (parse_server_sdk.ParseObject.is(object)) {
          uniqueObjects.remove(object);
        }
        for (let file of uniqueFiles) {
          let response = (yield file.save());
          if (!dart.test(response.success)) {
            return response;
          }
        }
        let remaining = uniqueObjects[$toList]();
        let finished = T$.JSArrayOfParseObject().of([]);
        let totalResponse = (t35 = new parse_server_sdk.ParseResponse.new(), (() => {
          t35.success = true;
          t35.results = [];
          t35.statusCode = 200;
          return t35;
        })());
        while (dart.test(remaining[$isNotEmpty])) {
          let current = T$.JSArrayOfParseObject().of([]);
          let nextBatch = T$.JSArrayOfParseObject().of([]);
          for (let object of remaining) {
            if (dart.test(object[_canbeSerialized](finished))) {
              current[$add](object);
            } else {
              nextBatch[$add](object);
            }
          }
          remaining = nextBatch;
          let chunks = T$.JSArrayOfListOfParseObject().of([]);
          for (let i = 0; i < dart.notNull(current[$length]); i = i + 50) {
            chunks[$add](current[$sublist](i, math.min(core.int, current[$length], i + 50)));
          }
          for (let chunk of chunks) {
            let requests = chunk[$map](dart.dynamic, dart.fn(obj => {
              if (obj == null) dart.nullFailed(I[17], 166, 72, "obj");
              return obj[_getRequestJson](obj.objectId == null ? "POST" : "PUT");
            }, T$.ParseObjectTodynamic()))[$toList]();
            for (let obj of chunk) {
              obj[_saveChanges]();
            }
            let response = (yield parse_server_sdk.batchRequest(requests, chunk));
            totalResponse.success = !!(dart.notNull(totalResponse.success) & dart.test(response.success));
            if (dart.test(response.success)) {
              dart.nullCheck(totalResponse.results)[$addAll](dart.nullCheck(response.results));
              totalResponse.count = dart.notNull(totalResponse.count) + dart.notNull(response.count);
              for (let i = 0; i < dart.notNull(response.count); i = i + 1) {
                if (parse_server_sdk.ParseError.is(dart.nullCheck(response.results)[$_get](i))) {
                  chunk[$_get](i)[_revertSavingChanges]();
                } else {
                  chunk[$_get](i)[_savingChanges][$clear]();
                }
              }
            } else {
              for (let obj of chunk) {
                obj[_revertSavingChanges]();
              }
              totalResponse.statusCode = response.statusCode;
              totalResponse.error = response.error;
            }
          }
          finished[$addAll](current);
        }
        return totalResponse;
      }).bind(this));
    }
    [_saveChanges]() {
      this[_savingChanges][$clear]();
      this[_savingChanges][$addAll](this[_unsavedChanges]);
      this[_unsavedChanges][$clear]();
    }
    [_revertSavingChanges]() {
      this[_savingChanges][$addAll](this[_unsavedChanges]);
      this[_unsavedChanges][$addAll](this[_savingChanges]);
      this[_savingChanges][$clear]();
    }
    [_getRequestJson](method) {
      if (method == null) dart.nullFailed(I[17], 211, 34, "method");
      let tempUri = core.Uri.parse(parse_server_sdk.ParseCoreData.new().serverUrl);
      let parsePath = tempUri.path;
      let request = new (T$.IdentityMapOfString$dynamic()).from(["method", method, "path", dart.str(parsePath) + dart.str(this[_path]) + (this.objectId != null ? "/" + dart.str(this.objectId) : ""), "body", this.toJson({forApiRQ: true})]);
      return request;
    }
    [_canbeSerialized](aftersaving, opts) {
      if (aftersaving == null) dart.nullFailed(I[17], 222, 39, "aftersaving");
      let value = opts && 'value' in opts ? opts.value : null;
      if (value != null) {
        if (parse_server_sdk.ParseObject.is(value)) {
          if (parse_server_sdk.ParseFileBase.is(value)) {
            if (!dart.test(value.saved) && !dart.test(aftersaving[$contains](value))) {
              return false;
            }
          } else if (value.objectId == null && !dart.test(aftersaving[$contains](value))) {
            return false;
          }
        } else if (core.Map.is(value)) {
          for (let child of value[$values]) {
            if (!dart.test(this[_canbeSerialized](aftersaving, {value: child}))) {
              return false;
            }
          }
        } else if (core.List.is(value)) {
          for (let child of value) {
            if (!dart.test(this[_canbeSerialized](aftersaving, {value: child}))) {
              return false;
            }
          }
        }
      } else if (!dart.test(this[_canbeSerialized](aftersaving, {value: this[_getObjectData]()}))) {
        return false;
      }
      return true;
    }
    [_collectionDirtyChildren](object, uniqueObjects, uniqueFiles, seen, seenNew) {
      if (uniqueObjects == null) dart.nullFailed(I[17], 254, 24, "uniqueObjects");
      if (uniqueFiles == null) dart.nullFailed(I[17], 255, 26, "uniqueFiles");
      if (seen == null) dart.nullFailed(I[17], 256, 24, "seen");
      if (seenNew == null) dart.nullFailed(I[17], 257, 24, "seenNew");
      if (core.List.is(object)) {
        for (let child of object) {
          if (!dart.test(this[_collectionDirtyChildren](child, uniqueObjects, uniqueFiles, seen, seenNew))) {
            return false;
          }
        }
      } else if (core.Map.is(object)) {
        for (let child of object[$values]) {
          if (!dart.test(this[_collectionDirtyChildren](child, uniqueObjects, uniqueFiles, seen, seenNew))) {
            return false;
          }
        }
      } else if (parse_server_sdk.ParseACL.is(object)) {
      } else if (parse_server_sdk.ParseFileBase.is(object)) {
        if (!dart.test(object.saved)) {
          uniqueFiles.add(object);
        }
      } else if (parse_server_sdk.ParseObject.is(object)) {
        if (object.objectId != null) {
          seenNew = new (T$._HashSetOfParseObject()).new();
        } else {
          if (dart.test(seenNew.contains(object))) {
            return false;
          }
          seenNew.add(object);
        }
        if (dart.test(seen.contains(object))) {
          return true;
        }
        seen.add(object);
        if (!dart.test(this[_collectionDirtyChildren](object[_getObjectData](), uniqueObjects, uniqueFiles, seen, seenNew))) {
          return false;
        }
        if (dart.test(object[_isDirty](false))) {
          uniqueObjects.add(object);
        }
      }
      return true;
    }
    getRelation(T, key) {
      if (key == null) dart.nullFailed(I[17], 312, 62, "key");
      return new (parse_server_sdk.ParseRelation$(T)).new({parent: this, key: key});
    }
    setRemove(key, value) {
      if (key == null) dart.nullFailed(I[17], 317, 25, "key");
      this[_arrayOperation]("Remove", key, [value]);
    }
    setRemoveAll(key, values) {
      if (key == null) dart.nullFailed(I[17], 322, 28, "key");
      if (values == null) dart.nullFailed(I[17], 322, 47, "values");
      this[_arrayOperation]("Remove", key, values);
    }
    setAddAll(key, values) {
      if (key == null) dart.nullFailed(I[17], 327, 25, "key");
      if (values == null) dart.nullFailed(I[17], 327, 44, "values");
      this[_arrayOperation]("Add", key, values);
    }
    setAddUnique(key, value) {
      if (key == null) dart.nullFailed(I[17], 331, 28, "key");
      this[_arrayOperation]("AddUnique", key, [value]);
    }
    setAddAllUnique(key, values) {
      if (key == null) dart.nullFailed(I[17], 336, 31, "key");
      if (values == null) dart.nullFailed(I[17], 336, 50, "values");
      this[_arrayOperation]("AddUnique", key, values);
    }
    setAdd(key, value) {
      if (key == null) dart.nullFailed(I[17], 341, 22, "key");
      this[_arrayOperation]("Add", key, [value]);
    }
    addRelation(key, values) {
      if (key == null) dart.nullFailed(I[17], 345, 27, "key");
      if (values == null) dart.nullFailed(I[17], 345, 46, "values");
      this[_arrayOperation]("AddRelation", key, values);
    }
    removeRelation(key, values) {
      if (key == null) dart.nullFailed(I[17], 349, 30, "key");
      if (values == null) dart.nullFailed(I[17], 349, 49, "values");
      this[_arrayOperation]("RemoveRelation", key, values);
    }
    [_arrayOperation](arrayAction, key, values) {
      if (arrayAction == null) dart.nullFailed(I[17], 354, 31, "arrayAction");
      if (key == null) dart.nullFailed(I[17], 354, 51, "key");
      if (values == null) dart.nullFailed(I[17], 354, 70, "values");
      this.set(T$.MapOfString$dynamic(), key, new (T$.IdentityMapOfString$dynamic()).from(["__op", arrayAction, "objects", values]));
    }
    setIncrement(key, amount) {
      if (key == null) dart.nullFailed(I[17], 361, 28, "key");
      if (amount == null) dart.nullFailed(I[17], 361, 37, "amount");
      this.set(T$.MapOfString$dynamic(), key, new (T$.IdentityMapOfString$dynamic()).from(["__op", "Increment", "amount", amount]));
    }
    setDecrement(key, amount) {
      if (key == null) dart.nullFailed(I[17], 367, 28, "key");
      if (amount == null) dart.nullFailed(I[17], 367, 37, "amount");
      this.set(T$.MapOfString$dynamic(), key, new (T$.IdentityMapOfString$dynamic()).from(["__op", "Increment", "amount", -dart.notNull(amount)]));
    }
    unset(key, opts) {
      if (key == null) dart.nullFailed(I[17], 375, 38, "key");
      let offlineOnly = opts && 'offlineOnly' in opts ? opts.offlineOnly : false;
      if (offlineOnly == null) dart.nullFailed(I[17], 375, 49, "offlineOnly");
      return async.async(parse_server_sdk.ParseResponse, (function* unset() {
        let t35, t35$, t37;
        let object = this[_objectData][$_get](key);
        this[_objectData][$remove](key);
        this[_unsavedChanges][$remove](key);
        this[_savingChanges][$remove](key);
        if (dart.test(offlineOnly)) {
          t35 = new parse_server_sdk.ParseResponse.new();
          return (() => {
            t35.success = true;
            return t35;
          })();
        }
        try {
          if (this.objectId != null) {
            let url = parse_server_sdk.getSanitisedUri(this[_client$0], dart.str(this[_path]) + "/" + dart.str(this.objectId));
            let body = "{\"" + dart.str(key) + "\":{\"__op\":\"Delete\"}}";
            let result = (yield this[_client$0].put(dart.toString(url), {data: body}));
            let response = parse_server_sdk.handleResponse(parse_server_sdk.ParseObject, this, result, parse_server_sdk.ParseApiRQ.unset, this[_debug], this.parseClassName);
            if (!dart.test(response.success)) {
              this[_objectData][$_set](key, object);
              this[_unsavedChanges][$_set](key, object);
              this[_savingChanges][$_set](key, object);
            } else {
              t35$ = new parse_server_sdk.ParseResponse.new();
              return (() => {
                t35$.success = true;
                return t35$;
              })();
            }
          }
        } catch (e) {
          let ex = dart.getThrown(e);
          if (core.Exception.is(ex)) {
            this[_objectData][$_set](key, object);
            this[_unsavedChanges][$_set](key, object);
            this[_savingChanges][$_set](key, object);
          } else
            throw e;
        }
        t37 = new parse_server_sdk.ParseResponse.new();
        return (() => {
          t37.success = false;
          return t37;
        })();
      }).bind(this));
    }
    query(T, query, opts) {
      if (query == null) dart.nullFailed(I[17], 411, 61, "query");
      let progressCallback = opts && 'progressCallback' in opts ? opts.progressCallback : null;
      return async.async(parse_server_sdk.ParseResponse, (function* query$() {
        try {
          let url = parse_server_sdk.getSanitisedUri(this[_client$0], dart.str(this[_path]), {query: query});
          let result = (yield this[_client$0].get(dart.toString(url), {onReceiveProgress: progressCallback}));
          return parse_server_sdk.handleResponse(T, this, result, parse_server_sdk.ParseApiRQ.query, this[_debug], this.parseClassName);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.query, this[_debug], this.parseClassName);
          } else
            throw e$;
        }
      }).bind(this));
    }
    distinct(T, query) {
      if (query == null) dart.nullFailed(I[17], 426, 64, "query");
      return async.async(parse_server_sdk.ParseResponse, (function* distinct() {
        try {
          let url = parse_server_sdk.getSanitisedUri(this[_client$0], dart.str(this[_aggregatepath]), {query: query});
          let result = (yield this[_client$0].get(dart.toString(url)));
          return parse_server_sdk.handleResponse(T, this, result, parse_server_sdk.ParseApiRQ.query, this[_debug], this.parseClassName);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.query, this[_debug], this.parseClassName);
          } else
            throw e$;
        }
      }).bind(this));
    }
    delete(T, opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      let path = opts && 'path' in opts ? opts.path : null;
      return async.async(parse_server_sdk.ParseResponse, (function* $delete() {
        try {
          path == null ? path = this[_path] : null;
          id == null ? id = this.objectId : null;
          let url = parse_server_sdk.getSanitisedUri(this[_client$0], dart.str(this[_path]) + "/" + dart.str(id));
          let result = (yield this[_client$0].delete(dart.toString(url)));
          return parse_server_sdk.handleResponse(T, this, result, parse_server_sdk.ParseApiRQ.delete, this[_debug], this.parseClassName);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.delete, this[_debug], this.parseClassName);
          } else
            throw e$;
        }
      }).bind(this));
    }
    fetch() {
      return async.async(parse_server_sdk.ParseObject, (function* fetch() {
        if (this.objectId == null || dart.nullCheck(this.objectId)[$isEmpty]) {
          dart.throw("can not fetch without a objectId");
        }
        let response = (yield this.getObject(dart.nullCheck(this.objectId)));
        if (dart.test(response.success) && response.results != null) {
          return T$.FutureOrOfParseObject().as(dart.nullCheck(response.results)[$first]);
        } else {
          return this;
        }
      }).bind(this));
    }
  };
  (parse_server_sdk.ParseObject.new = function(className, opts) {
    let t28, t30, t29, t28$, t27;
    if (className == null) dart.nullFailed(I[17], 9, 22, "className");
    let debug = opts && 'debug' in opts ? opts.debug : null;
    let client = opts && 'client' in opts ? opts.client : null;
    let autoSendSessionId = opts && 'autoSendSessionId' in opts ? opts.autoSendSessionId : null;
    this[__ParseObject__path] = null;
    this[__ParseObject__path_isSet] = false;
    this[__ParseObject__aggregatepath] = null;
    this[__ParseObject__aggregatepath_isSet] = false;
    this[__ParseObject__debug] = null;
    this[__ParseObject__debug_isSet] = false;
    this[__ParseObject__client] = null;
    this[__ParseObject__client_isSet] = false;
    parse_server_sdk.ParseObject.__proto__.new.call(this);
    this.parseClassName = className;
    this[_path] = "/classes/" + dart.str(className);
    this[_aggregatepath] = "/aggregate/" + dart.str(className);
    this[_debug] = parse_server_sdk.isDebugEnabled({objectLevelDebug: debug});
    this[_client$0] = (t27 = client, t27 == null ? (t28$ = parse_server_sdk.ParseCoreData.new(), t29 = (t28 = autoSendSessionId, t28 == null ? parse_server_sdk.ParseCoreData.new().autoSendSessionId : t28), t30 = parse_server_sdk.ParseCoreData.new().securityContext, t28$.clientCreator({sendSessionId: t29, securityContext: t30})) : t27);
  }).prototype = parse_server_sdk.ParseObject.prototype;
  (parse_server_sdk.ParseObject.clone = function(className) {
    if (className == null) dart.nullFailed(I[17], 24, 28, "className");
    parse_server_sdk.ParseObject.new.call(this, className);
  }).prototype = parse_server_sdk.ParseObject.prototype;
  dart.addTypeTests(parse_server_sdk.ParseObject);
  dart.addTypeCaches(parse_server_sdk.ParseObject);
  parse_server_sdk.ParseObject[dart.implements] = () => [parse_server_sdk.ParseCloneable];
  dart.setMethodSignature(parse_server_sdk.ParseObject, () => ({
    __proto__: dart.getMethods(parse_server_sdk.ParseObject.__proto__),
    clone: dart.fnType(dart.dynamic, [core.Map$(core.String, dart.dynamic)]),
    getObject: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), [core.String]),
    getAll: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), []),
    create: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), [], {allowCustomObjectId: core.bool}, {}),
    update: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), []),
    save: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), []),
    [_saveChildren]: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), [dart.dynamic]),
    [_saveChanges]: dart.fnType(dart.void, []),
    [_revertSavingChanges]: dart.fnType(dart.void, []),
    [_getRequestJson]: dart.fnType(dart.dynamic, [core.String]),
    [_canbeSerialized]: dart.fnType(core.bool, [core.List], {value: dart.dynamic}, {}),
    [_collectionDirtyChildren]: dart.fnType(core.bool, [dart.dynamic, core.Set$(parse_server_sdk.ParseObject), core.Set$(parse_server_sdk.ParseFileBase), core.Set$(parse_server_sdk.ParseObject), core.Set$(parse_server_sdk.ParseObject)]),
    getRelation: dart.gFnType(T => [parse_server_sdk.ParseRelation$(T), [core.String]], T => [parse_server_sdk.ParseObject]),
    setRemove: dart.fnType(dart.void, [core.String, dart.dynamic]),
    setRemoveAll: dart.fnType(dart.void, [core.String, core.List]),
    setAddAll: dart.fnType(dart.void, [core.String, core.List]),
    setAddUnique: dart.fnType(dart.void, [core.String, dart.dynamic]),
    setAddAllUnique: dart.fnType(dart.void, [core.String, core.List]),
    setAdd: dart.fnType(dart.void, [core.String, dart.dynamic]),
    addRelation: dart.fnType(dart.void, [core.String, core.List]),
    removeRelation: dart.fnType(dart.void, [core.String, core.List]),
    [_arrayOperation]: dart.fnType(dart.void, [core.String, core.String, core.List]),
    setIncrement: dart.fnType(dart.void, [core.String, core.num]),
    setDecrement: dart.fnType(dart.void, [core.String, core.num]),
    unset: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), [core.String], {offlineOnly: core.bool}, {}),
    query: dart.gFnType(T => [async.Future$(parse_server_sdk.ParseResponse), [core.String], {progressCallback: dart.nullable(dart.fnType(dart.void, [core.int, core.int]))}, {}], T => [parse_server_sdk.ParseObject]),
    distinct: dart.gFnType(T => [async.Future$(parse_server_sdk.ParseResponse), [core.String]], T => [parse_server_sdk.ParseObject]),
    delete: dart.gFnType(T => [async.Future$(parse_server_sdk.ParseResponse), [], {id: dart.nullable(core.String), path: dart.nullable(core.String)}, {}], T => [parse_server_sdk.ParseObject]),
    fetch: dart.fnType(async.Future$(parse_server_sdk.ParseObject), [])
  }));
  dart.setGetterSignature(parse_server_sdk.ParseObject, () => ({
    __proto__: dart.getGetters(parse_server_sdk.ParseObject.__proto__),
    [_path]: core.String,
    [_aggregatepath]: core.String,
    [_debug]: core.bool,
    [_client$0]: parse_server_sdk.ParseClient
  }));
  dart.setSetterSignature(parse_server_sdk.ParseObject, () => ({
    __proto__: dart.getSetters(parse_server_sdk.ParseObject.__proto__),
    [_path]: core.String,
    [_aggregatepath]: core.String,
    [_debug]: core.bool,
    [_client$0]: parse_server_sdk.ParseClient
  }));
  dart.setLibraryUri(parse_server_sdk.ParseObject, I[1]);
  dart.setFieldSignature(parse_server_sdk.ParseObject, () => ({
    __proto__: dart.getFields(parse_server_sdk.ParseObject.__proto__),
    [__ParseObject__path]: dart.fieldType(dart.nullable(core.String)),
    [__ParseObject__path_isSet]: dart.fieldType(core.bool),
    [__ParseObject__aggregatepath]: dart.fieldType(dart.nullable(core.String)),
    [__ParseObject__aggregatepath_isSet]: dart.fieldType(core.bool),
    [__ParseObject__debug]: dart.fieldType(dart.nullable(core.bool)),
    [__ParseObject__debug_isSet]: dart.fieldType(core.bool),
    [__ParseObject__client]: dart.fieldType(dart.nullable(parse_server_sdk.ParseClient)),
    [__ParseObject__client_isSet]: dart.fieldType(core.bool)
  }));
  parse_server_sdk.ParseConfig = class ParseConfig extends parse_server_sdk.ParseObject {
    getConfigs() {
      return async.async(parse_server_sdk.ParseResponse, (function* getConfigs() {
        try {
          let uri = dart.str(parse_server_sdk.ParseCoreData.new().serverUrl) + "/config";
          let result = (yield this[_client$0].get(uri));
          return parse_server_sdk.handleResponse(parse_server_sdk.ParseConfig, this, result, parse_server_sdk.ParseApiRQ.getConfigs, this[_debug], this.parseClassName);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.getConfigs, this[_debug], this.parseClassName);
          } else
            throw e$;
        }
      }).bind(this));
    }
    addConfig(key, value) {
      if (key == null) dart.nullFailed(I[16], 29, 42, "key");
      return async.async(parse_server_sdk.ParseResponse, (function* addConfig() {
        try {
          let uri = dart.str(parse_server_sdk.ParseCoreData.new().serverUrl) + "/config";
          let body = "{\"params\":{\"" + dart.str(key) + "\": " + dart.str(convert.json.encode(parse_server_sdk.parseEncode(value))) + "}}";
          let result = (yield this[_client$0].put(uri, {data: body}));
          return parse_server_sdk.handleResponse(parse_server_sdk.ParseConfig, this, result, parse_server_sdk.ParseApiRQ.addConfig, this[_debug], this.parseClassName);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.addConfig, this[_debug], this.parseClassName);
          } else
            throw e$;
        }
      }).bind(this));
    }
  };
  (parse_server_sdk.ParseConfig.new = function(opts) {
    let debug = opts && 'debug' in opts ? opts.debug : null;
    let client = opts && 'client' in opts ? opts.client : null;
    let autoSendSessionId = opts && 'autoSendSessionId' in opts ? opts.autoSendSessionId : null;
    parse_server_sdk.ParseConfig.__proto__.new.call(this, "config", {debug: debug, client: client, autoSendSessionId: autoSendSessionId});
    ;
  }).prototype = parse_server_sdk.ParseConfig.prototype;
  dart.addTypeTests(parse_server_sdk.ParseConfig);
  dart.addTypeCaches(parse_server_sdk.ParseConfig);
  dart.setMethodSignature(parse_server_sdk.ParseConfig, () => ({
    __proto__: dart.getMethods(parse_server_sdk.ParseConfig.__proto__),
    getConfigs: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), []),
    addConfig: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), [core.String, dart.dynamic])
  }));
  dart.setLibraryUri(parse_server_sdk.ParseConfig, I[1]);
  var code$ = dart.privateName(parse_server_sdk, "ParseError.code");
  var message$ = dart.privateName(parse_server_sdk, "ParseError.message");
  var exception$ = dart.privateName(parse_server_sdk, "ParseError.exception");
  var type = dart.privateName(parse_server_sdk, "ParseError.type");
  var _exceptions = dart.privateName(parse_server_sdk, "_exceptions");
  parse_server_sdk.ParseError = class ParseError extends core.Object {
    get code() {
      return this[code$];
    }
    set code(value) {
      super.code = value;
    }
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    get exception() {
      return this[exception$];
    }
    set exception(value) {
      super.exception = value;
    }
    get type() {
      return this[type];
    }
    set type(value) {
      this[type] = value;
    }
    toString() {
      let exceptionString = " \n";
      exceptionString = exceptionString + "----";
      exceptionString = exceptionString + ("\nParseException (Type: " + dart.str(this.type) + ") :");
      exceptionString = exceptionString + ("\nCode: " + dart.str(this.code));
      exceptionString = exceptionString + ("\nMessage: " + dart.str(this.message));
      exceptionString = exceptionString + "----";
      return exceptionString;
    }
  };
  (parse_server_sdk.ParseError.new = function(opts) {
    let code = opts && 'code' in opts ? opts.code : -1;
    if (code == null) dart.nullFailed(I[18], 6, 13, "code");
    let message = opts && 'message' in opts ? opts.message : "Unknown error";
    if (message == null) dart.nullFailed(I[18], 7, 12, "message");
    let exception = opts && 'exception' in opts ? opts.exception : null;
    let debug = opts && 'debug' in opts ? opts.debug : false;
    if (debug == null) dart.nullFailed(I[18], 9, 12, "debug");
    this[_exceptions] = new (T$.IdentityMapOfint$String()).from([-1, "UnknownError", 1, "No Results", 2, "OK", 400, "Bad Request", 100, "ConnectionFailed", 101, "ObjectNotFound", 102, "InvalidQuery", 103, "InvalidClassName", 104, "MissingObjectId", 105, "InvalidKeyName", 106, "InvalidPointer", 107, "InvalidJson", 108, "CommandUnavailable", 109, "NotInitialized", 111, "IncorrectType", 112, "InvalidChannelName", 115, "PushMisconfigured", 116, "ObjectTooLarge", 119, "OperationForbidden", 120, "CacheMiss", 121, "InvalidNestedKey", 122, "InvalidFileName", 123, "InvalidAcl", 124, "Timeout", 125, "InvalidEmailAddress", 135, "MissingRequiredFieldError", 137, "DuplicateValue", 139, "InvalidRoleName", 140, "ExceededQuota", 141, "ScriptError", 142, "ValidationError", 153, "FileDeleteError", 155, "RequestLimitExceeded", 160, "InvalidEventName", 200, "UsernameMissing", 201, "PasswordMissing", 202, "UsernameTaken", 203, "EmailTaken", 204, "EmailMissing", 205, "EmailNotFound", 206, "SessionMissing", 207, "MustCreateUserThroughSignUp", 208, "AccountAlreadyLinked", 209, "InvalidSessionToken", 250, "LinkedIdMissing", 251, "InvalidLinkedSession", 252, "UnsupportedService"]);
    this[type] = null;
    this[code$] = code;
    this[message$] = message;
    this[exception$] = exception;
    this.type = this[_exceptions][$_get](this.code);
    if (dart.test(debug)) {
      core.print(this.toString());
    }
  }).prototype = parse_server_sdk.ParseError.prototype;
  dart.addTypeTests(parse_server_sdk.ParseError);
  dart.addTypeCaches(parse_server_sdk.ParseError);
  dart.setLibraryUri(parse_server_sdk.ParseError, I[1]);
  dart.setFieldSignature(parse_server_sdk.ParseError, () => ({
    __proto__: dart.getFields(parse_server_sdk.ParseError.__proto__),
    [_exceptions]: dart.fieldType(core.Map$(core.int, core.String)),
    code: dart.finalFieldType(core.int),
    message: dart.finalFieldType(core.String),
    exception: dart.finalFieldType(dart.nullable(core.Exception)),
    type: dart.fieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(parse_server_sdk.ParseError, ['toString']);
  var file$ = dart.privateName(parse_server_sdk, "ParseFile.file");
  parse_server_sdk.ParseFileBase = class ParseFileBase extends parse_server_sdk.ParseObject {
    get name() {
      return dart.nullCheck(super.get(core.String, "name"));
    }
    set name(name) {
      if (name == null) dart.nullFailed(I[19], 25, 19, "name");
      return this.set(core.String, "name", name);
    }
    get url() {
      return super.get(core.String, "url");
    }
    set url(url) {
      return this.set(T$.StringN(), "url", url);
    }
    get saved() {
      return this.url != null;
    }
    toJson(opts) {
      let full = opts && 'full' in opts ? opts.full : false;
      if (full == null) dart.nullFailed(I[19], 34, 10, "full");
      let forApiRQ = opts && 'forApiRQ' in opts ? opts.forApiRQ : false;
      if (forApiRQ == null) dart.nullFailed(I[19], 35, 10, "forApiRQ");
      let allowCustomObjectId = opts && 'allowCustomObjectId' in opts ? opts.allowCustomObjectId : false;
      if (allowCustomObjectId == null) dart.nullFailed(I[19], 36, 10, "allowCustomObjectId");
      return new (T$.IdentityMapOfString$StringN()).from(["__type", "File", "name", this.name, "url", this.url]);
    }
    toString() {
      return convert.json.encode(this.toJson({full: true}));
    }
    save() {
      return async.async(parse_server_sdk.ParseResponse, (function* save() {
        return this.upload();
      }).bind(this));
    }
  };
  (parse_server_sdk.ParseFileBase.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    if (name == null) dart.nullFailed(I[19], 8, 24, "name");
    let url = opts && 'url' in opts ? opts.url : null;
    let debug = opts && 'debug' in opts ? opts.debug : null;
    let client = opts && 'client' in opts ? opts.client : null;
    let autoSendSessionId = opts && 'autoSendSessionId' in opts ? opts.autoSendSessionId : null;
    parse_server_sdk.ParseFileBase.__proto__.new.call(this, "ParseFile", {debug: debug, autoSendSessionId: autoSendSessionId, client: client});
    this[_path] = "/files/" + dart.str(name);
    this.name = name;
    if (url != null) this.url = url;
  }).prototype = parse_server_sdk.ParseFileBase.prototype;
  dart.addTypeTests(parse_server_sdk.ParseFileBase);
  dart.addTypeCaches(parse_server_sdk.ParseFileBase);
  dart.setGetterSignature(parse_server_sdk.ParseFileBase, () => ({
    __proto__: dart.getGetters(parse_server_sdk.ParseFileBase.__proto__),
    name: core.String,
    url: dart.nullable(core.String),
    saved: core.bool
  }));
  dart.setSetterSignature(parse_server_sdk.ParseFileBase, () => ({
    __proto__: dart.getSetters(parse_server_sdk.ParseFileBase.__proto__),
    name: core.String,
    url: dart.nullable(core.String)
  }));
  dart.setLibraryUri(parse_server_sdk.ParseFileBase, I[1]);
  dart.defineExtensionMethods(parse_server_sdk.ParseFileBase, ['toString']);
  parse_server_sdk.ParseFile = class ParseFile extends parse_server_sdk.ParseFileBase {
    get file() {
      return this[file$];
    }
    set file(value) {
      this[file$] = value;
    }
    loadStorage() {
      return async.async(parse_server_sdk.ParseFile, (function* loadStorage() {
        let possibleFile = io.File.new(dart.str(parse_server_sdk.ParseCoreData.new().fileDirectory) + "/" + dart.str(this.name));
        let exists = (yield possibleFile.exists());
        if (dart.test(exists)) {
          this.file = possibleFile;
        } else {
          this.file = null;
        }
        return this;
      }).bind(this));
    }
    download(opts) {
      let progressCallback = opts && 'progressCallback' in opts ? opts.progressCallback : null;
      return async.async(parse_server_sdk.ParseFile, (function* download() {
        if (this.url == null) {
          return this;
        }
        this.file = io.File.new(dart.str(parse_server_sdk.ParseCoreData.new().fileDirectory) + "/" + dart.str(this.name));
        yield dart.nullCheck(this.file).create();
        let response = (yield this[_client$0].getBytes(dart.nullCheck(this.url), {onReceiveProgress: progressCallback}));
        yield dart.nullCheck(this.file).writeAsBytes(dart.nullCheck(response.bytes));
        return this;
      }).bind(this));
    }
    upload(opts) {
      let progressCallback = opts && 'progressCallback' in opts ? opts.progressCallback : null;
      return async.async(parse_server_sdk.ParseResponse, (function* upload() {
        let t40;
        if (dart.test(this.saved)) {
          let response = new (T$.IdentityMapOfString$String()).from(["url", dart.nullCheck(this.url), "name", this.name]);
          return parse_server_sdk.handleResponse(parse_server_sdk.ParseFile, this, new parse_server_sdk.ParseNetworkResponse.new({data: convert.json.encode(response), statusCode: 201}), parse_server_sdk.ParseApiRQ.upload, this[_debug], this.parseClassName);
        }
        let headers = new (T$.IdentityMapOfString$String()).from(["content-type", (t40 = mime_type.mime(dart.nullCheck(this.file).path), t40 == null ? "application/octet-stream" : t40)]);
        try {
          let uri = dart.notNull(parse_server_sdk.ParseCoreData.new().serverUrl) + dart.str(this[_path]);
          let response = (yield this[_client$0].postBytes(uri, {options: new parse_server_sdk.ParseNetworkOptions.new({headers: headers}), data: dart.nullCheck(this.file).openRead(), onSendProgress: progressCallback}));
          if (response.statusCode === 201) {
            let map = T$.MapOfString$dynamic().as(convert.json.decode(response.data));
            this.url = dart.toString(map[$_get]("url"));
            this.name = dart.toString(map[$_get]("name"));
          }
          return parse_server_sdk.handleResponse(parse_server_sdk.ParseFile, this, response, parse_server_sdk.ParseApiRQ.upload, this[_debug], this.parseClassName);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.upload, this[_debug], this.parseClassName);
          } else
            throw e$;
        }
      }).bind(this));
    }
  };
  (parse_server_sdk.ParseFile.new = function(file, opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    let url = opts && 'url' in opts ? opts.url : null;
    let debug = opts && 'debug' in opts ? opts.debug : null;
    let client = opts && 'client' in opts ? opts.client : null;
    let autoSendSessionId = opts && 'autoSendSessionId' in opts ? opts.autoSendSessionId : null;
    this[file$] = file;
    parse_server_sdk.ParseFile.__proto__.new.call(this, {name: file != null ? path.basename(file.path) : dart.nullCheck(name), url: url, debug: debug, client: client, autoSendSessionId: autoSendSessionId});
    ;
  }).prototype = parse_server_sdk.ParseFile.prototype;
  dart.addTypeTests(parse_server_sdk.ParseFile);
  dart.addTypeCaches(parse_server_sdk.ParseFile);
  dart.setMethodSignature(parse_server_sdk.ParseFile, () => ({
    __proto__: dart.getMethods(parse_server_sdk.ParseFile.__proto__),
    loadStorage: dart.fnType(async.Future$(parse_server_sdk.ParseFile), []),
    download: dart.fnType(async.Future$(parse_server_sdk.ParseFile), [], {progressCallback: dart.nullable(dart.fnType(dart.void, [core.int, core.int]))}, {}),
    upload: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), [], {progressCallback: dart.nullable(dart.fnType(dart.void, [core.int, core.int]))}, {})
  }));
  dart.setLibraryUri(parse_server_sdk.ParseFile, I[1]);
  dart.setFieldSignature(parse_server_sdk.ParseFile, () => ({
    __proto__: dart.getFields(parse_server_sdk.ParseFile.__proto__),
    file: dart.fieldType(dart.nullable(io.File))
  }));
  var file$0 = dart.privateName(parse_server_sdk, "ParseWebFile.file");
  parse_server_sdk.ParseWebFile = class ParseWebFile extends parse_server_sdk.ParseFileBase {
    get file() {
      return this[file$0];
    }
    set file(value) {
      this[file$0] = value;
    }
    download(opts) {
      let progressCallback = opts && 'progressCallback' in opts ? opts.progressCallback : null;
      return async.async(parse_server_sdk.ParseWebFile, (function* download() {
        if (this.url == null) {
          return this;
        }
        let response = (yield this[_client$0].getBytes(dart.nullCheck(this.url), {onReceiveProgress: progressCallback}));
        this.file = T$.Uint8ListN().as(response.bytes);
        return this;
      }).bind(this));
    }
    upload(opts) {
      let progressCallback = opts && 'progressCallback' in opts ? opts.progressCallback : null;
      return async.async(parse_server_sdk.ParseResponse, (function* upload() {
        let t41, t41$;
        if (dart.test(this.saved)) {
          let response = new (T$.IdentityMapOfString$String()).from(["url", dart.nullCheck(this.url), "name", this.name]);
          return parse_server_sdk.handleResponse(parse_server_sdk.ParseWebFile, this, new parse_server_sdk.ParseNetworkResponse.new({data: convert.json.encode(response), statusCode: 201}), parse_server_sdk.ParseApiRQ.upload, this[_debug], this.parseClassName);
        }
        let headers = new (T$.IdentityMapOfString$String()).from(["content-type", (t41$ = mime_type.mime((t41 = this.url, t41 == null ? this.name : t41)), t41$ == null ? "application/octet-stream" : t41$)]);
        try {
          let uri = dart.notNull(parse_server_sdk.ParseCoreData.new().serverUrl) + dart.str(this[_path]);
          let response = (yield this[_client$0].postBytes(uri, {options: new parse_server_sdk.ParseNetworkOptions.new({headers: headers}), data: T$.StreamOfListOfint().fromIterable(T$.JSArrayOfListOfint().of([dart.nullCheck(this.file)])), onSendProgress: progressCallback}));
          if (response.statusCode === 201) {
            let map = T$.MapOfString$dynamic().as(convert.json.decode(response.data));
            this.url = dart.toString(map[$_get]("url"));
            this.name = dart.toString(map[$_get]("name"));
          }
          return parse_server_sdk.handleResponse(parse_server_sdk.ParseWebFile, this, response, parse_server_sdk.ParseApiRQ.upload, this[_debug], this.parseClassName);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.upload, this[_debug], this.parseClassName);
          } else
            throw e$;
        }
      }).bind(this));
    }
  };
  (parse_server_sdk.ParseWebFile.new = function(file, opts) {
    let name = opts && 'name' in opts ? opts.name : null;
    if (name == null) dart.nullFailed(I[20], 5, 24, "name");
    let url = opts && 'url' in opts ? opts.url : null;
    let debug = opts && 'debug' in opts ? opts.debug : null;
    let client = opts && 'client' in opts ? opts.client : null;
    let autoSendSessionId = opts && 'autoSendSessionId' in opts ? opts.autoSendSessionId : null;
    this[file$0] = file;
    parse_server_sdk.ParseWebFile.__proto__.new.call(this, {name: name, url: url, debug: debug, client: client, autoSendSessionId: autoSendSessionId});
    ;
  }).prototype = parse_server_sdk.ParseWebFile.prototype;
  dart.addTypeTests(parse_server_sdk.ParseWebFile);
  dart.addTypeCaches(parse_server_sdk.ParseWebFile);
  dart.setMethodSignature(parse_server_sdk.ParseWebFile, () => ({
    __proto__: dart.getMethods(parse_server_sdk.ParseWebFile.__proto__),
    download: dart.fnType(async.Future$(parse_server_sdk.ParseWebFile), [], {progressCallback: dart.nullable(dart.fnType(dart.void, [core.int, core.int]))}, {}),
    upload: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), [], {progressCallback: dart.nullable(dart.fnType(dart.void, [core.int, core.int]))}, {})
  }));
  dart.setLibraryUri(parse_server_sdk.ParseWebFile, I[1]);
  dart.setFieldSignature(parse_server_sdk.ParseWebFile, () => ({
    __proto__: dart.getFields(parse_server_sdk.ParseWebFile.__proto__),
    file: dart.fieldType(dart.nullable(typed_data.Uint8List))
  }));
  var functionName$ = dart.privateName(parse_server_sdk, "ParseCloudFunction.functionName");
  var __ParseCloudFunction__path = dart.privateName(parse_server_sdk, "_#ParseCloudFunction#_path");
  var __ParseCloudFunction__path_isSet = dart.privateName(parse_server_sdk, "_#ParseCloudFunction#_path#isSet");
  parse_server_sdk.ParseCloudFunction = class ParseCloudFunction extends parse_server_sdk.ParseObject {
    get functionName() {
      return this[functionName$];
    }
    set functionName(value) {
      super.functionName = value;
    }
    get [_path]() {
      let t42;
      return dart.test(this[__ParseCloudFunction__path_isSet]) ? (t42 = this[__ParseCloudFunction__path], t42) : dart.throw(new _internal.LateError.fieldNI("_path"));
    }
    set [_path](t42) {
      if (t42 == null) dart.nullFailed(I[21], 25, 15, "null");
      this[__ParseCloudFunction__path_isSet] = true;
      this[__ParseCloudFunction__path] = t42;
    }
    execute(opts) {
      let parameters = opts && 'parameters' in opts ? opts.parameters : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return async.async(parse_server_sdk.ParseResponse, (function* execute() {
        let uri = dart.str(parse_server_sdk.ParseCoreData.new().serverUrl) + dart.str(this[_path]);
        if (parameters != null) {
          this[_setObjectData](parameters);
        }
        try {
          let result = (yield this[_client$0].post(uri, {options: new parse_server_sdk.ParseNetworkOptions.new({headers: headers}), data: convert.json.encode(this[_getObjectData]())}));
          return parse_server_sdk.handleResponse(parse_server_sdk.ParseCloudFunction, this, result, parse_server_sdk.ParseApiRQ.execute, this[_debug], this.parseClassName);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.execute, this[_debug], this.parseClassName);
          } else
            throw e$;
        }
      }).bind(this));
    }
    executeObjectFunction(T, opts) {
      let parameters = opts && 'parameters' in opts ? opts.parameters : null;
      let headers = opts && 'headers' in opts ? opts.headers : null;
      return async.async(parse_server_sdk.ParseResponse, (function* executeObjectFunction() {
        let uri = dart.str(parse_server_sdk.ParseCoreData.new().serverUrl) + dart.str(this[_path]);
        if (parameters != null) {
          this[_setObjectData](parameters);
        }
        try {
          let result = (yield this[_client$0].post(uri, {options: new parse_server_sdk.ParseNetworkOptions.new({headers: headers}), data: convert.json.encode(this[_getObjectData]())}));
          return parse_server_sdk.handleResponse(T, this, result, parse_server_sdk.ParseApiRQ.executeObjectionFunction, this[_debug], this.parseClassName);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.executeObjectionFunction, this[_debug], this.parseClassName);
          } else
            throw e$;
        }
      }).bind(this));
    }
  };
  (parse_server_sdk.ParseCloudFunction.new = function(functionName, opts) {
    if (functionName == null) dart.nullFailed(I[21], 8, 10, "functionName");
    let debug = opts && 'debug' in opts ? opts.debug : null;
    let client = opts && 'client' in opts ? opts.client : null;
    let autoSendSessionId = opts && 'autoSendSessionId' in opts ? opts.autoSendSessionId : null;
    this[__ParseCloudFunction__path] = null;
    this[__ParseCloudFunction__path_isSet] = false;
    this[functionName$] = functionName;
    parse_server_sdk.ParseCloudFunction.__proto__.new.call(this, functionName, {client: client, autoSendSessionId: autoSendSessionId, debug: debug});
    this[_path] = "/functions/" + dart.str(this.functionName);
  }).prototype = parse_server_sdk.ParseCloudFunction.prototype;
  dart.addTypeTests(parse_server_sdk.ParseCloudFunction);
  dart.addTypeCaches(parse_server_sdk.ParseCloudFunction);
  dart.setMethodSignature(parse_server_sdk.ParseCloudFunction, () => ({
    __proto__: dart.getMethods(parse_server_sdk.ParseCloudFunction.__proto__),
    execute: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), [], {headers: dart.nullable(core.Map$(core.String, core.String)), parameters: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}),
    executeObjectFunction: dart.gFnType(T => [async.Future$(parse_server_sdk.ParseResponse), [], {headers: dart.nullable(core.Map$(core.String, core.String)), parameters: dart.nullable(core.Map$(core.String, dart.dynamic))}, {}], T => [parse_server_sdk.ParseObject])
  }));
  dart.setLibraryUri(parse_server_sdk.ParseCloudFunction, I[1]);
  dart.setFieldSignature(parse_server_sdk.ParseCloudFunction, () => ({
    __proto__: dart.getFields(parse_server_sdk.ParseCloudFunction.__proto__),
    functionName: dart.finalFieldType(core.String),
    [__ParseCloudFunction__path]: dart.fieldType(dart.nullable(core.String)),
    [__ParseCloudFunction__path_isSet]: dart.fieldType(core.bool)
  }));
  var latitude$ = dart.privateName(parse_server_sdk, "ParseGeoPoint.latitude");
  var longitude$ = dart.privateName(parse_server_sdk, "ParseGeoPoint.longitude");
  parse_server_sdk.ParseGeoPoint = class ParseGeoPoint extends core.Object {
    get latitude() {
      return this[latitude$];
    }
    set latitude(value) {
      this[latitude$] = value;
    }
    get longitude() {
      return this[longitude$];
    }
    set longitude(value) {
      this[longitude$] = value;
    }
    toJson(opts) {
      let full = opts && 'full' in opts ? opts.full : false;
      if (full == null) dart.nullFailed(I[22], 12, 37, "full");
      let forApiRQ = opts && 'forApiRQ' in opts ? opts.forApiRQ : false;
      if (forApiRQ == null) dart.nullFailed(I[22], 12, 56, "forApiRQ");
      return new (T$.IdentityMapOfString$dynamic()).from(["__type", "GeoPoint", "latitude", this.latitude, "longitude", this.longitude]);
    }
  };
  (parse_server_sdk.ParseGeoPoint.new = function(opts) {
    let latitude = opts && 'latitude' in opts ? opts.latitude : 0;
    if (latitude == null) dart.nullFailed(I[22], 8, 23, "latitude");
    let longitude = opts && 'longitude' in opts ? opts.longitude : 0;
    if (longitude == null) dart.nullFailed(I[22], 8, 44, "longitude");
    this[latitude$] = latitude;
    this[longitude$] = longitude;
    ;
  }).prototype = parse_server_sdk.ParseGeoPoint.prototype;
  dart.addTypeTests(parse_server_sdk.ParseGeoPoint);
  dart.addTypeCaches(parse_server_sdk.ParseGeoPoint);
  dart.setMethodSignature(parse_server_sdk.ParseGeoPoint, () => ({
    __proto__: dart.getMethods(parse_server_sdk.ParseGeoPoint.__proto__),
    toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [], {forApiRQ: core.bool, full: core.bool}, {})
  }));
  dart.setLibraryUri(parse_server_sdk.ParseGeoPoint, I[1]);
  dart.setFieldSignature(parse_server_sdk.ParseGeoPoint, () => ({
    __proto__: dart.getFields(parse_server_sdk.ParseGeoPoint.__proto__),
    latitude: dart.fieldType(core.double),
    longitude: dart.fieldType(core.double)
  }));
  var _installationId = dart.privateName(parse_server_sdk, "_installationId");
  var _updateInstallation = dart.privateName(parse_server_sdk, "_updateInstallation");
  var _create = dart.privateName(parse_server_sdk, "_create");
  var _save = dart.privateName(parse_server_sdk, "_save");
  var Uuid_options = dart.privateName(uuid, "Uuid.options");
  parse_server_sdk.ParseInstallation = class ParseInstallation extends parse_server_sdk.ParseObject {
    get acl() {
      return dart.nullCheck(super.get(T$.MapOfString$dynamic(), "ACL", {defaultValue: new (T$.IdentityMapOfString$dynamic()).new()}));
    }
    set acl(acl) {
      if (acl == null) dart.nullFailed(I[23], 33, 32, "acl");
      return this.set(T$.MapOfString$dynamic(), "ACL", acl);
    }
    get deviceToken() {
      return super.get(core.String, "deviceToken");
    }
    set deviceToken(deviceToken) {
      return this.set(T$.StringN(), "deviceToken", deviceToken);
    }
    get deviceType() {
      return super.get(core.String, "deviceType");
    }
    get installationId() {
      return super.get(core.String, "installationId");
    }
    set [_installationId](installationId) {
      return this.set(T$.StringN(), "installationId", installationId);
    }
    get appName() {
      return super.get(core.String, "appName");
    }
    get appVersion() {
      return super.get(core.String, "appVersion");
    }
    get appIdentifier() {
      return super.get(core.String, "appIdentifier");
    }
    get parseVersion() {
      return super.get(core.String, "parseVersion");
    }
    static isCurrent(installation) {
      if (installation == null) dart.nullFailed(I[23], 56, 51, "installation");
      return async.async(core.bool, function* isCurrent() {
        let t45;
        parse_server_sdk.ParseInstallation._currentInstallationId == null ? parse_server_sdk.ParseInstallation._currentInstallationId = (t45 = (yield parse_server_sdk.ParseInstallation._getFromLocalStore()), t45 == null ? null : t45.installationId) : null;
        return parse_server_sdk.ParseInstallation._currentInstallationId != null && installation.installationId == parse_server_sdk.ParseInstallation._currentInstallationId;
      });
    }
    static currentInstallation() {
      return async.async(parse_server_sdk.ParseInstallation, function* currentInstallation() {
        let t45;
        t45 = (yield parse_server_sdk.ParseInstallation._getFromLocalStore());
        return t45 == null ? (yield parse_server_sdk.ParseInstallation._createInstallation()) : t45;
      });
    }
    [_updateInstallation]() {
      return async.async(dart.void, (function* _updateInstallation() {
        if (true) {
          this.set(core.String, "deviceType", "web");
        } else if (dart.test(io.Platform.isAndroid)) {
          this.set(core.String, "deviceType", "android");
        } else if (dart.test(io.Platform.isIOS)) {
          this.set(core.String, "deviceType", "ios");
        } else if (dart.test(io.Platform.isLinux)) {
          this.set(core.String, "deviceType", "Linux");
        } else if (dart.test(io.Platform.isMacOS)) {
          this.set(core.String, "deviceType", "MacOS");
        } else if (dart.test(io.Platform.isWindows)) {
          this.set(core.String, "deviceType", "Windows");
        }
        this.set(T$.StringN(), "localeIdentifier", parse_server_sdk.ParseCoreData.new().locale);
        this.set(T$.StringN(), "appName", parse_server_sdk.ParseCoreData.new().appName);
        this.set(T$.StringN(), "appVersion", parse_server_sdk.ParseCoreData.new().appVersion);
        this.set(T$.StringN(), "appIdentifier", parse_server_sdk.ParseCoreData.new().appPackageName);
        this.set(core.String, "parseVersion", "3.0.0");
      }).bind(this));
    }
    create(opts) {
      let allowCustomObjectId = opts && 'allowCustomObjectId' in opts ? opts.allowCustomObjectId : false;
      if (allowCustomObjectId == null) dart.nullFailed(I[23], 97, 38, "allowCustomObjectId");
      return async.async(parse_server_sdk.ParseResponse, (function* create() {
        let isCurrent = (yield parse_server_sdk.ParseInstallation.isCurrent(this));
        if (dart.test(isCurrent)) {
          yield this[_updateInstallation]();
        }
        let parseResponse = (yield this[_create]({allowCustomObjectId: allowCustomObjectId}));
        if (dart.test(parseResponse.success) && dart.test(isCurrent)) {
          this.clearUnsavedChanges();
          yield this.saveInStorage("flutter_parse_sdk_installation");
        }
        return parseResponse;
      }).bind(this));
    }
    save() {
      return async.async(parse_server_sdk.ParseResponse, (function* save() {
        let isCurrent = (yield parse_server_sdk.ParseInstallation.isCurrent(this));
        if (dart.test(isCurrent)) {
          yield this[_updateInstallation]();
        }
        let parseResponse = (yield this[_save]());
        if (dart.test(parseResponse.success) && dart.test(isCurrent)) {
          this.clearUnsavedChanges();
          yield this.saveInStorage("flutter_parse_sdk_installation");
        }
        return parseResponse;
      }).bind(this));
    }
    static _getFromLocalStore() {
      return async.async(T$.ParseInstallationN(), function* _getFromLocalStore() {
        let t45;
        let coreStore = parse_server_sdk.ParseCoreData.new().getStore();
        let installationJson = (yield coreStore.getString("flutter_parse_sdk_installation"));
        if (installationJson != null) {
          let installationMap = T$.MapNOfString$dynamic().as(convert.json.decode(installationJson));
          if (installationMap != null) {
            t45 = new parse_server_sdk.ParseInstallation.new();
            return (() => {
              t45.fromJson(installationMap);
              return t45;
            })();
          }
        }
        return null;
      });
    }
    static _createInstallation() {
      return async.async(parse_server_sdk.ParseInstallation, function* _createInstallation() {
        parse_server_sdk.ParseInstallation._currentInstallationId == null ? parse_server_sdk.ParseInstallation._currentInstallationId = (C[65] || CT.C65).v4() : null;
        let installation = new parse_server_sdk.ParseInstallation.new();
        installation[_installationId] = parse_server_sdk.ParseInstallation._currentInstallationId;
        yield installation[_updateInstallation]();
        yield parse_server_sdk.ParseCoreData.new().getStore().setString("flutter_parse_sdk_installation", convert.json.encode(installation.toJson({full: true})));
        return installation;
      });
    }
    [_create](opts) {
      let allowCustomObjectId = opts && 'allowCustomObjectId' in opts ? opts.allowCustomObjectId : false;
      if (allowCustomObjectId == null) dart.nullFailed(I[23], 162, 39, "allowCustomObjectId");
      return async.async(parse_server_sdk.ParseResponse, (function* _create() {
        try {
          let uri = dart.str(parse_server_sdk.ParseCoreData.new().serverUrl) + "/installations";
          let body = convert.json.encode(this.toJson({forApiRQ: true, allowCustomObjectId: allowCustomObjectId}));
          let headers = new (T$.IdentityMapOfString$String()).from(["content-type", "application/json"]);
          if (dart.test(this[_debug])) {
            parse_server_sdk.logRequest(parse_server_sdk.ParseCoreData.new().appName, this.parseClassName, dart.toString(parse_server_sdk.ParseApiRQ.create), uri, body);
          }
          let result = (yield this[_client$0].post(uri, {data: body, options: new parse_server_sdk.ParseNetworkOptions.new({headers: headers})}));
          if (result.statusCode === 201) {
            let map = T$.MapOfString$dynamic().as(convert.json.decode(result.data));
            this.objectId = dart.toString(map[$_get]("objectId"));
          }
          return parse_server_sdk.handleResponse(parse_server_sdk.ParseInstallation, this, result, parse_server_sdk.ParseApiRQ.create, this[_debug], this.parseClassName);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.create, this[_debug], this.parseClassName);
          } else
            throw e$;
        }
      }).bind(this));
    }
    [_save]() {
      return async.async(parse_server_sdk.ParseResponse, (function* _save() {
        if (this.objectId == null) {
          return this.create();
        } else {
          try {
            let uri = dart.str(parse_server_sdk.ParseCoreData.new().serverUrl) + "/installations" + "/" + dart.str(this.objectId);
            let body = convert.json.encode(this.toJson({forApiRQ: true}));
            if (dart.test(this[_debug])) {
              parse_server_sdk.logRequest(parse_server_sdk.ParseCoreData.new().appName, this.parseClassName, dart.toString(parse_server_sdk.ParseApiRQ.save), uri, body);
            }
            let result = (yield this[_client$0].put(uri, {data: body}));
            return parse_server_sdk.handleResponse(parse_server_sdk.ParseInstallation, this, result, parse_server_sdk.ParseApiRQ.save, this[_debug], this.parseClassName);
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Exception.is(e)) {
              return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.save, this[_debug], this.parseClassName);
            } else
              throw e$;
          }
        }
      }).bind(this));
    }
    subscribeToChannel(value) {
      if (value == null) dart.nullFailed(I[23], 218, 42, "value");
      return async.async(dart.void, (function* subscribeToChannel() {
        let channel = T$.JSArrayOfString().of([value]);
        this.setAddAllUnique("channels", channel);
        yield this.save();
      }).bind(this));
    }
    unsubscribeFromChannel(value) {
      if (value == null) dart.nullFailed(I[23], 225, 46, "value");
      return async.async(dart.void, (function* unsubscribeFromChannel() {
        let channel = T$.JSArrayOfString().of([value]);
        this.setRemove("channels", channel);
        yield this.save();
      }).bind(this));
    }
    getSubscribedChannels() {
      return async.async(core.List, (function* getSubscribedChannels() {
        core.print("getSubscribedChannels");
        let apiResponse = (yield new parse_server_sdk.ParseObject.new("_Installation").getObject(dart.nullCheck(this.objectId)));
        if (dart.test(apiResponse.success)) {
          let installation = parse_server_sdk.ParseObject.as(apiResponse.result);
          return T$.FutureOfList().value(installation.get(core.List, "channels", {defaultValue: []}));
        } else {
          return T$.JSArrayOfString().of([]);
        }
      }).bind(this));
    }
  };
  (parse_server_sdk.ParseInstallation.new = function(opts) {
    let debug = opts && 'debug' in opts ? opts.debug : null;
    let client = opts && 'client' in opts ? opts.client : null;
    let autoSendSessionId = opts && 'autoSendSessionId' in opts ? opts.autoSendSessionId : null;
    parse_server_sdk.ParseInstallation.__proto__.new.call(this, "_Installation", {client: client, autoSendSessionId: autoSendSessionId, debug: debug});
    ;
  }).prototype = parse_server_sdk.ParseInstallation.prototype;
  (parse_server_sdk.ParseInstallation.forQuery = function() {
    parse_server_sdk.ParseInstallation.__proto__.new.call(this, "_User");
    ;
  }).prototype = parse_server_sdk.ParseInstallation.prototype;
  dart.addTypeTests(parse_server_sdk.ParseInstallation);
  dart.addTypeCaches(parse_server_sdk.ParseInstallation);
  dart.setMethodSignature(parse_server_sdk.ParseInstallation, () => ({
    __proto__: dart.getMethods(parse_server_sdk.ParseInstallation.__proto__),
    [_updateInstallation]: dart.fnType(async.Future$(dart.void), []),
    [_create]: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), [], {allowCustomObjectId: core.bool}, {}),
    [_save]: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), []),
    subscribeToChannel: dart.fnType(async.Future$(dart.void), [core.String]),
    unsubscribeFromChannel: dart.fnType(async.Future$(dart.void), [core.String]),
    getSubscribedChannels: dart.fnType(async.Future$(core.List), [])
  }));
  dart.setGetterSignature(parse_server_sdk.ParseInstallation, () => ({
    __proto__: dart.getGetters(parse_server_sdk.ParseInstallation.__proto__),
    acl: core.Map$(core.String, dart.dynamic),
    deviceToken: dart.nullable(core.String),
    deviceType: dart.nullable(core.String),
    installationId: dart.nullable(core.String),
    appName: dart.nullable(core.String),
    appVersion: dart.nullable(core.String),
    appIdentifier: dart.nullable(core.String),
    parseVersion: dart.nullable(core.String)
  }));
  dart.setSetterSignature(parse_server_sdk.ParseInstallation, () => ({
    __proto__: dart.getSetters(parse_server_sdk.ParseInstallation.__proto__),
    acl: core.Map$(core.String, dart.dynamic),
    deviceToken: dart.nullable(core.String),
    [_installationId]: dart.nullable(core.String)
  }));
  dart.setLibraryUri(parse_server_sdk.ParseInstallation, I[1]);
  dart.defineLazy(parse_server_sdk.ParseInstallation, {
    /*parse_server_sdk.ParseInstallation.readOnlyKeys*/get readOnlyKeys() {
      return T$.JSArrayOfString().of(["deviceToken", "deviceType", "installationId", "appName", "appVersion", "appIdentifier", "parseVersion"]);
    },
    /*parse_server_sdk.ParseInstallation._currentInstallationId*/get _currentInstallationId() {
      return null;
    },
    set _currentInstallationId(_) {}
  }, false);
  var _mergeWithPreviousAdd = dart.privateName(parse_server_sdk, "_mergeWithPreviousAdd");
  var _mergeWithPreviousRemove = dart.privateName(parse_server_sdk, "_mergeWithPreviousRemove");
  var _mergeWithPreviousIncrement = dart.privateName(parse_server_sdk, "_mergeWithPreviousIncrement");
  var _mergeWithPreviousAddUnique = dart.privateName(parse_server_sdk, "_mergeWithPreviousAddUnique");
  var _mergeWithPreviousAddRelation = dart.privateName(parse_server_sdk, "_mergeWithPreviousAddRelation");
  var _mergeWithPreviousRemoveRelation = dart.privateName(parse_server_sdk, "_mergeWithPreviousRemoveRelation");
  var _applyToValueAddUnique = dart.privateName(parse_server_sdk, "_applyToValueAddUnique");
  parse_server_sdk.ParseMergeTool = class ParseMergeTool extends core.Object {
    mergeWithPrevious(previous, values) {
      if (previous == null) {
        return values;
      }
      let previousAction = "Set";
      if (core.Map.is(previous)) {
        previousAction = T$.StringN().as(previous[$_get]("__op"));
      }
      if (core.Map.is(values)) {
        if (dart.equals(values[$_get]("__op"), "Add")) {
          values = this[_mergeWithPreviousAdd](previousAction, previous, values);
        } else if (dart.equals(values[$_get]("__op"), "Remove")) {
          values = this[_mergeWithPreviousRemove](previousAction, previous, values);
        } else if (dart.equals(values[$_get]("__op"), "Increment")) {
          values = this[_mergeWithPreviousIncrement](previousAction, previous, values);
        } else if (dart.equals(values[$_get]("__op"), "AddUnique")) {
          values = this[_mergeWithPreviousAddUnique](previousAction, previous, values);
        } else if (dart.equals(values[$_get]("__op"), "AddRelation")) {
          values = this[_mergeWithPreviousAddRelation](previousAction, previous, values);
        } else if (dart.equals(values[$_get]("__op"), "RemoveRelation")) {
          values = this[_mergeWithPreviousRemoveRelation](previousAction, previous, values);
        }
      }
      return values;
    }
    [_mergeWithPreviousAdd](previousAction, previous, values) {
      let t47;
      if (previousAction === "Set") {
        if (core.List.is(previous)) {
          t47 = core.List.from(previous);
          return (() => {
            t47[$addAll](core.Iterable.as(dart.dsend(values, '_get', ["objects"])));
            return t47;
          })();
        } else {
          dart.throw("Unable to add an item to a non-array.");
        }
      }
      if (previousAction === "Add") {
        if (dart.equals(dart.dload(dart.dsend(values, '_get', ["objects"]), 'length'), 1)) {
          dart.dsend(dart.dsend(previous, '_get', ["objects"]), 'add', [dart.dload(dart.dsend(values, '_get', ["objects"]), 'first')]);
        } else {
          dart.dsend(dart.dsend(previous, '_get', ["objects"]), 'add', [dart.dsend(values, '_get', ["objects"])]);
        }
        values = previous;
      }
      if (previousAction === "Increment") {
        dart.throw("Add operation is invalid after Increment operation");
      }
      if (previousAction === "Remove") {
        dart.throw("Add operation is invalid after Remove operation");
      }
      if (previousAction === "AddUnique") {
        dart.throw("Add operation is invalid after AddUnique operation");
      }
      if (previousAction === "AddRelation") {
        dart.throw("Add operation is invalid after AddRelation operation");
      }
      if (previousAction === "RemoveRelation") {
        dart.throw("Add operation is invalid after RemoveRelation operation");
      }
      return values;
    }
    [_mergeWithPreviousRemove](previousAction, previous, values) {
      if (previousAction === "Set") {
        return previous;
      }
      if (previousAction === "Remove") {
        if (dart.equals(dart.dload(dart.dsend(values, '_get', ["objects"]), 'length'), 1)) {
          dart.dsend(dart.dsend(previous, '_get', ["objects"]), 'add', [dart.dload(dart.dsend(values, '_get', ["objects"]), 'first')]);
        } else {
          dart.dsend(dart.dsend(previous, '_get', ["objects"]), 'add', [dart.dsend(values, '_get', ["objects"])]);
        }
        values = previous;
      }
      if (previousAction === "Increment") {
        dart.throw("Remove operation is invalid after Increment operation");
      }
      if (previousAction === "Add") {
        dart.throw("Remove operation is invalid after Add operation");
      }
      if (previousAction === "AddUnique") {
        dart.throw("Remove operation is invalid after AddUnique operation");
      }
      if (previousAction === "AddRelation") {
        dart.throw("Remove operation is invalid after AddRelation operation");
      }
      if (previousAction === "RemoveRelation") {
        dart.throw("Remove operation is invalid after RemoveRelation operation");
      }
      return values;
    }
    [_mergeWithPreviousIncrement](previousAction, previous, values) {
      let t48, t47, t48$, t47$;
      if (previousAction === "Set") {
        if (typeof previous == 'number') {
          t47 = values;
          t48 = "amount";
          dart.dsend(t47, '_set', [t48, dart.dsend(dart.dsend(t47, '_get', [t48]), '+', [previous])]);
        } else {
          dart.throw("Invalid Operation");
        }
      }
      if (previousAction === "Increment") {
        t47$ = values;
        t48$ = "amount";
        dart.dsend(t47$, '_set', [t48$, dart.dsend(dart.dsend(t47$, '_get', [t48$]), '+', [dart.dsend(previous, '_get', ["amount"])])]);
      }
      if (previousAction === "Add") {
        dart.throw("Increment operation is invalid after Add operation");
      }
      if (previousAction === "Remove") {
        dart.throw("Increment operation is invalid after Remove operation");
      }
      if (previousAction === "AddUnique") {
        dart.throw("Increment operation is invalid after AddUnique operation");
      }
      if (previousAction === "AddRelation") {
        dart.throw("Increment operation is invalid after AddRelation operation");
      }
      if (previousAction === "RemoveRelation") {
        dart.throw("Increment operation is invalid after RemoveRelation operation");
      }
      return values;
    }
    [_mergeWithPreviousAddUnique](previousAction, previous, values) {
      if (previousAction === "Set") {
        if (core.List.is(previous)) {
          return this[_applyToValueAddUnique](previous, dart.dsend(values, '_get', ["objects"]));
        } else {
          dart.throw("Unable to add an item to a non-array.");
        }
      }
      if (previousAction === "AddUnique") {
        dart.dsend(values, '_set', ["objects", this[_applyToValueAddUnique](dart.dsend(previous, '_get', ["objects"]), dart.dsend(values, '_get', ["objects"]))]);
        return values;
      }
      if (previousAction === "Add") {
        dart.throw("AddUnique operation is invalid after Add operation");
      }
      if (previousAction === "Remove") {
        dart.throw("AddUnique operation is invalid after Reomve operation");
      }
      if (previousAction === "Increment") {
        dart.throw("AddUnique operation is invalid after Increment operation");
      }
      if (previousAction === "AddRelation") {
        dart.throw("AddUnique operation is invalid after AddRelation operation");
      }
      if (previousAction === "RemoveRelation") {
        dart.throw("AddUnique operation is invalid after RemoveRelation operation");
      }
      return values;
    }
    [_mergeWithPreviousAddRelation](previousAction, previous, values) {
      if (previousAction === "AddRelation") {
        if (dart.equals(dart.dload(dart.dsend(values, '_get', ["objects"]), 'length'), 1)) {
          dart.dsend(dart.dsend(previous, '_get', ["objects"]), 'add', [dart.dload(dart.dsend(values, '_get', ["objects"]), 'first')]);
        } else {
          dart.dsend(dart.dsend(previous, '_get', ["objects"]), 'add', [dart.dsend(values, '_get', ["objects"])]);
        }
        values = previous;
      }
      if (previousAction === "Set") {
        dart.throw("AddRelation operation is invalid after Set operation.");
      }
      if (previousAction === "Increment") {
        dart.throw("AddRelation operation is invalid after Increment operation");
      }
      if (previousAction === "Add") {
        dart.throw("AddRelation operation is invalid after Add operation");
      }
      if (previousAction === "Remove") {
        dart.throw("AddRelation operation is invalid after Remove operation");
      }
      if (previousAction === "AddUnique") {
        dart.throw("AddRelation operation is invalid after AddUnique operation");
      }
      if (previousAction === "RemoveRelation") {
        dart.throw("AddRelation operation is invalid after RemoveRelation operation");
      }
      return values;
    }
    [_mergeWithPreviousRemoveRelation](previousAction, previous, values) {
      if (previousAction === "RemoveRelation") {
        if (dart.equals(dart.dload(dart.dsend(values, '_get', ["objects"]), 'length'), 1)) {
          dart.dsend(dart.dsend(previous, '_get', ["objects"]), 'add', [dart.dload(dart.dsend(values, '_get', ["objects"]), 'first')]);
        } else {
          dart.dsend(dart.dsend(previous, '_get', ["objects"]), 'add', [dart.dsend(values, '_get', ["objects"])]);
        }
        values = previous;
      }
      if (previousAction === "Set") {
        dart.throw("RemoveRelation operation is invalid after Set operation.");
      }
      if (previousAction === "Increment") {
        dart.throw("RemoveRelation operation is invalid after Increment operation");
      }
      if (previousAction === "Add") {
        dart.throw("RemoveRelation operation is invalid after Add operation");
      }
      if (previousAction === "Remove") {
        dart.throw("RemoveRelation operation is invalid after Remove operation");
      }
      if (previousAction === "AddUnique") {
        dart.throw("RemoveRelation operation is invalid after AddUnique operation");
      }
      if (previousAction === "AddRelation") {
        dart.throw("RemoveRelation operation is invalid after AddRelation operation");
      }
      return values;
    }
    [_applyToValueAddUnique](oldValue, newValue) {
      for (let objectToAdd of core.Iterable.as(newValue)) {
        if (parse_server_sdk.ParseObject.is(objectToAdd) && objectToAdd.objectId != null) {
          let index = 0;
          for (let objc of core.Iterable.as(oldValue)) {
            if (parse_server_sdk.ParseObject.is(objc) && objc.objectId == objectToAdd.objectId) {
              dart.dsend(oldValue, '_set', [index, objectToAdd]);
              break;
            }
            index = index + 1;
          }
          if (index === dart.dload(oldValue, 'length')) {
            dart.dsend(oldValue, 'add', [objectToAdd]);
          }
        } else if (!dart.dtest(dart.dsend(oldValue, 'contains', [objectToAdd]))) {
          dart.dsend(oldValue, 'add', [objectToAdd]);
        }
      }
      core.print(oldValue);
      return oldValue;
    }
  };
  (parse_server_sdk.ParseMergeTool.new = function() {
    ;
  }).prototype = parse_server_sdk.ParseMergeTool.prototype;
  dart.addTypeTests(parse_server_sdk.ParseMergeTool);
  dart.addTypeCaches(parse_server_sdk.ParseMergeTool);
  dart.setMethodSignature(parse_server_sdk.ParseMergeTool, () => ({
    __proto__: dart.getMethods(parse_server_sdk.ParseMergeTool.__proto__),
    mergeWithPrevious: dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic]),
    [_mergeWithPreviousAdd]: dart.fnType(dart.dynamic, [dart.nullable(core.String), dart.dynamic, dart.dynamic]),
    [_mergeWithPreviousRemove]: dart.fnType(dart.dynamic, [dart.nullable(core.String), dart.dynamic, dart.dynamic]),
    [_mergeWithPreviousIncrement]: dart.fnType(dart.dynamic, [dart.nullable(core.String), dart.dynamic, dart.dynamic]),
    [_mergeWithPreviousAddUnique]: dart.fnType(dart.dynamic, [dart.nullable(core.String), dart.dynamic, dart.dynamic]),
    [_mergeWithPreviousAddRelation]: dart.fnType(dart.dynamic, [dart.nullable(core.String), dart.dynamic, dart.dynamic]),
    [_mergeWithPreviousRemoveRelation]: dart.fnType(dart.dynamic, [dart.nullable(core.String), dart.dynamic, dart.dynamic]),
    [_applyToValueAddUnique]: dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic])
  }));
  dart.setLibraryUri(parse_server_sdk.ParseMergeTool, I[1]);
  var _parent = dart.privateName(parse_server_sdk, "_parent");
  var _parentObjectId = dart.privateName(parse_server_sdk, "_parentObjectId");
  var _targetClass = dart.privateName(parse_server_sdk, "_targetClass");
  var _key = dart.privateName(parse_server_sdk, "_key");
  var _knownObjects = dart.privateName(parse_server_sdk, "_knownObjects");
  const _is_ParseRelation_default = Symbol('_is_ParseRelation_default');
  parse_server_sdk.ParseRelation$ = dart.generic(T => {
    var _HashSetOfT = () => (_HashSetOfT = dart.constFn(collection._HashSet$(T)))();
    var SetOfT = () => (SetOfT = dart.constFn(core.Set$(T)))();
    var SetNOfT = () => (SetNOfT = dart.constFn(dart.nullable(SetOfT())))();
    class ParseRelation extends core.Object {
      getQuery() {
        let t47;
        t47 = new (T$.QueryBuilderOfParseObject()).new(new parse_server_sdk.ParseObject.new(dart.nullCheck(this[_targetClass])));
        return (() => {
          t47.whereRelatedTo(this[_key], dart.nullCheck(this[_parent]).parseClassName, this[_parentObjectId]);
          return t47;
        })();
      }
      add(object) {
        T.as(object);
        if (object == null) dart.nullFailed(I[24], 32, 14, "object");
        this[_targetClass] = object.parseClassName;
        dart.nullCheck(this[_knownObjects]).add(object);
        dart.nullCheck(this[_parent]).addRelation(this[_key], dart.nullCheck(this[_knownObjects])[$toList]());
      }
      remove(object) {
        T.as(object);
        if (object == null) dart.nullFailed(I[24], 38, 17, "object");
        this[_targetClass] = object.parseClassName;
        dart.nullCheck(this[_knownObjects]).remove(object);
        dart.nullCheck(this[_parent]).removeRelation(this[_key], dart.nullCheck(this[_knownObjects])[$toList]());
      }
      toJson() {
        let t47;
        return new (T$.IdentityMapOfString$dynamic()).from(["__type", "Relation", "className", this[_targetClass], "objects", parse_server_sdk.parseEncode((t47 = this[_knownObjects], t47 == null ? null : t47[$toList]()))]);
      }
    }
    (ParseRelation.new = function(opts) {
      let parent = opts && 'parent' in opts ? opts.parent : null;
      if (parent == null) dart.nullFailed(I[24], 5, 39, "parent");
      let key = opts && 'key' in opts ? opts.key : null;
      if (key == null) dart.nullFailed(I[24], 5, 63, "key");
      this[_parent] = null;
      this[_parentObjectId] = "";
      this[_targetClass] = null;
      this[_key] = "";
      this[_knownObjects] = new (_HashSetOfT()).new();
      this[_parent] = parent;
      this[_key] = key;
      this[_parentObjectId] = dart.nullCheck(parent.objectId);
    }).prototype = ParseRelation.prototype;
    (ParseRelation.fromJson = function(map) {
      if (map == null) dart.nullFailed(I[24], 11, 47, "map");
      this[_parent] = null;
      this[_parentObjectId] = "";
      this[_targetClass] = null;
      this[_key] = "";
      this[_knownObjects] = new (_HashSetOfT()).new();
      this[_knownObjects] = SetNOfT().as(parse_server_sdk.parseDecode(map[$_get]("objects")));
      this[_targetClass] = T$.StringN().as(map[$_get]("className"));
    }).prototype = ParseRelation.prototype;
    dart.addTypeTests(ParseRelation);
    ParseRelation.prototype[_is_ParseRelation_default] = true;
    dart.addTypeCaches(ParseRelation);
    dart.setMethodSignature(ParseRelation, () => ({
      __proto__: dart.getMethods(ParseRelation.__proto__),
      getQuery: dart.fnType(parse_server_sdk.QueryBuilder$(parse_server_sdk.ParseObject), []),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      remove: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      toJson: dart.fnType(core.Map$(core.String, dart.dynamic), [])
    }));
    dart.setLibraryUri(ParseRelation, I[1]);
    dart.setFieldSignature(ParseRelation, () => ({
      __proto__: dart.getFields(ParseRelation.__proto__),
      [_parent]: dart.fieldType(dart.nullable(parse_server_sdk.ParseObject)),
      [_parentObjectId]: dart.fieldType(core.String),
      [_targetClass]: dart.fieldType(dart.nullable(core.String)),
      [_key]: dart.fieldType(core.String),
      [_knownObjects]: dart.fieldType(dart.nullable(core.Set$(T)))
    }));
    return ParseRelation;
  });
  parse_server_sdk.ParseRelation = parse_server_sdk.ParseRelation$();
  dart.addTypeTests(parse_server_sdk.ParseRelation, _is_ParseRelation_default);
  var success = dart.privateName(parse_server_sdk, "ParseResponse.success");
  var statusCode = dart.privateName(parse_server_sdk, "ParseResponse.statusCode");
  var result = dart.privateName(parse_server_sdk, "ParseResponse.result");
  var results = dart.privateName(parse_server_sdk, "ParseResponse.results");
  var count = dart.privateName(parse_server_sdk, "ParseResponse.count");
  var error$ = dart.privateName(parse_server_sdk, "ParseResponse.error");
  parse_server_sdk.ParseResponse = class ParseResponse extends core.Object {
    get success() {
      return this[success];
    }
    set success(value) {
      this[success] = value;
    }
    get statusCode() {
      return this[statusCode];
    }
    set statusCode(value) {
      this[statusCode] = value;
    }
    get result() {
      return this[result];
    }
    set result(value) {
      this[result] = value;
    }
    get results() {
      return this[results];
    }
    set results(value) {
      this[results] = value;
    }
    get count() {
      return this[count];
    }
    set count(value) {
      this[count] = value;
    }
    get error() {
      return this[error$];
    }
    set error(value) {
      this[error$] = value;
    }
  };
  (parse_server_sdk.ParseResponse.new = function(opts) {
    let error = opts && 'error' in opts ? opts.error : null;
    this[success] = false;
    this[statusCode] = -1;
    this[result] = null;
    this[results] = null;
    this[count] = 0;
    this[error$] = error;
    ;
  }).prototype = parse_server_sdk.ParseResponse.prototype;
  dart.addTypeTests(parse_server_sdk.ParseResponse);
  dart.addTypeCaches(parse_server_sdk.ParseResponse);
  dart.setLibraryUri(parse_server_sdk.ParseResponse, I[1]);
  dart.setFieldSignature(parse_server_sdk.ParseResponse, () => ({
    __proto__: dart.getFields(parse_server_sdk.ParseResponse.__proto__),
    success: dart.fieldType(core.bool),
    statusCode: dart.fieldType(core.int),
    result: dart.fieldType(dart.dynamic),
    results: dart.fieldType(dart.nullable(core.List)),
    count: dart.fieldType(core.int),
    error: dart.fieldType(dart.nullable(parse_server_sdk.ParseError))
  }));
  parse_server_sdk.ParseSession = class ParseSession extends parse_server_sdk.ParseObject {
    clone(map) {
      if (map == null) dart.nullFailed(I[25], 14, 43, "map");
      return parse_server_sdk.ParseSession.as(this.fromJson(map));
    }
    get sessionToken() {
      return dart.nullCheck(super.get(core.String, "sessionToken"));
    }
    get user() {
      return dart.nullCheck(super.get(parse_server_sdk.ParseObject, "user"));
    }
    get createdWith() {
      return dart.nullCheck(super.get(T$.MapOfString$dynamic(), "createdWith"));
    }
    get restricted() {
      return dart.nullCheck(super.get(core.bool, "restricted"));
    }
    get expiresAt() {
      return dart.nullCheck(super.get(core.DateTime, "expiresAt"));
    }
    get installationId() {
      return dart.nullCheck(super.get(core.String, "installationId"));
    }
    set installationId(installationId) {
      if (installationId == null) dart.nullFailed(I[25], 31, 29, "installationId");
      return this.set(core.String, "installationId", installationId);
    }
    getCurrentSessionFromServer() {
      return async.async(parse_server_sdk.ParseResponse, (function* getCurrentSessionFromServer() {
        try {
          let url = parse_server_sdk.getSanitisedUri(this[_client$0], "/sessions/me");
          let response = (yield this[_client$0].get(dart.toString(url)));
          return parse_server_sdk.handleResponse(parse_server_sdk.ParseSession, this, response, parse_server_sdk.ParseApiRQ.logout, this[_debug], this.parseClassName);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.logout, this[_debug], this.parseClassName);
          } else
            throw e$;
        }
      }).bind(this));
    }
  };
  (parse_server_sdk.ParseSession.new = function(opts) {
    let debug = opts && 'debug' in opts ? opts.debug : null;
    let client = opts && 'client' in opts ? opts.client : null;
    parse_server_sdk.ParseSession.__proto__.new.call(this, "_Session", {client: client, debug: debug});
    ;
  }).prototype = parse_server_sdk.ParseSession.prototype;
  dart.addTypeTests(parse_server_sdk.ParseSession);
  dart.addTypeCaches(parse_server_sdk.ParseSession);
  parse_server_sdk.ParseSession[dart.implements] = () => [parse_server_sdk.ParseCloneable];
  dart.setMethodSignature(parse_server_sdk.ParseSession, () => ({
    __proto__: dart.getMethods(parse_server_sdk.ParseSession.__proto__),
    clone: dart.fnType(parse_server_sdk.ParseSession, [core.Map$(core.String, dart.dynamic)]),
    getCurrentSessionFromServer: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), [])
  }));
  dart.setGetterSignature(parse_server_sdk.ParseSession, () => ({
    __proto__: dart.getGetters(parse_server_sdk.ParseSession.__proto__),
    sessionToken: core.String,
    user: parse_server_sdk.ParseObject,
    createdWith: core.Map$(core.String, dart.dynamic),
    restricted: core.bool,
    expiresAt: core.DateTime,
    installationId: core.String
  }));
  dart.setSetterSignature(parse_server_sdk.ParseSession, () => ({
    __proto__: dart.getSetters(parse_server_sdk.ParseSession.__proto__),
    installationId: core.String
  }));
  dart.setLibraryUri(parse_server_sdk.ParseSession, I[1]);
  var _password = dart.privateName(parse_server_sdk, "_password");
  var _loginWith = dart.privateName(parse_server_sdk, "_loginWith");
  var _onResponseSuccess = dart.privateName(parse_server_sdk, "_onResponseSuccess");
  const save = Symbol("save");
  const update = Symbol("update");
  parse_server_sdk.ParseUser = class ParseUser extends parse_server_sdk.ParseObject {
    clone(map) {
      let t48;
      if (map == null) dart.nullFailed(I[26], 39, 38, "map");
      t48 = new parse_server_sdk.ParseUser.clone(map);
      return (() => {
        t48.fromJson(map);
        return t48;
      })();
    }
    get password() {
      return this[_password];
    }
    set password(password) {
      if (this[_password] != password) {
        this[_password] = password;
        if (password != null) this[_unsavedChanges][$_set]("password", password);
      }
    }
    get acl() {
      return dart.nullCheck(super.get(T$.MapOfString$dynamic(), "ACL", {defaultValue: new (T$.IdentityMapOfString$dynamic()).new()}));
    }
    set acl(acl) {
      if (acl == null) dart.nullFailed(I[26], 61, 32, "acl");
      return this.set(T$.MapOfString$dynamic(), "ACL", acl);
    }
    get emailVerified() {
      return super.get(core.bool, "emailVerified");
    }
    set emailVerified(emailVerified) {
      return this.set(T$.boolN(), "emailVerified", emailVerified);
    }
    get username() {
      return super.get(core.String, "username");
    }
    set username(username) {
      return this.set(T$.StringN(), "username", username);
    }
    get emailAddress() {
      return super.get(core.String, "email");
    }
    set emailAddress(emailAddress) {
      return this.set(T$.StringN(), "email", emailAddress);
    }
    get sessionToken() {
      return super.get(core.String, "sessionToken");
    }
    set sessionToken(sessionToken) {
      return this.set(T$.StringN(), "sessionToken", sessionToken);
    }
    get authData() {
      return super.get(T$.MapOfString$dynamic(), "authData");
    }
    set authData(authData) {
      return this.set(T$.MapNOfString$dynamic(), "authData", authData);
    }
    static createUser(username = null, password = null, emailAddress = null) {
      return parse_server_sdk.ParseCoreData.instance.createParseUser(username, password, emailAddress);
    }
    static getCurrentUserFromServer(token, opts) {
      if (token == null) dart.nullFailed(I[26], 102, 65, "token");
      let debug = opts && 'debug' in opts ? opts.debug : null;
      let client = opts && 'client' in opts ? opts.client : null;
      return async.async(T$.ParseResponseN(), function* getCurrentUserFromServer() {
        let user = parse_server_sdk.ParseUser._getEmptyUser();
        user.sessionToken = token;
        return user.getUpdatedUser({debug: debug, client: client});
      });
    }
    getUpdatedUser(opts) {
      let debug = opts && 'debug' in opts ? opts.debug : null;
      let client = opts && 'client' in opts ? opts.client : null;
      return async.async(parse_server_sdk.ParseResponse, (function* getUpdatedUser() {
        let t51, t50, t49, t48;
        let _debug = parse_server_sdk.isDebugEnabled({objectLevelDebug: debug});
        let _client = (t48 = client, t48 == null ? (t49 = parse_server_sdk.ParseCoreData.new(), t50 = true, t51 = parse_server_sdk.ParseCoreData.new().securityContext, t49.clientCreator({sendSessionId: t50, securityContext: t51})) : t48);
        if (parse_server_sdk.ParseCoreData.new().sessionId == null && this.sessionToken == null) {
          dart.throw("can not get the current user and session without a sessionId");
        }
        let headers = new (T$.IdentityMapOfString$String()).new();
        if (this.sessionToken != null) {
          headers[$_set]("X-Parse-Session-Token", dart.nullCheck(this.sessionToken));
        }
        try {
          let url = parse_server_sdk.getSanitisedUri(_client, "/users/me");
          let response = (yield _client.get(dart.toString(url), {options: new parse_server_sdk.ParseNetworkOptions.new({headers: headers})}));
          return yield parse_server_sdk.ParseUser._handleResponse(this, response, parse_server_sdk.ParseApiRQ.currentUser, _debug, this.parseClassName);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.currentUser, _debug, this.parseClassName);
          } else
            throw e$;
        }
      }).bind(this));
    }
    static currentUser(opts) {
      let customUserObject = opts && 'customUserObject' in opts ? opts.customUserObject : null;
      return async.async(dart.dynamic, function* currentUser() {
        if (customUserObject != null) {
          return yield parse_server_sdk.ParseUser._getUserFromLocalStore({cloneable: customUserObject});
        } else {
          return yield parse_server_sdk.ParseUser._getUserFromLocalStore();
        }
      });
    }
    signUp(opts) {
      let allowWithoutEmail = opts && 'allowWithoutEmail' in opts ? opts.allowWithoutEmail : false;
      if (allowWithoutEmail == null) dart.nullFailed(I[26], 166, 13, "allowWithoutEmail");
      let doNotSendInstallationID = opts && 'doNotSendInstallationID' in opts ? opts.doNotSendInstallationID : false;
      if (doNotSendInstallationID == null) dart.nullFailed(I[26], 167, 12, "doNotSendInstallationID");
      return async.async(parse_server_sdk.ParseResponse, (function* signUp() {
        this.forgetLocalSession();
        try {
          if (this.emailAddress == null) {
            if (!dart.test(allowWithoutEmail)) {
              if (!dart.test(dart.fn(() => {
                core.print("`ParseUser().signUp()` failed, because the email is not set. If you want to allow signUp without a set email, you should run `ParseUser().signUp(allowWithoutEmail = true)`");
                return true;
              }, T$.VoidTobool())())) dart.assertFailed(null, I[26], 173, 18, "() {\r\n            print(\r\n                '`ParseUser().signUp()` failed, because the email is not set. If you want to allow signUp without a set email, you should run `ParseUser().signUp(allowWithoutEmail = true)`');\r\n            return true;\r\n          }()");
              dart.throw("`signUp` failed, because `emailAddress` of ParseUser was not provided and `allowWithoutEmail` was `false`");
            } else {
              if (!dart.test(dart.fn(() => {
                core.print("It is recommended to only allow user signUp with an email set.");
                return true;
              }, T$.VoidTobool())())) dart.assertFailed(null, I[26], 180, 18, "() {\r\n            print(\r\n                'It is recommended to only allow user signUp with an email set.');\r\n            return true;\r\n          }()");
            }
          }
          let url = parse_server_sdk.getSanitisedUri(this[_client$0], "/classes/_User");
          let body = convert.json.encode(this.toJson({forApiRQ: true}));
          this[_saveChanges]();
          let installationId = (yield parse_server_sdk.ParseUser._getInstallationId());
          let response = (yield this[_client$0].post(dart.toString(url), {options: new parse_server_sdk.ParseNetworkOptions.new({headers: (() => {
                let t49 = new (T$.IdentityMapOfString$String()).new();
                t49[$_set]("X-Parse-Revocable-Session", "1");
                if (installationId != null && !dart.test(doNotSendInstallationID)) t49[$_set]("X-Parse-Installation-Id", installationId);
                return t49;
              })()}), data: body}));
          return yield parse_server_sdk.ParseUser._handleResponse(this, response, parse_server_sdk.ParseApiRQ.signUp, this[_debug], this.parseClassName);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.signUp, this[_debug], this.parseClassName);
          } else
            throw e$;
        }
      }).bind(this));
    }
    login(opts) {
      let doNotSendInstallationID = opts && 'doNotSendInstallationID' in opts ? opts.doNotSendInstallationID : false;
      if (doNotSendInstallationID == null) dart.nullFailed(I[26], 213, 37, "doNotSendInstallationID");
      return async.async(parse_server_sdk.ParseResponse, (function* login() {
        this.forgetLocalSession();
        try {
          let queryParams = new (T$.IdentityMapOfString$String()).from(["username", dart.nullCheck(this.username), "password", dart.nullCheck(this.password)]);
          let installationId = (yield parse_server_sdk.ParseUser._getInstallationId());
          let url = parse_server_sdk.getSanitisedUri(this[_client$0], "/login");
          this[_saveChanges]();
          let response = (yield this[_client$0].post(dart.toString(url), {data: convert.jsonEncode(queryParams), options: new parse_server_sdk.ParseNetworkOptions.new({headers: (() => {
                let t51 = new (T$.IdentityMapOfString$String()).new();
                t51[$_set]("X-Parse-Revocable-Session", "1");
                if (installationId != null && !dart.test(doNotSendInstallationID)) t51[$_set]("X-Parse-Installation-Id", installationId);
                return t51;
              })()})}));
          return yield parse_server_sdk.ParseUser._handleResponse(this, response, parse_server_sdk.ParseApiRQ.login, this[_debug], this.parseClassName);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.login, this[_debug], this.parseClassName);
          } else
            throw e$;
        }
      }).bind(this));
    }
    loginAnonymous(opts) {
      let doNotSendInstallationID = opts && 'doNotSendInstallationID' in opts ? opts.doNotSendInstallationID : false;
      if (doNotSendInstallationID == null) dart.nullFailed(I[26], 245, 13, "doNotSendInstallationID");
      return async.async(parse_server_sdk.ParseResponse, (function* loginAnonymous() {
        this.forgetLocalSession();
        try {
          let url = parse_server_sdk.getSanitisedUri(this[_client$0], "/users");
          let uuid = C[65] || CT.C65;
          let installationId = (yield parse_server_sdk.ParseUser._getInstallationId());
          let response = (yield this[_client$0].post(dart.toString(url), {options: new parse_server_sdk.ParseNetworkOptions.new({headers: (() => {
                let t53 = new (T$.IdentityMapOfString$String()).new();
                t53[$_set]("X-Parse-Revocable-Session", "1");
                if (installationId != null && !dart.test(doNotSendInstallationID)) t53[$_set]("X-Parse-Installation-Id", installationId);
                return t53;
              })()}), data: convert.jsonEncode(new (T$.IdentityMapOfString$dynamic()).from(["authData", new (T$.IdentityMapOfString$dynamic()).from(["anonymous", new (T$.IdentityMapOfString$dynamic()).from(["id", uuid.v4()])])]))}));
          return yield parse_server_sdk.ParseUser._handleResponse(this, response, parse_server_sdk.ParseApiRQ.loginAnonymous, this[_debug], this.parseClassName);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.loginAnonymous, this[_debug], this.parseClassName);
          } else
            throw e$;
        }
      }).bind(this));
    }
    static loginWith(provider, authData, opts) {
      if (provider == null) dart.nullFailed(I[26], 277, 49, "provider");
      if (authData == null) dart.nullFailed(I[26], 277, 66, "authData");
      let doNotSendInstallationID = opts && 'doNotSendInstallationID' in opts ? opts.doNotSendInstallationID : false;
      if (doNotSendInstallationID == null) dart.nullFailed(I[26], 278, 13, "doNotSendInstallationID");
      let username = opts && 'username' in opts ? opts.username : null;
      let password = opts && 'password' in opts ? opts.password : null;
      let email = opts && 'email' in opts ? opts.email : null;
      return async.async(parse_server_sdk.ParseResponse, function* loginWith() {
        let user = parse_server_sdk.ParseUser.createUser(username, password, email);
        let response = (yield user[_loginWith](provider, authData, {doNotSendInstallationID: doNotSendInstallationID}));
        return response;
      });
    }
    [_loginWith](provider, authData, opts) {
      if (provider == null) dart.nullFailed(I[26], 290, 43, "provider");
      if (authData == null) dart.nullFailed(I[26], 290, 60, "authData");
      let doNotSendInstallationID = opts && 'doNotSendInstallationID' in opts ? opts.doNotSendInstallationID : false;
      if (doNotSendInstallationID == null) dart.nullFailed(I[26], 291, 13, "doNotSendInstallationID");
      return async.async(parse_server_sdk.ParseResponse, (function* _loginWith() {
        try {
          let url = parse_server_sdk.getSanitisedUri(this[_client$0], "/users");
          let installationId = (yield parse_server_sdk.ParseUser._getInstallationId());
          let body = this.toJson({forApiRQ: true});
          body[$_set]("authData", new (T$.IdentityMapOfString$dynamic()).from([provider, authData]));
          let response = (yield this[_client$0].post(dart.toString(url), {options: new parse_server_sdk.ParseNetworkOptions.new({headers: (() => {
                let t55 = new (T$.IdentityMapOfString$String()).new();
                t55[$_set]("X-Parse-Revocable-Session", "1");
                if (installationId != null && !dart.test(doNotSendInstallationID)) t55[$_set]("X-Parse-Installation-Id", installationId);
                return t55;
              })()}), data: convert.jsonEncode(body)}));
          return yield parse_server_sdk.ParseUser._handleResponse(this, response, parse_server_sdk.ParseApiRQ.loginWith, this[_debug], this.parseClassName);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.loginWith, this[_debug], this.parseClassName);
          } else
            throw e$;
        }
      }).bind(this));
    }
    logout(opts) {
      let deleteLocalUserData = opts && 'deleteLocalUserData' in opts ? opts.deleteLocalUserData : true;
      if (deleteLocalUserData == null) dart.nullFailed(I[26], 317, 38, "deleteLocalUserData");
      return async.async(parse_server_sdk.ParseResponse, (function* logout() {
        let sessionId = dart.nullCheck(parse_server_sdk.ParseCoreData.new().sessionId);
        this.forgetLocalSession();
        if (deleteLocalUserData === true) {
          yield this.deleteLocalUserData();
        }
        try {
          let url = parse_server_sdk.getSanitisedUri(this[_client$0], "/logout");
          let response = (yield this[_client$0].post(dart.toString(url), {options: new parse_server_sdk.ParseNetworkOptions.new({headers: new (T$.IdentityMapOfString$String()).from(["X-Parse-Session-Token", sessionId])})}));
          return yield parse_server_sdk.ParseUser._handleResponse(this, response, parse_server_sdk.ParseApiRQ.logout, this[_debug], this.parseClassName);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.logout, this[_debug], this.parseClassName);
          } else
            throw e$;
        }
      }).bind(this));
    }
    forgetLocalSession() {
      parse_server_sdk.ParseCoreData.new().sessionId = null;
    }
    deleteLocalUserData() {
      return async.async(dart.void, (function* deleteLocalUserData() {
        yield this.unpin({key: "flutter_parse_sdk_user"});
        this[_setObjectData](new (T$.IdentityMapOfString$dynamic()).new());
      }).bind(this));
    }
    verificationEmailRequest() {
      return async.async(parse_server_sdk.ParseResponse, (function* verificationEmailRequest() {
        try {
          let response = (yield this[_client$0].post(dart.str(parse_server_sdk.ParseCoreData.new().serverUrl) + "/verificationEmailRequest", {data: convert.json.encode(new (T$.IdentityMapOfString$dynamic()).from(["email", this.emailAddress]))}));
          return yield parse_server_sdk.ParseUser._handleResponse(this, response, parse_server_sdk.ParseApiRQ.verificationEmailRequest, this[_debug], this.parseClassName);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.verificationEmailRequest, this[_debug], this.parseClassName);
          } else
            throw e$;
        }
      }).bind(this));
    }
    requestPasswordReset() {
      return async.async(parse_server_sdk.ParseResponse, (function* requestPasswordReset() {
        try {
          let response = (yield this[_client$0].post(dart.str(parse_server_sdk.ParseCoreData.new().serverUrl) + "/requestPasswordReset", {data: convert.json.encode(new (T$.IdentityMapOfString$dynamic()).from(["email", this.emailAddress]))}));
          return yield parse_server_sdk.ParseUser._handleResponse(this, response, parse_server_sdk.ParseApiRQ.requestPasswordReset, this[_debug], this.parseClassName);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.requestPasswordReset, this[_debug], this.parseClassName);
          } else
            throw e$;
        }
      }).bind(this));
    }
    save() {
      return async.async(parse_server_sdk.ParseResponse, (function* save$() {
        if (this.objectId == null) {
          return yield this.signUp();
        } else {
          let response = (yield this[save]());
          if (dart.test(response.success)) {
            yield this[_onResponseSuccess]();
          }
          return response;
        }
      }).bind(this));
    }
    update() {
      return async.async(parse_server_sdk.ParseResponse, (function* update$() {
        if (this.objectId == null) {
          return yield this.signUp();
        } else {
          let response = (yield this[update]());
          if (dart.test(response.success)) {
            yield this[_onResponseSuccess]();
          }
          return response;
        }
      }).bind(this));
    }
    [_onResponseSuccess]() {
      return async.async(dart.void, (function* _onResponseSuccess() {
        yield this.saveInStorage("flutter_parse_sdk_user");
      }).bind(this));
    }
    destroy() {
      return async.async(T$.ParseResponseN(), (function* destroy() {
        if (this.objectId != null) {
          try {
            let url = parse_server_sdk.getSanitisedUri(this[_client$0], dart.str(this[_path]) + "/" + dart.str(this.objectId));
            let response = (yield this[_client$0].delete(dart.toString(url)));
            return yield parse_server_sdk.ParseUser._handleResponse(this, response, parse_server_sdk.ParseApiRQ.destroy, this[_debug], this.parseClassName);
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Exception.is(e)) {
              return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.destroy, this[_debug], this.parseClassName);
            } else
              throw e$;
          }
        }
        return null;
      }).bind(this));
    }
    static all(opts) {
      let debug = opts && 'debug' in opts ? opts.debug : null;
      let client = opts && 'client' in opts ? opts.client : null;
      return async.async(parse_server_sdk.ParseResponse, function* all() {
        let t64, t63, t62, t61;
        let emptyUser = parse_server_sdk.ParseUser._getEmptyUser();
        let _debug = parse_server_sdk.isDebugEnabled({objectLevelDebug: debug});
        let _client = (t61 = client, t61 == null ? (t62 = parse_server_sdk.ParseCoreData.new(), t63 = true, t64 = parse_server_sdk.ParseCoreData.new().securityContext, t62.clientCreator({sendSessionId: t63, securityContext: t64})) : t61);
        try {
          let url = parse_server_sdk.getSanitisedUri(_client, "/classes/_User");
          let response = (yield _client.get(dart.toString(url)));
          let parseResponse = parse_server_sdk.handleResponse(parse_server_sdk.ParseUser, emptyUser, response, parse_server_sdk.ParseApiRQ.getAll, _debug, "_User");
          return parseResponse;
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Exception.is(e)) {
            return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.getAll, _debug, "_User");
          } else
            throw e$;
        }
      });
    }
    static _getUserFromLocalStore(opts) {
      let cloneable = opts && 'cloneable' in opts ? opts.cloneable : null;
      return async.async(dart.dynamic, function* _getUserFromLocalStore() {
        let coreStore = parse_server_sdk.ParseCoreData.new().getStore();
        let userJson = (yield coreStore.getString("flutter_parse_sdk_user"));
        if (userJson != null) {
          let userMap = T$.MapOfString$dynamic().as(convert.json.decode(userJson));
          if (cloneable != null) {
            return cloneable.clone(userMap);
          } else {
            parse_server_sdk.ParseCoreData.new().setSessionId(core.String.as(userMap[$_get]("sessionToken")));
            return parse_server_sdk.parseDecode(userMap);
          }
        }
        return null;
      });
    }
    static _handleResponse(user, response, type, debug, className) {
      if (user == null) dart.nullFailed(I[26], 473, 17, "user");
      if (response == null) dart.nullFailed(I[26], 474, 28, "response");
      if (type == null) dart.nullFailed(I[26], 475, 18, "type");
      if (debug == null) dart.nullFailed(I[26], 476, 12, "debug");
      if (className == null) dart.nullFailed(I[26], 477, 14, "className");
      return async.async(parse_server_sdk.ParseResponse, function* _handleResponse() {
        let parseResponse = parse_server_sdk.handleResponse(parse_server_sdk.ParseUser, user, response, type, debug, className);
        let responseData = T$.MapOfString$dynamic().as(convert.jsonDecode(response.data));
        if (dart.test(responseData[$containsKey]("objectId"))) {
          user.sessionToken = T$.StringN().as(responseData[$_get]("sessionToken"));
          parse_server_sdk.ParseCoreData.new().setSessionId(dart.nullCheck(user.sessionToken));
        }
        if (parseResponse.statusCode !== 200 && parseResponse.statusCode !== 201 || type == parse_server_sdk.ParseApiRQ.getAll || type == parse_server_sdk.ParseApiRQ.destroy || type == parse_server_sdk.ParseApiRQ.requestPasswordReset || type == parse_server_sdk.ParseApiRQ.verificationEmailRequest || type == parse_server_sdk.ParseApiRQ.logout) {
          return parseResponse;
        } else {
          let user = parse_server_sdk.ParseUser.as(parseResponse.result);
          yield user[_onResponseSuccess]();
          return parseResponse;
        }
      });
    }
    static _getEmptyUser() {
      return parse_server_sdk.ParseCoreData.instance.createParseUser(null, null, null);
    }
    static _getInstallationId() {
      return async.async(T$.StringN(), function* _getInstallationId() {
        let parseInstallation = (yield parse_server_sdk.ParseInstallation.currentInstallation());
        return parseInstallation.installationId;
      });
    }
    [save]() {
      return super.save();
    }
    [update]() {
      return super.update();
    }
  };
  (parse_server_sdk.ParseUser.new = function(username, password, emailAddress, opts) {
    let sessionToken = opts && 'sessionToken' in opts ? opts.sessionToken : null;
    let debug = opts && 'debug' in opts ? opts.debug : null;
    let client = opts && 'client' in opts ? opts.client : null;
    this[_password] = null;
    parse_server_sdk.ParseUser.__proto__.new.call(this, "_User", {client: client, autoSendSessionId: true, debug: debug});
    if (username != null) this.username = username;
    if (emailAddress != null) this.emailAddress = emailAddress;
    if (password != null) this.password = password;
    if (sessionToken != null) this.sessionToken = sessionToken;
  }).prototype = parse_server_sdk.ParseUser.prototype;
  (parse_server_sdk.ParseUser.forQuery = function() {
    this[_password] = null;
    parse_server_sdk.ParseUser.__proto__.new.call(this, "_User");
    ;
  }).prototype = parse_server_sdk.ParseUser.prototype;
  (parse_server_sdk.ParseUser.clone = function(map) {
    if (map == null) dart.nullFailed(I[26], 35, 40, "map");
    parse_server_sdk.ParseUser.new.call(this, T$.StringN().as(map[$_get]("username")), null, T$.StringN().as(map[$_get]("email")));
  }).prototype = parse_server_sdk.ParseUser.prototype;
  dart.addTypeTests(parse_server_sdk.ParseUser);
  dart.addTypeCaches(parse_server_sdk.ParseUser);
  parse_server_sdk.ParseUser[dart.implements] = () => [parse_server_sdk.ParseCloneable];
  dart.setMethodSignature(parse_server_sdk.ParseUser, () => ({
    __proto__: dart.getMethods(parse_server_sdk.ParseUser.__proto__),
    getUpdatedUser: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), [], {client: dart.nullable(parse_server_sdk.ParseClient), debug: dart.nullable(core.bool)}, {}),
    signUp: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), [], {allowWithoutEmail: core.bool, doNotSendInstallationID: core.bool}, {}),
    login: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), [], {doNotSendInstallationID: core.bool}, {}),
    loginAnonymous: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), [], {doNotSendInstallationID: core.bool}, {}),
    [_loginWith]: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), [core.String, core.Object], {doNotSendInstallationID: core.bool}, {}),
    logout: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), [], {deleteLocalUserData: core.bool}, {}),
    forgetLocalSession: dart.fnType(dart.void, []),
    deleteLocalUserData: dart.fnType(async.Future$(dart.void), []),
    verificationEmailRequest: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), []),
    requestPasswordReset: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), []),
    [_onResponseSuccess]: dart.fnType(async.Future$(dart.void), []),
    destroy: dart.fnType(async.Future$(dart.nullable(parse_server_sdk.ParseResponse)), [])
  }));
  dart.setGetterSignature(parse_server_sdk.ParseUser, () => ({
    __proto__: dart.getGetters(parse_server_sdk.ParseUser.__proto__),
    password: dart.nullable(core.String),
    acl: core.Map$(core.String, dart.dynamic),
    emailVerified: dart.nullable(core.bool),
    username: dart.nullable(core.String),
    emailAddress: dart.nullable(core.String),
    sessionToken: dart.nullable(core.String),
    authData: dart.nullable(core.Map$(core.String, dart.dynamic))
  }));
  dart.setSetterSignature(parse_server_sdk.ParseUser, () => ({
    __proto__: dart.getSetters(parse_server_sdk.ParseUser.__proto__),
    password: dart.nullable(core.String),
    acl: core.Map$(core.String, dart.dynamic),
    emailVerified: dart.nullable(core.bool),
    username: dart.nullable(core.String),
    emailAddress: dart.nullable(core.String),
    sessionToken: dart.nullable(core.String),
    authData: dart.nullable(core.Map$(core.String, dart.dynamic))
  }));
  dart.setLibraryUri(parse_server_sdk.ParseUser, I[1]);
  dart.setFieldSignature(parse_server_sdk.ParseUser, () => ({
    __proto__: dart.getFields(parse_server_sdk.ParseUser.__proto__),
    [_password]: dart.fieldType(dart.nullable(core.String))
  }));
  dart.defineLazy(parse_server_sdk.ParseUser, {
    /*parse_server_sdk.ParseUser.keyEmailVerified*/get keyEmailVerified() {
      return "emailVerified";
    },
    /*parse_server_sdk.ParseUser.keyUsername*/get keyUsername() {
      return "username";
    },
    /*parse_server_sdk.ParseUser.keyEmailAddress*/get keyEmailAddress() {
      return "email";
    },
    /*parse_server_sdk.ParseUser.path*/get path() {
      return "/classes/_User";
    }
  }, false);
  var _handleSuccessWithoutParseObject = dart.privateName(parse_server_sdk, "_handleSuccessWithoutParseObject");
  var _handleSuccess = dart.privateName(parse_server_sdk, "_handleSuccess");
  var _handleSingleResult = dart.privateName(parse_server_sdk, "_handleSingleResult");
  var _handleMultipleResults = dart.privateName(parse_server_sdk, "_handleMultipleResults");
  parse_server_sdk._ParseResponseBuilder = class _ParseResponseBuilder extends core.Object {
    handleResponse(T, object, apiResponse, type) {
      if (apiResponse == null) dart.nullFailed(I[27], 12, 44, "apiResponse");
      if (type == null) dart.nullFailed(I[27], 12, 68, "type");
      let parseResponse = new parse_server_sdk.ParseResponse.new();
      let returnAsResult = parse_server_sdk.shouldReturnAsABaseResult(type);
      parseResponse.statusCode = apiResponse.statusCode;
      if (dart.test(parse_server_sdk.isUnsuccessfulResponse(apiResponse))) {
        return parse_server_sdk.buildErrorResponse(parseResponse, apiResponse);
      } else if (dart.test(this.isHealthCheck(apiResponse))) {
        parseResponse.success = true;
        return parseResponse;
      } else if (dart.test(parse_server_sdk.isSuccessButNoResults(apiResponse))) {
        return parse_server_sdk.buildSuccessResponseWithNoResults(parseResponse, 1, "Successful request, but no results found");
      } else if (dart.test(returnAsResult)) {
        return this[_handleSuccessWithoutParseObject](parseResponse, object, apiResponse.data);
      } else {
        return this[_handleSuccess](T, parseResponse, object, apiResponse.data, type);
      }
    }
    [_handleSuccessWithoutParseObject](response, object, responseBody) {
      if (response == null) dart.nullFailed(I[27], 35, 21, "response");
      if (responseBody == null) dart.nullFailed(I[27], 35, 54, "responseBody");
      response.success = true;
      if (responseBody === "OK") {
        response.result = responseBody;
        return response;
      }
      let decodedJson = T$.MapOfString$dynamic().as(convert.json.decode(responseBody));
      if (dart.test(decodedJson[$containsKey]("params"))) {
        response.result = decodedJson[$_get]("params");
      } else if (dart.test(decodedJson[$containsKey]("result"))) {
        response.result = decodedJson[$_get]("result");
      } else {
        response.result = decodedJson;
      }
      return response;
    }
    [_handleSuccess](T, response, object, responseBody, type) {
      if (response == null) dart.nullFailed(I[27], 57, 49, "response");
      if (responseBody == null) dart.nullFailed(I[27], 58, 14, "responseBody");
      if (type == null) dart.nullFailed(I[27], 58, 39, "type");
      response.success = true;
      let result = convert.json.decode(responseBody);
      if (type == parse_server_sdk.ParseApiRQ.batch) {
        let list = T$.ListN().as(result);
        if (core.List.is(object) && object[$length] == dart.nullCheck(list)[$length]) {
          response.count = object[$length];
          response.results = [];
          for (let i = 0; i < dart.notNull(object[$length]); i = i + 1) {
            let objectResult = T$.MapOfString$dynamic().as(list[$_get](i));
            if (dart.test(objectResult[$containsKey]("success"))) {
              let item = this[_handleSingleResult](T, T.as(object[$_get](i)), T$.MapOfString$dynamic().as(objectResult[$_get]("success")), false);
              dart.nullCheck(response.results)[$add](item);
            } else {
              let error = new parse_server_sdk.ParseError.new({code: core.int.as(objectResult[$_get]("code")), message: dart.toString(objectResult[$_get]("error"))});
              dart.nullCheck(response.results)[$add](error);
            }
          }
        }
      } else if (core.Map.is(result)) {
        let map = T$.MapOfString$dynamic().as(result);
        if (parse_server_sdk.Parse.is(object)) {
          response.result = map;
        } else if (map != null && map[$length] === 1 && dart.test(map[$containsKey]("results"))) {
          let results = core.List.as(map[$_get]("results"));
          if (typeof results[$_get](0) == 'string') {
            response.results = results;
            response.result = results;
            response.count = results[$length];
          } else {
            let items = this[_handleMultipleResults](T, T.as(object), results);
            response.results = items;
            response.result = items;
            response.count = items[$length];
          }
        } else if (map != null && map[$length] === 2 && dart.test(map[$containsKey]("count"))) {
          let results = T$.JSArrayOfint().of([core.int.as(map[$_get]("count"))]);
          response.results = results;
          response.result = results;
          response.count = core.int.as(map[$_get]("count"));
        } else {
          let item = this[_handleSingleResult](T, T.as(object), map, false);
          response.count = 1;
          response.result = item;
          response.results = _interceptors.JSArray$(dart.nullable(T)).of([item]);
        }
      }
      return response;
    }
    [_handleMultipleResults](T, object, data) {
      if (data == null) dart.nullFailed(I[27], 115, 61, "data");
      let resultsList = _interceptors.JSArray$(T).of([]);
      for (let value of data) {
        resultsList[$add](dart.nullCheck(this[_handleSingleResult](T, object, T$.MapOfString$dynamic().as(value), true)));
      }
      return resultsList;
    }
    [_handleSingleResult](T, object, map, createNewObject) {
      let t62;
      if (map == null) dart.nullFailed(I[27], 125, 38, "map");
      if (createNewObject == null) dart.nullFailed(I[27], 125, 48, "createNewObject");
      if (dart.test(createNewObject) && parse_server_sdk.ParseCloneable.is(object)) {
        return dart.nullable(T).as(object.clone(map));
      } else if (parse_server_sdk.ParseObject.is(object)) {
        let unsaved = new (T$.LinkedMapOfString$dynamic()).new();
        unsaved[$addAll](object[_unsavedChanges]);
        unsaved[$forEach](dart.fn((k, v) => {
          if (k == null) dart.nullFailed(I[27], 132, 31, "k");
          if (map[$_get](k) != null && !dart.equals(map[$_get](k), v)) {
            map[$remove](k);
          }
        }, T$.StringAnddynamicTovoid()));
        t62 = object;
        return (() => {
          t62.fromJson(map);
          t62[_unsavedChanges][$clear]();
          t62[_unsavedChanges][$addAll](unsaved);
          return t62;
        })();
      } else {
        return null;
      }
    }
    isHealthCheck(apiResponse) {
      if (apiResponse == null) dart.nullFailed(I[27], 147, 43, "apiResponse");
      return T$.JSArrayOfString().of(["{\"status\":\"ok\"}", "OK"])[$contains](apiResponse.data);
    }
  };
  (parse_server_sdk._ParseResponseBuilder.new = function() {
    ;
  }).prototype = parse_server_sdk._ParseResponseBuilder.prototype;
  dart.addTypeTests(parse_server_sdk._ParseResponseBuilder);
  dart.addTypeCaches(parse_server_sdk._ParseResponseBuilder);
  dart.setMethodSignature(parse_server_sdk._ParseResponseBuilder, () => ({
    __proto__: dart.getMethods(parse_server_sdk._ParseResponseBuilder.__proto__),
    handleResponse: dart.gFnType(T => [parse_server_sdk.ParseResponse, [dart.dynamic, parse_server_sdk.ParseNetworkResponse, parse_server_sdk.ParseApiRQ]], T => [dart.nullable(core.Object)]),
    [_handleSuccessWithoutParseObject]: dart.fnType(parse_server_sdk.ParseResponse, [parse_server_sdk.ParseResponse, dart.dynamic, core.String]),
    [_handleSuccess]: dart.gFnType(T => [parse_server_sdk.ParseResponse, [parse_server_sdk.ParseResponse, dart.dynamic, core.String, parse_server_sdk.ParseApiRQ]], T => [dart.nullable(core.Object)]),
    [_handleMultipleResults]: dart.gFnType(T => [core.List$(T), [T, core.List]], T => [dart.nullable(core.Object)]),
    [_handleSingleResult]: dart.gFnType(T => [dart.nullable(T), [T, core.Map$(core.String, dart.dynamic), core.bool]], T => [dart.nullable(core.Object)]),
    isHealthCheck: dart.fnType(core.bool, [parse_server_sdk.ParseNetworkResponse])
  }));
  dart.setLibraryUri(parse_server_sdk._ParseResponseBuilder, I[1]);
  parse_server_sdk.CoreStore = class CoreStore extends core.Object {};
  (parse_server_sdk.CoreStore.new = function() {
    ;
  }).prototype = parse_server_sdk.CoreStore.prototype;
  dart.addTypeTests(parse_server_sdk.CoreStore);
  dart.addTypeCaches(parse_server_sdk.CoreStore);
  dart.setLibraryUri(parse_server_sdk.CoreStore, I[1]);
  parse_server_sdk.CoreStoreMemoryImp = class CoreStoreMemoryImp extends core.Object {
    clear() {
      return async.async(dart.void, function* clear() {
        parse_server_sdk.CoreStoreMemoryImp._data = new (T$.IdentityMapOfString$dynamic()).new();
      });
    }
    containsKey(key) {
      if (key == null) dart.nullFailed(I[28], 12, 35, "key");
      return async.async(core.bool, function* containsKey() {
        return parse_server_sdk.CoreStoreMemoryImp._data[$containsKey](key);
      });
    }
    get(key) {
      if (key == null) dart.nullFailed(I[28], 17, 30, "key");
      return async.async(dart.dynamic, function* get() {
        return parse_server_sdk.CoreStoreMemoryImp._data[$_get](key);
      });
    }
    getBool(key) {
      if (key == null) dart.nullFailed(I[28], 22, 32, "key");
      return async.async(T$.boolN(), function* getBool() {
        return T$.FutureOrOfboolN().as(parse_server_sdk.CoreStoreMemoryImp._data[$_get](key));
      });
    }
    getDouble(key) {
      if (key == null) dart.nullFailed(I[28], 27, 36, "key");
      return async.async(T$.doubleN(), function* getDouble() {
        return T$.FutureOrOfdoubleN().as(parse_server_sdk.CoreStoreMemoryImp._data[$_get](key));
      });
    }
    getInt(key) {
      if (key == null) dart.nullFailed(I[28], 32, 30, "key");
      return async.async(T$.intN(), function* getInt() {
        return T$.FutureOrOfintN().as(parse_server_sdk.CoreStoreMemoryImp._data[$_get](key));
      });
    }
    getString(key) {
      if (key == null) dart.nullFailed(I[28], 37, 36, "key");
      return async.async(T$.StringN(), function* getString() {
        return T$.FutureOrOfStringN().as(parse_server_sdk.CoreStoreMemoryImp._data[$_get](key));
      });
    }
    getStringList(key) {
      if (key == null) dart.nullFailed(I[28], 42, 46, "key");
      return async.async(T$.ListNOfString(), function* getStringList() {
        return T$.FutureOrOfListNOfString().as(parse_server_sdk.CoreStoreMemoryImp._data[$_get](key));
      });
    }
    remove(key) {
      if (key == null) dart.nullFailed(I[28], 47, 33, "key");
      return async.async(dart.dynamic, function* remove() {
        return parse_server_sdk.CoreStoreMemoryImp._data[$remove](key);
      });
    }
    setBool(key, value) {
      if (key == null) dart.nullFailed(I[28], 52, 31, "key");
      if (value == null) dart.nullFailed(I[28], 52, 41, "value");
      return async.async(dart.void, function* setBool() {
        parse_server_sdk.CoreStoreMemoryImp._data[$_set](key, value);
      });
    }
    setDouble(key, value) {
      if (key == null) dart.nullFailed(I[28], 57, 33, "key");
      if (value == null) dart.nullFailed(I[28], 57, 45, "value");
      return async.async(dart.void, function* setDouble() {
        parse_server_sdk.CoreStoreMemoryImp._data[$_set](key, value);
      });
    }
    setInt(key, value) {
      if (key == null) dart.nullFailed(I[28], 62, 30, "key");
      if (value == null) dart.nullFailed(I[28], 62, 39, "value");
      return async.async(dart.void, function* setInt() {
        parse_server_sdk.CoreStoreMemoryImp._data[$_set](key, value);
      });
    }
    setString(key, value) {
      if (key == null) dart.nullFailed(I[28], 67, 33, "key");
      if (value == null) dart.nullFailed(I[28], 67, 45, "value");
      return async.async(dart.void, function* setString() {
        parse_server_sdk.CoreStoreMemoryImp._data[$_set](key, value);
      });
    }
    setStringList(key, values) {
      if (key == null) dart.nullFailed(I[28], 72, 37, "key");
      if (values == null) dart.nullFailed(I[28], 72, 55, "values");
      return async.async(dart.void, function* setStringList() {
        parse_server_sdk.CoreStoreMemoryImp._data[$_set](key, values);
      });
    }
  };
  (parse_server_sdk.CoreStoreMemoryImp.new = function() {
    ;
  }).prototype = parse_server_sdk.CoreStoreMemoryImp.prototype;
  dart.addTypeTests(parse_server_sdk.CoreStoreMemoryImp);
  dart.addTypeCaches(parse_server_sdk.CoreStoreMemoryImp);
  parse_server_sdk.CoreStoreMemoryImp[dart.implements] = () => [parse_server_sdk.CoreStore];
  dart.setMethodSignature(parse_server_sdk.CoreStoreMemoryImp, () => ({
    __proto__: dart.getMethods(parse_server_sdk.CoreStoreMemoryImp.__proto__),
    clear: dart.fnType(async.Future$(dart.void), []),
    containsKey: dart.fnType(async.Future$(core.bool), [core.String]),
    get: dart.fnType(async.Future, [core.String]),
    getBool: dart.fnType(async.Future$(dart.nullable(core.bool)), [core.String]),
    getDouble: dart.fnType(async.Future$(dart.nullable(core.double)), [core.String]),
    getInt: dart.fnType(async.Future$(dart.nullable(core.int)), [core.String]),
    getString: dart.fnType(async.Future$(dart.nullable(core.String)), [core.String]),
    getStringList: dart.fnType(async.Future$(dart.nullable(core.List$(core.String))), [core.String]),
    remove: dart.fnType(async.Future, [core.String]),
    setBool: dart.fnType(async.Future$(dart.void), [core.String, core.bool]),
    setDouble: dart.fnType(async.Future$(dart.void), [core.String, core.double]),
    setInt: dart.fnType(async.Future$(dart.void), [core.String, core.int]),
    setString: dart.fnType(async.Future$(dart.void), [core.String, core.String]),
    setStringList: dart.fnType(async.Future$(dart.void), [core.String, core.List$(core.String)])
  }));
  dart.setLibraryUri(parse_server_sdk.CoreStoreMemoryImp, I[1]);
  dart.defineLazy(parse_server_sdk.CoreStoreMemoryImp, {
    /*parse_server_sdk.CoreStoreMemoryImp._data*/get _data() {
      return new (T$.IdentityMapOfString$dynamic()).new();
    },
    set _data(_) {}
  }, false);
  var _database$ = dart.privateName(parse_server_sdk, "_database");
  var _store$ = dart.privateName(parse_server_sdk, "_store");
  parse_server_sdk.CoreStoreSembastImp = class CoreStoreSembastImp extends core.Object {
    static getInstance(dbPath, opts) {
      if (dbPath == null) dart.nullFailed(I[29], 9, 57, "dbPath");
      let factory = opts && 'factory' in opts ? opts.factory : null;
      let password = opts && 'password' in opts ? opts.password : null;
      return async.async(parse_server_sdk.CoreStoreSembastImp, function* getInstance() {
        password == null ? password = "flutter_sdk" : null;
        if (parse_server_sdk.CoreStoreSembastImp._instance == null) {
          factory == null ? factory = !true ? sembast_io.databaseFactoryIo : sembast_web.databaseFactoryWeb : null;
          if (!dart.test(dart.fn(() => {
            if (true) {
              core.print("***********************************************************************************************************");
              core.print("Warning: CoreStoreSembastImp of the Parse_Server_SDK does not encrypt the database on WEB.");
              core.print("***********************************************************************************************************");
            }
            if (password === "flutter_sdk") {
              core.print("***********************************************************************************************************");
              core.print("Warning: CoreStoreSembastImp uses the default password. Specify a custom password for increased security.");
              core.print("***********************************************************************************************************");
            }
            return true;
          }, T$.VoidTobool())())) dart.assertFailed(null, I[29], 14, 14, "() {\r\n        if (parseIsWeb) {\r\n          print(\r\n              '***********************************************************************************************************');\r\n          print(\r\n              'Warning: CoreStoreSembastImp of the Parse_Server_SDK does not encrypt the database on WEB.');\r\n          print(\r\n              '***********************************************************************************************************');\r\n        }\r\n        if (password == 'flutter_sdk') {\r\n          print(\r\n              '***********************************************************************************************************');\r\n          print(\r\n              'Warning: CoreStoreSembastImp uses the default password. Specify a custom password for increased security.');\r\n          print(\r\n              '***********************************************************************************************************');\r\n        }\r\n        return true;\r\n      }()");
          let db = (yield factory.openDatabase(dbPath, {codec: !true ? parse_server_sdk.getXXTeaSembastCodec({password: password}) : null}));
          parse_server_sdk.CoreStoreSembastImp._instance = new parse_server_sdk.CoreStoreSembastImp._internal(db, T$.StoreRefOfString$String().main());
        }
        return dart.nullCheck(parse_server_sdk.CoreStoreSembastImp._instance);
      });
    }
    clear() {
      return T$.FutureOfbool().as(store_ref_impl['SembastStoreRefExtension|drop'](core.String, dart.dynamic, this[_store$], this[_database$]));
    }
    containsKey(key) {
      if (key == null) dart.nullFailed(I[29], 51, 35, "key");
      return record_ref_impl['SembastRecordRefExtension|exists'](core.String, dart.dynamic, this[_store$].record(key), this[_database$]);
    }
    get(key) {
      if (key == null) dart.nullFailed(I[29], 56, 30, "key");
      return record_ref_impl['SembastRecordRefExtension|get'](core.String, dart.dynamic, this[_store$].record(key), this[_database$]);
    }
    getBool(key) {
      if (key == null) dart.nullFailed(I[29], 61, 32, "key");
      return async.async(T$.boolN(), (function* getBool() {
        let storedItem = T$.boolN().as(yield this.get(key));
        return storedItem;
      }).bind(this));
    }
    getDouble(key) {
      if (key == null) dart.nullFailed(I[29], 67, 36, "key");
      return async.async(T$.doubleN(), (function* getDouble() {
        let storedItem = T$.doubleN().as(yield this.get(key));
        return storedItem;
      }).bind(this));
    }
    getInt(key) {
      if (key == null) dart.nullFailed(I[29], 73, 30, "key");
      return async.async(T$.intN(), (function* getInt() {
        let storedItem = T$.intN().as(yield this.get(key));
        return storedItem;
      }).bind(this));
    }
    getString(key) {
      if (key == null) dart.nullFailed(I[29], 79, 36, "key");
      return async.async(T$.StringN(), (function* getString() {
        let storedItem = T$.StringN().as(yield this.get(key));
        return storedItem;
      }).bind(this));
    }
    getStringList(key) {
      if (key == null) dart.nullFailed(I[29], 85, 46, "key");
      return async.async(T$.ListNOfString(), (function* getStringList() {
        let storedItem = T$.ListNOfString().as(yield this.get(key));
        return storedItem;
      }).bind(this));
    }
    remove(key) {
      if (key == null) dart.nullFailed(I[29], 91, 30, "key");
      return record_ref_impl['SembastRecordRefExtension|delete'](core.String, dart.dynamic, this[_store$].record(key), this[_database$]);
    }
    setBool(key, value) {
      if (key == null) dart.nullFailed(I[29], 96, 31, "key");
      if (value == null) dart.nullFailed(I[29], 96, 41, "value");
      return record_ref_impl['SembastRecordRefExtension|put'](core.String, dart.dynamic, this[_store$].record(key), this[_database$], value);
    }
    setDouble(key, value) {
      if (key == null) dart.nullFailed(I[29], 101, 33, "key");
      if (value == null) dart.nullFailed(I[29], 101, 45, "value");
      return record_ref_impl['SembastRecordRefExtension|put'](core.String, dart.dynamic, this[_store$].record(key), this[_database$], value);
    }
    setInt(key, value) {
      if (key == null) dart.nullFailed(I[29], 106, 30, "key");
      if (value == null) dart.nullFailed(I[29], 106, 39, "value");
      return record_ref_impl['SembastRecordRefExtension|put'](core.String, dart.dynamic, this[_store$].record(key), this[_database$], value);
    }
    setString(key, value) {
      if (key == null) dart.nullFailed(I[29], 111, 33, "key");
      if (value == null) dart.nullFailed(I[29], 111, 45, "value");
      return record_ref_impl['SembastRecordRefExtension|put'](core.String, dart.dynamic, this[_store$].record(key), this[_database$], value);
    }
    setStringList(key, values) {
      if (key == null) dart.nullFailed(I[29], 116, 37, "key");
      if (values == null) dart.nullFailed(I[29], 116, 55, "values");
      return record_ref_impl['SembastRecordRefExtension|put'](core.String, dart.dynamic, this[_store$].record(key), this[_database$], values);
    }
  };
  (parse_server_sdk.CoreStoreSembastImp._internal = function(_database, _store) {
    if (_database == null) dart.nullFailed(I[29], 5, 38, "_database");
    if (_store == null) dart.nullFailed(I[29], 5, 54, "_store");
    this[_database$] = _database;
    this[_store$] = _store;
    ;
  }).prototype = parse_server_sdk.CoreStoreSembastImp.prototype;
  dart.addTypeTests(parse_server_sdk.CoreStoreSembastImp);
  dart.addTypeCaches(parse_server_sdk.CoreStoreSembastImp);
  parse_server_sdk.CoreStoreSembastImp[dart.implements] = () => [parse_server_sdk.CoreStore];
  dart.setMethodSignature(parse_server_sdk.CoreStoreSembastImp, () => ({
    __proto__: dart.getMethods(parse_server_sdk.CoreStoreSembastImp.__proto__),
    clear: dart.fnType(async.Future$(core.bool), []),
    containsKey: dart.fnType(async.Future$(core.bool), [core.String]),
    get: dart.fnType(async.Future, [core.String]),
    getBool: dart.fnType(async.Future$(dart.nullable(core.bool)), [core.String]),
    getDouble: dart.fnType(async.Future$(dart.nullable(core.double)), [core.String]),
    getInt: dart.fnType(async.Future$(dart.nullable(core.int)), [core.String]),
    getString: dart.fnType(async.Future$(dart.nullable(core.String)), [core.String]),
    getStringList: dart.fnType(async.Future$(dart.nullable(core.List$(core.String))), [core.String]),
    remove: dart.fnType(async.Future$(dart.void), [core.String]),
    setBool: dart.fnType(async.Future$(dart.void), [core.String, core.bool]),
    setDouble: dart.fnType(async.Future$(dart.void), [core.String, core.double]),
    setInt: dart.fnType(async.Future$(dart.void), [core.String, core.int]),
    setString: dart.fnType(async.Future$(dart.void), [core.String, core.String]),
    setStringList: dart.fnType(async.Future$(dart.void), [core.String, core.List$(core.String)])
  }));
  dart.setLibraryUri(parse_server_sdk.CoreStoreSembastImp, I[1]);
  dart.setFieldSignature(parse_server_sdk.CoreStoreSembastImp, () => ({
    __proto__: dart.getFields(parse_server_sdk.CoreStoreSembastImp.__proto__),
    [_database$]: dart.finalFieldType(database.Database),
    [_store$]: dart.finalFieldType(store_ref.StoreRef$(core.String, dart.dynamic))
  }));
  dart.defineLazy(parse_server_sdk.CoreStoreSembastImp, {
    /*parse_server_sdk.CoreStoreSembastImp._instance*/get _instance() {
      return null;
    },
    set _instance(_) {}
  }, false);
  parse_server_sdk._XXTeaEncoder = class _XXTeaEncoder extends convert.Converter$(core.Map$(core.String, dart.dynamic), core.String) {
    convert(input) {
      T$.MapOfString$dynamic().as(input);
      if (input == null) dart.nullFailed(I[30], 9, 39, "input");
      return dart.nullCheck(xxtea.xxtea.encryptToString(convert.json.encode(input), this.key));
    }
  };
  (parse_server_sdk._XXTeaEncoder.new = function(key) {
    if (key == null) dart.nullFailed(I[30], 4, 22, "key");
    this.key = key;
    parse_server_sdk._XXTeaEncoder.__proto__.new.call(this);
    ;
  }).prototype = parse_server_sdk._XXTeaEncoder.prototype;
  dart.addTypeTests(parse_server_sdk._XXTeaEncoder);
  dart.addTypeCaches(parse_server_sdk._XXTeaEncoder);
  dart.setMethodSignature(parse_server_sdk._XXTeaEncoder, () => ({
    __proto__: dart.getMethods(parse_server_sdk._XXTeaEncoder.__proto__),
    convert: dart.fnType(core.String, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(parse_server_sdk._XXTeaEncoder, I[1]);
  dart.setFieldSignature(parse_server_sdk._XXTeaEncoder, () => ({
    __proto__: dart.getFields(parse_server_sdk._XXTeaEncoder.__proto__),
    key: dart.finalFieldType(core.String)
  }));
  parse_server_sdk._XXTeaDecoder = class _XXTeaDecoder extends convert.Converter$(core.String, core.Map$(core.String, dart.dynamic)) {
    convert(input) {
      core.String.as(input);
      if (input == null) dart.nullFailed(I[30], 19, 39, "input");
      let result = convert.json.decode(dart.nullCheck(xxtea.xxtea.decryptToString(input, this.key)));
      if (core.Map.is(result)) {
        return result[$cast](core.String, dart.dynamic);
      }
      dart.throw(new core.FormatException.new("invalid input " + dart.str(input)));
    }
  };
  (parse_server_sdk._XXTeaDecoder.new = function(key) {
    if (key == null) dart.nullFailed(I[30], 14, 22, "key");
    this.key = key;
    parse_server_sdk._XXTeaDecoder.__proto__.new.call(this);
    ;
  }).prototype = parse_server_sdk._XXTeaDecoder.prototype;
  dart.addTypeTests(parse_server_sdk._XXTeaDecoder);
  dart.addTypeCaches(parse_server_sdk._XXTeaDecoder);
  dart.setMethodSignature(parse_server_sdk._XXTeaDecoder, () => ({
    __proto__: dart.getMethods(parse_server_sdk._XXTeaDecoder.__proto__),
    convert: dart.fnType(core.Map$(core.String, dart.dynamic), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(parse_server_sdk._XXTeaDecoder, I[1]);
  dart.setFieldSignature(parse_server_sdk._XXTeaDecoder, () => ({
    __proto__: dart.getFields(parse_server_sdk._XXTeaDecoder.__proto__),
    key: dart.finalFieldType(core.String)
  }));
  var ___XXTeaCodec__encoder = dart.privateName(parse_server_sdk, "_#_XXTeaCodec#_encoder");
  var ___XXTeaCodec__encoder_isSet = dart.privateName(parse_server_sdk, "_#_XXTeaCodec#_encoder#isSet");
  var ___XXTeaCodec__decoder = dart.privateName(parse_server_sdk, "_#_XXTeaCodec#_decoder");
  var ___XXTeaCodec__decoder_isSet = dart.privateName(parse_server_sdk, "_#_XXTeaCodec#_decoder#isSet");
  var _encoder = dart.privateName(parse_server_sdk, "_encoder");
  var _decoder = dart.privateName(parse_server_sdk, "_decoder");
  parse_server_sdk._XXTeaCodec = class _XXTeaCodec extends convert.Codec$(core.Map$(core.String, dart.dynamic), core.String) {
    get [_encoder]() {
      let t62;
      return dart.test(this[___XXTeaCodec__encoder_isSet]) ? (t62 = this[___XXTeaCodec__encoder], t62) : dart.throw(new _internal.LateError.fieldNI("_encoder"));
    }
    set [_encoder](t62) {
      if (t62 == null) dart.nullFailed(I[30], 37, 22, "null");
      this[___XXTeaCodec__encoder_isSet] = true;
      this[___XXTeaCodec__encoder] = t62;
    }
    get [_decoder]() {
      let t63;
      return dart.test(this[___XXTeaCodec__decoder_isSet]) ? (t63 = this[___XXTeaCodec__decoder], t63) : dart.throw(new _internal.LateError.fieldNI("_decoder"));
    }
    set [_decoder](t63) {
      if (t63 == null) dart.nullFailed(I[30], 38, 22, "null");
      this[___XXTeaCodec__decoder_isSet] = true;
      this[___XXTeaCodec__decoder] = t63;
    }
    get decoder() {
      return this[_decoder];
    }
    get encoder() {
      return this[_encoder];
    }
  };
  (parse_server_sdk._XXTeaCodec.new = function(password) {
    if (password == null) dart.nullFailed(I[30], 32, 22, "password");
    this[___XXTeaCodec__encoder] = null;
    this[___XXTeaCodec__encoder_isSet] = false;
    this[___XXTeaCodec__decoder] = null;
    this[___XXTeaCodec__decoder_isSet] = false;
    parse_server_sdk._XXTeaCodec.__proto__.new.call(this);
    this[_encoder] = new parse_server_sdk._XXTeaEncoder.new(password);
    this[_decoder] = new parse_server_sdk._XXTeaDecoder.new(password);
  }).prototype = parse_server_sdk._XXTeaCodec.prototype;
  dart.addTypeTests(parse_server_sdk._XXTeaCodec);
  dart.addTypeCaches(parse_server_sdk._XXTeaCodec);
  dart.setGetterSignature(parse_server_sdk._XXTeaCodec, () => ({
    __proto__: dart.getGetters(parse_server_sdk._XXTeaCodec.__proto__),
    [_encoder]: parse_server_sdk._XXTeaEncoder,
    [_decoder]: parse_server_sdk._XXTeaDecoder,
    decoder: convert.Converter$(core.String, core.Map$(core.String, dart.dynamic)),
    encoder: convert.Converter$(core.Map$(core.String, dart.dynamic), core.String)
  }));
  dart.setSetterSignature(parse_server_sdk._XXTeaCodec, () => ({
    __proto__: dart.getSetters(parse_server_sdk._XXTeaCodec.__proto__),
    [_encoder]: parse_server_sdk._XXTeaEncoder,
    [_decoder]: parse_server_sdk._XXTeaDecoder
  }));
  dart.setLibraryUri(parse_server_sdk._XXTeaCodec, I[1]);
  dart.setFieldSignature(parse_server_sdk._XXTeaCodec, () => ({
    __proto__: dart.getFields(parse_server_sdk._XXTeaCodec.__proto__),
    [___XXTeaCodec__encoder]: dart.fieldType(dart.nullable(parse_server_sdk._XXTeaEncoder)),
    [___XXTeaCodec__encoder_isSet]: dart.fieldType(core.bool),
    [___XXTeaCodec__decoder]: dart.fieldType(dart.nullable(parse_server_sdk._XXTeaDecoder)),
    [___XXTeaCodec__decoder_isSet]: dart.fieldType(core.bool)
  }));
  parse_server_sdk._ParseDateFormat = class _ParseDateFormat extends core.Object {
    parse(strDate) {
      if (strDate == null) dart.nullFailed(I[31], 10, 26, "strDate");
      try {
        return core.DateTime.parse(strDate);
      } catch (e) {
        let ex = dart.getThrown(e);
        if (core.FormatException.is(ex)) {
          return null;
        } else
          throw e;
      }
    }
    format(datetime) {
      if (datetime == null) dart.nullFailed(I[31], 19, 26, "datetime");
      if (!dart.test(datetime.isUtc)) {
        datetime = datetime.toUtc();
      }
      let y = parse_server_sdk._ParseDateFormat._fourDigits(datetime.year);
      let m = parse_server_sdk._ParseDateFormat._twoDigits(datetime.month);
      let d = parse_server_sdk._ParseDateFormat._twoDigits(datetime.day);
      let h = parse_server_sdk._ParseDateFormat._twoDigits(datetime.hour);
      let min = parse_server_sdk._ParseDateFormat._twoDigits(datetime.minute);
      let sec = parse_server_sdk._ParseDateFormat._twoDigits(datetime.second);
      let ms = parse_server_sdk._ParseDateFormat._threeDigits(datetime.millisecond);
      return dart.str(y) + "-" + dart.str(m) + "-" + dart.str(d) + "T" + dart.str(h) + ":" + dart.str(min) + ":" + dart.str(sec) + "." + dart.str(ms) + "Z";
    }
    static _fourDigits(n) {
      if (n == null) dart.nullFailed(I[31], 35, 33, "n");
      let absN = n[$abs]();
      let sign = dart.notNull(n) < 0 ? "-" : "";
      if (absN >= 1000) {
        return dart.str(n);
      }
      if (absN >= 100) {
        return sign + "0" + dart.str(absN);
      }
      if (absN >= 10) {
        return sign + "00" + dart.str(absN);
      }
      return sign + "000" + dart.str(absN);
    }
    static _threeDigits(n) {
      if (n == null) dart.nullFailed(I[31], 50, 34, "n");
      if (dart.notNull(n) >= 100) {
        return dart.str(n);
      }
      if (dart.notNull(n) >= 10) {
        return "0" + dart.str(n);
      }
      return "00" + dart.str(n);
    }
    static _twoDigits(n) {
      if (n == null) dart.nullFailed(I[31], 60, 32, "n");
      if (dart.notNull(n) >= 10) {
        return dart.str(n);
      }
      return "0" + dart.str(n);
    }
  };
  (parse_server_sdk._ParseDateFormat._internal = function() {
    ;
  }).prototype = parse_server_sdk._ParseDateFormat.prototype;
  dart.addTypeTests(parse_server_sdk._ParseDateFormat);
  dart.addTypeCaches(parse_server_sdk._ParseDateFormat);
  dart.setMethodSignature(parse_server_sdk._ParseDateFormat, () => ({
    __proto__: dart.getMethods(parse_server_sdk._ParseDateFormat.__proto__),
    parse: dart.fnType(dart.nullable(core.DateTime), [core.String]),
    format: dart.fnType(core.String, [core.DateTime])
  }));
  dart.setLibraryUri(parse_server_sdk._ParseDateFormat, I[1]);
  var _list = dart.privateName(parse_server_sdk, "_list");
  var __ParseLiveList__eventStreamController = dart.privateName(parse_server_sdk, "_#ParseLiveList#_eventStreamController");
  var __ParseLiveList__eventStreamController_isSet = dart.privateName(parse_server_sdk, "_#ParseLiveList#_eventStreamController#isSet");
  var _nextID = dart.privateName(parse_server_sdk, "_nextID");
  var __ParseLiveList__debug = dart.privateName(parse_server_sdk, "_#ParseLiveList#_debug");
  var __ParseLiveList__debug_isSet = dart.privateName(parse_server_sdk, "_#ParseLiveList#_debug#isSet");
  var _liveQuerySubscription = dart.privateName(parse_server_sdk, "_liveQuerySubscription");
  var _liveQueryClientEventSubscription = dart.privateName(parse_server_sdk, "_liveQueryClientEventSubscription");
  var _updateQueue = dart.privateName(parse_server_sdk, "_updateQueue");
  var _query$ = dart.privateName(parse_server_sdk, "_query");
  var _listeningIncludes$ = dart.privateName(parse_server_sdk, "_listeningIncludes");
  var _lazyLoading$ = dart.privateName(parse_server_sdk, "_lazyLoading");
  var _preloadedColumns = dart.privateName(parse_server_sdk, "_preloadedColumns");
  var _init = dart.privateName(parse_server_sdk, "_init");
  var _eventStreamController = dart.privateName(parse_server_sdk, "_eventStreamController");
  var _includePaths = dart.privateName(parse_server_sdk, "_includePaths");
  var _runQuery = dart.privateName(parse_server_sdk, "_runQuery");
  var _objectAdded = dart.privateName(parse_server_sdk, "_objectAdded");
  var _objectUpdated = dart.privateName(parse_server_sdk, "_objectUpdated");
  var _objectDeleted = dart.privateName(parse_server_sdk, "_objectDeleted");
  const _is_ParseLiveList_default = Symbol('_is_ParseLiveList_default');
  parse_server_sdk.ParseLiveList$ = dart.generic(T => {
    var ParseLiveListElementOfT = () => (ParseLiveListElementOfT = dart.constFn(parse_server_sdk.ParseLiveListElement$(T)))();
    var JSArrayOfParseLiveListElementOfT = () => (JSArrayOfParseLiveListElementOfT = dart.constFn(_interceptors.JSArray$(ParseLiveListElementOfT())))();
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    var QueryBuilderOfT = () => (QueryBuilderOfT = dart.constFn(parse_server_sdk.QueryBuilder$(T)))();
    var ParseLiveListEventOfT = () => (ParseLiveListEventOfT = dart.constFn(parse_server_sdk.ParseLiveListEvent$(T)))();
    var StreamControllerOfParseLiveListEventOfT = () => (StreamControllerOfParseLiveListEventOfT = dart.constFn(async.StreamController$(ParseLiveListEventOfT())))();
    var dynamicToParseLiveListElementOfT = () => (dynamicToParseLiveListElementOfT = dart.constFn(dart.fnType(ParseLiveListElementOfT(), [dart.dynamic])))();
    var TToFutureOfvoid = () => (TToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [T])))();
    var SubscriptionOfT = () => (SubscriptionOfT = dart.constFn(parse_server_sdk.Subscription$(T)))();
    var SubscriptionOfTToNull = () => (SubscriptionOfTToNull = dart.constFn(dart.fnType(core.Null, [SubscriptionOfT()])))();
    var ListOfT = () => (ListOfT = dart.constFn(core.List$(T)))();
    var ListNOfT = () => (ListNOfT = dart.constFn(dart.nullable(ListOfT())))();
    var JSArrayOfT = () => (JSArrayOfT = dart.constFn(_interceptors.JSArray$(T)))();
    var ParseLiveListAddEventOfT = () => (ParseLiveListAddEventOfT = dart.constFn(parse_server_sdk.ParseLiveListAddEvent$(T)))();
    var ParseLiveListDeleteEventOfT = () => (ParseLiveListDeleteEventOfT = dart.constFn(parse_server_sdk.ParseLiveListDeleteEvent$(T)))();
    var _AsyncStarImplOfT = () => (_AsyncStarImplOfT = dart.constFn(async._AsyncStarImpl$(T)))();
    class ParseLiveList extends core.Object {
      static create(T, _query, opts) {
        let t66, t66$, t66$0, t66$1;
        if (_query == null) dart.nullFailed(I[32], 12, 21, "_query");
        let listenOnAllSubItems = opts && 'listenOnAllSubItems' in opts ? opts.listenOnAllSubItems : null;
        let listeningIncludes = opts && 'listeningIncludes' in opts ? opts.listeningIncludes : null;
        let lazyLoading = opts && 'lazyLoading' in opts ? opts.lazyLoading : true;
        if (lazyLoading == null) dart.nullFailed(I[32], 15, 10, "lazyLoading");
        let preloadedColumns = opts && 'preloadedColumns' in opts ? opts.preloadedColumns : null;
        let parseLiveList = new (parse_server_sdk.ParseLiveList$(T)).__(_query, listenOnAllSubItems === true ? parse_server_sdk.ParseLiveList._toIncludeMap((t66$ = (t66 = _query.limiters[$_get]("include"), t66 == null ? null : dart.toString(t66)[$split](",")), t66$ == null ? T$.JSArrayOfString().of([]) : t66$)) : parse_server_sdk.ParseLiveList._toIncludeMap((t66$0 = listeningIncludes, t66$0 == null ? T$.JSArrayOfString().of([]) : t66$0)), lazyLoading, {preloadedColumns: (t66$1 = preloadedColumns, t66$1 == null ? C[66] || CT.C66 : t66$1)});
        return parseLiveList[_init]().then(parse_server_sdk.ParseLiveList$(T), dart.fn(_ => parseLiveList, dart.fnType(parse_server_sdk.ParseLiveList$(T), [dart.void])));
      }
      get [_eventStreamController]() {
        let t66;
        return dart.test(this[__ParseLiveList__eventStreamController_isSet]) ? (t66 = this[__ParseLiveList__eventStreamController], t66) : dart.throw(new _internal.LateError.fieldNI("_eventStreamController"));
      }
      set [_eventStreamController](t66) {
        if (t66 == null) dart.nullFailed(I[32], 40, 48, "null");
        this[__ParseLiveList__eventStreamController_isSet] = true;
        this[__ParseLiveList__eventStreamController] = t66;
      }
      get [_debug]() {
        let t67;
        return dart.test(this[__ParseLiveList__debug_isSet]) ? (t67 = this[__ParseLiveList__debug], t67) : dart.throw(new _internal.LateError.fieldNI("_debug"));
      }
      set [_debug](t67) {
        if (t67 == null) dart.nullFailed(I[32], 42, 13, "null");
        this[__ParseLiveList__debug_isSet] = true;
        this[__ParseLiveList__debug] = t67;
      }
      get nextID() {
        let t68;
        t68 = this[_nextID];
        this[_nextID] = dart.notNull(t68) + 1;
        return t68;
      }
      after(object1, object2) {
        TN().as(object1);
        TN().as(object2);
        let fields = T$.JSArrayOfString().of([]);
        if (dart.test(this[_query$].limiters[$containsKey]("order"))) {
          fields = dart.toString(this[_query$].limiters[$_get]("order"))[$split](",");
        }
        fields[$add]("createdAt");
        for (let key of fields) {
          let reverse = false;
          if (key[$startsWith]("-")) {
            reverse = true;
            key = key[$substring](1);
          }
          let val1 = dart.nullCheck(object1).get(dart.dynamic, key);
          let val2 = dart.nullCheck(object2).get(dart.dynamic, key);
          if (val1 == null && val2 == null) {
            break;
          }
          if (val1 == null) {
            return reverse;
          }
          if (val2 == null) {
            return !reverse;
          }
          if (typeof val1 == 'number' && typeof val2 == 'number') {
            if (dart.notNull(val1) < dart.notNull(val2)) {
              return reverse;
            }
            if (dart.notNull(val1) > dart.notNull(val2)) {
              return !reverse;
            }
          } else if (typeof val1 == 'string' && typeof val2 == 'string') {
            if (dart.toString(val1)[$compareTo](val2) < 0) {
              return reverse;
            }
            if (dart.toString(val1)[$compareTo](val2) > 0) {
              return !reverse;
            }
          } else if (core.DateTime.is(val1) && core.DateTime.is(val2)) {
            if (dart.test(val1.isAfter(val2))) {
              return !reverse;
            }
            if (dart.test(val1.isBefore(val2))) {
              return reverse;
            }
          }
        }
        return null;
      }
      get size() {
        return this[_list][$length];
      }
      get includes() {
        let t68, t68$;
        t68$ = (t68 = this[_query$].limiters[$_get]("include"), t68 == null ? null : dart.toString(t68)[$split](","));
        return t68$ == null ? T$.JSArrayOfString().of([]) : t68$;
      }
      get [_includePaths]() {
        return parse_server_sdk.ParseLiveList._toIncludeMap(this.includes);
      }
      static _toIncludeMap(includes) {
        if (includes == null) dart.nullFailed(I[32], 111, 58, "includes");
        let includesMap = new (T$.IdentityMapOfString$dynamic()).new();
        for (let includeString of includes) {
          let pathParts = includeString[$split](".");
          let root = includesMap;
          for (let pathPart of pathParts) {
            root[$putIfAbsent](pathPart, dart.fn(() => new (T$.IdentityMapOfString$dynamic()).new(), T$.VoidToMapOfString$dynamic()));
            root = T$.MapOfString$dynamic().as(root[$_get](pathPart));
          }
        }
        return includesMap;
      }
      get stream() {
        return this[_eventStreamController].stream;
      }
      [_runQuery]() {
        return async.async(parse_server_sdk.ParseResponse, (function* _runQuery() {
          let query = new (QueryBuilderOfT()).copy(this[_query$]);
          if (dart.test(this[_debug])) core.print("ParseLiveList: lazyLoading is " + (dart.test(this[_lazyLoading$]) ? "on" : "off"));
          if (dart.test(this[_lazyLoading$])) {
            let keys = this[_preloadedColumns];
            if (dart.test(this[_lazyLoading$]) && dart.test(query.limiters[$containsKey]("order"))) keys[$addAll](dart.toString(query.limiters[$_get]("order"))[$split](",")[$map](core.String, dart.fn(string => {
              if (string == null) dart.nullFailed(I[32], 139, 69, "string");
              if (string[$startsWith]("-")) {
                return string[$substring](1);
              }
              return string;
            }, T$.StringToString())));
            query.keysToReturn(keys);
          }
          return yield query.query(T);
        }).bind(this));
      }
      [_init]() {
        return async.async(dart.void, (function* _init() {
          let t68, t68$;
          this[_eventStreamController] = StreamControllerOfParseLiveListEventOfT().new();
          let parseResponse = (yield this[_runQuery]());
          if (dart.test(parseResponse.success)) {
            this[_list] = (t68$ = (t68 = parseResponse.results, t68 == null ? null : t68[$map](ParseLiveListElementOfT(), dart.fn(element => new (ParseLiveListElementOfT()).new(TN().as(element), {updatedSubItems: this[_listeningIncludes$], loaded: !dart.test(this[_lazyLoading$])}), dynamicToParseLiveListElementOfT()))[$toList]()), t68$ == null ? JSArrayOfParseLiveListElementOfT().of([]) : t68$);
          }
          new parse_server_sdk.LiveQuery.new().client.subscribe(T, new (QueryBuilderOfT()).copy(this[_query$]), {copyObject: TN().as(dart.nullCheck(this[_query$].object).clone(dart.nullCheck(this[_query$].object).toJson()))}).then(core.Null, dart.fn(subscription => {
            if (subscription == null) dart.nullFailed(I[32], 169, 32, "subscription");
            this[_liveQuerySubscription] = subscription;
            subscription.on(parse_server_sdk.LiveQueryEvent.create, dart.fn(object => {
              if (object == null) dart.nullFailed(I[32], 174, 14, "object");
              return this[_updateQueue].whenComplete(dart.fn(() => this[_objectAdded](object), T$.VoidToFutureOfvoid()));
            }, TToFutureOfvoid()));
            subscription.on(parse_server_sdk.LiveQueryEvent.update, dart.fn(object => {
              if (object == null) dart.nullFailed(I[32], 177, 14, "object");
              return this[_updateQueue].whenComplete(dart.fn(() => this[_objectUpdated](object), T$.VoidToFutureOfvoid()));
            }, TToFutureOfvoid()));
            subscription.on(parse_server_sdk.LiveQueryEvent.enter, dart.fn(object => {
              if (object == null) dart.nullFailed(I[32], 180, 14, "object");
              return this[_updateQueue].whenComplete(dart.fn(() => this[_objectAdded](object), T$.VoidToFutureOfvoid()));
            }, TToFutureOfvoid()));
            subscription.on(parse_server_sdk.LiveQueryEvent.leave, dart.fn(object => {
              if (object == null) dart.nullFailed(I[32], 183, 14, "object");
              return this[_updateQueue].whenComplete(dart.fn(() => this[_objectDeleted](object), T$.VoidToFutureOfvoid()));
            }, TToFutureOfvoid()));
            subscription.on(parse_server_sdk.LiveQueryEvent.delete, dart.fn(object => {
              if (object == null) dart.nullFailed(I[32], 187, 14, "object");
              return this[_updateQueue].whenComplete(dart.fn(() => this[_objectDeleted](object), T$.VoidToFutureOfvoid()));
            }, TToFutureOfvoid()));
          }, SubscriptionOfTToNull()));
          this[_liveQueryClientEventSubscription] = new parse_server_sdk.LiveQuery.new().client.getClientEventStream.listen(dart.fn(event => {
            if (event == null) dart.nullFailed(I[32], 199, 39, "event");
            return async.async(dart.void, (function*() {
              if (event == parse_server_sdk.LiveQueryClientEvent.CONNECTED) {
                this[_updateQueue].whenComplete(dart.fn(() => async.async(dart.void, (function*() {
                  let t68, t68$;
                  let tasks = T$.JSArrayOfFutureOfvoid().of([]);
                  let parseResponse = (yield this[_runQuery]());
                  if (dart.test(parseResponse.success)) {
                    let newList = (t68 = ListNOfT().as(parseResponse.results), t68 == null ? JSArrayOfT().of([]) : t68);
                    for (let i = 0; i < dart.notNull(this[_list][$length]); i = i + 1) {
                      let currentObject = dart.nullCheck(this[_list][$_get](i).object);
                      let currentObjectId = dart.nullCheck(currentObject.get(core.String, "objectId"));
                      let stillInList = false;
                      for (let j = 0; j < dart.notNull(newList[$length]); j = j + 1) {
                        if (newList[$_get](j).get(core.String, "objectId") === currentObjectId) {
                          stillInList = true;
                          if (dart.test(dart.nullCheck(newList[$_get](j).get(core.DateTime, "updatedAt")).isAfter(dart.nullCheck(currentObject.get(core.DateTime, "updatedAt"))))) {
                            let queryBuilder = (t68$ = new (QueryBuilderOfT()).copy(this[_query$]), (() => {
                              t68$.whereEqualTo("objectId", currentObjectId);
                              return t68$;
                            })());
                            tasks[$add](queryBuilder.query(T).then(dart.void, dart.fn(result => {
                              if (result == null) dart.nullFailed(I[32], 226, 46, "result");
                              return async.async(dart.void, (function*() {
                                if (dart.test(result.success) && result.results != null) {
                                  yield this[_objectUpdated](T.as(dart.nullCheck(result.results)[$first]));
                                }
                              }).bind(this));
                            }, T$.ParseResponseToFutureOfvoid())));
                          }
                          newList[$removeAt](j);
                          j = j - 1;
                          break;
                        }
                      }
                      if (!stillInList) {
                        this[_objectDeleted](T.as(currentObject));
                        i = i - 1;
                      }
                    }
                    for (let i = 0; i < dart.notNull(newList[$length]); i = i + 1) {
                      tasks[$add](this[_objectAdded](newList[$_get](i), {loaded: false}));
                    }
                  }
                  yield async.Future.wait(dart.void, tasks);
                  tasks = T$.JSArrayOfFutureOfvoid().of([]);
                  for (let element of this[_list]) {
                    tasks[$add](element.reconnected());
                  }
                  yield async.Future.wait(dart.void, tasks);
                }).bind(this)), T$.VoidToFutureOfvoid()));
              }
            }).bind(this));
          }, T$.LiveQueryClientEventToFutureOfvoid()));
        }).bind(this));
      }
      static _loadIncludes(object, opts) {
        let oldObject = opts && 'oldObject' in opts ? opts.oldObject : null;
        let paths = opts && 'paths' in opts ? opts.paths : null;
        return async.async(dart.void, function* _loadIncludes() {
          let t68, t68$, t68$0;
          if (object == null || paths == null || dart.test(paths[$isEmpty])) {
            return;
          }
          let loadingNodes = T$.JSArrayOfFutureOfvoid().of([]);
          for (let key of paths[$keys]) {
            if (dart.test(object.containsKey(key))) {
              let includedObject = dart.nullCheck(object.get(parse_server_sdk.ParseObject, key));
              if (!dart.test(includedObject.containsKey("updatedAt"))) {
                if (oldObject != null && dart.test(oldObject.containsKey(key))) {
                  includedObject = dart.nullCheck(oldObject.get(parse_server_sdk.ParseObject, key));
                  if (!dart.test(includedObject.containsKey("updatedAt")) || includedObject.objectId != dart.nullCheck(object.get(parse_server_sdk.ParseObject, key)).objectId) {
                    includedObject = dart.nullCheck(object.get(parse_server_sdk.ParseObject, key));
                    let queryBuilder = (t68 = new (T$.QueryBuilderOfParseObject()).new(new parse_server_sdk.ParseObject.new(includedObject.parseClassName)), (() => {
                      t68.whereEqualTo("objectId", includedObject.objectId);
                      t68.includeObject(parse_server_sdk.ParseLiveList._toIncludeStringList(T$.MapOfString$dynamic().as(paths[$_get](key))));
                      return t68;
                    })());
                    loadingNodes[$add](queryBuilder.query(parse_server_sdk.ParseObject).then(dart.void, dart.fn(parseResponse => {
                      if (parseResponse == null) dart.nullFailed(I[32], 287, 46, "parseResponse");
                      if (dart.test(parseResponse.success) && dart.nullCheck(parseResponse.results)[$length] === 1) {
                        object._set(key, dart.nullCheck(parseResponse.results)[$_get](0));
                      }
                    }, T$.ParseResponseToNull())));
                    continue;
                  } else {
                    object._set(key, includedObject);
                    loadingNodes[$add](parse_server_sdk.ParseLiveList._loadIncludes(includedObject, {paths: T$.MapNOfString$dynamic().as(paths[$_get](key))}));
                    continue;
                  }
                } else {
                  let queryBuilder = (t68$ = new (T$.QueryBuilderOfParseObject()).new(new parse_server_sdk.ParseObject.new(includedObject.parseClassName)), (() => {
                    t68$.whereEqualTo("objectId", includedObject.objectId);
                    t68$.includeObject(parse_server_sdk.ParseLiveList._toIncludeStringList(T$.MapOfString$dynamic().as(paths[$_get](key))));
                    return t68$;
                  })());
                  loadingNodes[$add](queryBuilder.query(parse_server_sdk.ParseObject).then(dart.void, dart.fn(parseResponse => {
                    if (parseResponse == null) dart.nullFailed(I[32], 311, 64, "parseResponse");
                    if (dart.test(parseResponse.success) && dart.nullCheck(parseResponse.results)[$length] === 1) {
                      object._set(key, dart.nullCheck(parseResponse.results)[$_get](0));
                    }
                  }, T$.ParseResponseToNull())));
                  continue;
                }
              } else {
                loadingNodes[$add](parse_server_sdk.ParseLiveList._loadIncludes(includedObject, {oldObject: (t68$0 = oldObject, t68$0 == null ? null : t68$0.get(parse_server_sdk.ParseObject, key)), paths: T$.MapNOfString$dynamic().as(paths[$_get](key))}));
                continue;
              }
            } else {
              continue;
            }
          }
          yield async.Future.wait(dart.void, loadingNodes);
        });
      }
      static _toIncludeStringList(includes) {
        if (includes == null) dart.nullFailed(I[32], 333, 65, "includes");
        let includeList = T$.JSArrayOfString().of([]);
        for (let key of includes[$keys]) {
          includeList[$add](key);
          if (dart.test(T$.MapOfString$dynamic().as(includes[$_get](key))[$isNotEmpty])) {
            includeList[$addAll](parse_server_sdk.ParseLiveList._toIncludeStringList(T$.MapOfString$dynamic().as(includes[$_get](key)))[$map](core.String, dart.fn(e => {
              if (e == null) dart.nullFailed(I[32], 340, 61, "e");
              return dart.str(key) + "." + dart.str(e);
            }, T$.StringToString())));
          }
        }
        return includeList;
      }
      [_objectAdded](object, opts) {
        if (object == null) dart.nullFailed(I[32], 346, 31, "object");
        let loaded = opts && 'loaded' in opts ? opts.loaded : true;
        if (loaded == null) dart.nullFailed(I[32], 347, 13, "loaded");
        let fetchedIncludes = opts && 'fetchedIncludes' in opts ? opts.fetchedIncludes : false;
        if (fetchedIncludes == null) dart.nullFailed(I[32], 347, 33, "fetchedIncludes");
        return async.async(dart.void, (function* _objectAdded() {
          object = T.as(object.clone(object.toJson({full: true})));
          if (!dart.test(fetchedIncludes)) {
            yield parse_server_sdk.ParseLiveList._loadIncludes(object, {paths: this[_includePaths]});
          }
          for (let i = 0; i < dart.notNull(this[_list][$length]); i = i + 1) {
            if (this.after(object, this[_list][$_get](i).object) !== true) {
              this[_list][$insert](i, new (ParseLiveListElementOfT()).new(object, {loaded: loaded, updatedSubItems: this[_listeningIncludes$]}));
              this[_eventStreamController].sink.add(new (ParseLiveListAddEventOfT()).new(i, T.as(object.clone(object.toJson({full: true})))));
              return;
            }
          }
          this[_list][$add](new (ParseLiveListElementOfT()).new(object, {loaded: loaded, updatedSubItems: this[_listeningIncludes$]}));
          this[_eventStreamController].sink.add(new (ParseLiveListAddEventOfT()).new(dart.notNull(this[_list][$length]) - 1, T.as(object.clone(object.toJson({full: true})))));
        }).bind(this));
      }
      [_objectUpdated](object) {
        if (object == null) dart.nullFailed(I[32], 372, 33, "object");
        return async.async(dart.void, (function* _objectUpdated() {
          for (let i = 0; i < dart.notNull(this[_list][$length]); i = i + 1) {
            if (dart.nullCheck(this[_list][$_get](i).object).get(core.String, "objectId") == object.get(core.String, "objectId")) {
              yield parse_server_sdk.ParseLiveList._loadIncludes(object, {oldObject: this[_list][$_get](i).object, paths: this[_includePaths]});
              if (this.after(this[_list][$_get](i).object, object) == null) {
                this[_list][$_get](i).object = TN().as(object.clone(object.toJson({full: true})));
              } else {
                this[_list][$removeAt](i).dispose();
                this[_eventStreamController].sink.add(new (ParseLiveListDeleteEventOfT()).new(i, T.as(object.clone(object.toJson({full: true})))));
                yield this[_objectAdded](T.as(object.clone(object.toJson({full: true}))), {fetchedIncludes: true});
              }
              break;
            }
          }
        }).bind(this));
      }
      [_objectDeleted](object) {
        if (object == null) dart.nullFailed(I[32], 392, 33, "object");
        return async.async(dart.void, (function* _objectDeleted() {
          for (let i = 0; i < dart.notNull(this[_list][$length]); i = i + 1) {
            if (dart.nullCheck(this[_list][$_get](i).object).get(core.String, "objectId") == object.get(core.String, "objectId")) {
              yield parse_server_sdk.ParseLiveList._loadIncludes(object, {oldObject: this[_list][$_get](i).object, paths: this[_includePaths]});
              this[_list][$removeAt](i).dispose();
              this[_eventStreamController].sink.add(new (ParseLiveListDeleteEventOfT()).new(i, T.as(object.clone(object.toJson({full: true})))));
              break;
            }
          }
        }).bind(this));
      }
      getAt(index) {
        if (index == null) dart.nullFailed(I[32], 406, 29, "index");
        return new (_AsyncStarImplOfT()).new((function* getAt(stream) {
          let t68, t68$;
          if (dart.notNull(index) < dart.notNull(this[_list][$length])) {
            if (!dart.test(this[_list][$_get](index).loaded)) {
              let queryBuilder = (t68 = new (QueryBuilderOfT()).copy(this[_query$]), (() => {
                t68.whereEqualTo("objectId", dart.nullCheck(this[_list][$_get](index).object).get(core.String, "objectId"));
                t68.setLimit(1);
                return t68;
              })());
              let response = (yield queryBuilder.query(T));
              if (dart.test(this[_list][$isEmpty])) {
                if (stream.addStream(parse_server_sdk._createStreamError(T, new parse_server_sdk.ParseError.new({message: "ParseLiveList: _list is empty"})))) return;
                yield;
                return;
              }
              if (dart.test(response.success)) {
                this[_list][$_get](index).object = TN().as((t68$ = response.results, t68$ == null ? null : t68$[$first]));
              } else {
                this[_list][$_get](index).object = null;
                if (stream.addStream(parse_server_sdk._createStreamError(T, dart.nullCheck(response.error)))) return;
                yield;
                return;
              }
            }
            if (stream.add(dart.nullCheck(this[_list][$_get](index).object))) return;
            yield;
            if (stream.addStream(this[_list][$_get](index).stream)) return;
            yield;
          }
        }).bind(this)).stream;
      }
      idOf(index) {
        if (index == null) dart.nullFailed(I[32], 434, 19, "index");
        if (dart.notNull(index) < dart.notNull(this[_list][$length])) {
          return dart.nullCheck(dart.nullCheck(this[_list][$_get](index).object).get(core.String, "objectId"));
        }
        return "NotFound";
      }
      getIdentifier(index) {
        if (index == null) dart.nullFailed(I[32], 441, 28, "index");
        if (dart.notNull(index) < dart.notNull(this[_list][$length])) {
          return dart.nullCheck(dart.nullCheck(this[_list][$_get](index).object).get(core.String, "objectId")) + dart.notNull(dart.toString(dart.nullCheck(this[_list][$_get](index).object).get(core.DateTime, "updatedAt")));
        }
        return "NotFound";
      }
      getLoadedAt(index) {
        if (index == null) dart.nullFailed(I[32], 449, 22, "index");
        if (dart.notNull(index) < dart.notNull(this[_list][$length]) && dart.test(this[_list][$_get](index).loaded)) {
          return this[_list][$_get](index).object;
        }
        return null;
      }
      getPreLoadedAt(index) {
        if (index == null) dart.nullFailed(I[32], 456, 25, "index");
        if (dart.notNull(index) < dart.notNull(this[_list][$length])) {
          return this[_list][$_get](index).object;
        }
        return null;
      }
      dispose() {
        if (this[_liveQuerySubscription] != null) {
          new parse_server_sdk.LiveQuery.new().client.unSubscribe(T, dart.nullCheck(this[_liveQuerySubscription]));
          this[_liveQuerySubscription] = null;
        }
        if (this[_liveQueryClientEventSubscription] != null) {
          dart.nullCheck(this[_liveQueryClientEventSubscription]).cancel();
          this[_liveQueryClientEventSubscription] = null;
        }
        while (dart.test(this[_list][$isNotEmpty])) {
          this[_list][$removeLast]().dispose();
        }
      }
    }
    (ParseLiveList.__ = function(_query, _listeningIncludes, _lazyLoading, opts) {
      let t66;
      if (_query == null) dart.nullFailed(I[32], 5, 24, "_query");
      if (_listeningIncludes == null) dart.nullFailed(I[32], 5, 37, "_listeningIncludes");
      if (_lazyLoading == null) dart.nullFailed(I[32], 5, 62, "_lazyLoading");
      let preloadedColumns = opts && 'preloadedColumns' in opts ? opts.preloadedColumns : null;
      this[_list] = JSArrayOfParseLiveListElementOfT().of([]);
      this[__ParseLiveList__eventStreamController] = null;
      this[__ParseLiveList__eventStreamController_isSet] = false;
      this[_nextID] = 0;
      this[__ParseLiveList__debug] = null;
      this[__ParseLiveList__debug_isSet] = false;
      this[_liveQuerySubscription] = null;
      this[_liveQueryClientEventSubscription] = null;
      this[_updateQueue] = T$.FutureOfvoid().value();
      this[_query$] = _query;
      this[_listeningIncludes$] = _listeningIncludes;
      this[_lazyLoading$] = _lazyLoading;
      this[_preloadedColumns] = (t66 = preloadedColumns, t66 == null ? C[66] || CT.C66 : t66);
      this[_debug] = parse_server_sdk.isDebugEnabled();
    }).prototype = ParseLiveList.prototype;
    dart.addTypeTests(ParseLiveList);
    ParseLiveList.prototype[_is_ParseLiveList_default] = true;
    dart.addTypeCaches(ParseLiveList);
    dart.setMethodSignature(ParseLiveList, () => ({
      __proto__: dart.getMethods(ParseLiveList.__proto__),
      after: dart.fnType(dart.nullable(core.bool), [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [_runQuery]: dart.fnType(async.Future$(parse_server_sdk.ParseResponse), []),
      [_init]: dart.fnType(async.Future$(dart.void), []),
      [_objectAdded]: dart.fnType(async.Future$(dart.void), [T], {fetchedIncludes: core.bool, loaded: core.bool}, {}),
      [_objectUpdated]: dart.fnType(async.Future$(dart.void), [T]),
      [_objectDeleted]: dart.fnType(async.Future$(dart.void), [T]),
      getAt: dart.fnType(async.Stream$(T), [core.int]),
      idOf: dart.fnType(core.String, [core.int]),
      getIdentifier: dart.fnType(core.String, [core.int]),
      getLoadedAt: dart.fnType(dart.nullable(T), [core.int]),
      getPreLoadedAt: dart.fnType(dart.nullable(T), [core.int]),
      dispose: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(ParseLiveList, () => ({
      __proto__: dart.getGetters(ParseLiveList.__proto__),
      [_eventStreamController]: async.StreamController$(parse_server_sdk.ParseLiveListEvent$(T)),
      [_debug]: core.bool,
      nextID: core.int,
      size: core.int,
      includes: core.List$(core.String),
      [_includePaths]: core.Map$(core.String, dart.dynamic),
      stream: async.Stream$(parse_server_sdk.ParseLiveListEvent$(T))
    }));
    dart.setSetterSignature(ParseLiveList, () => ({
      __proto__: dart.getSetters(ParseLiveList.__proto__),
      [_eventStreamController]: async.StreamController$(parse_server_sdk.ParseLiveListEvent$(T)),
      [_debug]: core.bool
    }));
    dart.setLibraryUri(ParseLiveList, I[1]);
    dart.setFieldSignature(ParseLiveList, () => ({
      __proto__: dart.getFields(ParseLiveList.__proto__),
      [_query$]: dart.finalFieldType(parse_server_sdk.QueryBuilder$(T)),
      [_listeningIncludes$]: dart.finalFieldType(core.Map$(core.String, dart.dynamic)),
      [_lazyLoading$]: dart.finalFieldType(core.bool),
      [_preloadedColumns]: dart.finalFieldType(core.List$(core.String)),
      [_list]: dart.fieldType(core.List$(parse_server_sdk.ParseLiveListElement$(T))),
      [__ParseLiveList__eventStreamController]: dart.fieldType(dart.nullable(async.StreamController$(parse_server_sdk.ParseLiveListEvent$(T)))),
      [__ParseLiveList__eventStreamController_isSet]: dart.fieldType(core.bool),
      [_nextID]: dart.fieldType(core.int),
      [__ParseLiveList__debug]: dart.fieldType(dart.nullable(core.bool)),
      [__ParseLiveList__debug_isSet]: dart.fieldType(core.bool),
      [_liveQuerySubscription]: dart.fieldType(dart.nullable(parse_server_sdk.Subscription$(T))),
      [_liveQueryClientEventSubscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(parse_server_sdk.LiveQueryClientEvent))),
      [_updateQueue]: dart.finalFieldType(async.Future$(dart.void))
    }));
    return ParseLiveList;
  });
  parse_server_sdk.ParseLiveList = parse_server_sdk.ParseLiveList$();
  dart.addTypeTests(parse_server_sdk.ParseLiveList, _is_ParseLiveList_default);
  var _subscription = dart.privateName(parse_server_sdk, "_subscription");
  var _includes = dart.privateName(parse_server_sdk, "_includes");
  var __ParseLiveElement_queryBuilder = dart.privateName(parse_server_sdk, "_#ParseLiveElement#queryBuilder");
  var __ParseLiveElement_queryBuilder_isSet = dart.privateName(parse_server_sdk, "_#ParseLiveElement#queryBuilder#isSet");
  var _subscriptionQueue = dart.privateName(parse_server_sdk, "_subscriptionQueue");
  var _streamController = dart.privateName(parse_server_sdk, "_streamController");
  var _loaded = dart.privateName(parse_server_sdk, "_loaded");
  var __ParseLiveListElement__updatedSubItems = dart.privateName(parse_server_sdk, "_#ParseLiveListElement#_updatedSubItems");
  var __ParseLiveListElement__updatedSubItems_isSet = dart.privateName(parse_server_sdk, "_#ParseLiveListElement#_updatedSubItems#isSet");
  var _liveQuery = dart.privateName(parse_server_sdk, "_liveQuery");
  var _object$ = dart.privateName(parse_server_sdk, "_object");
  var _updatedSubItems = dart.privateName(parse_server_sdk, "_updatedSubItems");
  var _toSubscriptionMap = dart.privateName(parse_server_sdk, "_toSubscriptionMap");
  var _subscribe = dart.privateName(parse_server_sdk, "_subscribe");
  var _toKeyMap = dart.privateName(parse_server_sdk, "_toKeyMap");
  var _subscribeSubItem = dart.privateName(parse_server_sdk, "_subscribeSubItem");
  var _unsubscribe = dart.privateName(parse_server_sdk, "_unsubscribe");
  var _updateSubItems = dart.privateName(parse_server_sdk, "_updateSubItems");
  var _getIncludeList = dart.privateName(parse_server_sdk, "_getIncludeList");
  const _is_ParseLiveListElement_default = Symbol('_is_ParseLiveListElement_default');
  parse_server_sdk.ParseLiveListElement$ = dart.generic(T => {
    var StreamControllerOfT = () => (StreamControllerOfT = dart.constFn(async.StreamController$(T)))();
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    class ParseLiveListElement extends core.Object {
      get [_updatedSubItems]() {
        let t69;
        return dart.test(this[__ParseLiveListElement__updatedSubItems_isSet]) ? (t69 = this[__ParseLiveListElement__updatedSubItems], t69) : dart.throw(new _internal.LateError.fieldNI("_updatedSubItems"));
      }
      set [_updatedSubItems](t69) {
        if (t69 == null) dart.nullFailed(I[32], 562, 30, "null");
        this[__ParseLiveListElement__updatedSubItems_isSet] = true;
        this[__ParseLiveListElement__updatedSubItems] = t69;
      }
      get stream() {
        return this[_streamController].stream;
      }
      get object() {
        let t70;
        return TN().as((t70 = this[_object$], t70 == null ? null : t70.clone(dart.nullCheck(this[_object$]).toJson({full: true}))));
      }
      [_toSubscriptionMap](map) {
        if (map == null) dart.nullFailed(I[32], 570, 65, "map");
        let result = new (T$.LinkedMapOfPathKey$dynamic()).new();
        for (let key of map[$keys]) {
          result[$putIfAbsent](new parse_server_sdk.PathKey.new(key), dart.fn(() => this[_toSubscriptionMap](T$.MapOfString$dynamic().as(map[$_get](key))), T$.VoidToMapOfPathKey$dynamic()));
        }
        return result;
      }
      [_toKeyMap](map) {
        if (map == null) dart.nullFailed(I[32], 578, 56, "map");
        let result = new (T$.LinkedMapOfString$dynamic()).new();
        for (let key of map[$keys]) {
          result[$putIfAbsent](key.key, dart.fn(() => this[_toKeyMap](T$.MapOfPathKey$dynamic().as(map[$_get](key))), T$.VoidToMapOfString$dynamic()));
        }
        return result;
      }
      [_subscribe]() {
        this[_subscriptionQueue].whenComplete(dart.fn(() => async.async(dart.void, (function*() {
          if (dart.test(this[_updatedSubItems][$isNotEmpty]) && this[_object$] != null) {
            let tasks = T$.JSArrayOfFutureOfvoid().of([]);
            for (let key of this[_updatedSubItems][$keys]) {
              tasks[$add](this[_subscribeSubItem](dart.nullCheck(this[_object$]), key, dart.nullCheck(dart.nullCheck(this[_object$]).get(parse_server_sdk.ParseObject, key.key)), T$.MapOfPathKey$dynamic().as(this[_updatedSubItems][$_get](key))));
            }
            yield async.Future.wait(dart.void, tasks);
          }
        }).bind(this)), T$.VoidToFutureOfvoid()));
      }
      [_unsubscribe](subscriptions) {
        if (subscriptions == null) dart.nullFailed(I[32], 599, 43, "subscriptions");
        for (let key of subscriptions[$keys]) {
          if (this[_liveQuery] != null && key.subscription != null) {
            dart.nullCheck(this[_liveQuery]).client.unSubscribe(parse_server_sdk.ParseObject, dart.nullCheck(key.subscription));
            key.subscription = null;
          }
          this[_unsubscribe](T$.MapOfPathKey$dynamic().as(subscriptions[$_get](key)));
        }
      }
      [_subscribeSubItem](parentObject, currentKey, subObject, path) {
        if (parentObject == null) dart.nullFailed(I[32], 609, 46, "parentObject");
        if (currentKey == null) dart.nullFailed(I[32], 609, 68, "currentKey");
        if (subObject == null) dart.nullFailed(I[32], 610, 19, "subObject");
        if (path == null) dart.nullFailed(I[32], 610, 52, "path");
        return async.async(dart.void, (function* _subscribeSubItem$() {
          let t70;
          if (this[_liveQuery] != null) {
            let tasks = T$.JSArrayOfFutureOfvoid().of([]);
            for (let key of path[$keys]) {
              tasks[$add](this[_subscribeSubItem](subObject, key, dart.nullCheck(subObject.get(parse_server_sdk.ParseObject, key.key)), T$.MapOfPathKey$dynamic().as(path[$_get](key))));
            }
            let queryBuilder = (t70 = new (T$.QueryBuilderOfParseObject()).new(subObject), (() => {
              t70.whereEqualTo("objectId", subObject.objectId);
              return t70;
            })());
            tasks[$add](dart.nullCheck(this[_liveQuery]).client.subscribe(parse_server_sdk.ParseObject, queryBuilder).then(dart.void, dart.fn(subscription => {
              if (subscription == null) dart.nullFailed(I[32], 623, 44, "subscription");
              currentKey.subscription = subscription;
              subscription.on(parse_server_sdk.LiveQueryEvent.update, dart.fn(newObject => {
                if (newObject == null) dart.nullFailed(I[32], 625, 61, "newObject");
                return async.async(core.Null, (function*() {
                  this[_subscriptionQueue].whenComplete(dart.fn(() => async.async(dart.void, (function*() {
                    let t70;
                    yield parse_server_sdk.ParseLiveList._loadIncludes(newObject, {oldObject: subObject, paths: this[_toKeyMap](path)});
                    parentObject._set(currentKey.key, newObject);
                    if (!dart.test(this[_streamController].isClosed)) {
                      this[_streamController].add(T.as((t70 = this[_object$], t70 == null ? null : t70.clone(dart.nullCheck(this[_object$]).toJson({full: true})))));
                      this[_unsubscribe](path);
                      for (let key of path[$keys]) {
                        tasks[$add](this[_subscribeSubItem](newObject, key, dart.nullCheck(newObject.get(parse_server_sdk.ParseObject, key.key)), T$.MapOfPathKey$dynamic().as(path[$_get](key))));
                      }
                    }
                    yield async.Future.wait(dart.void, tasks);
                  }).bind(this)), T$.VoidToFutureOfvoid()));
                }).bind(this));
              }, T$.ParseObjectToFutureOfNull()));
            }, T$.SubscriptionOfParseObjectToNull())));
            yield async.Future.wait(dart.void, tasks);
          }
        }).bind(this));
      }
      set object(value) {
        let t70;
        TN().as(value);
        this[_loaded] = true;
        this[_object$] = value;
        this[_unsubscribe](this[_updatedSubItems]);
        this[_subscribe]();
        this[_streamController].add(T.as((t70 = this[_object$], t70 == null ? null : t70.clone(dart.nullCheck(this[_object$]).toJson({full: true})))));
      }
      get loaded() {
        return this[_loaded];
      }
      dispose() {
        this[_unsubscribe](this[_updatedSubItems]);
        this[_streamController].close();
      }
      reconnected() {
        return async.async(dart.void, (function* reconnected() {
          if (dart.test(this.loaded)) {
            this[_subscriptionQueue].whenComplete(dart.fn(() => async.async(dart.void, (function*() {
              yield this[_updateSubItems](dart.nullCheck(this[_object$]), this[_updatedSubItems]);
            }).bind(this)), T$.VoidToFutureOfvoid()));
          }
        }).bind(this));
      }
      [_getIncludeList](path) {
        if (path == null) dart.nullFailed(I[32], 674, 54, "path");
        let includes = T$.JSArrayOfString().of([]);
        for (let key of path[$keys]) {
          includes[$add](key.key);
          includes[$addAll](this[_getIncludeList](T$.MapOfPathKey$dynamic().as(path[$_get](key)))[$map](core.String, dart.fn(e => {
            if (e == null) dart.nullFailed(I[32], 679, 50, "e");
            return dart.str(key.key) + "." + dart.str(e);
          }, T$.StringToString())));
        }
        return includes;
      }
      [_updateSubItems](root, path) {
        if (root == null) dart.nullFailed(I[32], 685, 19, "root");
        if (path == null) dart.nullFailed(I[32], 685, 47, "path");
        return async.async(dart.void, (function* _updateSubItems$() {
          let t70, t70$;
          let tasks = T$.JSArrayOfFutureOfvoid().of([]);
          for (let key of path[$keys]) {
            let subObject = dart.nullCheck(root.get(parse_server_sdk.ParseObject, key.key));
            if (subObject.containsKey("updatedAt") === true) {
              let queryBuilder = (t70 = new (T$.QueryBuilderOfParseObject()).new(subObject), (() => {
                t70.keysToReturn(T$.JSArrayOfString().of(["updatedAt"]));
                t70.whereEqualTo("objectId", subObject.objectId);
                return t70;
              })());
              let parseResponse = (yield queryBuilder.query(parse_server_sdk.ParseObject));
              if (dart.test(parseResponse.success) && !dart.equals(dart.dload(dart.nullCheck(parseResponse.results)[$first], 'updatedAt'), subObject.updatedAt)) {
                queryBuilder.limiters[$remove]("keys");
                queryBuilder.includeObject(this[_getIncludeList](T$.MapOfPathKey$dynamic().as(path[$_get](key))));
                let parseResponse = (yield queryBuilder.query(parse_server_sdk.ParseObject));
                if (dart.test(parseResponse.success)) {
                  subObject = parse_server_sdk.ParseObject.as(dart.dload(parseResponse.result, 'first'));
                  if ((t70$ = key.subscription, t70$ == null ? null : t70$.eventCallbacks[$containsKey]("update")) === true) {
                    dart.dcall(dart.nullCheck(dart.nullCheck(key.subscription).eventCallbacks[$_get]("update")), [subObject]);
                  }
                  break;
                }
              }
            }
            tasks[$add](this[_updateSubItems](subObject, T$.MapOfPathKey$dynamic().as(path[$_get](key))));
          }
          yield async.Future.wait(dart.void, tasks);
        }).bind(this));
      }
    }
    (ParseLiveListElement.new = function(_object, opts) {
      let t69;
      let loaded = opts && 'loaded' in opts ? opts.loaded : false;
      if (loaded == null) dart.nullFailed(I[32], 547, 13, "loaded");
      let updatedSubItems = opts && 'updatedSubItems' in opts ? opts.updatedSubItems : null;
      this[_streamController] = StreamControllerOfT().broadcast();
      this[_loaded] = false;
      this[__ParseLiveListElement__updatedSubItems] = null;
      this[__ParseLiveListElement__updatedSubItems_isSet] = false;
      this[_liveQuery] = null;
      this[_subscriptionQueue] = T$.FutureOfvoid().value();
      this[_object$] = _object;
      if (this[_object$] != null) {
        this[_loaded] = loaded;
      }
      this[_updatedSubItems] = this[_toSubscriptionMap]((t69 = updatedSubItems, t69 == null ? new (T$.LinkedMapOfString$dynamic()).new() : t69));
      if (dart.test(this[_updatedSubItems][$isNotEmpty])) {
        this[_liveQuery] = new parse_server_sdk.LiveQuery.new();
        this[_subscribe]();
      }
    }).prototype = ParseLiveListElement.prototype;
    dart.addTypeTests(ParseLiveListElement);
    ParseLiveListElement.prototype[_is_ParseLiveListElement_default] = true;
    dart.addTypeCaches(ParseLiveListElement);
    dart.setMethodSignature(ParseLiveListElement, () => ({
      __proto__: dart.getMethods(ParseLiveListElement.__proto__),
      [_toSubscriptionMap]: dart.fnType(core.Map$(parse_server_sdk.PathKey, dart.dynamic), [core.Map$(core.String, dart.dynamic)]),
      [_toKeyMap]: dart.fnType(core.Map$(core.String, dart.dynamic), [core.Map$(parse_server_sdk.PathKey, dart.dynamic)]),
      [_subscribe]: dart.fnType(dart.void, []),
      [_unsubscribe]: dart.fnType(dart.void, [core.Map$(parse_server_sdk.PathKey, dart.dynamic)]),
      [_subscribeSubItem]: dart.fnType(async.Future$(dart.void), [parse_server_sdk.ParseObject, parse_server_sdk.PathKey, parse_server_sdk.ParseObject, core.Map$(parse_server_sdk.PathKey, dart.dynamic)]),
      dispose: dart.fnType(dart.void, []),
      reconnected: dart.fnType(async.Future$(dart.void), []),
      [_getIncludeList]: dart.fnType(core.List$(core.String), [core.Map$(parse_server_sdk.PathKey, dart.dynamic)]),
      [_updateSubItems]: dart.fnType(async.Future$(dart.void), [parse_server_sdk.ParseObject, core.Map$(parse_server_sdk.PathKey, dart.dynamic)])
    }));
    dart.setGetterSignature(ParseLiveListElement, () => ({
      __proto__: dart.getGetters(ParseLiveListElement.__proto__),
      [_updatedSubItems]: core.Map$(parse_server_sdk.PathKey, dart.dynamic),
      stream: async.Stream$(T),
      object: dart.nullable(T),
      loaded: core.bool
    }));
    dart.setSetterSignature(ParseLiveListElement, () => ({
      __proto__: dart.getSetters(ParseLiveListElement.__proto__),
      [_updatedSubItems]: core.Map$(parse_server_sdk.PathKey, dart.dynamic),
      object: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(ParseLiveListElement, I[1]);
    dart.setFieldSignature(ParseLiveListElement, () => ({
      __proto__: dart.getFields(ParseLiveListElement.__proto__),
      [_streamController]: dart.finalFieldType(async.StreamController$(T)),
      [_object$]: dart.fieldType(dart.nullable(T)),
      [_loaded]: dart.fieldType(core.bool),
      [__ParseLiveListElement__updatedSubItems]: dart.fieldType(dart.nullable(core.Map$(parse_server_sdk.PathKey, dart.dynamic))),
      [__ParseLiveListElement__updatedSubItems_isSet]: dart.fieldType(core.bool),
      [_liveQuery]: dart.fieldType(dart.nullable(parse_server_sdk.LiveQuery)),
      [_subscriptionQueue]: dart.finalFieldType(async.Future$(dart.void))
    }));
    return ParseLiveListElement;
  });
  parse_server_sdk.ParseLiveListElement = parse_server_sdk.ParseLiveListElement$();
  dart.addTypeTests(parse_server_sdk.ParseLiveListElement, _is_ParseLiveListElement_default);
  const _is_ParseLiveElement_default = Symbol('_is_ParseLiveElement_default');
  parse_server_sdk.ParseLiveElement$ = dart.generic(T => {
    var QueryBuilderOfT = () => (QueryBuilderOfT = dart.constFn(parse_server_sdk.QueryBuilder$(T)))();
    var TN = () => (TN = dart.constFn(dart.nullable(T)))();
    var TToFutureOfNull = () => (TToFutureOfNull = dart.constFn(dart.fnType(T$.FutureOfNull(), [T])))();
    const object$ = Symbol("object");
    class ParseLiveElement extends parse_server_sdk.ParseLiveListElement$(T) {
      get queryBuilder() {
        let t68;
        return dart.test(this[__ParseLiveElement_queryBuilder_isSet]) ? (t68 = this[__ParseLiveElement_queryBuilder], t68) : dart.throw(new _internal.LateError.fieldNI("queryBuilder"));
      }
      set queryBuilder(t68) {
        QueryBuilderOfT().as(t68);
        if (t68 == null) dart.nullFailed(I[32], 496, 24, "null");
        this[__ParseLiveElement_queryBuilder_isSet] = true;
        this[__ParseLiveElement_queryBuilder] = t68;
      }
      [_init](object, opts) {
        if (object == null) dart.nullFailed(I[32], 498, 24, "object");
        let loaded = opts && 'loaded' in opts ? opts.loaded : false;
        if (loaded == null) dart.nullFailed(I[32], 499, 13, "loaded");
        let includeObject = opts && 'includeObject' in opts ? opts.includeObject : null;
        return async.async(dart.void, (function* _init() {
          if (!dart.test(loaded)) {
            let parseResponse = (yield this.queryBuilder.query(parse_server_sdk.ParseObject));
            if (dart.test(parseResponse.success)) {
              this[object$] = TN().as(dart.dload(parseResponse.result, 'first'));
            }
          }
          this[_subscription] = (yield new parse_server_sdk.LiveQuery.new().client.subscribe(T, new (QueryBuilderOfT()).copy(this.queryBuilder), {copyObject: TN().as(object.clone(new (T$.IdentityMapOfString$dynamic()).new()))}));
          dart.nullCheck(this[_subscription]).on(parse_server_sdk.LiveQueryEvent.update, dart.fn(newObject => {
            if (newObject == null) dart.nullFailed(I[32], 511, 49, "newObject");
            return async.async(core.Null, (function*() {
              yield parse_server_sdk.ParseLiveList._loadIncludes(newObject, {oldObject: this[object$], paths: this[_includes]});
              this[object$] = newObject;
            }).bind(this));
          }, TToFutureOfNull()));
          new parse_server_sdk.LiveQuery.new().client.getClientEventStream.listen(dart.fn(event => {
            if (event == null) dart.nullFailed(I[32], 520, 39, "event");
            this[_subscriptionQueue].whenComplete(dart.fn(() => async.async(dart.void, (function*() {
              switch (event) {
                case C[61] || CT.C61:
                {
                  let parseResponse = (yield this.queryBuilder.query(parse_server_sdk.ParseObject));
                  if (dart.test(parseResponse.success)) {
                    this[object$] = TN().as(dart.dload(parseResponse.result, 'first'));
                  }
                  break;
                }
              }
            }).bind(this)), T$.VoidToFutureOfvoid()));
          }, T$.LiveQueryClientEventTovoid()));
        }).bind(this));
      }
      dispose() {
        if (this[_subscription] != null) {
          new parse_server_sdk.LiveQuery.new().client.unSubscribe(T, dart.nullCheck(this[_subscription]));
          this[_subscription] = null;
        }
        super.dispose();
      }
      set [object$](x) {
        super.object = x;
      }
    }
    (ParseLiveElement.new = function(object, opts) {
      let t68, t68$, t68$0;
      if (object == null) dart.nullFailed(I[32], 479, 22, "object");
      let loaded = opts && 'loaded' in opts ? opts.loaded : false;
      if (loaded == null) dart.nullFailed(I[32], 480, 13, "loaded");
      let includeObject = opts && 'includeObject' in opts ? opts.includeObject : null;
      this[_subscription] = null;
      this[_includes] = null;
      this[__ParseLiveElement_queryBuilder] = null;
      this[__ParseLiveElement_queryBuilder_isSet] = false;
      ParseLiveElement.__proto__.new.call(this, object, {loaded: loaded, updatedSubItems: parse_server_sdk.ParseLiveList._toIncludeMap((t68 = includeObject, t68 == null ? T$.JSArrayOfString().of([]) : t68))});
      this[_includes] = parse_server_sdk.ParseLiveList._toIncludeMap((t68$ = includeObject, t68$ == null ? T$.JSArrayOfString().of([]) : t68$));
      this.queryBuilder = (t68$0 = new (QueryBuilderOfT()).new(TN().as(object.clone(new (T$.IdentityMapOfString$dynamic()).new()))), (() => {
        t68$0.whereEqualTo("objectId", object.objectId);
        return t68$0;
      })());
      if (includeObject != null) {
        this.queryBuilder.includeObject(includeObject);
      }
      this[_init](object, {loaded: loaded, includeObject: includeObject});
    }).prototype = ParseLiveElement.prototype;
    dart.addTypeTests(ParseLiveElement);
    ParseLiveElement.prototype[_is_ParseLiveElement_default] = true;
    dart.addTypeCaches(ParseLiveElement);
    dart.setMethodSignature(ParseLiveElement, () => ({
      __proto__: dart.getMethods(ParseLiveElement.__proto__),
      [_init]: dart.fnType(async.Future$(dart.void), [T], {includeObject: dart.nullable(core.List$(core.String)), loaded: core.bool}, {})
    }));
    dart.setGetterSignature(ParseLiveElement, () => ({
      __proto__: dart.getGetters(ParseLiveElement.__proto__),
      queryBuilder: parse_server_sdk.QueryBuilder$(T)
    }));
    dart.setSetterSignature(ParseLiveElement, () => ({
      __proto__: dart.getSetters(ParseLiveElement.__proto__),
      queryBuilder: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(ParseLiveElement, I[1]);
    dart.setFieldSignature(ParseLiveElement, () => ({
      __proto__: dart.getFields(ParseLiveElement.__proto__),
      [_subscription]: dart.fieldType(dart.nullable(parse_server_sdk.Subscription$(T))),
      [_includes]: dart.fieldType(dart.nullable(core.Map$(core.String, dart.dynamic))),
      [__ParseLiveElement_queryBuilder]: dart.fieldType(dart.nullable(parse_server_sdk.QueryBuilder$(T))),
      [__ParseLiveElement_queryBuilder_isSet]: dart.fieldType(core.bool)
    }));
    return ParseLiveElement;
  });
  parse_server_sdk.ParseLiveElement = parse_server_sdk.ParseLiveElement$();
  dart.addTypeTests(parse_server_sdk.ParseLiveElement, _is_ParseLiveElement_default);
  var key$ = dart.privateName(parse_server_sdk, "PathKey.key");
  var subscription$ = dart.privateName(parse_server_sdk, "PathKey.subscription");
  parse_server_sdk.PathKey = class PathKey extends core.Object {
    get key() {
      return this[key$];
    }
    set key(value) {
      super.key = value;
    }
    get subscription() {
      return this[subscription$];
    }
    set subscription(value) {
      this[subscription$] = value;
    }
    toString() {
      let t70;
      return "PathKey(key: " + dart.str(this.key) + ", subscription: " + dart.str((t70 = this.subscription, t70 == null ? null : t70.requestId)) + ")";
    }
  };
  (parse_server_sdk.PathKey.new = function(key, opts) {
    if (key == null) dart.nullFailed(I[32], 719, 16, "key");
    let subscription = opts && 'subscription' in opts ? opts.subscription : null;
    this[key$] = key;
    this[subscription$] = subscription;
    ;
  }).prototype = parse_server_sdk.PathKey.prototype;
  dart.addTypeTests(parse_server_sdk.PathKey);
  dart.addTypeCaches(parse_server_sdk.PathKey);
  dart.setLibraryUri(parse_server_sdk.PathKey, I[1]);
  dart.setFieldSignature(parse_server_sdk.PathKey, () => ({
    __proto__: dart.getFields(parse_server_sdk.PathKey.__proto__),
    key: dart.finalFieldType(core.String),
    subscription: dart.fieldType(dart.nullable(parse_server_sdk.Subscription$(parse_server_sdk.ParseObject)))
  }));
  dart.defineExtensionMethods(parse_server_sdk.PathKey, ['toString']);
  var _index$ = dart.privateName(parse_server_sdk, "_index");
  const _is_ParseLiveListEvent_default = Symbol('_is_ParseLiveListEvent_default');
  parse_server_sdk.ParseLiveListEvent$ = dart.generic(T => {
    class ParseLiveListEvent extends core.Object {
      get index() {
        return this[_index$];
      }
      get object() {
        return this[_object$];
      }
    }
    (ParseLiveListEvent.new = function(_index, _object) {
      if (_index == null) dart.nullFailed(I[32], 730, 27, "_index");
      if (_object == null) dart.nullFailed(I[32], 730, 40, "_object");
      this[_index$] = _index;
      this[_object$] = _object;
      ;
    }).prototype = ParseLiveListEvent.prototype;
    dart.addTypeTests(ParseLiveListEvent);
    ParseLiveListEvent.prototype[_is_ParseLiveListEvent_default] = true;
    dart.addTypeCaches(ParseLiveListEvent);
    dart.setGetterSignature(ParseLiveListEvent, () => ({
      __proto__: dart.getGetters(ParseLiveListEvent.__proto__),
      index: core.int,
      object: T
    }));
    dart.setLibraryUri(ParseLiveListEvent, I[1]);
    dart.setFieldSignature(ParseLiveListEvent, () => ({
      __proto__: dart.getFields(ParseLiveListEvent.__proto__),
      [_index$]: dart.finalFieldType(core.int),
      [_object$]: dart.finalFieldType(T)
    }));
    return ParseLiveListEvent;
  });
  parse_server_sdk.ParseLiveListEvent = parse_server_sdk.ParseLiveListEvent$();
  dart.addTypeTests(parse_server_sdk.ParseLiveListEvent, _is_ParseLiveListEvent_default);
  const _is_ParseLiveListAddEvent_default = Symbol('_is_ParseLiveListAddEvent_default');
  parse_server_sdk.ParseLiveListAddEvent$ = dart.generic(T => {
    class ParseLiveListAddEvent extends parse_server_sdk.ParseLiveListEvent$(T) {}
    (ParseLiveListAddEvent.new = function(index, object) {
      if (index == null) dart.nullFailed(I[32], 742, 29, "index");
      if (object == null) dart.nullFailed(I[32], 742, 38, "object");
      ParseLiveListAddEvent.__proto__.new.call(this, index, object);
      ;
    }).prototype = ParseLiveListAddEvent.prototype;
    dart.addTypeTests(ParseLiveListAddEvent);
    ParseLiveListAddEvent.prototype[_is_ParseLiveListAddEvent_default] = true;
    dart.addTypeCaches(ParseLiveListAddEvent);
    dart.setLibraryUri(ParseLiveListAddEvent, I[1]);
    return ParseLiveListAddEvent;
  });
  parse_server_sdk.ParseLiveListAddEvent = parse_server_sdk.ParseLiveListAddEvent$();
  dart.addTypeTests(parse_server_sdk.ParseLiveListAddEvent, _is_ParseLiveListAddEvent_default);
  const _is_ParseLiveListDeleteEvent_default = Symbol('_is_ParseLiveListDeleteEvent_default');
  parse_server_sdk.ParseLiveListDeleteEvent$ = dart.generic(T => {
    class ParseLiveListDeleteEvent extends parse_server_sdk.ParseLiveListEvent$(T) {}
    (ParseLiveListDeleteEvent.new = function(index, object) {
      if (index == null) dart.nullFailed(I[32], 747, 32, "index");
      if (object == null) dart.nullFailed(I[32], 747, 41, "object");
      ParseLiveListDeleteEvent.__proto__.new.call(this, index, object);
      ;
    }).prototype = ParseLiveListDeleteEvent.prototype;
    dart.addTypeTests(ParseLiveListDeleteEvent);
    ParseLiveListDeleteEvent.prototype[_is_ParseLiveListDeleteEvent_default] = true;
    dart.addTypeCaches(ParseLiveListDeleteEvent);
    dart.setLibraryUri(ParseLiveListDeleteEvent, I[1]);
    return ParseLiveListDeleteEvent;
  });
  parse_server_sdk.ParseLiveListDeleteEvent = parse_server_sdk.ParseLiveListDeleteEvent$();
  dart.addTypeTests(parse_server_sdk.ParseLiveListDeleteEvent, _is_ParseLiveListDeleteEvent_default);
  var loadedData$ = dart.privateName(parse_server_sdk, "ParseLiveListElementSnapshot.loadedData");
  var preLoadedData$ = dart.privateName(parse_server_sdk, "ParseLiveListElementSnapshot.preLoadedData");
  var error$0 = dart.privateName(parse_server_sdk, "ParseLiveListElementSnapshot.error");
  const _is_ParseLiveListElementSnapshot_default = Symbol('_is_ParseLiveListElementSnapshot_default');
  parse_server_sdk.ParseLiveListElementSnapshot$ = dart.generic(T => {
    class ParseLiveListElementSnapshot extends core.Object {
      get loadedData() {
        return this[loadedData$];
      }
      set loadedData(value) {
        super.loadedData = value;
      }
      get preLoadedData() {
        return this[preLoadedData$];
      }
      set preLoadedData(value) {
        super.preLoadedData = value;
      }
      get error() {
        return this[error$0];
      }
      set error(value) {
        super.error = value;
      }
      get hasData() {
        return this.loadedData != null;
      }
      get hasPreLoadedData() {
        return this.preLoadedData != null;
      }
      get failed() {
        return this.error != null;
      }
    }
    (ParseLiveListElementSnapshot.new = function(opts) {
      let loadedData = opts && 'loadedData' in opts ? opts.loadedData : null;
      let error = opts && 'error' in opts ? opts.error : null;
      let preLoadedData = opts && 'preLoadedData' in opts ? opts.preLoadedData : null;
      this[loadedData$] = loadedData;
      this[error$0] = error;
      this[preLoadedData$] = preLoadedData;
      ;
    }).prototype = ParseLiveListElementSnapshot.prototype;
    dart.addTypeTests(ParseLiveListElementSnapshot);
    ParseLiveListElementSnapshot.prototype[_is_ParseLiveListElementSnapshot_default] = true;
    dart.addTypeCaches(ParseLiveListElementSnapshot);
    dart.setGetterSignature(ParseLiveListElementSnapshot, () => ({
      __proto__: dart.getGetters(ParseLiveListElementSnapshot.__proto__),
      hasData: core.bool,
      hasPreLoadedData: core.bool,
      failed: core.bool
    }));
    dart.setLibraryUri(ParseLiveListElementSnapshot, I[1]);
    dart.setFieldSignature(ParseLiveListElementSnapshot, () => ({
      __proto__: dart.getFields(ParseLiveListElementSnapshot.__proto__),
      loadedData: dart.finalFieldType(dart.nullable(T)),
      preLoadedData: dart.finalFieldType(dart.nullable(T)),
      error: dart.finalFieldType(dart.nullable(parse_server_sdk.ParseError))
    }));
    return ParseLiveListElementSnapshot;
  });
  parse_server_sdk.ParseLiveListElementSnapshot = parse_server_sdk.ParseLiveListElementSnapshot$();
  dart.addTypeTests(parse_server_sdk.ParseLiveListElementSnapshot, _is_ParseLiveListElementSnapshot_default);
  parse_server_sdk.buildErrorResponse = function buildErrorResponse(response, apiResponse) {
    if (response == null) dart.nullFailed(I[33], 5, 19, "response");
    if (apiResponse == null) dart.nullFailed(I[33], 5, 50, "apiResponse");
    let responseData = T$.MapOfString$dynamic().as(convert.json.decode(apiResponse.data));
    response.error = new parse_server_sdk.ParseError.new({code: core.int.as(responseData[$_get]("code")), message: dart.toString(responseData[$_get]("error"))});
    response.statusCode = core.int.as(responseData[$_get]("code"));
    return response;
  };
  parse_server_sdk.buildParseResponseWithException = function buildParseResponseWithException(exception) {
    let t71, t70, t70$, t71$, t72, t71$0, t72$, t71$1, t71$2, t71$3;
    if (exception == null) dart.nullFailed(I[34], 4, 57, "exception");
    if (dio_error.DioError.is(exception)) {
      let errorResponse = new (T$.IdentityMapOfString$dynamic()).new();
      try {
        errorResponse = T$.MapOfString$dynamic().as(convert.json.decode((t70$ = (t70 = exception.response, t70 == null ? null : (t71 = t70.data, t71 == null ? null : dart.toString(t71))), t70$ == null ? "{}" : t70$)));
      } catch (e) {
        let _ = dart.getThrown(e);
        if (core.FormatException.is(_)) {
        } else
          throw e;
      }
      let errorMessage = (t71$0 = (t71$ = errorResponse[$_get]("error"), t71$ == null ? null : dart.toString(t71$)), t71$0 == null ? (t72 = exception.response, t72 == null ? null : t72.statusMessage) : t71$0);
      let errorCode = (t71$1 = core.int.tryParse(core.String.as(errorResponse[$_get]("code"))), t71$1 == null ? (t72$ = exception.response, t72$ == null ? null : t72$.statusCode) : t71$1);
      return new parse_server_sdk.ParseResponse.new({error: new parse_server_sdk.ParseError.new({message: (t71$2 = errorMessage, t71$2 == null ? dart.toString(exception) : t71$2), exception: exception, code: (t71$3 = errorCode, t71$3 == null ? -1 : t71$3)})});
    }
    return new parse_server_sdk.ParseResponse.new({error: new parse_server_sdk.ParseError.new({message: dart.toString(exception), exception: exception})});
    ;
  };
  parse_server_sdk.handleResponse = function handleResponse(T, object, response, type, debug, className) {
    if (response == null) dart.nullFailed(I[35], 5, 70, "response");
    if (type == null) dart.nullFailed(I[35], 6, 16, "type");
    if (debug == null) dart.nullFailed(I[35], 6, 27, "debug");
    if (className == null) dart.nullFailed(I[35], 6, 41, "className");
    let parseResponse = new parse_server_sdk._ParseResponseBuilder.new().handleResponse(T, object, response, type);
    if (dart.test(debug)) {
      parse_server_sdk.logAPIResponse(className, dart.toString(type), parseResponse);
    }
    return parseResponse;
  };
  parse_server_sdk.handleException = function handleException(exception, type, debug, className) {
    if (exception == null) dart.nullFailed(I[35], 20, 15, "exception");
    if (type == null) dart.nullFailed(I[35], 20, 37, "type");
    if (debug == null) dart.nullFailed(I[35], 20, 48, "debug");
    if (className == null) dart.nullFailed(I[35], 20, 62, "className");
    let parseResponse = parse_server_sdk.buildParseResponseWithException(exception);
    if (dart.test(debug)) {
      parse_server_sdk.logAPIResponse(className, dart.toString(type), parseResponse);
    }
    return parseResponse;
  };
  parse_server_sdk.shouldReturnAsABaseResult = function shouldReturnAsABaseResult(type) {
    if (type == null) dart.nullFailed(I[35], 31, 43, "type");
    if (type == parse_server_sdk.ParseApiRQ.healthCheck || type == parse_server_sdk.ParseApiRQ.execute || type == parse_server_sdk.ParseApiRQ.add || type == parse_server_sdk.ParseApiRQ.addAll || type == parse_server_sdk.ParseApiRQ.addUnique || type == parse_server_sdk.ParseApiRQ.remove || type == parse_server_sdk.ParseApiRQ.removeAll || type == parse_server_sdk.ParseApiRQ.increment || type == parse_server_sdk.ParseApiRQ.decrement || type == parse_server_sdk.ParseApiRQ.getConfigs || type == parse_server_sdk.ParseApiRQ.addConfig) {
      return true;
    } else {
      return false;
    }
  };
  parse_server_sdk.isUnsuccessfulResponse = function isUnsuccessfulResponse(apiResponse) {
    if (apiResponse == null) dart.nullFailed(I[35], 49, 50, "apiResponse");
    return apiResponse.statusCode !== 200 && apiResponse.statusCode !== 201;
  };
  parse_server_sdk.isSuccessButNoResults = function isSuccessButNoResults(apiResponse) {
    if (apiResponse == null) dart.nullFailed(I[35], 52, 49, "apiResponse");
    let decodedResponse = convert.jsonDecode(apiResponse.data);
    let results = null;
    if (T$.MapOfString$dynamic().is(decodedResponse)) {
      results = T$.ListN().as(decodedResponse[$_get]("results"));
    } else if (core.List.is(decodedResponse)) {
      results = decodedResponse;
    }
    if (results == null) {
      return false;
    }
    return results[$isEmpty];
  };
  parse_server_sdk.buildSuccessResponseWithNoResults = function buildSuccessResponseWithNoResults(response, code, value) {
    if (response == null) dart.nullFailed(I[36], 5, 19, "response");
    if (code == null) dart.nullFailed(I[36], 5, 33, "code");
    if (value == null) dart.nullFailed(I[36], 5, 46, "value");
    response.success = true;
    response.statusCode = 200;
    response.error = new parse_server_sdk.ParseError.new({code: code, message: value});
    return response;
  };
  parse_server_sdk.getXXTeaSembastCodec = function getXXTeaSembastCodec(opts) {
    let password = opts && 'password' in opts ? opts.password : null;
    if (password == null) dart.nullFailed(I[30], 59, 52, "password");
    return codec.SembastCodec.new({signature: "xxtea", codec: new parse_server_sdk._XXTeaCodec.new(password)});
  };
  parse_server_sdk._convertJSONArrayToList = function _convertJSONArrayToList(array) {
    if (array == null) dart.nullFailed(I[37], 3, 53, "array");
    let list = [];
    for (let item of array) {
      list[$add](parse_server_sdk.parseDecode(item));
    }
    return list;
  };
  parse_server_sdk._convertJSONObjectToMap = function _convertJSONObjectToMap(object) {
    if (object == null) dart.nullFailed(I[37], 11, 67, "object");
    let map = new (T$.LinkedMapOfString$dynamic()).new();
    object[$forEach](dart.fn((key, value) => {
      if (key == null) dart.nullFailed(I[37], 13, 26, "key");
      map[$putIfAbsent](key, dart.fn(() => parse_server_sdk.parseDecode(value), T$.VoidTodynamic()));
    }, T$.StringAnddynamicTovoid()));
    return map;
  };
  parse_server_sdk.parseDecode = function parseDecode(value) {
    let t71, t71$, t71$0, t71$1;
    if (core.List.is(value)) {
      return parse_server_sdk._convertJSONArrayToList(value);
    }
    if (typeof value == 'boolean') {
      return value;
    }
    if (core.int.is(value)) {
      return value[$toInt]();
    }
    if (typeof value == 'number') {
      return value[$toDouble]();
    }
    if (typeof value == 'number') {
      return value;
    }
    if (!core.Map.is(value)) {
      return value;
    }
    let map = T$.MapOfString$dynamic().as(value);
    if (!dart.test(map[$containsKey]("__type")) && !dart.test(map[$containsKey]("className"))) {
      return parse_server_sdk._convertJSONObjectToMap(map);
    }
    if (dart.test(map[$containsKey]("__type"))) {
      switch (map[$_get]("__type")) {
        case "Date":
        {
          let iso = core.String.as(map[$_get]("iso"));
          return parse_server_sdk._parseDateFormat.parse(iso);
        }
        case "Bytes":
        {
          let val = core.String.as(map[$_get]("base64"));
          return convert.base64.decode(val);
        }
        case "Pointer":
        case "Object":
        {
          let className = core.String.as(map[$_get]("className"));
          return parse_server_sdk.ParseCoreData.instance.createObject(className).fromJson(map);
        }
        case "File":
        {
          return parse_server_sdk.ParseCoreData.instance.createFile({url: T$.StringN().as(map[$_get]("url")), name: T$.StringN().as(map[$_get]("name"))}).fromJson(map);
        }
        case "GeoPoint":
        {
          let latitude = core.num.as((t71 = map[$_get]("latitude"), t71 == null ? 0.0 : t71));
          let longitude = core.num.as((t71$ = map[$_get]("longitude"), t71$ == null ? 0.0 : t71$));
          return new parse_server_sdk.ParseGeoPoint.new({latitude: latitude[$toDouble](), longitude: longitude[$toDouble]()});
        }
        case "Relation":
        {
          return new (T$.ParseRelationOfParseObject()).fromJson(map);
        }
      }
    }
    if (dart.test(map[$containsKey]("className"))) {
      switch (map[$_get]("className")) {
        case "GeoPoint":
        {
          let latitude = core.num.as((t71$0 = map[$_get]("latitude"), t71$0 == null ? 0.0 : t71$0));
          let longitude = core.num.as((t71$1 = map[$_get]("longitude"), t71$1 == null ? 0.0 : t71$1));
          return new parse_server_sdk.ParseGeoPoint.new({latitude: latitude[$toDouble](), longitude: longitude[$toDouble]()});
        }
        default:
        {
          return parse_server_sdk.ParseCoreData.instance.createObject(core.String.as(map[$_get]("className"))).fromJson(map);
        }
      }
    }
    return null;
  };
  parse_server_sdk.dateTimeEncoder = function dateTimeEncoder(item) {
    if (core.DateTime.is(item)) {
      return parse_server_sdk._parseDateFormat.format(item);
    }
    return item;
  };
  parse_server_sdk.parseEncode = function parseEncode(value, opts) {
    let full = opts && 'full' in opts ? opts.full : false;
    if (full == null) dart.nullFailed(I[38], 12, 42, "full");
    if (typed_data.Uint8List.is(value)) {
      return parse_server_sdk._encodeUint8List(value);
    }
    if (core.DateTime.is(value)) {
      return parse_server_sdk._encodeDate(value);
    }
    if (core.List.is(value)) {
      return value[$map](dart.dynamic, dart.fn(value => parse_server_sdk.parseEncode(value), T$.dynamicTodynamic()))[$toList]();
    }
    if (core.Map.is(value)) {
      value[$forEach](dart.fn((k, v) => {
        value[$_set](k, parse_server_sdk.parseEncode(v));
      }, T$.dynamicAnddynamicTovoid()));
    }
    if (parse_server_sdk.ParseGeoPoint.is(value)) {
      return value;
    }
    if (parse_server_sdk.ParseFileBase.is(value)) {
      return value;
    }
    if (T$.ParseRelationOfParseObject().is(value)) {
      return value;
    }
    if (parse_server_sdk.ParseObject.is(value) || parse_server_sdk.ParseUser.is(value)) {
      if (dart.test(full)) {
        return dart.dsend(value, 'toJson', [], {full: full});
      } else {
        return dart.dsend(value, 'toPointer', []);
      }
    }
    if (parse_server_sdk.ParseACL.is(value)) {
      return value.toJson();
    }
    return value;
  };
  parse_server_sdk._encodeUint8List = function _encodeUint8List(value) {
    if (value == null) dart.nullFailed(I[38], 60, 49, "value");
    return new (T$.IdentityMapOfString$dynamic()).from(["__type", "Bytes", "base64", convert.base64.encode(value)]);
  };
  parse_server_sdk._encodeDate = function _encodeDate(date) {
    if (date == null) dart.nullFailed(I[38], 64, 43, "date");
    return new (T$.IdentityMapOfString$dynamic()).from(["__type", "Date", "iso", parse_server_sdk._parseDateFormat.format(date)]);
  };
  parse_server_sdk.encodeObject = function encodeObject(className, objectId) {
    if (className == null) dart.nullFailed(I[38], 71, 41, "className");
    if (objectId == null) dart.nullFailed(I[38], 71, 59, "objectId");
    return new (T$.IdentityMapOfString$String()).from(["__type", "Pointer", "className", className, "objectId", objectId]);
  };
  parse_server_sdk.logAPIResponse = function logAPIResponse(className, type, parseResponse) {
    if (className == null) dart.nullFailed(I[39], 4, 12, "className");
    if (type == null) dart.nullFailed(I[39], 4, 30, "type");
    if (parseResponse == null) dart.nullFailed(I[39], 4, 50, "parseResponse");
    let responseString = "";
    responseString = responseString + "╭-- Parse Response";
    responseString = responseString + ("\nClass: " + dart.str(className));
    responseString = responseString + ("\nFunction: " + dart.str(type));
    if (dart.test(parseResponse.success)) {
      responseString = responseString + ("\nStatus Code: " + dart.str(parseResponse.statusCode));
      if (parseResponse.result != null) {
        responseString = responseString + ("\nPayload: " + dart.str(dart.toString(parseResponse.result)));
      } else {
        responseString = responseString + "\nReponse: OK";
      }
    } else if (!dart.test(parseResponse.success)) {
      responseString = responseString + ("\nStatus Code: " + dart.str(dart.nullCheck(parseResponse.error).code));
      responseString = responseString + ("\nType: " + dart.str(dart.nullCheck(parseResponse.error).type));
      let errorOrException = dart.nullCheck(parseResponse.error).exception != null ? "Exception" : "Error";
      responseString = responseString + ("\n" + errorOrException + ": " + dart.str(dart.nullCheck(parseResponse.error).message));
    }
    responseString = responseString + "\n╰-- \n";
    responseString = responseString + " \n";
    core.print(responseString);
  };
  parse_server_sdk.logRequest = function logRequest(appName, className, type, uri, body) {
    if (className == null) dart.nullFailed(I[39], 35, 29, "className");
    if (type == null) dart.nullFailed(I[39], 35, 47, "type");
    if (uri == null) dart.nullFailed(I[39], 35, 60, "uri");
    if (body == null) dart.nullFailed(I[39], 35, 72, "body");
    let requestString = " \n";
    let name = appName != null ? dart.str(appName) + " " : "";
    requestString = requestString + ("----\n" + name + "API Request (" + dart.str(className) + " : " + dart.str(type) + ") :");
    requestString = requestString + ("\nUri: " + dart.str(uri));
    requestString = requestString + ("\nBody: " + dart.str(body));
    requestString = requestString + "\n----\n";
    core.print(requestString);
  };
  parse_server_sdk.facebook = function facebook(token, id, expires) {
    if (token == null) dart.nullFailed(I[40], 3, 38, "token");
    if (id == null) dart.nullFailed(I[40], 3, 52, "id");
    if (expires == null) dart.nullFailed(I[40], 3, 65, "expires");
    return new (T$.IdentityMapOfString$dynamic()).from(["access_token", token, "id", id, "expiration_date", dart.toString(expires)]);
  };
  parse_server_sdk.google = function google(token, id, idToken) {
    if (token == null) dart.nullFailed(I[40], 11, 36, "token");
    if (id == null) dart.nullFailed(I[40], 11, 50, "id");
    if (idToken == null) dart.nullFailed(I[40], 11, 61, "idToken");
    return new (T$.IdentityMapOfString$dynamic()).from(["access_token", token, "id", id, "id_token", idToken]);
  };
  parse_server_sdk.apple = function apple(token, id) {
    if (token == null) dart.nullFailed(I[40], 19, 35, "token");
    if (id == null) dart.nullFailed(I[40], 19, 49, "id");
    return new (T$.IdentityMapOfString$dynamic()).from(["token", token, "id", id]);
  };
  parse_server_sdk.isDebugEnabled = function isDebugEnabled(opts) {
    let t71;
    let objectLevelDebug = opts && 'objectLevelDebug' in opts ? opts.objectLevelDebug : null;
    t71 = objectLevelDebug;
    return t71 == null ? parse_server_sdk.ParseCoreData.new().debug : t71;
  };
  parse_server_sdk.convertValueToCorrectType = function convertValueToCorrectType(value) {
    if (core.DateTime.is(value) || parse_server_sdk.ParseObject.is(value)) {
      return parse_server_sdk.parseEncode(value);
    } else {
      return value;
    }
  };
  parse_server_sdk.getSanitisedUri = function getSanitisedUri(client, pathToAppend, opts) {
    if (client == null) dart.nullFailed(I[41], 27, 33, "client");
    if (pathToAppend == null) dart.nullFailed(I[41], 27, 48, "pathToAppend");
    let queryParams = opts && 'queryParams' in opts ? opts.queryParams : null;
    let query = opts && 'query' in opts ? opts.query : null;
    let tempUri = core.Uri.parse(parse_server_sdk.ParseCoreData.new().serverUrl);
    let url = core._Uri.new({scheme: tempUri.scheme, host: tempUri.host, port: tempUri.port, path: dart.str(tempUri.path) + dart.str(pathToAppend), queryParameters: queryParams, query: query});
    return url;
  };
  parse_server_sdk.getCustomUri = function getCustomUri(client, path, opts) {
    if (client == null) dart.nullFailed(I[41], 43, 30, "client");
    if (path == null) dart.nullFailed(I[41], 43, 45, "path");
    let queryParams = opts && 'queryParams' in opts ? opts.queryParams : null;
    let query = opts && 'query' in opts ? opts.query : null;
    let tempUri = core.Uri.parse(parse_server_sdk.ParseCoreData.new().serverUrl);
    let url = core._Uri.new({scheme: tempUri.scheme, host: tempUri.host, port: tempUri.port, path: path, queryParameters: queryParams, query: query});
    return url;
  };
  parse_server_sdk.removeTrailingSlash = function removeTrailingSlash(serverUrl) {
    if (serverUrl == null) dart.nullFailed(I[41], 59, 35, "serverUrl");
    if (serverUrl[$isNotEmpty] && serverUrl[$substring](serverUrl.length - 1) === "/") {
      return serverUrl[$substring](0, serverUrl.length - 1);
    } else {
      return serverUrl;
    }
  };
  parse_server_sdk.batchRequest = function batchRequest(requests, objects, opts) {
    if (requests == null) dart.nullFailed(I[41], 69, 19, "requests");
    if (objects == null) dart.nullFailed(I[41], 69, 47, "objects");
    let client = opts && 'client' in opts ? opts.client : null;
    let debug = opts && 'debug' in opts ? opts.debug : null;
    return async.async(parse_server_sdk.ParseResponse, function* batchRequest() {
      let t74, t73, t72, t71;
      debug = parse_server_sdk.isDebugEnabled({objectLevelDebug: debug});
      client = (t71 = client, t71 == null ? (t72 = parse_server_sdk.ParseCoreData.new(), t73 = parse_server_sdk.ParseCoreData.new().autoSendSessionId, t74 = parse_server_sdk.ParseCoreData.new().securityContext, t72.clientCreator({sendSessionId: t73, securityContext: t74})) : t71);
      try {
        let url = parse_server_sdk.getSanitisedUri(client, "/batch");
        let body = convert.json.encode(new (T$.IdentityMapOfString$dynamic()).from(["requests", requests]));
        let result = (yield client.post(dart.toString(url), {data: body}));
        return parse_server_sdk.handleResponse(parse_server_sdk.ParseObject, objects, result, parse_server_sdk.ParseApiRQ.batch, debug, "parse_utils");
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Exception.is(e)) {
          return parse_server_sdk.handleException(e, parse_server_sdk.ParseApiRQ.batch, debug, "parse_utils");
        } else
          throw e$;
      }
    });
  };
  parse_server_sdk._createStreamError = function _createStreamError(T, error) {
    if (error == null) dart.nullFailed(I[41], 89, 40, "error");
    return new (async._AsyncStarImpl$(T)).new(function* _createStreamError(stream) {
      dart.throw(error);
    }).stream;
  };
  dart.defineLazy(parse_server_sdk, {
    /*parse_server_sdk.keySdkVersion*/get keySdkVersion() {
      return "3.0.0";
    },
    /*parse_server_sdk.keyLibraryName*/get keyLibraryName() {
      return "Flutter Parse SDK";
    },
    /*parse_server_sdk.keyEndPointUserName*/get keyEndPointUserName() {
      return "/users/me";
    },
    /*parse_server_sdk.keyEndPointLogin*/get keyEndPointLogin() {
      return "/login";
    },
    /*parse_server_sdk.keyEndPointLogout*/get keyEndPointLogout() {
      return "/logout";
    },
    /*parse_server_sdk.keyEndPointUsers*/get keyEndPointUsers() {
      return "/users";
    },
    /*parse_server_sdk.keyEndPointSessions*/get keyEndPointSessions() {
      return "/sessions";
    },
    /*parse_server_sdk.keyEndPointInstallations*/get keyEndPointInstallations() {
      return "/installations";
    },
    /*parse_server_sdk.keyEndPointVerificationEmail*/get keyEndPointVerificationEmail() {
      return "/verificationEmailRequest";
    },
    /*parse_server_sdk.keyEndPointRequestPasswordReset*/get keyEndPointRequestPasswordReset() {
      return "/requestPasswordReset";
    },
    /*parse_server_sdk.keyEndPointClasses*/get keyEndPointClasses() {
      return "/classes/";
    },
    /*parse_server_sdk.keyEndPointHealth*/get keyEndPointHealth() {
      return "/health";
    },
    /*parse_server_sdk.keyEndPointAggregate*/get keyEndPointAggregate() {
      return "/aggregate/";
    },
    /*parse_server_sdk.keyVarClassName*/get keyVarClassName() {
      return "className";
    },
    /*parse_server_sdk.keyVarObjectId*/get keyVarObjectId() {
      return "objectId";
    },
    /*parse_server_sdk.keyVarCreatedAt*/get keyVarCreatedAt() {
      return "createdAt";
    },
    /*parse_server_sdk.keyVarUpdatedAt*/get keyVarUpdatedAt() {
      return "updatedAt";
    },
    /*parse_server_sdk.keyVarUsername*/get keyVarUsername() {
      return "username";
    },
    /*parse_server_sdk.keyVarEmail*/get keyVarEmail() {
      return "email";
    },
    /*parse_server_sdk.keyVarPassword*/get keyVarPassword() {
      return "password";
    },
    /*parse_server_sdk.keyVarSessionToken*/get keyVarSessionToken() {
      return "sessionToken";
    },
    /*parse_server_sdk.keyVarAuthData*/get keyVarAuthData() {
      return "authData";
    },
    /*parse_server_sdk.keyVarAcl*/get keyVarAcl() {
      return "ACL";
    },
    /*parse_server_sdk.keyVarName*/get keyVarName() {
      return "name";
    },
    /*parse_server_sdk.keyVarURL*/get keyVarURL() {
      return "url";
    },
    /*parse_server_sdk.keyClassMain*/get keyClassMain() {
      return "ParseMain";
    },
    /*parse_server_sdk.keyClassUser*/get keyClassUser() {
      return "_User";
    },
    /*parse_server_sdk.keyClassSession*/get keyClassSession() {
      return "_Session";
    },
    /*parse_server_sdk.keyClassInstallation*/get keyClassInstallation() {
      return "_Installation";
    },
    /*parse_server_sdk.keyGeoPoint*/get keyGeoPoint() {
      return "GeoPoint";
    },
    /*parse_server_sdk.keyFile*/get keyFile() {
      return "File";
    },
    /*parse_server_sdk.keyRelation*/get keyRelation() {
      return "Relation";
    },
    /*parse_server_sdk.keyFileClassname*/get keyFileClassname() {
      return "ParseFile";
    },
    /*parse_server_sdk.keyHeaderSessionToken*/get keyHeaderSessionToken() {
      return "X-Parse-Session-Token";
    },
    /*parse_server_sdk.keyHeaderRevocableSession*/get keyHeaderRevocableSession() {
      return "X-Parse-Revocable-Session";
    },
    /*parse_server_sdk.keyHeaderUserAgent*/get keyHeaderUserAgent() {
      return "user-agent";
    },
    /*parse_server_sdk.keyHeaderApplicationId*/get keyHeaderApplicationId() {
      return "X-Parse-Application-Id";
    },
    /*parse_server_sdk.keyHeaderContentType*/get keyHeaderContentType() {
      return "content-type";
    },
    /*parse_server_sdk.keyHeaderContentTypeJson*/get keyHeaderContentTypeJson() {
      return "application/json";
    },
    /*parse_server_sdk.keyHeaderMasterKey*/get keyHeaderMasterKey() {
      return "X-Parse-Master-Key";
    },
    /*parse_server_sdk.keyHeaderClientKey*/get keyHeaderClientKey() {
      return "X-Parse-Client-Key";
    },
    /*parse_server_sdk.keyHeaderInstallationId*/get keyHeaderInstallationId() {
      return "X-Parse-Installation-Id";
    },
    /*parse_server_sdk.keyParamSessionToken*/get keyParamSessionToken() {
      return "sessionToken";
    },
    /*parse_server_sdk.keyParseStoreBase*/get keyParseStoreBase() {
      return "flutter_parse_sdk_";
    },
    /*parse_server_sdk.keyParseStoreUser*/get keyParseStoreUser() {
      return "flutter_parse_sdk_user";
    },
    /*parse_server_sdk.keyParseStoreInstallation*/get keyParseStoreInstallation() {
      return "flutter_parse_sdk_installation";
    },
    /*parse_server_sdk.keyTimeZone*/get keyTimeZone() {
      return "timeZone";
    },
    /*parse_server_sdk.keyLocaleIdentifier*/get keyLocaleIdentifier() {
      return "localeIdentifier";
    },
    /*parse_server_sdk.keyDeviceToken*/get keyDeviceToken() {
      return "deviceToken";
    },
    /*parse_server_sdk.keyDeviceType*/get keyDeviceType() {
      return "deviceType";
    },
    /*parse_server_sdk.keyInstallationId*/get keyInstallationId() {
      return "installationId";
    },
    /*parse_server_sdk.keyAppName*/get keyAppName() {
      return "appName";
    },
    /*parse_server_sdk.keyAppVersion*/get keyAppVersion() {
      return "appVersion";
    },
    /*parse_server_sdk.keyAppIdentifier*/get keyAppIdentifier() {
      return "appIdentifier";
    },
    /*parse_server_sdk.keyParseVersion*/get keyParseVersion() {
      return "parseVersion";
    },
    /*parse_server_sdk.keyVarUser*/get keyVarUser() {
      return "user";
    },
    /*parse_server_sdk.keyVarCreatedWith*/get keyVarCreatedWith() {
      return "createdWith";
    },
    /*parse_server_sdk.keyVarRestricted*/get keyVarRestricted() {
      return "restricted";
    },
    /*parse_server_sdk.keyVarExpiresAt*/get keyVarExpiresAt() {
      return "expiresAt";
    },
    /*parse_server_sdk.keyVarInstallationId*/get keyVarInstallationId() {
      return "installationId";
    },
    /*parse_server_sdk.keyError*/get keyError() {
      return "error";
    },
    /*parse_server_sdk.keyCode*/get keyCode() {
      return "code";
    },
    /*parse_server_sdk.parseIsWeb*/get parseIsWeb() {
      return true;
    },
    /*parse_server_sdk._printConstLiveQuery*/get _printConstLiveQuery() {
      return "LiveQuery: ";
    },
    /*parse_server_sdk.keyLatitude*/get keyLatitude() {
      return "latitude";
    },
    /*parse_server_sdk.keyLongitude*/get keyLongitude() {
      return "longitude";
    },
    /*parse_server_sdk._parseDateFormat*/get _parseDateFormat() {
      return new parse_server_sdk._ParseDateFormat._internal();
    }
  }, false);
  dart.trackLibraries("packages/parse_server_sdk/src/network/parse_dio_client.dart", {
    "package:parse_server_sdk/src/network/parse_dio_client.dart": parse_dio_client,
    "package:parse_server_sdk/src/network/parse_http_client.dart": parse_http_client,
    "package:parse_server_sdk/parse_server_sdk.dart": parse_server_sdk
  }, {
    "package:parse_server_sdk/parse_server_sdk.dart": ["src/base/parse_constants.dart", "src/data/parse_core_data.dart", "src/data/parse_subclass_handler.dart", "src/enums/parse_enum_api_rq.dart", "src/network/options.dart", "src/network/parse_client.dart", "src/network/parse_connectivity.dart", "src/network/parse_live_query.dart", "src/network/parse_query.dart", "src/objects/parse_acl.dart", "src/objects/parse_base.dart", "src/objects/parse_cloneable.dart", "src/objects/parse_config.dart", "src/objects/parse_error.dart", "src/objects/parse_file.dart", "src/objects/parse_file_base.dart", "src/objects/parse_file_web.dart", "src/objects/parse_function.dart", "src/objects/parse_geo_point.dart", "src/objects/parse_installation.dart", "src/objects/parse_merge.dart", "src/objects/parse_object.dart", "src/objects/parse_relation.dart", "src/objects/parse_response.dart", "src/objects/parse_session.dart", "src/objects/parse_user.dart", "src/objects/response/parse_error_response.dart", "src/objects/response/parse_exception_response.dart", "src/objects/response/parse_response_builder.dart", "src/objects/response/parse_response_utils.dart", "src/objects/response/parse_success_no_results.dart", "src/storage/core_store.dart", "src/storage/core_store_memory.dart", "src/storage/core_store_sem_impl.dart", "src/storage/xxtea_codec.dart", "src/utils/parse_date_format.dart", "src/utils/parse_decoder.dart", "src/utils/parse_encoder.dart", "src/utils/parse_live_list.dart", "src/utils/parse_logger.dart", "src/utils/parse_login_helpers.dart", "src/utils/parse_utils.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["parse_client.dart","parse_dio_client.dart","parse_http_client.dart","../../parse_server_sdk.dart","../data/parse_core_data.dart","../data/parse_subclass_handler.dart","../enums/parse_enum_api_rq.dart","options.dart","parse_connectivity.dart","parse_live_query.dart","parse_query.dart","../objects/parse_acl.dart","../objects/parse_base.dart","../objects/parse_cloneable.dart","../objects/parse_object.dart","../objects/parse_config.dart","../objects/parse_error.dart","../objects/parse_file_base.dart","../objects/parse_file.dart","../objects/parse_file_web.dart","../objects/parse_function.dart","../objects/parse_geo_point.dart","../objects/parse_installation.dart","../objects/parse_merge.dart","../objects/parse_relation.dart","../objects/parse_response.dart","../objects/parse_session.dart","../objects/parse_user.dart","../objects/response/parse_response_builder.dart","../storage/core_store.dart","../storage/core_store_memory.dart","../storage/core_store_sem_impl.dart","../storage/xxtea_codec.dart","../utils/parse_date_format.dart","../utils/parse_live_list.dart","../objects/response/parse_error_response.dart","../objects/response/parse_exception_response.dart","../objects/response/parse_response_utils.dart","../objects/response/parse_success_no_results.dart","../utils/parse_decoder.dart","../utils/parse_encoder.dart","../utils/parse_logger.dart","../utils/parse_login_helpers.dart","../utils/parse_utils.dart","../base/parse_constants.dart"],"names":[],"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","file":"../../../../../../../../../../../../packages/parse_server_sdk/src/network/parse_dio_client.dart.lib.js"}');
  // Exports:
  return {
    src__network__parse_dio_client: parse_dio_client,
    src__network__parse_http_client: parse_http_client,
    parse_server_sdk: parse_server_sdk
  };
}));

//# sourceMappingURL=parse_dio_client.dart.lib.js.map
