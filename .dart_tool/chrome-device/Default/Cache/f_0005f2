define(['dart_sdk', 'packages/idb_shim/src/common/common_key_range.dart', 'packages/sembast/src/sembast_codec.dart', 'packages/sembast_web/src/web_defs.dart', 'packages/sembast/src/key_utils.dart', 'packages/idb_shim/utils/idb_import_export.dart', 'packages/idb_shim/src/sembast/sembast_memory_compat.dart'], (function load__packages__sembast_web__src__jdb_factory_idb_dart(dart_sdk, packages__idb_shim__src__common__common_key_range$46dart, packages__sembast__src__sembast_codec$46dart, packages__sembast_web__src__web_defs$46dart, packages__sembast__src__key_utils$46dart, packages__idb_shim__utils__idb_import_export$46dart, packages__idb_shim__src__sembast__sembast_memory_compat$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const async = dart_sdk.async;
  const collection = dart_sdk.collection;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const idb = packages__idb_shim__src__common__common_key_range$46dart.idb;
  const jdb = packages__sembast__src__sembast_codec$46dart.src__jdb;
  const database_factory_mixin = packages__sembast__src__sembast_codec$46dart.src__database_factory_mixin;
  const json_encodable_codec = packages__sembast__src__sembast_codec$46dart.src__json_encodable_codec;
  const store_ref = packages__sembast__src__sembast_codec$46dart.src__api__store_ref;
  const storage = packages__sembast__src__sembast_codec$46dart.src__storage;
  const sembast_jdb = packages__sembast__src__sembast_codec$46dart.src__sembast_jdb;
  const web_defs = packages__sembast_web__src__web_defs$46dart.src__web_defs;
  const key_utils = packages__sembast__src__key_utils$46dart.src__key_utils;
  const idb_import_export = packages__idb_shim__utils__idb_import_export$46dart.utils__idb_import_export;
  const idb_client_memory = packages__idb_shim__src__sembast__sembast_memory_compat$46dart.idb_client_memory;
  var jdb_factory_idb = Object.create(dart.library);
  var $isEmpty = dartx.isEmpty;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $add = dartx.add;
  var $remove = dartx.remove;
  var $toString = dartx.toString;
  var $toList = dartx.toList;
  var $isNotEmpty = dartx.isNotEmpty;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    StringL: () => (T.StringL = dart.constFn(dart.legacy(core.String)))(),
    JdbDatabaseIdbL: () => (T.JdbDatabaseIdbL = dart.constFn(dart.legacy(jdb_factory_idb.JdbDatabaseIdb)))(),
    ListOfJdbDatabaseIdbL: () => (T.ListOfJdbDatabaseIdbL = dart.constFn(core.List$(T.JdbDatabaseIdbL())))(),
    ListLOfJdbDatabaseIdbL: () => (T.ListLOfJdbDatabaseIdbL = dart.constFn(dart.legacy(T.ListOfJdbDatabaseIdbL())))(),
    IdentityMapOfStringL$ListLOfJdbDatabaseIdbL: () => (T.IdentityMapOfStringL$ListLOfJdbDatabaseIdbL = dart.constFn(_js_helper.IdentityMap$(T.StringL(), T.ListLOfJdbDatabaseIdbL())))(),
    JSArrayOfStringL: () => (T.JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(T.StringL())))(),
    VersionChangeEventL: () => (T.VersionChangeEventL = dart.constFn(dart.legacy(idb.VersionChangeEvent)))(),
    VersionChangeEventLToNull: () => (T.VersionChangeEventLToNull = dart.constFn(dart.fnType(core.Null, [T.VersionChangeEventL()])))(),
    JSArrayOfJdbDatabaseIdbL: () => (T.JSArrayOfJdbDatabaseIdbL = dart.constFn(_interceptors.JSArray$(T.JdbDatabaseIdbL())))(),
    JdbDatabaseL: () => (T.JdbDatabaseL = dart.constFn(dart.legacy(jdb.JdbDatabase)))(),
    MapL: () => (T.MapL = dart.constFn(dart.legacy(core.Map)))(),
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))(),
    boolL: () => (T.boolL = dart.constFn(dart.legacy(core.bool)))(),
    StreamControllerOfintL: () => (T.StreamControllerOfintL = dart.constFn(async.StreamController$(T.intL())))(),
    JdbReadEntryL: () => (T.JdbReadEntryL = dart.constFn(dart.legacy(jdb.JdbReadEntry)))(),
    StreamControllerOfJdbReadEntryL: () => (T.StreamControllerOfJdbReadEntryL = dart.constFn(async.StreamController$(T.JdbReadEntryL())))(),
    CursorWithValueL: () => (T.CursorWithValueL = dart.constFn(dart.legacy(idb.CursorWithValue)))(),
    CursorWithValueLToNull: () => (T.CursorWithValueLToNull = dart.constFn(dart.fnType(core.Null, [T.CursorWithValueL()])))(),
    FutureOfNull: () => (T.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    FutureLOfNull: () => (T.FutureLOfNull = dart.constFn(dart.legacy(T.FutureOfNull())))(),
    VoidToFutureLOfNull: () => (T.VoidToFutureLOfNull = dart.constFn(dart.fnType(T.FutureLOfNull(), [])))(),
    JdbInfoEntryL: () => (T.JdbInfoEntryL = dart.constFn(dart.legacy(jdb.JdbInfoEntry)))(),
    IdentityMapOfStringL$dynamic: () => (T.IdentityMapOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(T.StringL(), dart.dynamic)))(),
    JSArrayOfintL: () => (T.JSArrayOfintL = dart.constFn(_interceptors.JSArray$(T.intL())))(),
    ListOfintL: () => (T.ListOfintL = dart.constFn(core.List$(T.intL())))(),
    ListLOfintL: () => (T.ListLOfintL = dart.constFn(dart.legacy(T.ListOfintL())))(),
    ListOfStringL: () => (T.ListOfStringL = dart.constFn(core.List$(T.StringL())))(),
    intLToStringL: () => (T.intLToStringL = dart.constFn(dart.fnType(T.StringL(), [T.intL()])))(),
    ListLOfStringL: () => (T.ListLOfStringL = dart.constFn(dart.legacy(T.ListOfStringL())))(),
    JdbEntryL: () => (T.JdbEntryL = dart.constFn(dart.legacy(jdb.JdbEntry)))(),
    StreamControllerOfJdbEntryL: () => (T.StreamControllerOfJdbEntryL = dart.constFn(async.StreamController$(T.JdbEntryL())))(),
    StorageJdbWriteResultL: () => (T.StorageJdbWriteResultL = dart.constFn(dart.legacy(sembast_jdb.StorageJdbWriteResult)))(),
    MapOfStringL$dynamic: () => (T.MapOfStringL$dynamic = dart.constFn(core.Map$(T.StringL(), dart.dynamic)))(),
    MapLOfStringL$dynamic: () => (T.MapLOfStringL$dynamic = dart.constFn(dart.legacy(T.MapOfStringL$dynamic())))(),
    JSArrayOfMapLOfStringL$dynamic: () => (T.JSArrayOfMapLOfStringL$dynamic = dart.constFn(_interceptors.JSArray$(T.MapLOfStringL$dynamic())))(),
    ListOfMapLOfStringL$dynamic: () => (T.ListOfMapLOfStringL$dynamic = dart.constFn(core.List$(T.MapLOfStringL$dynamic())))(),
    ListLOfMapLOfStringL$dynamic: () => (T.ListLOfMapLOfStringL$dynamic = dart.constFn(dart.legacy(T.ListOfMapLOfStringL$dynamic())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  var I = [
    "package:sembast_web/src/jdb_factory_idb.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast_web-1.2.0+1/lib/src/jdb_factory_idb.dart"
  ];
  var idbFactory$ = dart.privateName(jdb_factory_idb, "JdbFactoryIdb.idbFactory");
  var databases = dart.privateName(jdb_factory_idb, "JdbFactoryIdb.databases");
  var _lastId = dart.privateName(jdb_factory_idb, "_lastId");
  jdb_factory_idb.JdbFactoryIdb = class JdbFactoryIdb extends core.Object {
    get idbFactory() {
      return this[idbFactory$];
    }
    set idbFactory(value) {
      super.idbFactory = value;
    }
    get databases() {
      return this[databases];
    }
    set databases(value) {
      super.databases = value;
    }
    open(path, opts) {
      let options = opts && 'options' in opts ? opts.options : null;
      return async.async(T.JdbDatabaseL(), (function* open() {
        let t3, t2, t1, t0;
        let id = this[_lastId] = dart.notNull(this[_lastId]) + 1;
        if (dart.test(jdb_factory_idb._debug)) {
          core.print("[idb-" + dart.str(id) + "] opening " + dart.str(path));
        }
        let iDb = (yield this.idbFactory.open(path, {version: 2, onUpgradeNeeded: dart.fn(event => {
            if (dart.test(jdb_factory_idb._debug)) {
              core.print("[idb-" + dart.str(id) + "] migrating " + dart.str(event.oldVersion) + " -> " + dart.str(event.newVersion));
            }
            let db = event.database;
            if (dart.notNull(event.oldVersion) < 2) {
              db.createObjectStore("info");
              let entryStore = db.createObjectStore("entry", {autoIncrement: true});
              entryStore.createIndex("record", T.JSArrayOfStringL().of(["store", "key"]));
              entryStore.createIndex("deleted", "deleted", {multiEntry: true});
            }
          }, T.VersionChangeEventLToNull())}));
        if (iDb != null) {
          let db = new jdb_factory_idb.JdbDatabaseIdb.new(this, iDb, id, path, options);
          if (path != null) {
            if (dart.test(this.databases[$isEmpty])) {
              this.start();
            }
            let list = (t0 = this.databases, t1 = path, t2 = t0[$_get](t1), t2 == null ? (t3 = T.JSArrayOfJdbDatabaseIdbL().of([]), t0[$_set](t1, t3), t3) : t2);
            list[$add](db);
          }
          return db;
        }
        return null;
      }).bind(this));
    }
    delete(path) {
      return async.async(dart.dynamic, (function* $delete() {
        try {
          if (dart.test(jdb_factory_idb._debug)) {
            core.print("[idb] deleting " + dart.str(path));
          }
          if (path != null) {
            this.databases[$remove](path);
            this.checkAllClosed();
          }
          yield this.idbFactory.deleteDatabase(path);
          this.notifyRevision(new web_defs.StorageRevision.new(path, null));
          if (dart.test(jdb_factory_idb._debug)) {
            core.print("[idb] deleted " + dart.str(path));
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          core.print(e);
        }
      }).bind(this));
    }
    exists(path) {
      return async.async(T.boolL(), (function* exists() {
        let db = null;
        try {
          db = (yield this.idbFactory.open(path));
          let meta = (yield db.transaction("info", "readonly").objectStore("info").getObject("meta"));
          if (T.MapL().is(meta) && T.intL().is(meta[$_get]("sembast"))) {
            return true;
          }
        } catch (e) {
          let _ = dart.getThrown(e);
        } finally {
          try {
            db.close();
          } catch (e$) {
            let _ = dart.getThrown(e$);
          }
        }
        return false;
      }).bind(this));
    }
    toString() {
      return "JdbFactoryIdb(" + dart.str(this.idbFactory) + ")";
    }
    checkAllClosed() {
      if (dart.test(this.databases[$isEmpty])) {
        this.stop();
      }
    }
    start() {
    }
    stop() {
    }
    notifyRevision(storageRevision) {
      if (dart.test(web_defs.debugStorageNotification)) {
        core.print("notifyRevision " + dart.str(storageRevision) + ": not supported");
      }
    }
  };
  (jdb_factory_idb.JdbFactoryIdb.new = function(idbFactory) {
    this[_lastId] = 0;
    this[databases] = new (T.IdentityMapOfStringL$ListLOfJdbDatabaseIdbL()).new();
    this[idbFactory$] = idbFactory;
    ;
  }).prototype = jdb_factory_idb.JdbFactoryIdb.prototype;
  dart.addTypeTests(jdb_factory_idb.JdbFactoryIdb);
  dart.addTypeCaches(jdb_factory_idb.JdbFactoryIdb);
  jdb_factory_idb.JdbFactoryIdb[dart.implements] = () => [jdb.JdbFactory];
  dart.setMethodSignature(jdb_factory_idb.JdbFactoryIdb, () => ({
    __proto__: dart.getMethods(jdb_factory_idb.JdbFactoryIdb.__proto__),
    open: dart.fnType(dart.legacy(async.Future$(dart.legacy(jdb.JdbDatabase))), [dart.legacy(core.String)], {options: dart.legacy(database_factory_mixin.DatabaseOpenOptions)}, {}),
    delete: dart.fnType(dart.legacy(async.Future), [dart.legacy(core.String)]),
    exists: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [dart.legacy(core.String)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    checkAllClosed: dart.fnType(dart.void, []),
    start: dart.fnType(dart.void, []),
    stop: dart.fnType(dart.void, []),
    notifyRevision: dart.fnType(dart.void, [dart.legacy(web_defs.StorageRevision)])
  }));
  dart.setLibraryUri(jdb_factory_idb.JdbFactoryIdb, I[0]);
  dart.setFieldSignature(jdb_factory_idb.JdbFactoryIdb, () => ({
    __proto__: dart.getFields(jdb_factory_idb.JdbFactoryIdb.__proto__),
    [_lastId]: dart.fieldType(dart.legacy(core.int)),
    idbFactory: dart.finalFieldType(dart.legacy(idb.IdbFactory)),
    databases: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.List$(dart.legacy(jdb_factory_idb.JdbDatabaseIdb))))))
  }));
  dart.defineExtensionMethods(jdb_factory_idb.JdbFactoryIdb, ['toString']);
  var _revisionUpdateController = dart.privateName(jdb_factory_idb, "_revisionUpdateController");
  var _closed = dart.privateName(jdb_factory_idb, "_closed");
  var _factory$ = dart.privateName(jdb_factory_idb, "_factory");
  var _idbDatabase$ = dart.privateName(jdb_factory_idb, "_idbDatabase");
  var _id$ = dart.privateName(jdb_factory_idb, "_id");
  var _path$ = dart.privateName(jdb_factory_idb, "_path");
  var _options$ = dart.privateName(jdb_factory_idb, "_options");
  var _entryFromCursor = dart.privateName(jdb_factory_idb, "_entryFromCursor");
  var _debugPrefix = dart.privateName(jdb_factory_idb, "_debugPrefix");
  var _txnGetInfoEntry = dart.privateName(jdb_factory_idb, "_txnGetInfoEntry");
  var _txnSetInfoEntry = dart.privateName(jdb_factory_idb, "_txnSetInfoEntry");
  var _txnAddEntries = dart.privateName(jdb_factory_idb, "_txnAddEntries");
  var _txnPutRevision = dart.privateName(jdb_factory_idb, "_txnPutRevision");
  var _txnPutDeltaMinRevision = dart.privateName(jdb_factory_idb, "_txnPutDeltaMinRevision");
  var _txnGetRevision = dart.privateName(jdb_factory_idb, "_txnGetRevision");
  var _storeLastIdKey = dart.privateName(jdb_factory_idb, "_storeLastIdKey");
  var _txnStoreToDebugMap = dart.privateName(jdb_factory_idb, "_txnStoreToDebugMap");
  var _txnGetDeltaMinRevision = dart.privateName(jdb_factory_idb, "_txnGetDeltaMinRevision");
  jdb_factory_idb.JdbDatabaseIdb = class JdbDatabaseIdb extends core.Object {
    [_entryFromCursor](cwv) {
      let t3, t3$, t3$0, t3$1, t3$2, t3$3;
      let map = T.MapL().as(cwv.value);
      let value = map[$_get]("value");
      if ((t3$ = (t3 = this[_options$], t3 == null ? null : t3.codec), t3$ == null ? null : t3$.codec) != null && T.StringL().is(value)) {
        value = this[_options$].codec.codec.decode(T.StringL().as(value));
      }
      let decodedValue = (t3$2 = (t3$1 = (t3$0 = this[_options$], t3$0 == null ? null : t3$0.codec), t3$1 == null ? null : t3$1.jsonEncodableCodec), t3$2 == null ? json_encodable_codec.sembastDefaultJsonEncodableCodec : t3$2).decode(value);
      let entry = (t3$3 = new jdb.JdbReadEntry.new(), (() => {
        t3$3.id = T.intL().as(cwv.key);
        t3$3.record = store_ref.StoreRef.new(T.StringL().as(map[$_get]("store"))).record(map[$_get]("key"));
        t3$3.value = decodedValue;
        t3$3.deleted = dart.equals(map[$_get]("deleted"), 1);
        return t3$3;
      })());
      return entry;
    }
    get [_debugPrefix]() {
      return "[idb-" + dart.str(this[_id$]) + "]";
    }
    get entries() {
      let ctlr = null;
      ctlr = T.StreamControllerOfJdbReadEntryL().new({onListen: dart.fn(() => async.async(core.Null, (function*() {
          yield this[_idbDatabase$].transaction("entry", "readonly").objectStore("entry").openCursor({autoAdvance: true}).listen(dart.fn(cwv => {
            let entry = this[_entryFromCursor](cwv);
            if (dart.test(jdb_factory_idb._debug)) {
              core.print(dart.str(this[_debugPrefix]) + " reading entry " + dart.str(entry));
            }
            ctlr.add(entry);
          }, T.CursorWithValueLToNull())).asFuture(dart.dynamic);
          yield ctlr.close();
        }).bind(this)), T.VoidToFutureLOfNull())});
      return ctlr.stream;
    }
    close() {
      let t3;
      if (!dart.test(this[_closed])) {
        if (this[_path$] != null) {
          let list = this[_factory$].databases[$_get](this[_path$]);
          if (list != null) {
            list[$remove](this);
            if (dart.test(list[$isEmpty])) {
              this[_factory$].databases[$remove](this[_path$]);
            }
            this[_factory$].checkAllClosed();
          }
        }
        if (dart.test(jdb_factory_idb._debug)) {
          core.print(dart.str(this[_debugPrefix]) + " closing");
        }
        this[_closed] = true;
        t3 = this[_idbDatabase$];
        t3 == null ? null : t3.close();
      }
    }
    getInfoEntry(id) {
      return async.async(T.JdbInfoEntryL(), (function* getInfoEntry() {
        let txn = this[_idbDatabase$].transaction("info", "readonly");
        return this[_txnGetInfoEntry](txn, id);
      }).bind(this));
    }
    [_txnGetInfoEntry](txn, id) {
      return async.async(T.JdbInfoEntryL(), function* _txnGetInfoEntry() {
        let t3;
        let info = (yield txn.objectStore("info").getObject(id));
        t3 = new jdb.JdbInfoEntry.new();
        return (() => {
          t3.id = id;
          t3.value = info;
          return t3;
        })();
      });
    }
    setInfoEntry(entry) {
      return async.async(dart.dynamic, (function* setInfoEntry() {
        let txn = this[_idbDatabase$].transaction("info", "readwrite");
        yield this[_txnSetInfoEntry](txn, entry);
        yield txn.completed;
      }).bind(this));
    }
    [_txnSetInfoEntry](txn, entry) {
      return async.async(dart.dynamic, function* _txnSetInfoEntry() {
        yield txn.objectStore("info").put(entry.value, entry.id);
      });
    }
    addEntries(entries) {
      return async.async(dart.dynamic, (function* addEntries() {
        let txn = this[_idbDatabase$].transaction(T.JSArrayOfStringL().of(["entry", "info"]), "readwrite");
        yield this[_txnAddEntries](txn, entries);
        yield txn.completed;
      }).bind(this));
    }
    [_txnPutRevision](txn, revision) {
      return async.async(dart.dynamic, function* _txnPutRevision() {
        let infoStore = txn.objectStore("info");
        yield infoStore.put(revision, "revision");
      });
    }
    [_txnPutDeltaMinRevision](txn, revision) {
      return async.async(dart.dynamic, function* _txnPutDeltaMinRevision() {
        let infoStore = txn.objectStore("info");
        yield infoStore.put(revision, "deltaMinRevision");
      });
    }
    [_txnGetRevision](txn) {
      return async.async(T.intL(), function* _txnGetRevision() {
        let infoStore = txn.objectStore("info");
        return T.intL().as(yield infoStore.getObject("revision"));
      });
    }
    [_txnAddEntries](txn, entries) {
      return async.async(T.intL(), (function* _txnAddEntries() {
        let t3, t3$, t3$0, t3$1, t3$2, t4, t4$, t4$0, t4$1;
        let objectStore = txn.objectStore("entry");
        let index = objectStore.index("record");
        let lastEntryId = null;
        for (let jdbWriteEntry of entries) {
          let store = jdbWriteEntry.record.store.name;
          let key = jdbWriteEntry.record.key;
          let idbKey = (yield index.getKey([store, key]));
          if (idbKey != null) {
            if (dart.test(jdb_factory_idb._debug)) {
              core.print(dart.str(this[_debugPrefix]) + " deleting entry " + dart.str(idbKey));
            }
            yield objectStore.delete(idbKey);
          }
          let value = (t3$0 = (t3$ = (t3 = this[_options$], t3 == null ? null : t3.codec), t3$ == null ? null : t3$.jsonEncodableCodec), t3$0 == null ? json_encodable_codec.sembastDefaultJsonEncodableCodec : t3$0).encode(jdbWriteEntry.value);
          if ((t3$2 = (t3$1 = this[_options$], t3$1 == null ? null : t3$1.codec), t3$2 == null ? null : t3$2.codec) != null && value != null) {
            value = this[_options$].codec.codec.encode(value);
          }
          lastEntryId = T.intL().as(yield objectStore.add((() => {
            let t3 = new (T.IdentityMapOfStringL$dynamic()).new();
            t3[$_set]("store", store);
            t3[$_set]("key", key);
            t3[$_set]("value", value);
            if (dart.test((t4 = jdbWriteEntry.deleted, t4 == null ? false : t4))) t3[$_set]("deleted", 1);
            return t3;
          })()));
          t4$1 = (t4$0 = (t4$ = jdbWriteEntry, t4$ == null ? null : t4$.txnRecord), t4$0 == null ? null : t4$0.record);
          t4$1 == null ? null : t4$1.revision = lastEntryId;
          if (dart.test(jdb_factory_idb._debug)) {
            core.print(dart.str(this[_debugPrefix]) + " added entry " + dart.str(lastEntryId) + " " + dart.str(jdbWriteEntry));
          }
        }
        return lastEntryId;
      }).bind(this));
    }
    notifyRevision(revision) {
      this[_factory$].notifyRevision(new web_defs.StorageRevision.new(this[_path$], revision));
    }
    toString() {
      return "JdbDatabaseIdb(" + dart.str(this[_id$]) + ", " + dart.str(this[_path$]) + ")";
    }
    [_storeLastIdKey](store) {
      return storage.jdbStoreLastIdKey(store);
    }
    generateUniqueIntKeys(store, count) {
      return async.async(T.ListLOfintL(), (function* generateUniqueIntKeys() {
        let t4;
        let keys = T.JSArrayOfintL().of([]);
        let txn = this[_idbDatabase$].transaction(T.JSArrayOfStringL().of(["entry", "info"]), "readonly");
        let infoStore = txn.objectStore("info");
        let infoKey = this[_storeLastIdKey](store);
        let lastId = (t4 = T.intL().as(yield infoStore.getObject(infoKey)), t4 == null ? 0 : t4);
        for (let i = 0; i < dart.notNull(count); i = i + 1) {
          lastId = dart.notNull(lastId) + 1;
          keys[$add](lastId);
        }
        yield txn.completed;
        return keys;
      }).bind(this));
    }
    generateUniqueStringKeys(store, count) {
      return async.async(T.ListLOfStringL(), function* generateUniqueStringKeys() {
        return T.ListOfStringL().generate(count, dart.fn(index => key_utils.generateStringKey(), T.intLToStringL()))[$toList]();
      });
    }
    entriesAfterRevision(revision) {
      revision == null ? revision = 0 : null;
      let ctlr = null;
      ctlr = T.StreamControllerOfJdbEntryL().new({onListen: dart.fn(() => async.async(core.Null, (function*() {
          let keyRange = idb.KeyRange.lowerBound(revision, true);
          yield this[_idbDatabase$].transaction("entry", "readonly").objectStore("entry").openCursor({range: keyRange, autoAdvance: true}).listen(dart.fn(cwv => {
            let entry = this[_entryFromCursor](cwv);
            if (dart.test(jdb_factory_idb._debug)) {
              core.print(dart.str(this[_debugPrefix]) + " reading entry after revision " + dart.str(entry));
            }
            ctlr.add(entry);
          }, T.CursorWithValueLToNull())).asFuture(dart.dynamic);
          yield ctlr.close();
        }).bind(this)), T.VoidToFutureLOfNull())});
      return ctlr.stream;
    }
    getRevision() {
      return async.async(T.intL(), (function* getRevision() {
        let t4;
        return T.intL().as((t4 = (yield this.getInfoEntry("revision")), t4 == null ? null : t4.value));
      }).bind(this));
    }
    get revisionUpdate() {
      return this[_revisionUpdateController].stream;
    }
    addRevision(revision) {
      this[_revisionUpdateController].add(revision);
    }
    writeIfRevision(query) {
      return async.async(T.StorageJdbWriteResultL(), (function* writeIfRevision() {
        let t4, t4$, t4$0, t4$1, t4$2, t4$3;
        let txn = this[_idbDatabase$].transaction(T.JSArrayOfStringL().of(["info", "entry"]), "readwrite");
        let expectedRevision = (t4 = query.revision, t4 == null ? 0 : t4);
        let readRevision = (t4$ = (yield this[_txnGetRevision](txn)), t4$ == null ? 0 : t4$);
        let success = expectedRevision == readRevision;
        let shouldNotifyRevision = null;
        if (success) {
          if (dart.test((t4$1 = (t4$0 = query.entries, t4$0 == null ? null : t4$0[$isNotEmpty]), t4$1 == null ? false : t4$1))) {
            readRevision = (yield this[_txnAddEntries](txn, query.entries));
            if (readRevision != null) {
              yield this[_txnPutRevision](txn, readRevision);
              shouldNotifyRevision = readRevision;
            }
          }
          if (dart.test((t4$3 = (t4$2 = query.infoEntries, t4$2 == null ? null : t4$2[$isNotEmpty]), t4$3 == null ? false : t4$3))) {
            for (let infoEntry of query.infoEntries) {
              yield this[_txnSetInfoEntry](txn, infoEntry);
            }
          }
        }
        yield txn.completed;
        if (shouldNotifyRevision != null) {
          this.notifyRevision(shouldNotifyRevision);
        }
        return new sembast_jdb.StorageJdbWriteResult.new({revision: readRevision, query: query, success: success});
      }).bind(this));
    }
    exportToMap() {
      return async.async(T.MapLOfStringL$dynamic(), (function* exportToMap() {
        let txn = this[_idbDatabase$].transaction(T.JSArrayOfStringL().of(["info", "entry"]), "readonly");
        let map = new (T.IdentityMapOfStringL$dynamic()).new();
        map[$_set]("infos", yield this[_txnStoreToDebugMap](txn, "info"));
        map[$_set]("entries", yield this[_txnStoreToDebugMap](txn, "entry"));
        return map;
      }).bind(this));
    }
    [_txnStoreToDebugMap](txn, name) {
      return async.async(T.ListLOfMapLOfStringL$dynamic(), function* _txnStoreToDebugMap() {
        let list = T.JSArrayOfMapLOfStringL$dynamic().of([]);
        let store = txn.objectStore(name);
        yield store.openCursor({autoAdvance: true}).listen(dart.fn(cwv => {
          let t4, t4$;
          let value = cwv.value;
          if (T.MapL().is(value)) {
            if (dart.equals(dart.dsend(value, '_get', ["store"]), "_main")) {
              value = (t4 = collection.LinkedHashMap.from(T.MapL().as(value)), (() => {
                t4[$remove]("store");
                return t4;
              })());
            }
            if (dart.equals(dart.dsend(value, '_get', ["deleted"]), 1)) {
              value = (t4$ = collection.LinkedHashMap.from(T.MapL().as(value)), (() => {
                t4$[$_set]("deleted", true);
                return t4$;
              })());
            }
          }
          list[$add](new (T.IdentityMapOfStringL$dynamic()).from(["id", cwv.key, "value", value]));
        }, T.CursorWithValueLToNull())).asFuture(dart.dynamic);
        return list;
      });
    }
    compact() {
      return async.async(dart.dynamic, (function* compact() {
        let txn = this[_idbDatabase$].transaction(T.JSArrayOfStringL().of(["info", "entry"]), "readwrite");
        let deltaMinRevision = (yield this[_txnGetDeltaMinRevision](txn));
        let currentRevision = (yield this[_txnGetRevision](txn));
        let newDeltaMinRevision = deltaMinRevision;
        let deleteIndex = txn.objectStore("entry").index("deleted");
        yield deleteIndex.openCursor({autoAdvance: true}).listen(dart.fn(cwv => {
          if (!T.intL().is(cwv.key)) dart.assertFailed(null, I[1], 467, 14, "cwv.key is int");
          let revision = T.intL().as(cwv.primaryKey);
          if (dart.notNull(revision) > dart.notNull(newDeltaMinRevision) && dart.notNull(revision) <= dart.notNull(currentRevision)) {
            newDeltaMinRevision = revision;
            cwv.delete();
          }
        }, T.CursorWithValueLToNull())).asFuture(dart.dynamic);
        if (dart.notNull(newDeltaMinRevision) > dart.notNull(deltaMinRevision)) {
          yield this[_txnPutDeltaMinRevision](txn, newDeltaMinRevision);
        }
        yield txn.completed;
      }).bind(this));
    }
    getDeltaMinRevision() {
      return async.async(T.intL(), (function* getDeltaMinRevision() {
        let t4, t4$;
        t4$ = T.intL().as((t4 = (yield this.getInfoEntry("deltaMinRevision")), t4 == null ? null : t4.value));
        return t4$ == null ? 0 : t4$;
      }).bind(this));
    }
    [_txnGetDeltaMinRevision](txn) {
      return async.async(T.intL(), function* _txnGetDeltaMinRevision() {
        let t4;
        t4 = T.intL().as(yield txn.objectStore("info").getObject("deltaMinRevision"));
        return t4 == null ? 0 : t4;
      });
    }
    clearAll() {
      return async.async(dart.dynamic, (function* clearAll() {
        let txn = this[_idbDatabase$].transaction(T.JSArrayOfStringL().of(["info", "entry"]), "readwrite");
        yield txn.objectStore("info").clear();
        yield txn.objectStore("entry").clear();
        yield txn.completed;
      }).bind(this));
    }
    sdbExportDatabase() {
      return async.async(T.MapL(), (function* sdbExportDatabase() {
        return idb_import_export.sdbExportDatabase(this[_idbDatabase$]);
      }).bind(this));
    }
  };
  (jdb_factory_idb.JdbDatabaseIdb.new = function(_factory, _idbDatabase, _id, _path, _options) {
    this[_revisionUpdateController] = T.StreamControllerOfintL().new();
    this[_closed] = false;
    this[_factory$] = _factory;
    this[_idbDatabase$] = _idbDatabase;
    this[_id$] = _id;
    this[_path$] = _path;
    this[_options$] = _options;
    ;
  }).prototype = jdb_factory_idb.JdbDatabaseIdb.prototype;
  dart.addTypeTests(jdb_factory_idb.JdbDatabaseIdb);
  dart.addTypeCaches(jdb_factory_idb.JdbDatabaseIdb);
  jdb_factory_idb.JdbDatabaseIdb[dart.implements] = () => [jdb.JdbDatabase];
  dart.setMethodSignature(jdb_factory_idb.JdbDatabaseIdb, () => ({
    __proto__: dart.getMethods(jdb_factory_idb.JdbDatabaseIdb.__proto__),
    [_entryFromCursor]: dart.fnType(dart.legacy(jdb.JdbReadEntry), [dart.legacy(idb.CursorWithValue)]),
    close: dart.fnType(dart.void, []),
    getInfoEntry: dart.fnType(dart.legacy(async.Future$(dart.legacy(jdb.JdbInfoEntry))), [dart.legacy(core.String)]),
    [_txnGetInfoEntry]: dart.fnType(dart.legacy(async.Future$(dart.legacy(jdb.JdbInfoEntry))), [dart.legacy(idb.Transaction), dart.legacy(core.String)]),
    setInfoEntry: dart.fnType(dart.legacy(async.Future), [dart.legacy(jdb.JdbInfoEntry)]),
    [_txnSetInfoEntry]: dart.fnType(dart.legacy(async.Future), [dart.legacy(idb.Transaction), dart.legacy(jdb.JdbInfoEntry)]),
    addEntries: dart.fnType(dart.legacy(async.Future), [dart.legacy(core.List$(dart.legacy(jdb.JdbWriteEntry)))]),
    [_txnPutRevision]: dart.fnType(dart.legacy(async.Future), [dart.legacy(idb.Transaction), dart.legacy(core.int)]),
    [_txnPutDeltaMinRevision]: dart.fnType(dart.legacy(async.Future), [dart.legacy(idb.Transaction), dart.legacy(core.int)]),
    [_txnGetRevision]: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(idb.Transaction)]),
    [_txnAddEntries]: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(idb.Transaction), dart.legacy(core.List$(dart.legacy(jdb.JdbWriteEntry)))]),
    notifyRevision: dart.fnType(dart.void, [dart.legacy(core.int)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    [_storeLastIdKey]: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)]),
    generateUniqueIntKeys: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(core.int))))), [dart.legacy(core.String), dart.legacy(core.int)]),
    generateUniqueStringKeys: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(core.String))))), [dart.legacy(core.String), dart.legacy(core.int)]),
    entriesAfterRevision: dart.fnType(dart.legacy(async.Stream$(dart.legacy(jdb.JdbEntry))), [dart.legacy(core.int)]),
    getRevision: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), []),
    addRevision: dart.fnType(dart.void, [dart.legacy(core.int)]),
    writeIfRevision: dart.fnType(dart.legacy(async.Future$(dart.legacy(sembast_jdb.StorageJdbWriteResult))), [dart.legacy(sembast_jdb.StorageJdbWriteQuery)]),
    exportToMap: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), []),
    [_txnStoreToDebugMap]: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))))), [dart.legacy(idb.Transaction), dart.legacy(core.String)]),
    compact: dart.fnType(dart.legacy(async.Future), []),
    getDeltaMinRevision: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), []),
    [_txnGetDeltaMinRevision]: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(idb.Transaction)]),
    clearAll: dart.fnType(dart.legacy(async.Future), []),
    sdbExportDatabase: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map))), [])
  }));
  dart.setGetterSignature(jdb_factory_idb.JdbDatabaseIdb, () => ({
    __proto__: dart.getGetters(jdb_factory_idb.JdbDatabaseIdb.__proto__),
    [_debugPrefix]: dart.legacy(core.String),
    entries: dart.legacy(async.Stream$(dart.legacy(jdb.JdbReadEntry))),
    revisionUpdate: dart.legacy(async.Stream$(dart.legacy(core.int)))
  }));
  dart.setLibraryUri(jdb_factory_idb.JdbDatabaseIdb, I[0]);
  dart.setFieldSignature(jdb_factory_idb.JdbDatabaseIdb, () => ({
    __proto__: dart.getFields(jdb_factory_idb.JdbDatabaseIdb.__proto__),
    [_idbDatabase$]: dart.finalFieldType(dart.legacy(idb.Database)),
    [_id$]: dart.finalFieldType(dart.legacy(core.int)),
    [_path$]: dart.finalFieldType(dart.legacy(core.String)),
    [_revisionUpdateController]: dart.finalFieldType(dart.legacy(async.StreamController$(dart.legacy(core.int)))),
    [_options$]: dart.finalFieldType(dart.legacy(database_factory_mixin.DatabaseOpenOptions)),
    [_factory$]: dart.finalFieldType(dart.legacy(jdb_factory_idb.JdbFactoryIdb)),
    [_closed]: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(jdb_factory_idb.JdbDatabaseIdb, ['toString']);
  dart.copyProperties(jdb_factory_idb, {
    get jdbFactoryIdbMemory() {
      return jdb_factory_idb._jdbFactoryIdbMemory;
    }
  });
  dart.defineLazy(jdb_factory_idb, {
    /*jdb_factory_idb._debug*/get _debug() {
      return false;
    },
    set _debug(_) {},
    /*jdb_factory_idb._infoStore*/get _infoStore() {
      return "info";
    },
    /*jdb_factory_idb._entryStore*/get _entryStore() {
      return "entry";
    },
    /*jdb_factory_idb._storePath*/get _storePath() {
      return "store";
    },
    /*jdb_factory_idb._keyPath*/get _keyPath() {
      return "key";
    },
    /*jdb_factory_idb._recordIndex*/get _recordIndex() {
      return "record";
    },
    /*jdb_factory_idb._deletedIndex*/get _deletedIndex() {
      return "deleted";
    },
    /*jdb_factory_idb._valuePath*/get _valuePath() {
      return "value";
    },
    /*jdb_factory_idb._deletedPath*/get _deletedPath() {
      return "deleted";
    },
    /*jdb_factory_idb._revisionKey*/get _revisionKey() {
      return "revision";
    },
    /*jdb_factory_idb._jdbFactoryIdbMemory*/get _jdbFactoryIdbMemory() {
      return new jdb_factory_idb.JdbFactoryIdb.new(idb_client_memory.idbFactoryMemory);
    },
    set _jdbFactoryIdbMemory(_) {}
  }, true);
  dart.trackLibraries("packages/sembast_web/src/jdb_factory_idb.dart", {
    "package:sembast_web/src/jdb_factory_idb.dart": jdb_factory_idb
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["jdb_factory_idb.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../packages/sembast_web/src/jdb_factory_idb.dart.lib.js"}');
  // Exports:
  return {
    src__jdb_factory_idb: jdb_factory_idb
  };
}));

//# sourceMappingURL=jdb_factory_idb.dart.lib.js.map
