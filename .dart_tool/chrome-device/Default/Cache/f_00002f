define(['dart_sdk', 'packages/sembast/src/type_adapter_impl.dart', 'packages/sembast/src/api/client.dart', 'packages/sembast/src/api/exception.dart', 'packages/sembast/src/sort.dart', 'packages/sembast/src/cooperator.dart', 'packages/sembast/src/api/log_level.dart', 'packages/sembast/src/api/database_mode.dart', 'packages/synchronized/src/reentrant_lock.dart', 'packages/sembast/src/api/v2/transaction.dart', 'packages/sembast/src/key_utils.dart', 'packages/sembast/src/timestamp_impl.dart', 'packages/sembast/src/blob_impl.dart'], (function load__packages__sembast__src__sembast_codec_dart(dart_sdk, packages__sembast__src__type_adapter_impl$46dart, packages__sembast__src__api__client$46dart, packages__sembast__src__api__exception$46dart, packages__sembast__src__sort$46dart, packages__sembast__src__cooperator$46dart, packages__sembast__src__api__log_level$46dart, packages__sembast__src__api__database_mode$46dart, packages__synchronized__src__reentrant_lock$46dart, packages__sembast__src__api__v2__transaction$46dart, packages__sembast__src__key_utils$46dart, packages__sembast__src__timestamp_impl$46dart, packages__sembast__src__blob_impl$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const _internal = dart_sdk._internal;
  const async = dart_sdk.async;
  const convert = dart_sdk.convert;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const math = dart_sdk.math;
  const typed_data = dart_sdk.typed_data;
  const _native_typed_data = dart_sdk._native_typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const type_adapter_impl = packages__sembast__src__type_adapter_impl$46dart.src__type_adapter_impl;
  const client = packages__sembast__src__api__client$46dart.src__api__client;
  const exception = packages__sembast__src__api__exception$46dart.src__api__exception;
  const sort$ = packages__sembast__src__sort$46dart.src__sort;
  const cooperator = packages__sembast__src__cooperator$46dart.src__cooperator;
  const log_level = packages__sembast__src__api__log_level$46dart.src__api__log_level;
  const database_mode = packages__sembast__src__api__database_mode$46dart.src__api__database_mode;
  const synchronized = packages__synchronized__src__reentrant_lock$46dart.synchronized;
  const transaction = packages__sembast__src__api__v2__transaction$46dart.src__api__v2__transaction;
  const key_utils = packages__sembast__src__key_utils$46dart.src__key_utils;
  const timestamp_impl = packages__sembast__src__timestamp_impl$46dart.src__timestamp_impl;
  const blob_impl = packages__sembast__src__blob_impl$46dart.src__blob_impl;
  var sembast_codec = Object.create(dart.library);
  var database = Object.create(dart.library);
  var codec = Object.create(dart.library);
  var records_ref_impl = Object.create(dart.library);
  var record_ref_impl = Object.create(dart.library);
  var sembast_codec_impl = Object.create(dart.library);
  var query_ref_impl = Object.create(dart.library);
  var query_ref = Object.create(dart.library);
  var listener = Object.create(dart.library);
  var database_content = Object.create(dart.library);
  var meta$ = Object.create(dart.library);
  var storage = Object.create(dart.library);
  var sembast_jdb = Object.create(dart.library);
  var json_encodable_codec = Object.create(dart.library);
  var jdb = Object.create(dart.library);
  var field$ = Object.create(dart.library);
  var database$ = Object.create(dart.library);
  var sembast = Object.create(dart.library);
  var factory = Object.create(dart.library);
  var factory$ = Object.create(dart.library);
  var database_factory_mixin = Object.create(dart.library);
  var jdb$ = Object.create(dart.library);
  var database_impl = Object.create(dart.library);
  var database_client_impl = Object.create(dart.library);
  var transaction_impl = Object.create(dart.library);
  var store_impl = Object.create(dart.library);
  var finder_impl = Object.create(dart.library);
  var sort_order_impl = Object.create(dart.library);
  var sort_order = Object.create(dart.library);
  var utils = Object.create(dart.library);
  var record_snapshot_impl = Object.create(dart.library);
  var record_snapshot = Object.create(dart.library);
  var filter_impl = Object.create(dart.library);
  var filter = Object.create(dart.library);
  var finder = Object.create(dart.library);
  var store_ref_impl = Object.create(dart.library);
  var sembast_impl = Object.create(dart.library);
  var records_ref = Object.create(dart.library);
  var store_ref = Object.create(dart.library);
  var record_ref = Object.create(dart.library);
  var record_impl = Object.create(dart.library);
  var boundary_impl = Object.create(dart.library);
  var boundary = Object.create(dart.library);
  var sembast$ = Object.create(dart.library);
  var sembast$0 = Object.create(dart.library);
  var $_get = dartx._get;
  var $cast = dartx.cast;
  var $toList = dartx.toList;
  var $length = dartx.length;
  var $map = dartx.map;
  var $hashCode = dartx.hashCode;
  var $isEmpty = dartx.isEmpty;
  var $first = dartx.first;
  var $keys = dartx.keys;
  var $values = dartx.values;
  var $isNotEmpty = dartx.isNotEmpty;
  var $removeWhere = dartx.removeWhere;
  var $insert = dartx.insert;
  var $_set = dartx._set;
  var $add = dartx.add;
  var $remove = dartx.remove;
  var $containsKey = dartx.containsKey;
  var $forEach = dartx.forEach;
  var $clear = dartx.clear;
  var $addAll = dartx.addAll;
  var $toString = dartx.toString;
  var $startsWith = dartx.startsWith;
  var $invalidValue = dartx.invalidValue;
  var $runtimeType = dartx.runtimeType;
  var $substring = dartx.substring;
  var $where = dartx.where;
  var $contains = dartx.contains;
  var $sort = dartx.sort;
  var $sublist = dartx.sublist;
  var $entries = dartx.entries;
  var $last = dartx.last;
  var $codeUnitAt = dartx.codeUnitAt;
  var $split = dartx.split;
  var $noSuchMethod = dartx.noSuchMethod;
  var $join = dartx.join;
  dart._checkModuleNullSafetyMode(false);
  var T$ = {
    JSArrayOfSembastTypeAdapter: () => (T$.JSArrayOfSembastTypeAdapter = dart.constFn(_interceptors.JSArray$(type_adapter_impl.SembastTypeAdapter)))(),
    FutureOfList: () => (T$.FutureOfList = dart.constFn(async.Future$(core.List)))(),
    SembastTransactionToFutureOfList: () => (T$.SembastTransactionToFutureOfList = dart.constFn(dart.fnType(T$.FutureOfList(), [transaction_impl.SembastTransaction])))(),
    DatabaseClientToFuture: () => (T$.DatabaseClientToFuture = dart.constFn(dart.fnType(async.Future, [client.DatabaseClient])))(),
    boolN: () => (T$.boolN = dart.constFn(dart.nullable(core.bool)))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    FutureOfObjectN: () => (T$.FutureOfObjectN = dart.constFn(async.Future$(T$.ObjectN())))(),
    SembastTransactionToFutureOfObjectN: () => (T$.SembastTransactionToFutureOfObjectN = dart.constFn(dart.fnType(T$.FutureOfObjectN(), [transaction_impl.SembastTransaction])))(),
    FutureOfNull: () => (T$.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    VoidToFutureOfNull: () => (T$.VoidToFutureOfNull = dart.constFn(dart.fnType(T$.FutureOfNull(), [])))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    FutureOfbool: () => (T$.FutureOfbool = dart.constFn(async.Future$(core.bool)))(),
    DatabaseClientToFutureOfbool: () => (T$.DatabaseClientToFutureOfbool = dart.constFn(dart.fnType(T$.FutureOfbool(), [client.DatabaseClient])))(),
    IdentityMapOfString$ObjectN: () => (T$.IdentityMapOfString$ObjectN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ObjectN())))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    VoidToFutureOfvoid: () => (T$.VoidToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    SembastFilterBaseN: () => (T$.SembastFilterBaseN = dart.constFn(dart.nullable(filter_impl.SembastFilterBase)))(),
    ListOfImmutableSembastRecord: () => (T$.ListOfImmutableSembastRecord = dart.constFn(core.List$(record_impl.ImmutableSembastRecord)))(),
    ImmutableSembastRecordTodynamic: () => (T$.ImmutableSembastRecordTodynamic = dart.constFn(dart.fnType(dart.dynamic, [record_impl.ImmutableSembastRecord])))(),
    RecordSnapshotTobool: () => (T$.RecordSnapshotTobool = dart.constFn(dart.fnType(core.bool, [record_snapshot.RecordSnapshot])))(),
    ImmutableSembastRecordAndImmutableSembastRecordToint: () => (T$.ImmutableSembastRecordAndImmutableSembastRecordToint = dart.constFn(dart.fnType(core.int, [record_impl.ImmutableSembastRecord, record_impl.ImmutableSembastRecord])))(),
    ListOfRecordListenerController: () => (T$.ListOfRecordListenerController = dart.constFn(core.List$(listener.RecordListenerController)))(),
    LinkedMapOfObjectN$ListOfRecordListenerController: () => (T$.LinkedMapOfObjectN$ListOfRecordListenerController = dart.constFn(_js_helper.LinkedMap$(T$.ObjectN(), T$.ListOfRecordListenerController())))(),
    JSArrayOfQueryListenerController: () => (T$.JSArrayOfQueryListenerController = dart.constFn(_interceptors.JSArray$(listener.QueryListenerController)))(),
    JSArrayOfRecordListenerController: () => (T$.JSArrayOfRecordListenerController = dart.constFn(_interceptors.JSArray$(listener.RecordListenerController)))(),
    LinkedMapOfStoreRef$StoreListener: () => (T$.LinkedMapOfStoreRef$StoreListener = dart.constFn(_js_helper.LinkedMap$(store_ref.StoreRef, listener.StoreListener)))(),
    StoreRefOfObjectN$ObjectN: () => (T$.StoreRefOfObjectN$ObjectN = dart.constFn(store_ref.StoreRef$(T$.ObjectN(), T$.ObjectN())))(),
    QueryListenerControllerTovoid: () => (T$.QueryListenerControllerTovoid = dart.constFn(dart.fnType(dart.void, [listener.QueryListenerController])))(),
    RecordListenerControllerTovoid: () => (T$.RecordListenerControllerTovoid = dart.constFn(dart.fnType(dart.void, [listener.RecordListenerController])))(),
    ListOfRecordListenerControllerTovoid: () => (T$.ListOfRecordListenerControllerTovoid = dart.constFn(dart.fnType(dart.void, [T$.ListOfRecordListenerController()])))(),
    StoreListenerTovoid: () => (T$.StoreListenerTovoid = dart.constFn(dart.fnType(dart.void, [listener.StoreListener])))(),
    LinkedMapOfObjectN$ImmutableSembastRecord: () => (T$.LinkedMapOfObjectN$ImmutableSembastRecord = dart.constFn(_js_helper.LinkedMap$(T$.ObjectN(), record_impl.ImmutableSembastRecord)))(),
    LinkedMapOfStoreRef$StoreContent: () => (T$.LinkedMapOfStoreRef$StoreContent = dart.constFn(_js_helper.LinkedMap$(store_ref.StoreRef, database_content.StoreContent)))(),
    JSArrayOfTxnRecord: () => (T$.JSArrayOfTxnRecord = dart.constFn(_interceptors.JSArray$(record_impl.TxnRecord)))(),
    TxnRecordToImmutableSembastRecord: () => (T$.TxnRecordToImmutableSembastRecord = dart.constFn(dart.fnType(record_impl.ImmutableSembastRecord, [record_impl.TxnRecord])))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))(),
    StringN: () => (T$.StringN = dart.constFn(dart.nullable(core.String)))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    MapOfString$ObjectN: () => (T$.MapOfString$ObjectN = dart.constFn(core.Map$(core.String, T$.ObjectN())))(),
    MapNOfString$ObjectN: () => (T$.MapNOfString$ObjectN = dart.constFn(dart.nullable(T$.MapOfString$ObjectN())))(),
    ListOfJdbEntry: () => (T$.ListOfJdbEntry = dart.constFn(core.List$(jdb.JdbEntry)))(),
    IdentityMapOfString$DatabaseOpenHelper: () => (T$.IdentityMapOfString$DatabaseOpenHelper = dart.constFn(_js_helper.IdentityMap$(core.String, database_factory_mixin.DatabaseOpenHelper)))(),
    VoidToFuture: () => (T$.VoidToFuture = dart.constFn(dart.fnType(async.Future, [])))(),
    ListOfDatabaseOpenHelper: () => (T$.ListOfDatabaseOpenHelper = dart.constFn(core.List$(database_factory_mixin.DatabaseOpenHelper)))(),
    IdentityMapOfString$SembastTypeAdapter: () => (T$.IdentityMapOfString$SembastTypeAdapter = dart.constFn(_js_helper.IdentityMap$(core.String, type_adapter_impl.SembastTypeAdapter)))(),
    LinkedHashMapOfString$ObjectN: () => (T$.LinkedHashMapOfString$ObjectN = dart.constFn(collection.LinkedHashMap$(core.String, T$.ObjectN())))(),
    dynamicAnddynamicTovoid: () => (T$.dynamicAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, dart.dynamic])))(),
    FutureOfSembastDatabase: () => (T$.FutureOfSembastDatabase = dart.constFn(async.Future$(database_impl.SembastDatabase)))(),
    VoidToFutureOfSembastDatabase: () => (T$.VoidToFutureOfSembastDatabase = dart.constFn(dart.fnType(T$.FutureOfSembastDatabase(), [])))(),
    IdentityMapOfString$SembastStore: () => (T$.IdentityMapOfString$SembastStore = dart.constFn(_js_helper.IdentityMap$(core.String, store_impl.SembastStore)))(),
    IdentityMapOfString$int: () => (T$.IdentityMapOfString$int = dart.constFn(_js_helper.IdentityMap$(core.String, core.int)))(),
    VoidToFutureOfObjectN: () => (T$.VoidToFutureOfObjectN = dart.constFn(dart.fnType(T$.FutureOfObjectN(), [])))(),
    JSArrayOfVoidToFutureOfObjectN: () => (T$.JSArrayOfVoidToFutureOfObjectN = dart.constFn(_interceptors.JSArray$(T$.VoidToFutureOfObjectN())))(),
    SembastStoreToString: () => (T$.SembastStoreToString = dart.constFn(dart.fnType(core.String, [store_impl.SembastStore])))(),
    SembastStoreTobool: () => (T$.SembastStoreTobool = dart.constFn(dart.fnType(core.bool, [store_impl.SembastStore])))(),
    ListOfSembastStore: () => (T$.ListOfSembastStore = dart.constFn(core.List$(store_impl.SembastStore)))(),
    StringToFuture: () => (T$.StringToFuture = dart.constFn(dart.fnType(async.Future, [core.String])))(),
    MapOfString$ObjectNToFuture: () => (T$.MapOfString$ObjectNToFuture = dart.constFn(dart.fnType(async.Future, [T$.MapOfString$ObjectN()])))(),
    ImmutableSembastRecordN: () => (T$.ImmutableSembastRecordN = dart.constFn(dart.nullable(record_impl.ImmutableSembastRecord)))(),
    ListOfImmutableSembastRecordN: () => (T$.ListOfImmutableSembastRecordN = dart.constFn(core.List$(T$.ImmutableSembastRecordN())))(),
    TransactionToFuture: () => (T$.TransactionToFuture = dart.constFn(dart.fnType(async.Future, [transaction.Transaction])))(),
    TransactionToFutureOfObjectN: () => (T$.TransactionToFutureOfObjectN = dart.constFn(dart.fnType(T$.FutureOfObjectN(), [transaction.Transaction])))(),
    intNAndintNToFuture: () => (T$.intNAndintNToFuture = dart.constFn(dart.fnType(async.Future, [T$.intN(), T$.intN()])))(),
    MapN: () => (T$.MapN = dart.constFn(dart.nullable(core.Map)))(),
    StreamOfString: () => (T$.StreamOfString = dart.constFn(async.Stream$(core.String)))(),
    StreamOfString__ToFuture: () => (T$.StreamOfString__ToFuture = dart.constFn(dart.fnType(async.Future, [T$.StreamOfString()], {safeMode: T$.boolN()}, {})))(),
    intTovoid: () => (T$.intTovoid = dart.constFn(dart.fnType(dart.void, [core.int])))(),
    FutureOfJdbImportResult: () => (T$.FutureOfJdbImportResult = dart.constFn(async.Future$(database_impl.JdbImportResult)))(),
    TransactionToFutureOfJdbImportResult: () => (T$.TransactionToFutureOfJdbImportResult = dart.constFn(dart.fnType(T$.FutureOfJdbImportResult(), [transaction.Transaction])))(),
    JSArrayOfImmutableSembastRecordJdb: () => (T$.JSArrayOfImmutableSembastRecordJdb = dart.constFn(_interceptors.JSArray$(record_impl.ImmutableSembastRecordJdb)))(),
    JSArrayOfMapOfString$ObjectN: () => (T$.JSArrayOfMapOfString$ObjectN = dart.constFn(_interceptors.JSArray$(T$.MapOfString$ObjectN())))(),
    ListOfVoidToFutureOfObjectN: () => (T$.ListOfVoidToFutureOfObjectN = dart.constFn(core.List$(T$.VoidToFutureOfObjectN())))(),
    VoidToStorageJdbWriteResult: () => (T$.VoidToStorageJdbWriteResult = dart.constFn(dart.fnType(sembast_jdb.StorageJdbWriteResult, [])))(),
    StorageJdbWriteResultTodynamic: () => (T$.StorageJdbWriteResultTodynamic = dart.constFn(dart.fnType(dart.dynamic, [sembast_jdb.StorageJdbWriteResult])))(),
    JSArrayOfJdbWriteEntry: () => (T$.JSArrayOfJdbWriteEntry = dart.constFn(_interceptors.JSArray$(jdb.JdbWriteEntry)))(),
    JSArrayOfJdbInfoEntry: () => (T$.JSArrayOfJdbInfoEntry = dart.constFn(_interceptors.JSArray$(jdb.JdbInfoEntry)))(),
    StringAndintNTovoid: () => (T$.StringAndintNTovoid = dart.constFn(dart.fnType(dart.void, [core.String, T$.intN()])))(),
    SembastTransactionN: () => (T$.SembastTransactionN = dart.constFn(dart.nullable(transaction_impl.SembastTransaction)))(),
    ListOfQueryListenerController: () => (T$.ListOfQueryListenerController = dart.constFn(core.List$(listener.QueryListenerController)))(),
    SplayTreeMapOfObject$ImmutableSembastRecord: () => (T$.SplayTreeMapOfObject$ImmutableSembastRecord = dart.constFn(collection.SplayTreeMap$(core.Object, record_impl.ImmutableSembastRecord)))(),
    dynamicAnddynamicToint: () => (T$.dynamicAnddynamicToint = dart.constFn(dart.fnType(core.int, [dart.dynamic, dart.dynamic])))(),
    ImmutableSembastRecordTobool: () => (T$.ImmutableSembastRecordTobool = dart.constFn(dart.fnType(core.bool, [record_impl.ImmutableSembastRecord])))(),
    ListOfTxnRecord: () => (T$.ListOfTxnRecord = dart.constFn(core.List$(record_impl.TxnRecord)))(),
    SembastFinderN: () => (T$.SembastFinderN = dart.constFn(dart.nullable(finder_impl.SembastFinder)))(),
    FinderN: () => (T$.FinderN = dart.constFn(dart.nullable(finder.Finder)))(),
    FinderNAndImmutableSembastRecordTobool: () => (T$.FinderNAndImmutableSembastRecordTobool = dart.constFn(dart.fnType(core.bool, [T$.FinderN(), record_impl.ImmutableSembastRecord])))(),
    SplayTreeMapOfObjectN$ImmutableSembastRecord: () => (T$.SplayTreeMapOfObjectN$ImmutableSembastRecord = dart.constFn(collection.SplayTreeMap$(T$.ObjectN(), record_impl.ImmutableSembastRecord)))(),
    VoidToSplayTreeMapOfObjectN$ImmutableSembastRecord: () => (T$.VoidToSplayTreeMapOfObjectN$ImmutableSembastRecord = dart.constFn(dart.fnType(T$.SplayTreeMapOfObjectN$ImmutableSembastRecord(), [])))(),
    SplayTreeMapOfObjectN$ImmutableSembastRecordTodynamic: () => (T$.SplayTreeMapOfObjectN$ImmutableSembastRecordTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.SplayTreeMapOfObjectN$ImmutableSembastRecord()])))(),
    JSArrayOfImmutableSembastRecord: () => (T$.JSArrayOfImmutableSembastRecord = dart.constFn(_interceptors.JSArray$(record_impl.ImmutableSembastRecord)))(),
    SembastRecordAndSembastRecordToint: () => (T$.SembastRecordAndSembastRecordToint = dart.constFn(dart.fnType(core.int, [record_impl.SembastRecord, record_impl.SembastRecord])))(),
    SembastRecordToObjectN: () => (T$.SembastRecordToObjectN = dart.constFn(dart.fnType(T$.ObjectN(), [record_impl.SembastRecord])))(),
    LinkedMapOfObject$TxnRecord: () => (T$.LinkedMapOfObject$TxnRecord = dart.constFn(_js_helper.LinkedMap$(core.Object, record_impl.TxnRecord)))(),
    JSArrayOfImmutableSembastRecordN: () => (T$.JSArrayOfImmutableSembastRecordN = dart.constFn(_interceptors.JSArray$(T$.ImmutableSembastRecordN())))(),
    ObjectAndTxnRecordTovoid: () => (T$.ObjectAndTxnRecordTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, record_impl.TxnRecord])))(),
    JSArrayOfSortOrder: () => (T$.JSArrayOfSortOrder = dart.constFn(_interceptors.JSArray$(sort_order.SortOrder)))(),
    VoidToSembastFinder: () => (T$.VoidToSembastFinder = dart.constFn(dart.fnType(finder_impl.SembastFinder, [])))(),
    SembastFinderTodynamic: () => (T$.SembastFinderTodynamic = dart.constFn(dart.fnType(dart.dynamic, [finder_impl.SembastFinder])))(),
    MapEntryOfString$ObjectN: () => (T$.MapEntryOfString$ObjectN = dart.constFn(core.MapEntry$(core.String, T$.ObjectN())))(),
    dynamicAnddynamicToMapEntryOfString$ObjectN: () => (T$.dynamicAnddynamicToMapEntryOfString$ObjectN = dart.constFn(dart.fnType(T$.MapEntryOfString$ObjectN(), [dart.dynamic, dart.dynamic])))(),
    dynamicTodynamic: () => (T$.dynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic])))(),
    ImmutableMapOfString$ObjectN: () => (T$.ImmutableMapOfString$ObjectN = dart.constFn(utils.ImmutableMap$(core.String, T$.ObjectN())))(),
    StreamOfUint8List: () => (T$.StreamOfUint8List = dart.constFn(async.Stream$(typed_data.Uint8List)))(),
    ListOfint: () => (T$.ListOfint = dart.constFn(core.List$(core.int)))(),
    StreamOfListOfint: () => (T$.StreamOfListOfint = dart.constFn(async.Stream$(T$.ListOfint())))(),
    _StreamHandlerTransformerOfListOfint$Uint8List: () => (T$._StreamHandlerTransformerOfListOfint$Uint8List = dart.constFn(async._StreamHandlerTransformer$(T$.ListOfint(), typed_data.Uint8List)))(),
    EventSinkOfUint8List: () => (T$.EventSinkOfUint8List = dart.constFn(async.EventSink$(typed_data.Uint8List)))(),
    ListOfintAndEventSinkOfUint8ListTovoid: () => (T$.ListOfintAndEventSinkOfUint8ListTovoid = dart.constFn(dart.fnType(dart.void, [T$.ListOfint(), T$.EventSinkOfUint8List()])))(),
    dynamicTobool: () => (T$.dynamicTobool = dart.constFn(dart.fnType(core.bool, [dart.dynamic])))(),
    dynamicAnddynamicTointN: () => (T$.dynamicAnddynamicTointN = dart.constFn(dart.fnType(T$.intN(), [dart.dynamic, dart.dynamic])))(),
    dynamicAnddynamicTobool: () => (T$.dynamicAnddynamicTobool = dart.constFn(dart.fnType(core.bool, [dart.dynamic, dart.dynamic])))(),
    JSArrayOfFilter: () => (T$.JSArrayOfFilter = dart.constFn(_interceptors.JSArray$(filter.Filter)))(),
    FutureOfListOfImmutableSembastRecord: () => (T$.FutureOfListOfImmutableSembastRecord = dart.constFn(async.Future$(T$.ListOfImmutableSembastRecord())))(),
    DatabaseClient__ToFutureOfListOfImmutableSembastRecord: () => (T$.DatabaseClient__ToFutureOfListOfImmutableSembastRecord = dart.constFn(dart.fnType(T$.FutureOfListOfImmutableSembastRecord(), [client.DatabaseClient], {finder: T$.FinderN()}, {})))(),
    SembastTransactionToFuture: () => (T$.SembastTransactionToFuture = dart.constFn(dart.fnType(async.Future, [transaction_impl.SembastTransaction])))(),
    FilterN: () => (T$.FilterN = dart.constFn(dart.nullable(filter.Filter)))(),
    FutureOfint: () => (T$.FutureOfint = dart.constFn(async.Future$(core.int)))(),
    DatabaseClient__ToFutureOfint: () => (T$.DatabaseClient__ToFutureOfint = dart.constFn(dart.fnType(T$.FutureOfint(), [client.DatabaseClient], {filter: T$.FilterN()}, {})))(),
    SembastTransactionToFutureOfNull: () => (T$.SembastTransactionToFutureOfNull = dart.constFn(dart.fnType(T$.FutureOfNull(), [transaction_impl.SembastTransaction])))(),
    SembastTransactionToFutureOfint: () => (T$.SembastTransactionToFutureOfint = dart.constFn(dart.fnType(T$.FutureOfint(), [transaction_impl.SembastTransaction])))(),
    DatabaseClient__ToFutureOfint$1: () => (T$.DatabaseClient__ToFutureOfint$1 = dart.constFn(dart.fnType(T$.FutureOfint(), [client.DatabaseClient], {finder: T$.FinderN()}, {})))(),
    StoreFactoryBaseOfint$MapOfString$ObjectN: () => (T$.StoreFactoryBaseOfint$MapOfString$ObjectN = dart.constFn(store_ref_impl.StoreFactoryBase$(core.int, T$.MapOfString$ObjectN())))(),
    StoreFactoryBaseOfString$MapOfString$ObjectN: () => (T$.StoreFactoryBaseOfString$MapOfString$ObjectN = dart.constFn(store_ref_impl.StoreFactoryBase$(core.String, T$.MapOfString$ObjectN())))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T$);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(utils.compareRecordKey, T$.ImmutableSembastRecordAndImmutableSembastRecordToint());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: field$.FieldValue.prototype,
        [_label$]: "delete"
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: core.FormatException.prototype,
        [FormatException_offset]: null,
        [FormatException_source]: null,
        [FormatException_message]: "Invalid database format"
      });
    },
    get C3() {
      return C[3] = dart.fn(utils.compareKey, T$.dynamicAnddynamicToint());
    },
    get C4() {
      return C[4] = dart.const(new _js_helper.PrivateSymbol.new('_#SembastRecordValue#rawValue#isSet', __SembastRecordValue_rawValue_isSet));
    },
    get C5() {
      return C[5] = dart.const(new _js_helper.PrivateSymbol.new('_#SembastRecordValue#rawValue', __SembastRecordValue_rawValue));
    },
    get C6() {
      return C[6] = dart.const(new _js_helper.PrivateSymbol.new('_#SembastRecordValue#rawValue#isSet=', __SembastRecordValue_rawValue_isSet_));
    },
    get C7() {
      return C[7] = dart.const(new _js_helper.PrivateSymbol.new('_#SembastRecordValue#rawValue=', __SembastRecordValue_rawValue_));
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: filter_impl.FilterOperation.prototype,
        [FilterOperation_value]: 2
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: filter_impl.FilterOperation.prototype,
        [FilterOperation_value]: 3
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: filter_impl.FilterOperation.prototype,
        [FilterOperation_value]: 4
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: filter_impl.FilterOperation.prototype,
        [FilterOperation_value]: 5
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: filter_impl.FilterOperation.prototype,
        [FilterOperation_value]: 6
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: filter_impl.FilterOperation.prototype,
        [FilterOperation_value]: 7
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: filter_impl.FilterOperation.prototype,
        [FilterOperation_value]: 1
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: filter_impl.FilterOperation.prototype,
        [FilterOperation_value]: 8
      });
    }
  }, false);
  var C = Array(16).fill(void 0);
  var I = [
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/sembast_codec.dart",
    "package:sembast/src/api/codec.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/records_ref_impl.dart",
    "package:sembast/src/records_ref_impl.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/record_ref_impl.dart",
    "package:sembast/src/record_ref_impl.dart",
    "package:sembast/src/sembast_codec_impl.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/query_ref_impl.dart",
    "package:sembast/src/query_ref_impl.dart",
    "package:sembast/src/api/query_ref.dart",
    "package:sembast/src/listener.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/listener.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/database_content.dart",
    "package:sembast/src/database_content.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/meta.dart",
    "package:sembast/src/meta.dart",
    "package:sembast/src/storage.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/storage.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/sembast_jdb.dart",
    "package:sembast/src/sembast_jdb.dart",
    "package:sembast/src/database_factory_mixin.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/database_factory_mixin.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/json_encodable_codec.dart",
    "package:sembast/src/json_encodable_codec.dart",
    "package:sembast/src/jdb.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/jdb.dart",
    "package:sembast/src/api/field.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/api/field.dart",
    "package:sembast/src/api/v2/database.dart",
    "package:sembast/src/api/v2/factory.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/database_impl.dart",
    "package:sembast/src/database_impl.dart",
    "package:sembast/src/database_client_impl.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/database_client_impl.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/transaction_impl.dart",
    "package:sembast/src/transaction_impl.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/store_impl.dart",
    "package:sembast/src/store_impl.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/finder_impl.dart",
    "package:sembast/src/finder_impl.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/sort_order_impl.dart",
    "package:sembast/src/sort_order_impl.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/api/sort_order.dart",
    "package:sembast/src/api/sort_order.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/utils.dart",
    "package:sembast/src/utils.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/record_snapshot_impl.dart",
    "package:sembast/src/record_snapshot_impl.dart",
    "package:sembast/src/api/record_snapshot.dart",
    "package:sembast/src/filter_impl.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/filter_impl.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/api/filter.dart",
    "package:sembast/src/api/filter.dart",
    "package:sembast/src/api/finder.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/store_ref_impl.dart",
    "package:sembast/src/store_ref_impl.dart",
    "package:sembast/src/api/records_ref.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/api/store_ref.dart",
    "package:sembast/src/api/store_ref.dart",
    "package:sembast/src/api/record_ref.dart",
    "package:sembast/src/record_impl.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-3.0.2/lib/src/record_impl.dart",
    "package:sembast/src/boundary_impl.dart",
    "package:sembast/src/api/boundary.dart"
  ];
  sembast_codec.sembastCodecWithAdapters = function sembastCodecWithAdapters(adapters) {
    if (adapters == null) dart.nullFailed(I[0], 7, 68, "adapters");
    let sembastCodec = codec.SembastCodec.new({codec: null, signature: null, jsonEncodableCodec: new json_encodable_codec.JsonEncodableCodec.new({adapters: adapters})});
    return sembastCodec;
  };
  dart.defineLazy(sembast_codec, {
    /*sembast_codec.sembastCodecDefault*/get sembastCodecDefault() {
      return sembast_codec.sembastCodecWithAdapters(T$.JSArrayOfSembastTypeAdapter().of([type_adapter_impl.sembastBlobAdapter, type_adapter_impl.sembastTimestampAdapter]));
    },
    set sembastCodecDefault(_) {}
  }, false);
  codec.SembastCodec = class SembastCodec extends core.Object {
    static new(opts) {
      let signature = opts && 'signature' in opts ? opts.signature : null;
      let codec = opts && 'codec' in opts ? opts.codec : null;
      let jsonEncodableCodec = opts && 'jsonEncodableCodec' in opts ? opts.jsonEncodableCodec : null;
      return new sembast_codec_impl.SembastCodecImpl.new({signature: signature, codec: codec, jsonEncodableCodec: jsonEncodableCodec});
    }
  };
  (codec.SembastCodec[dart.mixinNew] = function() {
  }).prototype = codec.SembastCodec.prototype;
  dart.addTypeTests(codec.SembastCodec);
  dart.addTypeCaches(codec.SembastCodec);
  dart.setLibraryUri(codec.SembastCodec, I[1]);
  var _$35RecordsRefMixin$35store = dart.privateName(records_ref_impl, "RecordsRefMixin._#RecordsRefMixin#store");
  var _$35RecordsRefMixin$35store$35isSet = dart.privateName(records_ref_impl, "RecordsRefMixin._#RecordsRefMixin#store#isSet");
  var _$35RecordsRefMixin$35keys = dart.privateName(records_ref_impl, "RecordsRefMixin._#RecordsRefMixin#keys");
  var _$35RecordsRefMixin$35keys$35isSet = dart.privateName(records_ref_impl, "RecordsRefMixin._#RecordsRefMixin#keys#isSet");
  var __RecordsRefMixin_store = dart.privateName(records_ref_impl, "_#RecordsRefMixin#store");
  var __RecordsRefMixin_store_isSet = dart.privateName(records_ref_impl, "_#RecordsRefMixin#store#isSet");
  var __RecordsRefMixin_keys = dart.privateName(records_ref_impl, "_#RecordsRefMixin#keys");
  var __RecordsRefMixin_keys_isSet = dart.privateName(records_ref_impl, "_#RecordsRefMixin#keys#isSet");
  const _is_RecordsRefMixin_default = Symbol('_is_RecordsRefMixin_default');
  records_ref_impl.RecordsRefMixin$ = dart.generic((K, V) => {
    var StoreRefOfK$V = () => (StoreRefOfK$V = dart.constFn(store_ref.StoreRef$(K, V)))();
    var ListOfK = () => (ListOfK = dart.constFn(core.List$(K)))();
    class RecordsRefMixin extends core.Object {}
    RecordsRefMixin[dart.mixinOn] = Object => {
      class RecordsRefMixin extends Object {
        get [__RecordsRefMixin_store]() {
          return this[_$35RecordsRefMixin$35store];
        }
        set [__RecordsRefMixin_store](value) {
          this[_$35RecordsRefMixin$35store] = value;
        }
        get [__RecordsRefMixin_store_isSet]() {
          return this[_$35RecordsRefMixin$35store$35isSet];
        }
        set [__RecordsRefMixin_store_isSet](value) {
          this[_$35RecordsRefMixin$35store$35isSet] = value;
        }
        get [__RecordsRefMixin_keys]() {
          return this[_$35RecordsRefMixin$35keys];
        }
        set [__RecordsRefMixin_keys](value) {
          this[_$35RecordsRefMixin$35keys] = value;
        }
        get [__RecordsRefMixin_keys_isSet]() {
          return this[_$35RecordsRefMixin$35keys$35isSet];
        }
        set [__RecordsRefMixin_keys_isSet](value) {
          this[_$35RecordsRefMixin$35keys$35isSet] = value;
        }
        get store() {
          let t0;
          return dart.test(this[__RecordsRefMixin_store_isSet]) ? (t0 = this[__RecordsRefMixin_store], t0) : dart.throw(new _internal.LateError.fieldNI("store"));
        }
        set store(t0) {
          StoreRefOfK$V().as(t0);
          if (t0 == null) dart.nullFailed(I[2], 101, 23, "null");
          this[__RecordsRefMixin_store_isSet] = true;
          this[__RecordsRefMixin_store] = t0;
        }
        get keys() {
          let t1;
          return dart.test(this[__RecordsRefMixin_keys_isSet]) ? (t1 = this[__RecordsRefMixin_keys], t1) : dart.throw(new _internal.LateError.fieldNI("keys"));
        }
        set keys(t1) {
          ListOfK().as(t1);
          if (t1 == null) dart.nullFailed(I[2], 103, 16, "null");
          this[__RecordsRefMixin_keys_isSet] = true;
          this[__RecordsRefMixin_keys] = t1;
        }
        _get(index) {
          if (index == null) dart.nullFailed(I[2], 106, 35, "index");
          return this.store.record(this.keys[$_get](index));
        }
        toString() {
          return "Records(" + dart.str(this.store.name) + ", " + dart.str(this.keys) + ")";
        }
        cast(RK, RV) {
          if (records_ref.RecordsRef$(RK, RV).is(this)) {
            return records_ref.RecordsRef$(RK, RV).as(this);
          }
          return this.store.cast(RK, RV).records(this.keys[$cast](RK));
        }
      }
      dart.defineExtensionMethods(RecordsRefMixin, ['toString']);
      return RecordsRefMixin;
    };
    (RecordsRefMixin[dart.mixinNew] = function() {
      this[_$35RecordsRefMixin$35store] = null;
      this[_$35RecordsRefMixin$35store$35isSet] = false;
      this[_$35RecordsRefMixin$35keys] = null;
      this[_$35RecordsRefMixin$35keys$35isSet] = false;
    }).prototype = RecordsRefMixin.prototype;
    dart.addTypeTests(RecordsRefMixin);
    RecordsRefMixin.prototype[_is_RecordsRefMixin_default] = true;
    dart.addTypeCaches(RecordsRefMixin);
    RecordsRefMixin[dart.implements] = () => [records_ref.RecordsRef$(K, V), core.Object];
    dart.setMethodSignature(RecordsRefMixin, () => ({
      __proto__: dart.getMethods(RecordsRefMixin.__proto__),
      _get: dart.fnType(record_ref.RecordRef$(K, V), [core.int]),
      cast: dart.gFnType((RK, RV) => [records_ref.RecordsRef$(RK, RV), []], (RK, RV) => [dart.nullable(core.Object), dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(RecordsRefMixin, () => ({
      __proto__: dart.getGetters(RecordsRefMixin.__proto__),
      store: store_ref.StoreRef$(K, V),
      keys: core.List$(K)
    }));
    dart.setSetterSignature(RecordsRefMixin, () => ({
      __proto__: dart.getSetters(RecordsRefMixin.__proto__),
      store: dart.nullable(core.Object),
      keys: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(RecordsRefMixin, I[3]);
    dart.setFieldSignature(RecordsRefMixin, () => ({
      __proto__: dart.getFields(RecordsRefMixin.__proto__),
      [__RecordsRefMixin_store]: dart.fieldType(dart.nullable(store_ref.StoreRef$(K, V))),
      [__RecordsRefMixin_store_isSet]: dart.fieldType(core.bool),
      [__RecordsRefMixin_keys]: dart.fieldType(dart.nullable(core.List$(K))),
      [__RecordsRefMixin_keys_isSet]: dart.fieldType(core.bool)
    }));
    return RecordsRefMixin;
  });
  records_ref_impl.RecordsRefMixin = records_ref_impl.RecordsRefMixin$();
  dart.addTypeTests(records_ref_impl.RecordsRefMixin, _is_RecordsRefMixin_default);
  const _is_SembastRecordsRef_default = Symbol('_is_SembastRecordsRef_default');
  records_ref_impl.SembastRecordsRef$ = dart.generic((K, V) => {
    const Object_RecordsRefMixin$36 = class Object_RecordsRefMixin extends core.Object {};
    (Object_RecordsRefMixin$36.new = function() {
      records_ref_impl.RecordsRefMixin$(K, V)[dart.mixinNew].call(this);
    }).prototype = Object_RecordsRefMixin$36.prototype;
    dart.applyMixin(Object_RecordsRefMixin$36, records_ref_impl.RecordsRefMixin$(K, V));
    class SembastRecordsRef extends Object_RecordsRefMixin$36 {}
    (SembastRecordsRef.new = function(store, keys) {
      if (store == null) dart.nullFailed(I[2], 124, 36, "store");
      if (keys == null) dart.nullFailed(I[2], 124, 55, "keys");
      SembastRecordsRef.__proto__.new.call(this);
      this.store = store;
      this.keys = keys[$toList]({growable: false});
    }).prototype = SembastRecordsRef.prototype;
    dart.addTypeTests(SembastRecordsRef);
    SembastRecordsRef.prototype[_is_SembastRecordsRef_default] = true;
    dart.addTypeCaches(SembastRecordsRef);
    dart.setLibraryUri(SembastRecordsRef, I[3]);
    return SembastRecordsRef;
  });
  records_ref_impl.SembastRecordsRef = records_ref_impl.SembastRecordsRef$();
  dart.addTypeTests(records_ref_impl.SembastRecordsRef, _is_SembastRecordsRef_default);
  records_ref_impl['SembastRecordsRefExtension|delete'] = function SembastRecordsRefExtension$124delete(K, V, $this, databaseClient) {
    if ($this == null) dart.nullFailed(I[2], 13, 10, "#this");
    if (databaseClient == null) dart.nullFailed(I[2], 13, 32, "databaseClient");
    let client = database_client_impl.getClient(databaseClient);
    return client.inTransaction(dart.dynamic, dart.fn(txn => {
      if (txn == null) dart.nullFailed(I[2], 15, 34, "txn");
      let sembastStore = client.getSembastStore($this.store);
      return sembastStore.txnDeleteAll(txn, $this.keys);
    }, T$.SembastTransactionToFutureOfList()));
  };
  records_ref_impl['SembastRecordsRefExtension|get#delete'] = function SembastRecordsRefExtension$124get$35delete(K, V, $this) {
    if ($this == null) dart.nullFailed(I[2], 13, 10, "#this");
    return dart.fn(databaseClient => {
      if (databaseClient == null) dart.nullFailed(I[2], 13, 32, "databaseClient");
      return records_ref_impl['SembastRecordsRefExtension|delete'](K, V, $this, databaseClient);
    }, T$.DatabaseClientToFuture());
  };
  records_ref_impl['SembastRecordsRefExtension|getSnapshots'] = function SembastRecordsRefExtension$124getSnapshots(K, V, $this, databaseClient) {
    if ($this == null) dart.nullFailed(I[2], 22, 39, "#this");
    if (databaseClient == null) dart.nullFailed(I[2], 23, 22, "databaseClient");
    return async.async(core.List$(dart.nullable(record_snapshot.RecordSnapshot$(K, V))), function* SembastRecordsRefExtension$124getSnapshots() {
      let client = database_client_impl.getClient(databaseClient);
      return client.getSembastStore($this.store).txnGetRecordSnapshots(K, V, client.sembastTransaction, $this);
    });
  };
  records_ref_impl['SembastRecordsRefExtension|get#getSnapshots'] = function SembastRecordsRefExtension$124get$35getSnapshots(K, V, $this) {
    if ($this == null) dart.nullFailed(I[2], 22, 39, "#this");
    return dart.fn(databaseClient => {
      if (databaseClient == null) dart.nullFailed(I[2], 23, 22, "databaseClient");
      return records_ref_impl['SembastRecordsRefExtension|getSnapshots'](K, V, $this, databaseClient);
    }, dart.fnType(async.Future$(core.List$(dart.nullable(record_snapshot.RecordSnapshot$(K, V)))), [client.DatabaseClient]));
  };
  records_ref_impl['SembastRecordsRefExtension|add'] = function SembastRecordsRefExtension$124add(K, V, $this, databaseClient, values) {
    if ($this == null) dart.nullFailed(I[2], 36, 20, "#this");
    if (databaseClient == null) dart.nullFailed(I[2], 36, 39, "databaseClient");
    if (values == null) dart.nullFailed(I[2], 36, 63, "values");
    if (values[$length] != $this.keys[$length]) {
      dart.throw(new core.ArgumentError.new("the list of values must match the list of keys"));
    }
    let client = database_client_impl.getClient(databaseClient);
    return client.inTransaction(core.List$(dart.nullable(K)), dart.fn(txn => {
      if (txn == null) dart.nullFailed(I[2], 41, 34, "txn");
      return async.async(core.List$(dart.nullable(K)), function*() {
        return yield client.getSembastStore($this.store).txnAddAll(K, V, txn, values, $this.keys);
      });
    }, dart.fnType(async.Future$(core.List$(dart.nullable(K))), [transaction_impl.SembastTransaction])));
  };
  records_ref_impl['SembastRecordsRefExtension|get#add'] = function SembastRecordsRefExtension$124get$35add(K, V, $this) {
    if ($this == null) dart.nullFailed(I[2], 36, 20, "#this");
    return dart.fn((databaseClient, values) => {
      if (databaseClient == null) dart.nullFailed(I[2], 36, 39, "databaseClient");
      if (values == null) dart.nullFailed(I[2], 36, 63, "values");
      return records_ref_impl['SembastRecordsRefExtension|add'](K, V, $this, databaseClient, values);
    }, dart.fnType(async.Future$(core.List$(dart.nullable(K))), [client.DatabaseClient, core.List$(V)]));
  };
  records_ref_impl['SembastRecordsRefExtension|put'] = function SembastRecordsRefExtension$124put(K, V, $this, databaseClient, values, opts) {
    if ($this == null) dart.nullFailed(I[2], 55, 19, "#this");
    if (databaseClient == null) dart.nullFailed(I[2], 55, 38, "databaseClient");
    if (values == null) dart.nullFailed(I[2], 55, 62, "values");
    let merge = opts && 'merge' in opts ? opts.merge : null;
    if (values[$length] != $this.keys[$length]) {
      dart.throw(new core.ArgumentError.new("the list of values must match the list of keys"));
    }
    let client = database_client_impl.getClient(databaseClient);
    return client.inTransaction(core.List$(V), dart.fn(txn => {
      if (txn == null) dart.nullFailed(I[2], 61, 34, "txn");
      return async.async(core.List$(V), function*() {
        return (yield client.getSembastStore($this.store).txnPutAll(txn, values, $this.keys, {merge: merge}))[$cast](V);
      });
    }, dart.fnType(async.Future$(core.List$(V)), [transaction_impl.SembastTransaction])));
  };
  records_ref_impl['SembastRecordsRefExtension|get#put'] = function SembastRecordsRefExtension$124get$35put(K, V, $this) {
    if ($this == null) dart.nullFailed(I[2], 55, 19, "#this");
    return dart.fn((databaseClient, values, opts) => {
      if (databaseClient == null) dart.nullFailed(I[2], 55, 38, "databaseClient");
      if (values == null) dart.nullFailed(I[2], 55, 62, "values");
      let merge = opts && 'merge' in opts ? opts.merge : null;
      return records_ref_impl['SembastRecordsRefExtension|put'](K, V, $this, databaseClient, values, {merge: merge});
    }, dart.fnType(async.Future$(core.List$(V)), [client.DatabaseClient, core.List$(V)], {merge: T$.boolN()}, {}));
  };
  records_ref_impl['SembastRecordsRefExtension|update'] = function SembastRecordsRefExtension$124update(K, V, $this, databaseClient, values) {
    if ($this == null) dart.nullFailed(I[2], 78, 20, "#this");
    if (databaseClient == null) dart.nullFailed(I[2], 78, 42, "databaseClient");
    if (values == null) dart.nullFailed(I[2], 78, 66, "values");
    if (values[$length] != $this.keys[$length]) {
      dart.throw(new core.ArgumentError.new("the list of values must match the list of keys"));
    }
    let client = database_client_impl.getClient(databaseClient);
    return client.inTransaction(core.List$(dart.nullable(V)), dart.fn(txn => {
      if (txn == null) dart.nullFailed(I[2], 83, 34, "txn");
      return async.async(core.List$(dart.nullable(V)), function*() {
        return (yield client.getSembastStore($this.store).txnUpdateAll(txn, values, $this.keys))[$cast](dart.nullable(V));
      });
    }, dart.fnType(async.Future$(core.List$(dart.nullable(V))), [transaction_impl.SembastTransaction])));
  };
  records_ref_impl['SembastRecordsRefExtension|get#update'] = function SembastRecordsRefExtension$124get$35update(K, V, $this) {
    if ($this == null) dart.nullFailed(I[2], 78, 20, "#this");
    return dart.fn((databaseClient, values) => {
      if (databaseClient == null) dart.nullFailed(I[2], 78, 42, "databaseClient");
      if (values == null) dart.nullFailed(I[2], 78, 66, "values");
      return records_ref_impl['SembastRecordsRefExtension|update'](K, V, $this, databaseClient, values);
    }, dart.fnType(async.Future$(core.List$(dart.nullable(V))), [client.DatabaseClient, core.List$(V)]));
  };
  records_ref_impl['SembastRecordsRefExtension|get'] = function SembastRecordsRefExtension$124get(K, V, $this, client) {
    if ($this == null) dart.nullFailed(I[2], 92, 20, "#this");
    if (client == null) dart.nullFailed(I[2], 92, 39, "client");
    return async.async(core.List$(dart.nullable(V)), function* SembastRecordsRefExtension$124get() {
      return (yield records_ref_impl['SembastRecordsRefExtension|getSnapshots'](K, V, $this, client))[$map](dart.nullable(V), dart.fn(snapshot => {
        let t13;
        t13 = snapshot;
        return t13 == null ? null : t13.value;
      }, dart.fnType(dart.nullable(V), [dart.nullable(record_snapshot.RecordSnapshot$(K, V))])))[$toList]({growable: false});
    });
  };
  records_ref_impl['SembastRecordsRefExtension|get#get'] = function SembastRecordsRefExtension$124get$35get(K, V, $this) {
    if ($this == null) dart.nullFailed(I[2], 92, 20, "#this");
    return dart.fn(client => {
      if (client == null) dart.nullFailed(I[2], 92, 39, "client");
      return records_ref_impl['SembastRecordsRefExtension|get'](K, V, $this, client);
    }, dart.fnType(async.Future$(core.List$(dart.nullable(V))), [client.DatabaseClient]));
  };
  var _$35RecordRefMixin$35store = dart.privateName(record_ref_impl, "RecordRefMixin._#RecordRefMixin#store");
  var _$35RecordRefMixin$35store$35isSet = dart.privateName(record_ref_impl, "RecordRefMixin._#RecordRefMixin#store#isSet");
  var _$35RecordRefMixin$35key = dart.privateName(record_ref_impl, "RecordRefMixin._#RecordRefMixin#key");
  var _$35RecordRefMixin$35key$35isSet = dart.privateName(record_ref_impl, "RecordRefMixin._#RecordRefMixin#key#isSet");
  var __RecordRefMixin_store = dart.privateName(record_ref_impl, "_#RecordRefMixin#store");
  var __RecordRefMixin_store_isSet = dart.privateName(record_ref_impl, "_#RecordRefMixin#store#isSet");
  var __RecordRefMixin_key = dart.privateName(record_ref_impl, "_#RecordRefMixin#key");
  var __RecordRefMixin_key_isSet = dart.privateName(record_ref_impl, "_#RecordRefMixin#key#isSet");
  const _is_RecordRefMixin_default = Symbol('_is_RecordRefMixin_default');
  record_ref_impl.RecordRefMixin$ = dart.generic((K, V) => {
    var StoreRefOfK$V = () => (StoreRefOfK$V = dart.constFn(store_ref.StoreRef$(K, V)))();
    class RecordRefMixin extends core.Object {}
    RecordRefMixin[dart.mixinOn] = Object => {
      class RecordRefMixin extends Object {
        get [__RecordRefMixin_store]() {
          return this[_$35RecordRefMixin$35store];
        }
        set [__RecordRefMixin_store](value) {
          this[_$35RecordRefMixin$35store] = value;
        }
        get [__RecordRefMixin_store_isSet]() {
          return this[_$35RecordRefMixin$35store$35isSet];
        }
        set [__RecordRefMixin_store_isSet](value) {
          this[_$35RecordRefMixin$35store$35isSet] = value;
        }
        get [__RecordRefMixin_key]() {
          return this[_$35RecordRefMixin$35key];
        }
        set [__RecordRefMixin_key](value) {
          this[_$35RecordRefMixin$35key] = value;
        }
        get [__RecordRefMixin_key_isSet]() {
          return this[_$35RecordRefMixin$35key$35isSet];
        }
        set [__RecordRefMixin_key_isSet](value) {
          this[_$35RecordRefMixin$35key$35isSet] = value;
        }
        get store() {
          let t14;
          return dart.test(this[__RecordRefMixin_store_isSet]) ? (t14 = this[__RecordRefMixin_store], t14) : dart.throw(new _internal.LateError.fieldNI("store"));
        }
        set store(t14) {
          StoreRefOfK$V().as(t14);
          if (t14 == null) dart.nullFailed(I[4], 16, 23, "null");
          this[__RecordRefMixin_store_isSet] = true;
          this[__RecordRefMixin_store] = t14;
        }
        get key() {
          let t15;
          return dart.test(this[__RecordRefMixin_key_isSet]) ? (t15 = this[__RecordRefMixin_key], t15) : dart.throw(new _internal.LateError.fieldNI("key"));
        }
        set key(t15) {
          K.as(t15);
          this[__RecordRefMixin_key_isSet] = true;
          this[__RecordRefMixin_key] = t15;
        }
        toString() {
          return "Record(" + dart.str(this.store.name) + ", " + dart.str(this.key) + ")";
        }
        cast(RK, RV) {
          if (record_ref.RecordRef$(RK, RV).is(this)) {
            return record_ref.RecordRef$(RK, RV).as(this);
          }
          return this.store.cast(RK, RV).record(RK.as(this.key));
        }
        get hashCode() {
          return dart.hashCode(this.key);
        }
        _equals(other) {
          if (other == null) return false;
          if (record_ref.RecordRef.is(other)) {
            return dart.equals(other.store, this.store) && dart.equals(other.key, this.key);
          }
          return false;
        }
      }
      dart.defineExtensionMethods(RecordRefMixin, ['toString', '_equals']);
      dart.defineExtensionAccessors(RecordRefMixin, ['hashCode']);
      return RecordRefMixin;
    };
    (RecordRefMixin[dart.mixinNew] = function() {
      this[_$35RecordRefMixin$35store] = null;
      this[_$35RecordRefMixin$35store$35isSet] = false;
      this[_$35RecordRefMixin$35key] = null;
      this[_$35RecordRefMixin$35key$35isSet] = false;
    }).prototype = RecordRefMixin.prototype;
    dart.addTypeTests(RecordRefMixin);
    RecordRefMixin.prototype[_is_RecordRefMixin_default] = true;
    dart.addTypeCaches(RecordRefMixin);
    RecordRefMixin[dart.implements] = () => [record_ref.RecordRef$(K, V), core.Object];
    dart.setMethodSignature(RecordRefMixin, () => ({
      __proto__: dart.getMethods(RecordRefMixin.__proto__),
      cast: dart.gFnType((RK, RV) => [record_ref.RecordRef$(RK, RV), []], (RK, RV) => [dart.nullable(core.Object), dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(RecordRefMixin, () => ({
      __proto__: dart.getGetters(RecordRefMixin.__proto__),
      store: store_ref.StoreRef$(K, V),
      key: K
    }));
    dart.setSetterSignature(RecordRefMixin, () => ({
      __proto__: dart.getSetters(RecordRefMixin.__proto__),
      store: dart.nullable(core.Object),
      key: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(RecordRefMixin, I[5]);
    dart.setFieldSignature(RecordRefMixin, () => ({
      __proto__: dart.getFields(RecordRefMixin.__proto__),
      [__RecordRefMixin_store]: dart.fieldType(dart.nullable(store_ref.StoreRef$(K, V))),
      [__RecordRefMixin_store_isSet]: dart.fieldType(core.bool),
      [__RecordRefMixin_key]: dart.fieldType(dart.nullable(K)),
      [__RecordRefMixin_key_isSet]: dart.fieldType(core.bool)
    }));
    return RecordRefMixin;
  });
  record_ref_impl.RecordRefMixin = record_ref_impl.RecordRefMixin$();
  dart.addTypeTests(record_ref_impl.RecordRefMixin, _is_RecordRefMixin_default);
  const _is_SembastRecordRef_default = Symbol('_is_SembastRecordRef_default');
  record_ref_impl.SembastRecordRef$ = dart.generic((K, V) => {
    const Object_RecordRefMixin$36 = class Object_RecordRefMixin extends core.Object {};
    (Object_RecordRefMixin$36.new = function() {
      record_ref_impl.RecordRefMixin$(K, V)[dart.mixinNew].call(this);
    }).prototype = Object_RecordRefMixin$36.prototype;
    dart.applyMixin(Object_RecordRefMixin$36, record_ref_impl.RecordRefMixin$(K, V));
    class SembastRecordRef extends Object_RecordRefMixin$36 {}
    (SembastRecordRef.new = function(store, key) {
      if (store == null) dart.nullFailed(I[4], 47, 35, "store");
      SembastRecordRef.__proto__.new.call(this);
      this.store = store;
      this.key = key;
    }).prototype = SembastRecordRef.prototype;
    dart.addTypeTests(SembastRecordRef);
    SembastRecordRef.prototype[_is_SembastRecordRef_default] = true;
    dart.addTypeCaches(SembastRecordRef);
    dart.setLibraryUri(SembastRecordRef, I[5]);
    return SembastRecordRef;
  });
  record_ref_impl.SembastRecordRef = record_ref_impl.SembastRecordRef$();
  dart.addTypeTests(record_ref_impl.SembastRecordRef, _is_SembastRecordRef_default);
  record_ref_impl['SembastRecordRefExtension|snapshot'] = function SembastRecordRefExtension$124snapshot(K, V, $this, value) {
    if ($this == null) dart.nullFailed(I[4], 58, 24, "#this");
    return new (record_snapshot_impl.SembastRecordSnapshot$(K, V)).new($this, value);
  };
  record_ref_impl['SembastRecordRefExtension|get#snapshot'] = function SembastRecordRefExtension$124get$35snapshot(K, V, $this) {
    if ($this == null) dart.nullFailed(I[4], 58, 24, "#this");
    return dart.fn(value => record_ref_impl['SembastRecordRefExtension|snapshot'](K, V, $this, value), dart.fnType(record_snapshot.RecordSnapshot$(K, V), [V]));
  };
  record_ref_impl['SembastRecordRefExtension|add'] = function SembastRecordRefExtension$124add(K, V, $this, databaseClient, value) {
    if ($this == null) dart.nullFailed(I[4], 63, 14, "#this");
    if (databaseClient == null) dart.nullFailed(I[4], 63, 33, "databaseClient");
    return async.async(dart.nullable(K), function* SembastRecordRefExtension$124add() {
      let client = database_client_impl.getClient(databaseClient);
      value = dart.nullCheck(client.sembastDatabase.sanitizeInputValue(V, value));
      return yield client.inTransaction(dart.nullable(K), dart.fn(txn => {
        if (txn == null) dart.nullFailed(I[4], 66, 40, "txn");
        return client.getSembastStore($this.store).txnAdd(K, V, txn, value, $this.key);
      }, dart.fnType(async.Future$(dart.nullable(K)), [transaction_impl.SembastTransaction])));
    });
  };
  record_ref_impl['SembastRecordRefExtension|get#add'] = function SembastRecordRefExtension$124get$35add(K, V, $this) {
    if ($this == null) dart.nullFailed(I[4], 63, 14, "#this");
    return dart.fn((databaseClient, value) => {
      if (databaseClient == null) dart.nullFailed(I[4], 63, 33, "databaseClient");
      return record_ref_impl['SembastRecordRefExtension|add'](K, V, $this, databaseClient, value);
    }, dart.fnType(async.Future$(dart.nullable(K)), [client.DatabaseClient, V]));
  };
  record_ref_impl['SembastRecordRefExtension|put'] = function SembastRecordRefExtension$124put(K, V, $this, databaseClient, value, opts) {
    if ($this == null) dart.nullFailed(I[4], 76, 13, "#this");
    if (databaseClient == null) dart.nullFailed(I[4], 76, 32, "databaseClient");
    let merge = opts && 'merge' in opts ? opts.merge : null;
    return async.async(V, function* SembastRecordRefExtension$124put() {
      let client = database_client_impl.getClient(databaseClient);
      value = dart.nullCheck(client.sembastDatabase.sanitizeInputValue(V, value, {update: merge}));
      return dart.nullCheck(dart.nullable(V).as(yield client.inTransaction(T$.ObjectN(), dart.fn(txn => {
        if (txn == null) dart.nullFailed(I[4], 79, 41, "txn");
        return client.getSembastStore($this.store).txnPut(txn, value, $this.key, {merge: merge});
      }, T$.SembastTransactionToFutureOfObjectN()))));
    });
  };
  record_ref_impl['SembastRecordRefExtension|get#put'] = function SembastRecordRefExtension$124get$35put(K, V, $this) {
    if ($this == null) dart.nullFailed(I[4], 76, 13, "#this");
    return dart.fn((databaseClient, value, opts) => {
      if (databaseClient == null) dart.nullFailed(I[4], 76, 32, "databaseClient");
      let merge = opts && 'merge' in opts ? opts.merge : null;
      return record_ref_impl['SembastRecordRefExtension|put'](K, V, $this, databaseClient, value, {merge: merge});
    }, dart.fnType(async.Future$(V), [client.DatabaseClient, V], {merge: T$.boolN()}, {}));
  };
  record_ref_impl['SembastRecordRefExtension|update'] = function SembastRecordRefExtension$124update(K, V, $this, databaseClient, value) {
    if ($this == null) dart.nullFailed(I[4], 92, 14, "#this");
    if (databaseClient == null) dart.nullFailed(I[4], 92, 36, "databaseClient");
    return async.async(dart.nullable(V), function* SembastRecordRefExtension$124update() {
      let client = database_client_impl.getClient(databaseClient);
      value = dart.nullCheck(client.sembastDatabase.sanitizeInputValue(V, value, {update: true}));
      return dart.nullable(V).as(yield client.inTransaction(T$.ObjectN(), dart.fn(txn => {
        if (txn == null) dart.nullFailed(I[4], 95, 40, "txn");
        return client.getSembastStore($this.store).txnUpdate(txn, value, $this.key);
      }, T$.SembastTransactionToFutureOfObjectN())));
    });
  };
  record_ref_impl['SembastRecordRefExtension|get#update'] = function SembastRecordRefExtension$124get$35update(K, V, $this) {
    if ($this == null) dart.nullFailed(I[4], 92, 14, "#this");
    return dart.fn((databaseClient, value) => {
      if (databaseClient == null) dart.nullFailed(I[4], 92, 36, "databaseClient");
      return record_ref_impl['SembastRecordRefExtension|update'](K, V, $this, databaseClient, value);
    }, dart.fnType(async.Future$(dart.nullable(V)), [client.DatabaseClient, V]));
  };
  record_ref_impl['SembastRecordRefExtension|get'] = function SembastRecordRefExtension$124get(K, V, $this, databaseClient) {
    if ($this == null) dart.nullFailed(I[4], 101, 14, "#this");
    if (databaseClient == null) dart.nullFailed(I[4], 101, 33, "databaseClient");
    return async.async(dart.nullable(V), function* SembastRecordRefExtension$124get() {
      let t25;
      t25 = (yield record_ref_impl['SembastRecordRefExtension|getSnapshot'](K, V, $this, databaseClient));
      return t25 == null ? null : t25.value;
    });
  };
  record_ref_impl['SembastRecordRefExtension|get#get'] = function SembastRecordRefExtension$124get$35get(K, V, $this) {
    if ($this == null) dart.nullFailed(I[4], 101, 14, "#this");
    return dart.fn(databaseClient => {
      if (databaseClient == null) dart.nullFailed(I[4], 101, 33, "databaseClient");
      return record_ref_impl['SembastRecordRefExtension|get'](K, V, $this, databaseClient);
    }, dart.fnType(async.Future$(dart.nullable(V)), [client.DatabaseClient]));
  };
  record_ref_impl['SembastRecordRefExtension|getSnapshot'] = function SembastRecordRefExtension$124getSnapshot(K, V, $this, databaseClient) {
    if ($this == null) dart.nullFailed(I[4], 105, 33, "#this");
    if (databaseClient == null) dart.nullFailed(I[4], 106, 22, "databaseClient");
    return async.async(dart.nullable(record_snapshot.RecordSnapshot$(K, V)), function* SembastRecordRefExtension$124getSnapshot() {
      let t27;
      let client = database_client_impl.getClient(databaseClient);
      let record = (yield client.getSembastStore($this.store).txnGetRecord(client.sembastTransaction, $this.key));
      t27 = record;
      return t27 == null ? null : t27.cast(K, V);
    });
  };
  record_ref_impl['SembastRecordRefExtension|get#getSnapshot'] = function SembastRecordRefExtension$124get$35getSnapshot(K, V, $this) {
    if ($this == null) dart.nullFailed(I[4], 105, 33, "#this");
    return dart.fn(databaseClient => {
      if (databaseClient == null) dart.nullFailed(I[4], 106, 22, "databaseClient");
      return record_ref_impl['SembastRecordRefExtension|getSnapshot'](K, V, $this, databaseClient);
    }, dart.fnType(async.Future$(dart.nullable(record_snapshot.RecordSnapshot$(K, V))), [client.DatabaseClient]));
  };
  record_ref_impl['SembastRecordRefExtension|onSnapshot'] = function SembastRecordRefExtension$124onSnapshot(K, V, $this, database) {
    if ($this == null) dart.nullFailed(I[4], 118, 33, "#this");
    if (database == null) dart.nullFailed(I[4], 118, 53, "database");
    let db = database_impl.getDatabase(database);
    let ctlr = null;
    let ctlr$35isSet = false;
    function ctlr$35get() {
      return ctlr$35isSet ? ctlr : dart.throw(new _internal.LateError.localNI("ctlr"));
    }
    dart.fn(ctlr$35get, dart.fnType(listener.RecordListenerController$(K, V), []));
    function ctlr$35set(t32) {
      if (t32 == null) dart.nullFailed(I[4], 120, 41, "null");
      ctlr$35isSet = true;
      return ctlr = t32;
    }
    dart.fn(ctlr$35set, dart.fnType(dart.dynamic, [listener.RecordListenerController$(K, V)]));
    ctlr$35set(db.listener.addRecord(K, V, $this, {onListen: dart.fn(() => {
        dart.fn(() => async.async(core.Null, function*() {
          yield db.notificationLock.synchronized(core.Null, dart.fn(() => async.async(core.Null, function*() {
            try {
              let snapshot = (yield record_ref_impl['SembastRecordRefExtension|getSnapshot'](K, V, $this, database));
              if (false) {
                core.print("matching " + dart.str(ctlr$35get()) + ": " + dart.str(snapshot) + " on " + dart.str($this));
              }
              ctlr$35get().add(snapshot);
            } catch (e) {
              let error = dart.getThrown(e);
              let stackTrace = dart.stackTrace(e);
              if (core.Object.is(error)) {
                ctlr$35get().addError(error, stackTrace);
              } else
                throw e;
            }
          }), T$.VoidToFutureOfNull()));
        }), T$.VoidToFutureOfNull())();
      }, T$.VoidTovoid())}));
    return ctlr$35get().stream;
  };
  record_ref_impl['SembastRecordRefExtension|get#onSnapshot'] = function SembastRecordRefExtension$124get$35onSnapshot(K, V, $this) {
    if ($this == null) dart.nullFailed(I[4], 118, 33, "#this");
    return dart.fn(database => {
      if (database == null) dart.nullFailed(I[4], 118, 53, "database");
      return record_ref_impl['SembastRecordRefExtension|onSnapshot'](K, V, $this, database);
    }, dart.fnType(async.Stream$(dart.nullable(record_snapshot.RecordSnapshot$(K, V))), [database$.Database]));
  };
  record_ref_impl['SembastRecordRefExtension|exists'] = function SembastRecordRefExtension$124exists(K, V, $this, databaseClient) {
    if ($this == null) dart.nullFailed(I[4], 143, 16, "#this");
    if (databaseClient == null) dart.nullFailed(I[4], 143, 38, "databaseClient");
    let client = database_client_impl.getClient(databaseClient);
    return client.getSembastStore($this.store).txnRecordExists(client.sembastTransaction, $this.key);
  };
  record_ref_impl['SembastRecordRefExtension|get#exists'] = function SembastRecordRefExtension$124get$35exists(K, V, $this) {
    if ($this == null) dart.nullFailed(I[4], 143, 16, "#this");
    return dart.fn(databaseClient => {
      if (databaseClient == null) dart.nullFailed(I[4], 143, 38, "databaseClient");
      return record_ref_impl['SembastRecordRefExtension|exists'](K, V, $this, databaseClient);
    }, T$.DatabaseClientToFutureOfbool());
  };
  record_ref_impl['SembastRecordRefExtension|delete'] = function SembastRecordRefExtension$124delete(K, V, $this, databaseClient) {
    if ($this == null) dart.nullFailed(I[4], 151, 10, "#this");
    if (databaseClient == null) dart.nullFailed(I[4], 151, 32, "databaseClient");
    let client = database_client_impl.getClient(databaseClient);
    return client.inTransaction(dart.dynamic, dart.fn(txn => {
      if (txn == null) dart.nullFailed(I[4], 153, 34, "txn");
      return client.getSembastStore($this.store).txnDelete(txn, $this.key);
    }, T$.SembastTransactionToFutureOfObjectN()));
  };
  record_ref_impl['SembastRecordRefExtension|get#delete'] = function SembastRecordRefExtension$124get$35delete(K, V, $this) {
    if ($this == null) dart.nullFailed(I[4], 151, 10, "#this");
    return dart.fn(databaseClient => {
      if (databaseClient == null) dart.nullFailed(I[4], 151, 32, "databaseClient");
      return record_ref_impl['SembastRecordRefExtension|delete'](K, V, $this, databaseClient);
    }, T$.DatabaseClientToFuture());
  };
  var signature$ = dart.privateName(sembast_codec_impl, "SembastCodecImpl.signature");
  var codec$ = dart.privateName(sembast_codec_impl, "SembastCodecImpl.codec");
  var jsonEncodableCodec$ = dart.privateName(sembast_codec_impl, "SembastCodecImpl.jsonEncodableCodec");
  sembast_codec_impl.SembastCodecImpl = class SembastCodecImpl extends core.Object {
    get signature() {
      return this[signature$];
    }
    set signature(value) {
      super.signature = value;
    }
    get codec() {
      return this[codec$];
    }
    set codec(value) {
      super.codec = value;
    }
    get jsonEncodableCodec() {
      return this[jsonEncodableCodec$];
    }
    set jsonEncodableCodec(value) {
      this[jsonEncodableCodec$] = value;
    }
    toString() {
      return "SembastCodec(" + dart.str(this.signature) + ")";
    }
  };
  (sembast_codec_impl.SembastCodecImpl.new = function(opts) {
    let t40;
    let signature = opts && 'signature' in opts ? opts.signature : null;
    let codec = opts && 'codec' in opts ? opts.codec : null;
    let jsonEncodableCodec = opts && 'jsonEncodableCodec' in opts ? opts.jsonEncodableCodec : null;
    this[signature$] = signature;
    this[codec$] = codec;
    this[jsonEncodableCodec$] = (t40 = jsonEncodableCodec, t40 == null ? json_encodable_codec.sembastDefaultJsonEncodableCodec : t40);
    ;
  }).prototype = sembast_codec_impl.SembastCodecImpl.prototype;
  dart.addTypeTests(sembast_codec_impl.SembastCodecImpl);
  dart.addTypeCaches(sembast_codec_impl.SembastCodecImpl);
  sembast_codec_impl.SembastCodecImpl[dart.implements] = () => [codec.SembastCodec];
  dart.setLibraryUri(sembast_codec_impl.SembastCodecImpl, I[6]);
  dart.setFieldSignature(sembast_codec_impl.SembastCodecImpl, () => ({
    __proto__: dart.getFields(sembast_codec_impl.SembastCodecImpl.__proto__),
    signature: dart.finalFieldType(dart.nullable(core.String)),
    codec: dart.finalFieldType(dart.nullable(convert.Codec$(dart.nullable(core.Object), core.String))),
    jsonEncodableCodec: dart.fieldType(json_encodable_codec.JsonEncodableCodec)
  }));
  dart.defineExtensionMethods(sembast_codec_impl.SembastCodecImpl, ['toString']);
  sembast_codec_impl.getRawSignatureMap = function getRawSignatureMap(codec) {
    if (codec != null) {
      return new (T$.IdentityMapOfString$ObjectN()).from(["signature", codec.signature]);
    }
    return null;
  };
  sembast_codec_impl.getCodecEncodedSignature = function getCodecEncodedSignature(codec) {
    let t40, t40$;
    if ((t40 = codec, t40 == null ? null : t40.signature) != null) {
      t40$ = dart.nullCheck(codec).codec;
      return t40$ == null ? null : t40$.encode(dart.nullCheck(sembast_codec_impl.getRawSignatureMap(codec)));
    }
    return null;
  };
  sembast_codec_impl.getCodecDecodedSignature = function getCodecDecodedSignature(codec, encodedSignature) {
    let t40;
    if (codec != null && encodedSignature != null) {
      try {
        let result = (t40 = codec.codec, t40 == null ? null : t40.decode(encodedSignature));
        if (core.Map.is(result)) {
          return result[$cast](core.String, T$.ObjectN());
        }
      } catch (e) {
        let _ = dart.getThrown(e);
        if (core.Object.is(_)) {
        } else
          throw e;
      }
    }
    return null;
  };
  sembast_codec_impl.checkCodecEncodedSignature = function checkCodecEncodedSignature(codec, encodedSignature) {
    let t41;
    if ((t41 = codec, t41 == null ? null : t41.signature) == null && encodedSignature == null) {
      return null;
    }
    let rawSignatureMap = sembast_codec_impl.getRawSignatureMap(codec);
    let decodedSignature = sembast_codec_impl.getCodecDecodedSignature(codec, encodedSignature);
    let matches = true;
    if (rawSignatureMap == null) {
      if (encodedSignature != null) {
        matches = false;
      }
    } else if (decodedSignature == null) {
      matches = false;
    } else {
      if (rawSignatureMap[$length] != decodedSignature[$length] || dart.test(decodedSignature[$isEmpty])) {
        matches = false;
      } else {
        if (decodedSignature[$keys][$first] != rawSignatureMap[$keys][$first]) {
          matches = false;
        } else if (!dart.equals(decodedSignature[$values][$first], rawSignatureMap[$values][$first])) {
          matches = false;
        }
      }
    }
    if (!matches) {
      dart.throw(new exception.DatabaseException.invalidCodec("Invalid codec signature"));
    }
  };
  var store$ = dart.privateName(query_ref_impl, "SembastQueryRef.store");
  var finder$ = dart.privateName(query_ref_impl, "SembastQueryRef.finder");
  const _is_SembastQueryRef_default = Symbol('_is_SembastQueryRef_default');
  query_ref_impl.SembastQueryRef$ = dart.generic((K, V) => {
    var QueryListenerControllerOfK$V = () => (QueryListenerControllerOfK$V = dart.constFn(listener.QueryListenerController$(K, V)))();
    var VoidToQueryListenerControllerOfK$V = () => (VoidToQueryListenerControllerOfK$V = dart.constFn(dart.fnType(QueryListenerControllerOfK$V(), [])))();
    var QueryListenerControllerOfK$VTodynamic = () => (QueryListenerControllerOfK$VTodynamic = dart.constFn(dart.fnType(dart.dynamic, [QueryListenerControllerOfK$V()])))();
    var SembastStoreRefOfK$V = () => (SembastStoreRefOfK$V = dart.constFn(store_ref_impl.SembastStoreRef$(K, V)))();
    var SembastQueryRefOfK$V = () => (SembastQueryRefOfK$V = dart.constFn(query_ref_impl.SembastQueryRef$(K, V)))();
    var RecordSnapshotOfK$V = () => (RecordSnapshotOfK$V = dart.constFn(record_snapshot.RecordSnapshot$(K, V)))();
    var RecordSnapshotNOfK$V = () => (RecordSnapshotNOfK$V = dart.constFn(dart.nullable(RecordSnapshotOfK$V())))();
    var ListOfRecordSnapshotOfK$V = () => (ListOfRecordSnapshotOfK$V = dart.constFn(core.List$(RecordSnapshotOfK$V())))();
    var ListOfRecordSnapshotOfK$VToRecordSnapshotNOfK$V = () => (ListOfRecordSnapshotOfK$VToRecordSnapshotNOfK$V = dart.constFn(dart.fnType(RecordSnapshotNOfK$V(), [ListOfRecordSnapshotOfK$V()])))();
    class SembastQueryRef extends core.Object {
      get store() {
        return this[store$];
      }
      set store(value) {
        super.store = value;
      }
      get finder() {
        return this[finder$];
      }
      set finder(value) {
        super.finder = value;
      }
      toString() {
        return dart.str(this.store) + " " + dart.str(this.finder) + ")";
      }
      onSnapshots(database) {
        if (database == null) dart.nullFailed(I[7], 32, 59, "database");
        let db = database_impl.getDatabase(database);
        let ctlr = null;
        let ctlr$35isSet = false;
        function ctlr$35get() {
          return ctlr$35isSet ? ctlr : dart.throw(new _internal.LateError.localNI("ctlr"));
        }
        dart.fn(ctlr$35get, VoidToQueryListenerControllerOfK$V());
        function ctlr$35set(t44) {
          if (t44 == null) dart.nullFailed(I[7], 35, 40, "null");
          ctlr$35isSet = true;
          return ctlr = t44;
        }
        dart.fn(ctlr$35set, QueryListenerControllerOfK$VTodynamic());
        ctlr$35set(db.listener.addQuery(K, V, this, {onListen: dart.fn(() => async.async(dart.void, (function*() {
            try {
              yield db.notificationLock.synchronized(core.Null, dart.fn(() => async.async(core.Null, (function*() {
                let t46;
                let allMatching = (yield store_ref_impl['SembastStoreRefExtensionImpl|findImmutableRecords'](K, V, SembastStoreRefOfK$V().as(this.store), database, {finder: (t46 = this.finder, t46 == null ? null : t46.cloneWithoutLimits())}));
                if (false) {
                  core.print("matching " + dart.str(ctlr$35get()) + ": " + dart.str(allMatching[$length]) + " on " + dart.str(this));
                }
                yield ctlr$35get().add(allMatching, db.cooperator);
              }).bind(this)), T$.VoidToFutureOfNull()));
            } catch (e) {
              let error = dart.getThrown(e);
              let stackTrace = dart.stackTrace(e);
              if (core.Object.is(error)) {
                ctlr$35get().addError(error, stackTrace);
              } else
                throw e;
            }
          }).bind(this)), T$.VoidToFutureOfvoid())}));
        return ctlr$35get().stream;
      }
      getSnapshots(client) {
        if (client == null) dart.nullFailed(I[7], 65, 66, "client");
        return store_ref_impl['SembastStoreRefExtension|find'](K, V, this.store, client, {finder: this.finder});
      }
      getSnapshot(client) {
        if (client == null) dart.nullFailed(I[7], 69, 60, "client");
        return store_ref_impl['SembastStoreRefExtension|findFirst'](K, V, this.store, client, {finder: this.finder});
      }
      onSnapshot(database) {
        let t47;
        if (database == null) dart.nullFailed(I[7], 73, 53, "database");
        if ((t47 = this.finder, t47 == null ? null : t47.limit) !== 1) {
          return new (SembastQueryRefOfK$V()).new(this.store, finder_impl.cloneFinderFindFirst(this.finder)).onSnapshot(database);
        }
        return this.onSnapshots(database).map(RecordSnapshotNOfK$V(), dart.fn(list => {
          if (list == null) dart.nullFailed(I[7], 79, 15, "list");
          return dart.test(list[$isNotEmpty]) ? list[$first] : null;
        }, ListOfRecordSnapshotOfK$VToRecordSnapshotNOfK$V()));
      }
    }
    (SembastQueryRef.new = function(store, finder) {
      let t41;
      if (store == null) dart.nullFailed(I[7], 23, 12, "store");
      this[store$] = store;
      this[finder$] = (t41 = finder, t41 == null ? null : t41.clone());
      ;
    }).prototype = SembastQueryRef.prototype;
    dart.addTypeTests(SembastQueryRef);
    SembastQueryRef.prototype[_is_SembastQueryRef_default] = true;
    dart.addTypeCaches(SembastQueryRef);
    SembastQueryRef[dart.implements] = () => [query_ref.QueryRef$(K, V)];
    dart.setMethodSignature(SembastQueryRef, () => ({
      __proto__: dart.getMethods(SembastQueryRef.__proto__),
      onSnapshots: dart.fnType(async.Stream$(core.List$(record_snapshot.RecordSnapshot$(K, V))), [database$.Database]),
      getSnapshots: dart.fnType(async.Future$(core.List$(record_snapshot.RecordSnapshot$(K, V))), [client.DatabaseClient]),
      getSnapshot: dart.fnType(async.Future$(dart.nullable(record_snapshot.RecordSnapshot$(K, V))), [client.DatabaseClient]),
      onSnapshot: dart.fnType(async.Stream$(dart.nullable(record_snapshot.RecordSnapshot$(K, V))), [database$.Database])
    }));
    dart.setLibraryUri(SembastQueryRef, I[8]);
    dart.setFieldSignature(SembastQueryRef, () => ({
      __proto__: dart.getFields(SembastQueryRef.__proto__),
      store: dart.finalFieldType(store_ref.StoreRef$(K, V)),
      finder: dart.finalFieldType(dart.nullable(finder_impl.SembastFinder))
    }));
    dart.defineExtensionMethods(SembastQueryRef, ['toString']);
    return SembastQueryRef;
  });
  query_ref_impl.SembastQueryRef = query_ref_impl.SembastQueryRef$();
  dart.addTypeTests(query_ref_impl.SembastQueryRef, _is_SembastQueryRef_default);
  const _is_QueryRef_default = Symbol('_is_QueryRef_default');
  query_ref.QueryRef$ = dart.generic((K, V) => {
    class QueryRef extends core.Object {}
    (QueryRef.new = function() {
      ;
    }).prototype = QueryRef.prototype;
    dart.addTypeTests(QueryRef);
    QueryRef.prototype[_is_QueryRef_default] = true;
    dart.addTypeCaches(QueryRef);
    dart.setLibraryUri(QueryRef, I[9]);
    return QueryRef;
  });
  query_ref.QueryRef = query_ref.QueryRef$();
  dart.addTypeTests(query_ref.QueryRef, _is_QueryRef_default);
  var _id = dart.privateName(listener, "_id");
  listener._ControllerBase = class _ControllerBase extends core.Object {};
  (listener._ControllerBase.new = function() {
    this[_id] = null;
    this[_id] = listener._ControllerBase._lastId = dart.notNull(listener._ControllerBase._lastId) + 1;
  }).prototype = listener._ControllerBase.prototype;
  dart.addTypeTests(listener._ControllerBase);
  dart.addTypeCaches(listener._ControllerBase);
  dart.setLibraryUri(listener._ControllerBase, I[10]);
  dart.setFieldSignature(listener._ControllerBase, () => ({
    __proto__: dart.getFields(listener._ControllerBase.__proto__),
    [_id]: dart.fieldType(dart.nullable(core.int))
  }));
  dart.defineLazy(listener._ControllerBase, {
    /*listener._ControllerBase._lastId*/get _lastId() {
      return 0;
    },
    set _lastId(_) {}
  }, false);
  var onListen$ = dart.privateName(listener, "QueryListenerController.onListen");
  var queryRef$ = dart.privateName(listener, "QueryListenerController.queryRef");
  var list = dart.privateName(listener, "QueryListenerController.list");
  var _streamController = dart.privateName(listener, "_streamController");
  var _allMatching = dart.privateName(listener, "_allMatching");
  var _shouldAdd = dart.privateName(listener, "_shouldAdd");
  const _is_QueryListenerController_default = Symbol('_is_QueryListenerController_default');
  listener.QueryListenerController$ = dart.generic((K, V) => {
    var RecordSnapshotOfK$V = () => (RecordSnapshotOfK$V = dart.constFn(record_snapshot.RecordSnapshot$(K, V)))();
    var ListOfRecordSnapshotOfK$V = () => (ListOfRecordSnapshotOfK$V = dart.constFn(core.List$(RecordSnapshotOfK$V())))();
    var StreamControllerOfListOfRecordSnapshotOfK$V = () => (StreamControllerOfListOfRecordSnapshotOfK$V = dart.constFn(async.StreamController$(ListOfRecordSnapshotOfK$V())))();
    var ListNOfRecordSnapshotOfK$V = () => (ListNOfRecordSnapshotOfK$V = dart.constFn(dart.nullable(ListOfRecordSnapshotOfK$V())))();
    class QueryListenerController extends listener._ControllerBase {
      get onListen() {
        return this[onListen$];
      }
      set onListen(value) {
        this[onListen$] = value;
      }
      get queryRef() {
        return this[queryRef$];
      }
      set queryRef(value) {
        super.queryRef = value;
      }
      get list() {
        return this[list];
      }
      set list(value) {
        this[list] = ListNOfRecordSnapshotOfK$V().as(value);
      }
      get hasInitialData() {
        return this[_allMatching] != null;
      }
      get isClosed() {
        return dart.nullCheck(this[_streamController]).isClosed;
      }
      get finder() {
        return this.queryRef.finder;
      }
      get filter() {
        let t47;
        return T$.SembastFilterBaseN().as((t47 = this.finder, t47 == null ? null : t47.filter));
      }
      close() {
        let t47;
        t47 = this[_streamController];
        t47 == null ? null : t47.close();
      }
      get stream() {
        return dart.nullCheck(this[_streamController]).stream;
      }
      get [_shouldAdd]() {
        return !dart.test(this.isClosed) && dart.test(dart.nullCheck(this[_streamController]).hasListener);
      }
      add(allMatching, cooperator) {
        return async.async(dart.dynamic, (function* add() {
          let t47;
          if (!dart.test(this[_shouldAdd])) {
            return;
          }
          this[_allMatching] = allMatching;
          let list = finder_impl.recordsLimit(this[_allMatching], this.finder);
          if (!dart.test(this[_shouldAdd])) {
            return;
          }
          t47 = this[_streamController];
          t47 == null ? null : t47.add(record_impl.immutableListToSnapshots(K, V, dart.nullCheck(list)));
        }).bind(this));
      }
      addError(error, stackTrace) {
        if (error == null) dart.nullFailed(I[11], 102, 24, "error");
        if (stackTrace == null) dart.nullFailed(I[11], 102, 42, "stackTrace");
        if (!dart.test(this[_shouldAdd])) {
          return;
        }
        dart.nullCheck(this[_streamController]).addError(error, stackTrace);
      }
      update(records, cooperator) {
        if (records == null) dart.nullFailed(I[11], 113, 40, "records");
        return async.async(dart.dynamic, (function* update() {
          let t47, t47$, t47$0, t47$1;
          if (!dart.test(this[_shouldAdd])) {
            return;
          }
          let hasChanges = false;
          let allMatching = T$.ListOfImmutableSembastRecord().from(dart.nullCheck(this[_allMatching]));
          let keys = collection.LinkedHashSet.from(records[$map](dart.dynamic, dart.fn(record => {
            if (record == null) dart.nullFailed(I[11], 123, 38, "record");
            return record.key;
          }, T$.ImmutableSembastRecordTodynamic())));
          function _where(snapshot) {
            if (snapshot == null) dart.nullFailed(I[11], 125, 32, "snapshot");
            if (dart.test(keys.contains(snapshot.key))) {
              hasChanges = true;
              return true;
            }
            return false;
          }
          dart.fn(_where, T$.RecordSnapshotTobool());
          allMatching[$removeWhere](_where);
          for (let txnRecord of records) {
            if (!dart.test(this[_shouldAdd])) {
              return;
            }
            let matches = !dart.test(txnRecord.deleted) && dart.test(finder_impl.finderMatchesFilterAndBoundaries(this.finder, txnRecord));
            if (matches) {
              hasChanges = true;
              allMatching[$insert](sort$.findSortedIndex(record_impl.ImmutableSembastRecord, allMatching, txnRecord, (t47$ = (t47 = this.finder, t47 == null ? null : dart.bind(t47, 'compareThenKey')), t47$ == null ? C[0] || CT.C0 : t47$)), txnRecord);
            }
            if (dart.test((t47$1 = (t47$0 = cooperator, t47$0 == null ? null : t47$0.needCooperate), t47$1 == null ? false : t47$1))) {
              yield dart.nullCheck(cooperator).cooperate();
            }
          }
          if (dart.test(this.isClosed)) {
            return;
          }
          if (hasChanges) {
            yield this.add(allMatching, cooperator);
          }
        }).bind(this));
      }
      toString() {
        return "QueryListenerCtlr(" + dart.str(this[_id]) + ")";
      }
      restart() {
        if (dart.test(this[_shouldAdd])) {
          if (false) {
            core.print("restarting listener " + dart.str(this));
          }
          dart.nullCheck(this.onListen)();
        }
      }
    }
    (QueryListenerController.new = function(listener, queryRef, opts) {
      if (listener == null) dart.nullFailed(I[11], 57, 44, "listener");
      if (queryRef == null) dart.nullFailed(I[11], 57, 59, "queryRef");
      let onListen = opts && 'onListen' in opts ? opts.onListen : null;
      this[_streamController] = null;
      this[list] = null;
      this[_allMatching] = null;
      this[queryRef$] = queryRef;
      this[onListen$] = onListen;
      QueryListenerController.__proto__.new.call(this);
      this[_streamController] = StreamControllerOfListOfRecordSnapshotOfK$V().new({onCancel: dart.fn(() => {
          if (false) {
            core.print("onCancel " + dart.str(this));
          }
          listener.removeQuery(this);
          this.close();
        }, T$.VoidToNull()), onListen: dart.fn(() => {
          if (false) {
            core.print("onListen " + dart.str(this));
          }
          dart.nullCheck(this.onListen)();
        }, T$.VoidTovoid())});
    }).prototype = QueryListenerController.prototype;
    dart.addTypeTests(QueryListenerController);
    QueryListenerController.prototype[_is_QueryListenerController_default] = true;
    dart.addTypeCaches(QueryListenerController);
    dart.setMethodSignature(QueryListenerController, () => ({
      __proto__: dart.getMethods(QueryListenerController.__proto__),
      close: dart.fnType(dart.void, []),
      add: dart.fnType(async.Future, [dart.nullable(core.List$(record_impl.ImmutableSembastRecord)), dart.nullable(cooperator.Cooperator)]),
      addError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      update: dart.fnType(async.Future, [core.Iterable$(record_impl.ImmutableSembastRecord), dart.nullable(cooperator.Cooperator)]),
      restart: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(QueryListenerController, () => ({
      __proto__: dart.getGetters(QueryListenerController.__proto__),
      hasInitialData: core.bool,
      isClosed: core.bool,
      finder: dart.nullable(finder_impl.SembastFinder),
      filter: dart.nullable(filter_impl.SembastFilterBase),
      stream: async.Stream$(core.List$(record_snapshot.RecordSnapshot$(K, V))),
      [_shouldAdd]: core.bool
    }));
    dart.setLibraryUri(QueryListenerController, I[10]);
    dart.setFieldSignature(QueryListenerController, () => ({
      __proto__: dart.getFields(QueryListenerController.__proto__),
      onListen: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
      queryRef: dart.finalFieldType(query_ref_impl.SembastQueryRef$(K, V)),
      [_streamController]: dart.fieldType(dart.nullable(async.StreamController$(core.List$(record_snapshot.RecordSnapshot$(K, V))))),
      list: dart.fieldType(dart.nullable(core.List$(record_snapshot.RecordSnapshot$(K, V)))),
      [_allMatching]: dart.fieldType(dart.nullable(core.List$(record_impl.ImmutableSembastRecord)))
    }));
    dart.defineExtensionMethods(QueryListenerController, ['toString']);
    return QueryListenerController;
  });
  listener.QueryListenerController = listener.QueryListenerController$();
  dart.addTypeTests(listener.QueryListenerController, _is_QueryListenerController_default);
  var recordRef$ = dart.privateName(listener, "RecordListenerController.recordRef");
  var onListen$0 = dart.privateName(listener, "RecordListenerController.onListen");
  var hasInitialData = dart.privateName(listener, "RecordListenerController.hasInitialData");
  var __RecordListenerController__streamController = dart.privateName(listener, "_#RecordListenerController#_streamController");
  var __RecordListenerController__streamController_isSet = dart.privateName(listener, "_#RecordListenerController#_streamController#isSet");
  const _is_RecordListenerController_default = Symbol('_is_RecordListenerController_default');
  listener.RecordListenerController$ = dart.generic((K, V) => {
    var RecordSnapshotOfK$V = () => (RecordSnapshotOfK$V = dart.constFn(record_snapshot.RecordSnapshot$(K, V)))();
    var RecordSnapshotNOfK$V = () => (RecordSnapshotNOfK$V = dart.constFn(dart.nullable(RecordSnapshotOfK$V())))();
    var StreamControllerOfRecordSnapshotNOfK$V = () => (StreamControllerOfRecordSnapshotNOfK$V = dart.constFn(async.StreamController$(RecordSnapshotNOfK$V())))();
    class RecordListenerController extends listener._ControllerBase {
      get recordRef() {
        return this[recordRef$];
      }
      set recordRef(value) {
        super.recordRef = value;
      }
      get onListen() {
        return this[onListen$0];
      }
      set onListen(value) {
        this[onListen$0] = value;
      }
      get hasInitialData() {
        return this[hasInitialData];
      }
      set hasInitialData(value) {
        this[hasInitialData] = value;
      }
      get [_streamController]() {
        let t47;
        return dart.test(this[__RecordListenerController__streamController_isSet]) ? (t47 = this[__RecordListenerController__streamController], t47) : dart.throw(new _internal.LateError.fieldNI("_streamController"));
      }
      set [_streamController](t47) {
        if (t47 == null) dart.nullFailed(I[11], 191, 48, "null");
        this[__RecordListenerController__streamController_isSet] = true;
        this[__RecordListenerController__streamController] = t47;
      }
      close() {
        this[_streamController].close();
      }
      get isClosed() {
        return this[_streamController].isClosed;
      }
      get stream() {
        return this[_streamController].stream;
      }
      get [_shouldAdd]() {
        return !dart.test(this.isClosed) && dart.test(this[_streamController].hasListener);
      }
      add(snapshot) {
        let t48;
        if (!dart.test(this[_shouldAdd])) {
          return;
        }
        this.hasInitialData = true;
        this[_streamController].add((t48 = snapshot, t48 == null ? null : t48.cast(K, V)));
      }
      addError(error, stackTrace) {
        if (error == null) dart.nullFailed(I[11], 235, 24, "error");
        if (stackTrace == null) dart.nullFailed(I[11], 235, 42, "stackTrace");
        if (!dart.test(this[_shouldAdd])) {
          return;
        }
        this[_streamController].addError(error, stackTrace);
      }
      toString() {
        return "RecordListenerController(" + dart.str(this[_id]) + ")";
      }
      restart() {
        if (dart.test(this[_shouldAdd])) {
          if (false) {
            core.print("restarting listener " + dart.str(this));
          }
          dart.nullCheck(this.onListen)();
        }
      }
    }
    (RecordListenerController.new = function(listener, recordRef, opts) {
      if (listener == null) dart.nullFailed(I[11], 202, 45, "listener");
      if (recordRef == null) dart.nullFailed(I[11], 202, 60, "recordRef");
      let onListen = opts && 'onListen' in opts ? opts.onListen : null;
      this[hasInitialData] = false;
      this[__RecordListenerController__streamController] = null;
      this[__RecordListenerController__streamController_isSet] = false;
      this[recordRef$] = recordRef;
      this[onListen$0] = onListen;
      RecordListenerController.__proto__.new.call(this);
      this[_streamController] = StreamControllerOfRecordSnapshotNOfK$V().new({onCancel: dart.fn(() => {
          if (false) {
            core.print("onCancel " + dart.str(this));
          }
          listener.removeRecord(this);
          this.close();
        }, T$.VoidToNull()), onListen: dart.fn(() => {
          if (false) {
            core.print("onListen " + dart.str(this));
          }
          dart.nullCheck(this.onListen)();
        }, T$.VoidTovoid())});
    }).prototype = RecordListenerController.prototype;
    dart.addTypeTests(RecordListenerController);
    RecordListenerController.prototype[_is_RecordListenerController_default] = true;
    dart.addTypeCaches(RecordListenerController);
    dart.setMethodSignature(RecordListenerController, () => ({
      __proto__: dart.getMethods(RecordListenerController.__proto__),
      close: dart.fnType(dart.void, []),
      add: dart.fnType(dart.void, [dart.nullable(record_snapshot.RecordSnapshot)]),
      addError: dart.fnType(dart.void, [core.Object, core.StackTrace]),
      restart: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(RecordListenerController, () => ({
      __proto__: dart.getGetters(RecordListenerController.__proto__),
      [_streamController]: async.StreamController$(dart.nullable(record_snapshot.RecordSnapshot$(K, V))),
      isClosed: core.bool,
      stream: async.Stream$(dart.nullable(record_snapshot.RecordSnapshot$(K, V))),
      [_shouldAdd]: core.bool
    }));
    dart.setSetterSignature(RecordListenerController, () => ({
      __proto__: dart.getSetters(RecordListenerController.__proto__),
      [_streamController]: async.StreamController$(dart.nullable(record_snapshot.RecordSnapshot$(K, V)))
    }));
    dart.setLibraryUri(RecordListenerController, I[10]);
    dart.setFieldSignature(RecordListenerController, () => ({
      __proto__: dart.getFields(RecordListenerController.__proto__),
      recordRef: dart.finalFieldType(record_ref.RecordRef$(K, V)),
      onListen: dart.fieldType(dart.nullable(dart.fnType(dart.void, []))),
      hasInitialData: dart.fieldType(core.bool),
      [__RecordListenerController__streamController]: dart.fieldType(dart.nullable(async.StreamController$(dart.nullable(record_snapshot.RecordSnapshot$(K, V))))),
      [__RecordListenerController__streamController_isSet]: dart.fieldType(core.bool)
    }));
    dart.defineExtensionMethods(RecordListenerController, ['toString']);
    return RecordListenerController;
  });
  listener.RecordListenerController = listener.RecordListenerController$();
  dart.addTypeTests(listener.RecordListenerController, _is_RecordListenerController_default);
  var store$0 = dart.privateName(listener, "StoreListener.store");
  var _records = dart.privateName(listener, "_records");
  var _queries = dart.privateName(listener, "_queries");
  listener.StoreListener = class StoreListener extends core.Object {
    get store() {
      return this[store$0];
    }
    set store(value) {
      super.store = value;
    }
    addRecord(K, V, recordRef, ctlr) {
      if (recordRef == null) dart.nullFailed(I[11], 268, 23, "recordRef");
      if (ctlr == null) dart.nullFailed(I[11], 268, 65, "ctlr");
      let key = recordRef.key;
      let list = this[_records][$_get](key);
      if (list == null) {
        list = T$.JSArrayOfRecordListenerController().of([]);
        this[_records][$_set](key, list);
      }
      list[$add](ctlr);
      return ctlr;
    }
    addQuery(K, V, ctlr) {
      if (ctlr == null) dart.nullFailed(I[11], 281, 37, "ctlr");
      this[_queries][$add](ctlr);
      return ctlr;
    }
    removeQuery(ctlr) {
      if (ctlr == null) dart.nullFailed(I[11], 287, 44, "ctlr");
      ctlr.close();
      this[_queries][$remove](ctlr);
    }
    removeRecord(ctlr) {
      if (ctlr == null) dart.nullFailed(I[11], 293, 46, "ctlr");
      ctlr.close();
      let key = ctlr.recordRef.key;
      let list = this[_records][$_get](key);
      if (list != null) {
        list[$remove](ctlr);
        if (dart.test(list[$isEmpty])) {
          this[_records][$remove](key);
        }
      }
    }
    get recordKeys() {
      return this[_records][$keys];
    }
    getRecordControllers(K, V, recordRef) {
      let t48;
      if (recordRef == null) dart.nullFailed(I[11], 310, 23, "recordRef");
      t48 = this[_records][$_get](recordRef.key);
      return t48 == null ? null : t48[$cast](listener.RecordListenerController$(K, V));
    }
    keyHasRecordListener(key) {
      return this[_records][$containsKey](key);
    }
    keyHasAnyListener(key) {
      return dart.test(this.hasQueryListener) || dart.test(this.keyHasRecordListener(key));
    }
    get hasQueryListener() {
      return this[_queries][$isNotEmpty];
    }
    getQueryListenerControllers(K, V) {
      return this[_queries][$cast](listener.QueryListenerController$(K, V));
    }
    get isEmpty() {
      return dart.test(this[_records][$isEmpty]) && dart.test(this[_queries][$isEmpty]);
    }
    restart() {
      for (let list of this[_records][$values]) {
        for (let recordController of list) {
          recordController.restart();
        }
      }
      for (let queryController of this[_queries]) {
        queryController.restart();
      }
    }
  };
  (listener.StoreListener.new = function(store) {
    if (store == null) dart.nullFailed(I[11], 264, 22, "store");
    this[_records] = new (T$.LinkedMapOfObjectN$ListOfRecordListenerController()).new();
    this[_queries] = T$.JSArrayOfQueryListenerController().of([]);
    this[store$0] = store;
    ;
  }).prototype = listener.StoreListener.prototype;
  dart.addTypeTests(listener.StoreListener);
  dart.addTypeCaches(listener.StoreListener);
  dart.setMethodSignature(listener.StoreListener, () => ({
    __proto__: dart.getMethods(listener.StoreListener.__proto__),
    addRecord: dart.gFnType((K, V) => [listener.RecordListenerController$(K, V), [record_ref.RecordRef$(K, V), listener.RecordListenerController$(K, V)]], (K, V) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    addQuery: dart.gFnType((K, V) => [listener.QueryListenerController$(K, V), [listener.QueryListenerController$(K, V)]], (K, V) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    removeQuery: dart.fnType(dart.void, [listener.QueryListenerController]),
    removeRecord: dart.fnType(dart.void, [listener.RecordListenerController]),
    getRecordControllers: dart.gFnType((K, V) => [dart.nullable(core.List$(listener.RecordListenerController$(K, V))), [record_ref.RecordRef$(K, V)]], (K, V) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    keyHasRecordListener: dart.fnType(core.bool, [dart.dynamic]),
    keyHasAnyListener: dart.fnType(core.bool, [dart.dynamic]),
    getQueryListenerControllers: dart.gFnType((K, V) => [core.List$(listener.QueryListenerController$(K, V)), []], (K, V) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    restart: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(listener.StoreListener, () => ({
    __proto__: dart.getGetters(listener.StoreListener.__proto__),
    recordKeys: core.Iterable$(dart.nullable(core.Object)),
    hasQueryListener: core.bool,
    isEmpty: core.bool
  }));
  dart.setLibraryUri(listener.StoreListener, I[10]);
  dart.setFieldSignature(listener.StoreListener, () => ({
    __proto__: dart.getFields(listener.StoreListener.__proto__),
    store: dart.finalFieldType(store_ref.StoreRef),
    [_records]: dart.finalFieldType(core.Map$(dart.nullable(core.Object), core.List$(listener.RecordListenerController))),
    [_queries]: dart.finalFieldType(core.List$(listener.QueryListenerController))
  }));
  var _stores = dart.privateName(listener, "_stores");
  listener.DatabaseListener = class DatabaseListener extends core.Object {
    get isNotEmpty() {
      return this[_stores][$isNotEmpty];
    }
    get isEmpty() {
      return this[_stores][$isEmpty];
    }
    addRecord(K, V, recordRef, opts) {
      if (recordRef == null) dart.nullFailed(I[11], 356, 66, "recordRef");
      let onListen = opts && 'onListen' in opts ? opts.onListen : null;
      let ctlr = new (listener.RecordListenerController$(K, V)).new(this, recordRef, {onListen: onListen});
      let storeRef = recordRef.store;
      let store = this[_stores][$_get](storeRef);
      if (store == null) {
        store = new listener.StoreListener.new(storeRef);
        this[_stores][$_set](storeRef, store);
      }
      return store.addRecord(K, V, recordRef, ctlr);
    }
    addQuery(K, V, queryRef, opts) {
      if (queryRef == null) dart.nullFailed(I[11], 370, 63, "queryRef");
      let onListen = opts && 'onListen' in opts ? opts.onListen : null;
      let ctlr = this.newQuery(K, V, queryRef, {onListen: onListen});
      this.addQueryController(K, V, ctlr);
      return ctlr;
    }
    newQuery(K, V, queryRef, opts) {
      if (queryRef == null) dart.nullFailed(I[11], 378, 63, "queryRef");
      let onListen = opts && 'onListen' in opts ? opts.onListen : null;
      let ref = query_ref_impl.SembastQueryRef$(K, V).as(queryRef);
      let ctlr = new (listener.QueryListenerController$(K, V)).new(this, ref, {onListen: onListen});
      return ctlr;
    }
    addQueryController(K, V, ctlr) {
      if (ctlr == null) dart.nullFailed(I[11], 386, 63, "ctlr");
      let storeRef = ctlr.queryRef.store;
      let store = this[_stores][$_get](storeRef);
      if (store == null) {
        store = new listener.StoreListener.new(storeRef);
        this[_stores][$_set](storeRef, store);
      }
      store.addQuery(K, V, ctlr);
    }
    removeRecord(ctlr) {
      if (ctlr == null) dart.nullFailed(I[11], 397, 46, "ctlr");
      ctlr.close();
      let recordRef = ctlr.recordRef;
      let storeRef = recordRef.store;
      let store = this[_stores][$_get](storeRef);
      if (store != null) {
        store.removeRecord(ctlr);
        if (dart.test(store.isEmpty)) {
          this[_stores][$remove](storeRef);
        }
      }
    }
    removeQuery(ctlr) {
      if (ctlr == null) dart.nullFailed(I[11], 411, 44, "ctlr");
      ctlr.close();
      let storeRef = ctlr.queryRef.store;
      let store = this[_stores][$_get](storeRef);
      if (store != null) {
        store.removeQuery(ctlr);
        if (dart.test(store.isEmpty)) {
          this[_stores][$remove](storeRef);
        }
      }
    }
    getRecord(K, V, recordRef) {
      let t48;
      if (recordRef == null) dart.nullFailed(I[11], 425, 23, "recordRef");
      t48 = dart.nullCheck(this[_stores][$_get](T$.StoreRefOfObjectN$ObjectN().as(recordRef))).getRecordControllers(K, V, recordRef);
      return t48 == null ? null : t48[$cast](listener.RecordListenerController$(K, V));
    }
    getStore(ref) {
      if (ref == null) dart.nullFailed(I[11], 432, 36, "ref");
      return this[_stores][$_get](ref);
    }
    get stores() {
      return this[_stores][$keys];
    }
    close() {
      this[_stores][$values][$forEach](dart.fn(storeListener => {
        if (storeListener == null) dart.nullFailed(I[11], 439, 29, "storeListener");
        storeListener[_queries][$forEach](dart.fn(queryListener => {
          if (queryListener == null) dart.nullFailed(I[11], 440, 39, "queryListener");
          queryListener.close();
        }, T$.QueryListenerControllerTovoid()));
        storeListener[_records][$values][$forEach](dart.fn(recordListeners => {
          if (recordListeners == null) dart.nullFailed(I[11], 443, 46, "recordListeners");
          recordListeners[$forEach](dart.fn(recordListener => {
            if (recordListener == null) dart.nullFailed(I[11], 444, 34, "recordListener");
            return recordListener.close();
          }, T$.RecordListenerControllerTovoid()));
        }, T$.ListOfRecordListenerControllerTovoid()));
      }, T$.StoreListenerTovoid()));
      this[_stores][$clear]();
    }
    recordHasAnyListener(record) {
      let t48, t48$;
      if (record == null) dart.nullFailed(I[11], 451, 39, "record");
      t48$ = (t48 = this.getStore(record.store), t48 == null ? null : t48.keyHasAnyListener(record.key));
      return t48$ == null ? false : t48$;
    }
  };
  (listener.DatabaseListener.new = function() {
    this[_stores] = new (T$.LinkedMapOfStoreRef$StoreListener()).new();
    ;
  }).prototype = listener.DatabaseListener.prototype;
  dart.addTypeTests(listener.DatabaseListener);
  dart.addTypeCaches(listener.DatabaseListener);
  dart.setMethodSignature(listener.DatabaseListener, () => ({
    __proto__: dart.getMethods(listener.DatabaseListener.__proto__),
    addRecord: dart.gFnType((K, V) => [listener.RecordListenerController$(K, V), [record_ref.RecordRef$(K, V)], {}, {onListen: dart.nullable(dart.fnType(dart.void, []))}], (K, V) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    addQuery: dart.gFnType((K, V) => [listener.QueryListenerController$(K, V), [query_ref.QueryRef$(K, V)], {}, {onListen: dart.nullable(dart.fnType(dart.void, []))}], (K, V) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    newQuery: dart.gFnType((K, V) => [listener.QueryListenerController$(K, V), [query_ref.QueryRef$(K, V)], {}, {onListen: dart.nullable(dart.fnType(dart.void, []))}], (K, V) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    addQueryController: dart.gFnType((K, V) => [dart.void, [listener.QueryListenerController$(K, V)]], (K, V) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    removeRecord: dart.fnType(dart.void, [listener.RecordListenerController]),
    removeQuery: dart.fnType(dart.void, [listener.QueryListenerController]),
    getRecord: dart.gFnType((K, V) => [dart.nullable(core.List$(listener.RecordListenerController$(K, V))), [record_ref.RecordRef$(K, V)]], (K, V) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    getStore: dart.fnType(dart.nullable(listener.StoreListener), [store_ref.StoreRef]),
    close: dart.fnType(dart.void, []),
    recordHasAnyListener: dart.fnType(core.bool, [record_ref.RecordRef])
  }));
  dart.setGetterSignature(listener.DatabaseListener, () => ({
    __proto__: dart.getGetters(listener.DatabaseListener.__proto__),
    isNotEmpty: core.bool,
    isEmpty: core.bool,
    stores: core.Iterable$(store_ref.StoreRef)
  }));
  dart.setLibraryUri(listener.DatabaseListener, I[10]);
  dart.setFieldSignature(listener.DatabaseListener, () => ({
    __proto__: dart.getFields(listener.DatabaseListener.__proto__),
    [_stores]: dart.finalFieldType(core.Map$(store_ref.StoreRef, listener.StoreListener))
  }));
  var store$1 = dart.privateName(database_content, "StoreContent.store");
  var _map = dart.privateName(database_content, "_map");
  database_content.StoreContent = class StoreContent extends core.Object {
    get store() {
      return this[store$1];
    }
    set store(value) {
      super.store = value;
    }
    get records() {
      return this[_map][$values];
    }
    addAll(records) {
      if (records == null) dart.nullFailed(I[12], 19, 48, "records");
      for (let record of records) {
        this.add(record);
      }
    }
    add(record) {
      if (record == null) dart.nullFailed(I[12], 26, 35, "record");
      this[_map][$_set](record.key, record);
    }
    record(key) {
      return this[_map][$_get](key);
    }
    toString() {
      return dart.str(this.store.name) + " " + dart.str(this.records[$length]);
    }
  };
  (database_content.StoreContent.new = function(store) {
    if (store == null) dart.nullFailed(I[12], 13, 21, "store");
    this[_map] = new (T$.LinkedMapOfObjectN$ImmutableSembastRecord()).new();
    this[store$1] = store;
    ;
  }).prototype = database_content.StoreContent.prototype;
  dart.addTypeTests(database_content.StoreContent);
  dart.addTypeCaches(database_content.StoreContent);
  dart.setMethodSignature(database_content.StoreContent, () => ({
    __proto__: dart.getMethods(database_content.StoreContent.__proto__),
    addAll: dart.fnType(dart.void, [core.Iterable$(record_impl.ImmutableSembastRecord)]),
    add: dart.fnType(dart.void, [record_impl.ImmutableSembastRecord]),
    record: dart.fnType(dart.nullable(record_impl.ImmutableSembastRecord), [dart.dynamic])
  }));
  dart.setGetterSignature(database_content.StoreContent, () => ({
    __proto__: dart.getGetters(database_content.StoreContent.__proto__),
    records: core.Iterable$(record_impl.ImmutableSembastRecord)
  }));
  dart.setLibraryUri(database_content.StoreContent, I[13]);
  dart.setFieldSignature(database_content.StoreContent, () => ({
    __proto__: dart.getFields(database_content.StoreContent.__proto__),
    store: dart.finalFieldType(store_ref.StoreRef),
    [_map]: dart.finalFieldType(core.Map$(dart.nullable(core.Object), record_impl.ImmutableSembastRecord))
  }));
  dart.defineExtensionMethods(database_content.StoreContent, ['toString']);
  database_content.DatabaseContent = class DatabaseContent extends core.Object {
    get isNotEmpty() {
      return this[_map][$isNotEmpty];
    }
    get stores() {
      return this[_map][$values];
    }
    addAll(records) {
      if (records == null) dart.nullFailed(I[12], 50, 48, "records");
      for (let record of records) {
        this.addRecord(record);
      }
    }
    addRecord(record) {
      if (record == null) dart.nullFailed(I[12], 57, 41, "record");
      let store = record.ref.store;
      let content = this.addStore(store);
      content.add(record);
    }
    addStore(store) {
      let t51, t50, t49, t48;
      if (store == null) dart.nullFailed(I[12], 64, 34, "store");
      let content = (t48 = this[_map], t49 = store, t50 = t48[$_get](t49), t50 == null ? (t51 = new database_content.StoreContent.new(store), t48[$_set](t49, t51), t51) : t50);
      return content;
    }
    store(store) {
      if (store == null) dart.nullFailed(I[12], 70, 32, "store");
      return this[_map][$_get](store);
    }
    toString() {
      return dart.str(this.stores);
    }
  };
  (database_content.DatabaseContent.new = function() {
    this[_map] = new (T$.LinkedMapOfStoreRef$StoreContent()).new();
    ;
  }).prototype = database_content.DatabaseContent.prototype;
  dart.addTypeTests(database_content.DatabaseContent);
  dart.addTypeCaches(database_content.DatabaseContent);
  dart.setMethodSignature(database_content.DatabaseContent, () => ({
    __proto__: dart.getMethods(database_content.DatabaseContent.__proto__),
    addAll: dart.fnType(dart.void, [core.Iterable$(record_impl.ImmutableSembastRecord)]),
    addRecord: dart.fnType(dart.void, [record_impl.ImmutableSembastRecord]),
    addStore: dart.fnType(database_content.StoreContent, [store_ref.StoreRef]),
    store: dart.fnType(dart.nullable(database_content.StoreContent), [store_ref.StoreRef])
  }));
  dart.setGetterSignature(database_content.DatabaseContent, () => ({
    __proto__: dart.getGetters(database_content.DatabaseContent.__proto__),
    isNotEmpty: core.bool,
    stores: core.Iterable$(database_content.StoreContent)
  }));
  dart.setLibraryUri(database_content.DatabaseContent, I[13]);
  dart.setFieldSignature(database_content.DatabaseContent, () => ({
    __proto__: dart.getFields(database_content.DatabaseContent.__proto__),
    [_map]: dart.finalFieldType(core.Map$(store_ref.StoreRef, database_content.StoreContent))
  }));
  dart.defineExtensionMethods(database_content.DatabaseContent, ['toString']);
  database_content.DatabaseListenerContent = class DatabaseListenerContent extends database_content.DatabaseContent {
    removeStore(store) {
      if (store == null) dart.nullFailed(I[12], 79, 29, "store");
      this[_map][$remove](store);
    }
    clear() {
      this[_map][$clear]();
    }
    getAndRemoveFirstStore() {
      if (dart.test(this.isNotEmpty)) {
        let storeContent = this[_map][$values][$first];
        this[_map][$remove](storeContent.store);
        return storeContent;
      }
      return null;
    }
  };
  (database_content.DatabaseListenerContent.new = function() {
    database_content.DatabaseListenerContent.__proto__.new.call(this);
    ;
  }).prototype = database_content.DatabaseListenerContent.prototype;
  dart.addTypeTests(database_content.DatabaseListenerContent);
  dart.addTypeCaches(database_content.DatabaseListenerContent);
  dart.setMethodSignature(database_content.DatabaseListenerContent, () => ({
    __proto__: dart.getMethods(database_content.DatabaseListenerContent.__proto__),
    removeStore: dart.fnType(dart.void, [store_ref.StoreRef]),
    clear: dart.fnType(dart.void, []),
    getAndRemoveFirstStore: dart.fnType(dart.nullable(database_content.StoreContent), [])
  }));
  dart.setLibraryUri(database_content.DatabaseListenerContent, I[13]);
  var _records$ = dart.privateName(database_content, "_records");
  database_content.TxnDatabaseContent = class TxnDatabaseContent extends database_content.DatabaseContent {
    get txnRecords() {
      return this[_records$];
    }
    addTxnRecord(record) {
      if (record == null) dart.nullFailed(I[12], 107, 31, "record");
      this[_records$][$add](record);
      this.addRecord(record.record);
    }
    addTxnStoreRecords(store, records) {
      if (store == null) dart.nullFailed(I[12], 113, 36, "store");
      if (records == null) dart.nullFailed(I[12], 113, 63, "records");
      this.addStore(store).addAll(records[$map](record_impl.ImmutableSembastRecord, dart.fn(record => {
        if (record == null) dart.nullFailed(I[12], 114, 41, "record");
        return record.record;
      }, T$.TxnRecordToImmutableSembastRecord())));
      this[_records$][$addAll](records);
    }
  };
  (database_content.TxnDatabaseContent.new = function() {
    this[_records$] = T$.JSArrayOfTxnRecord().of([]);
    database_content.TxnDatabaseContent.__proto__.new.call(this);
    ;
  }).prototype = database_content.TxnDatabaseContent.prototype;
  dart.addTypeTests(database_content.TxnDatabaseContent);
  dart.addTypeCaches(database_content.TxnDatabaseContent);
  dart.setMethodSignature(database_content.TxnDatabaseContent, () => ({
    __proto__: dart.getMethods(database_content.TxnDatabaseContent.__proto__),
    addTxnRecord: dart.fnType(dart.void, [record_impl.TxnRecord]),
    addTxnStoreRecords: dart.fnType(dart.void, [store_ref.StoreRef, core.Iterable$(record_impl.TxnRecord)])
  }));
  dart.setGetterSignature(database_content.TxnDatabaseContent, () => ({
    __proto__: dart.getGetters(database_content.TxnDatabaseContent.__proto__),
    txnRecords: core.List$(record_impl.TxnRecord)
  }));
  dart.setLibraryUri(database_content.TxnDatabaseContent, I[13]);
  dart.setFieldSignature(database_content.TxnDatabaseContent, () => ({
    __proto__: dart.getFields(database_content.TxnDatabaseContent.__proto__),
    [_records$]: dart.finalFieldType(core.List$(record_impl.TxnRecord))
  }));
  var version$ = dart.privateName(meta$, "Meta.version");
  var sembastVersion = dart.privateName(meta$, "Meta.sembastVersion");
  var codecSignature$ = dart.privateName(meta$, "Meta.codecSignature");
  meta$.Meta = class Meta extends core.Object {
    get version() {
      return this[version$];
    }
    set version(value) {
      this[version$] = value;
    }
    get sembastVersion() {
      return this[sembastVersion];
    }
    set sembastVersion(value) {
      this[sembastVersion] = value;
    }
    get codecSignature() {
      return this[codecSignature$];
    }
    set codecSignature(value) {
      this[codecSignature$] = value;
    }
    static isMapMeta(map) {
      return map != null && map[$_get]("version") != null;
    }
    toMap() {
      let map = new (T$.IdentityMapOfString$ObjectN()).from(["version", this.version, "sembast", this.sembastVersion]);
      if (this.codecSignature != null) {
        map[$_set]("codec", this.codecSignature);
      }
      return map;
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (meta$.Meta.fromMap = function(map) {
    if (map == null) dart.nullFailed(I[14], 15, 20, "map");
    this[sembastVersion] = 1;
    this[codecSignature$] = null;
    this[version$] = null;
    this.version = T$.intN().as(map[$_get]("version"));
    this.sembastVersion = T$.intN().as(map[$_get]("sembast"));
    this.codecSignature = T$.StringN().as(map[$_get]("codec"));
  }).prototype = meta$.Meta.prototype;
  (meta$.Meta.new = function(opts) {
    let version = opts && 'version' in opts ? opts.version : null;
    let codecSignature = opts && 'codecSignature' in opts ? opts.codecSignature : null;
    this[sembastVersion] = 1;
    this[version$] = version;
    this[codecSignature$] = codecSignature;
    ;
  }).prototype = meta$.Meta.prototype;
  dart.addTypeTests(meta$.Meta);
  dart.addTypeCaches(meta$.Meta);
  dart.setMethodSignature(meta$.Meta, () => ({
    __proto__: dart.getMethods(meta$.Meta.__proto__),
    toMap: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [])
  }));
  dart.setLibraryUri(meta$.Meta, I[15]);
  dart.setFieldSignature(meta$.Meta, () => ({
    __proto__: dart.getFields(meta$.Meta.__proto__),
    version: dart.fieldType(dart.nullable(core.int)),
    sembastVersion: dart.fieldType(dart.nullable(core.int)),
    codecSignature: dart.fieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(meta$.Meta, ['toString']);
  storage.StorageBase = class StorageBase extends core.Object {};
  (storage.StorageBase.new = function() {
    ;
  }).prototype = storage.StorageBase.prototype;
  dart.addTypeTests(storage.StorageBase);
  dart.addTypeCaches(storage.StorageBase);
  dart.setLibraryUri(storage.StorageBase, I[16]);
  storage.DatabaseStorage = class DatabaseStorage extends storage.StorageBase {
    appendLine(line) {
      if (line == null) dart.nullFailed(I[17], 47, 28, "line");
      return this.appendLines(T$.JSArrayOfString().of([line]));
    }
  };
  (storage.DatabaseStorage.new = function() {
    ;
  }).prototype = storage.DatabaseStorage.prototype;
  dart.addTypeTests(storage.DatabaseStorage);
  dart.addTypeCaches(storage.DatabaseStorage);
  dart.setMethodSignature(storage.DatabaseStorage, () => ({
    __proto__: dart.getMethods(storage.DatabaseStorage.__proto__),
    appendLine: dart.fnType(async.Future, [core.String])
  }));
  dart.setLibraryUri(storage.DatabaseStorage, I[16]);
  var revision$ = dart.privateName(storage, "StorageJdbStateUpdate.revision");
  var minDeltaImportRevision$ = dart.privateName(storage, "StorageJdbStateUpdate.minDeltaImportRevision");
  storage.StorageJdbStateUpdate = class StorageJdbStateUpdate extends core.Object {
    get revision() {
      return this[revision$];
    }
    set revision(value) {
      super.revision = value;
    }
    get minDeltaImportRevision() {
      return this[minDeltaImportRevision$];
    }
    set minDeltaImportRevision(value) {
      super.minDeltaImportRevision = value;
    }
  };
  (storage.StorageJdbStateUpdate.new = function(revision, minDeltaImportRevision) {
    if (revision == null) dart.nullFailed(I[17], 59, 30, "revision");
    if (minDeltaImportRevision == null) dart.nullFailed(I[17], 59, 45, "minDeltaImportRevision");
    this[revision$] = revision;
    this[minDeltaImportRevision$] = minDeltaImportRevision;
    ;
  }).prototype = storage.StorageJdbStateUpdate.prototype;
  dart.addTypeTests(storage.StorageJdbStateUpdate);
  dart.addTypeCaches(storage.StorageJdbStateUpdate);
  dart.setLibraryUri(storage.StorageJdbStateUpdate, I[16]);
  dart.setFieldSignature(storage.StorageJdbStateUpdate, () => ({
    __proto__: dart.getFields(storage.StorageJdbStateUpdate.__proto__),
    revision: dart.finalFieldType(core.int),
    minDeltaImportRevision: dart.finalFieldType(core.int)
  }));
  var originalRevision$ = dart.privateName(storage, "StorageJdbIncrementRevisionStatus.originalRevision");
  var readRevision$ = dart.privateName(storage, "StorageJdbIncrementRevisionStatus.readRevision");
  var success$ = dart.privateName(storage, "StorageJdbIncrementRevisionStatus.success");
  storage.StorageJdbIncrementRevisionStatus = class StorageJdbIncrementRevisionStatus extends core.Object {
    get originalRevision() {
      return this[originalRevision$];
    }
    set originalRevision(value) {
      super.originalRevision = value;
    }
    get readRevision() {
      return this[readRevision$];
    }
    set readRevision(value) {
      super.readRevision = value;
    }
    get success() {
      return this[success$];
    }
    set success(value) {
      super.success = value;
    }
    toString() {
      return "original " + dart.str(this.originalRevision) + " read " + dart.str(this.readRevision) + " success " + dart.str(this.success);
    }
  };
  (storage.StorageJdbIncrementRevisionStatus.new = function(originalRevision, readRevision, success) {
    if (originalRevision == null) dart.nullFailed(I[17], 75, 12, "originalRevision");
    if (readRevision == null) dart.nullFailed(I[17], 75, 35, "readRevision");
    if (success == null) dart.nullFailed(I[17], 75, 54, "success");
    this[originalRevision$] = originalRevision;
    this[readRevision$] = readRevision;
    this[success$] = success;
    ;
  }).prototype = storage.StorageJdbIncrementRevisionStatus.prototype;
  dart.addTypeTests(storage.StorageJdbIncrementRevisionStatus);
  dart.addTypeCaches(storage.StorageJdbIncrementRevisionStatus);
  dart.setLibraryUri(storage.StorageJdbIncrementRevisionStatus, I[16]);
  dart.setFieldSignature(storage.StorageJdbIncrementRevisionStatus, () => ({
    __proto__: dart.getFields(storage.StorageJdbIncrementRevisionStatus.__proto__),
    originalRevision: dart.finalFieldType(core.int),
    readRevision: dart.finalFieldType(core.int),
    success: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(storage.StorageJdbIncrementRevisionStatus, ['toString']);
  storage.StorageJdb = class StorageJdb extends storage.StorageBase {};
  (storage.StorageJdb.new = function() {
    ;
  }).prototype = storage.StorageJdb.prototype;
  dart.addTypeTests(storage.StorageJdb);
  dart.addTypeCaches(storage.StorageJdb);
  dart.setLibraryUri(storage.StorageJdb, I[16]);
  storage.jdbStoreLastIdKey = function jdbStoreLastIdKey(store) {
    if (store == null) dart.nullFailed(I[17], 83, 33, "store");
    return dart.str(store) + "_store_last_id";
  };
  storage.getStoreLastIntKeyInfoEntry = function getStoreLastIntKeyInfoEntry(store, lastIntKey) {
    let t48;
    if (store == null) dart.nullFailed(I[17], 88, 49, "store");
    t48 = new jdb.JdbInfoEntry.new();
    return (() => {
      t48.id = storage.jdbStoreLastIdKey(store);
      t48.value = lastIntKey;
      return t48;
    })();
  };
  storage.getMetaInfoEntry = function getMetaInfoEntry(meta) {
    let t48;
    if (meta == null) dart.nullFailed(I[17], 94, 36, "meta");
    t48 = new jdb.JdbInfoEntry.new();
    return (() => {
      t48.id = "meta";
      t48.value = meta.toMap();
      return t48;
    })();
  };
  var jdbFactory$ = dart.privateName(sembast_jdb, "SembastStorageJdb.jdbFactory");
  var jdbDatabase = dart.privateName(sembast_jdb, "SembastStorageJdb.jdbDatabase");
  var options$ = dart.privateName(sembast_jdb, "SembastStorageJdb.options");
  var path$ = dart.privateName(sembast_jdb, "SembastStorageJdb.path");
  var _logV = dart.privateName(sembast_jdb, "_logV");
  sembast_jdb.SembastStorageJdb = class SembastStorageJdb extends storage.StorageBase {
    get jdbFactory() {
      return this[jdbFactory$];
    }
    set jdbFactory(value) {
      super.jdbFactory = value;
    }
    get jdbDatabase() {
      return this[jdbDatabase];
    }
    set jdbDatabase(value) {
      this[jdbDatabase] = value;
    }
    get options() {
      return this[options$];
    }
    set options(value) {
      this[options$] = value;
    }
    get path() {
      return this[path$];
    }
    set path(value) {
      super.path = value;
    }
    get supported() {
      return true;
    }
    delete() {
      return async.async(dart.dynamic, (function* $delete() {
        try {
          yield this.jdbFactory.delete(this.path);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            if (dart.test(this[_logV])) {
              core.print("delete failed " + dart.str(this.path) + " " + dart.str(e));
            }
          } else
            throw e$;
        }
      }).bind(this));
    }
    toString() {
      let map = new (T$.IdentityMapOfString$ObjectN()).from(["path", this.path, "jdb", dart.toString(this.jdbFactory)]);
      return map[$toString]();
    }
    find() {
      return async.async(core.bool, (function* find() {
        try {
          if (this.jdbDatabase == null) {
            if (!dart.test(yield this.jdbFactory.exists(this.path))) {
              return false;
            }
            this.jdbDatabase = (yield this.jdbFactory.open(this.path, {options: this.options}));
          }
          return true;
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            if (dart.test(this[_logV])) {
              core.print("find failed " + dart.str(this.path) + " " + dart.str(e));
            }
            return false;
          } else
            throw e$;
        }
      }).bind(this));
    }
    findOrCreate() {
      return async.async(dart.dynamic, (function* findOrCreate() {
        this.jdbDatabase == null ? this.jdbDatabase = (yield this.jdbFactory.open(this.path, {options: this.options})) : null;
      }).bind(this));
    }
    readMeta() {
      return async.async(T$.MapNOfString$ObjectN(), (function* readMeta() {
        let t50;
        let value = (t50 = (yield dart.nullCheck(this.jdbDatabase).getInfoEntry("meta")), t50 == null ? null : t50.value);
        if (core.Map.is(value)) {
          return value[$cast](core.String, T$.ObjectN());
        }
        return null;
      }).bind(this));
    }
    close() {
      let t50;
      try {
        t50 = this.jdbDatabase;
        t50 == null ? null : t50.close();
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          if (dart.test(this[_logV])) {
            core.print("close failed " + dart.str(this.path) + " " + dart.str(e));
          }
        } else
          throw e$;
      }
    }
    get entries() {
      return dart.nullCheck(this.jdbDatabase).entries;
    }
    addEntries(entries) {
      if (entries == null) dart.nullFailed(I[18], 103, 41, "entries");
      return async.async(dart.dynamic, (function* addEntries() {
        yield dart.nullCheck(this.jdbDatabase).addEntries(entries);
      }).bind(this));
    }
    generateUniqueIntKey(store) {
      if (store == null) dart.nullFailed(I[18], 109, 43, "store");
      return async.async(core.int, (function* generateUniqueIntKey() {
        return (yield dart.nullCheck(this.jdbDatabase).generateUniqueIntKeys(store, 1))[$first];
      }).bind(this));
    }
    generateUniqueStringKey(store) {
      if (store == null) dart.nullFailed(I[18], 114, 49, "store");
      return async.async(core.String, (function* generateUniqueStringKey() {
        return (yield dart.nullCheck(this.jdbDatabase).generateUniqueStringKeys(store, 1))[$first];
      }).bind(this));
    }
    getEntriesAfter(revision) {
      if (revision == null) dart.nullFailed(I[18], 119, 46, "revision");
      return async.async(T$.ListOfJdbEntry(), (function* getEntriesAfter() {
        return yield dart.nullCheck(this.jdbDatabase).entriesAfterRevision(revision).toList();
      }).bind(this));
    }
    get updates() {
      return null;
    }
    get revisionUpdate() {
      return dart.nullCheck(this.jdbDatabase).revisionUpdate;
    }
    getRevision() {
      return dart.nullCheck(this.jdbDatabase).getRevision();
    }
    writeIfRevision(query) {
      if (query == null) dart.nullFailed(I[18], 134, 70, "query");
      return dart.nullCheck(this.jdbDatabase).writeIfRevision(query);
    }
    toDebugMap() {
      return new (T$.IdentityMapOfString$ObjectN()).from(["path", this.path]);
    }
    compact() {
      return dart.nullCheck(this.jdbDatabase).compact();
    }
    getDeltaMinRevision() {
      return dart.nullCheck(this.jdbDatabase).getDeltaMinRevision();
    }
  };
  (sembast_jdb.SembastStorageJdb.new = function(jdbFactory, path, options) {
    if (jdbFactory == null) dart.nullFailed(I[18], 33, 26, "jdbFactory");
    if (path == null) dart.nullFailed(I[18], 33, 43, "path");
    this[jdbDatabase] = null;
    this[_logV] = log_level.databaseStorageLogLevel == log_level.SembastLogLevel.verbose;
    this[jdbFactory$] = jdbFactory;
    this[path$] = path;
    this[options$] = options;
    ;
  }).prototype = sembast_jdb.SembastStorageJdb.prototype;
  dart.addTypeTests(sembast_jdb.SembastStorageJdb);
  dart.addTypeCaches(sembast_jdb.SembastStorageJdb);
  sembast_jdb.SembastStorageJdb[dart.implements] = () => [storage.StorageJdb];
  dart.setMethodSignature(sembast_jdb.SembastStorageJdb, () => ({
    __proto__: dart.getMethods(sembast_jdb.SembastStorageJdb.__proto__),
    delete: dart.fnType(async.Future, []),
    find: dart.fnType(async.Future$(core.bool), []),
    findOrCreate: dart.fnType(async.Future, []),
    readMeta: dart.fnType(async.Future$(dart.nullable(core.Map$(core.String, dart.nullable(core.Object)))), []),
    close: dart.fnType(dart.void, []),
    addEntries: dart.fnType(async.Future, [core.List$(jdb.JdbWriteEntry)]),
    generateUniqueIntKey: dart.fnType(async.Future$(core.int), [core.String]),
    generateUniqueStringKey: dart.fnType(async.Future$(core.String), [core.String]),
    getEntriesAfter: dart.fnType(async.Future$(core.List$(jdb.JdbEntry)), [core.int]),
    getRevision: dart.fnType(async.Future$(core.int), []),
    writeIfRevision: dart.fnType(async.Future$(sembast_jdb.StorageJdbWriteResult), [sembast_jdb.StorageJdbWriteQuery]),
    toDebugMap: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), []),
    compact: dart.fnType(async.Future, []),
    getDeltaMinRevision: dart.fnType(async.Future$(core.int), [])
  }));
  dart.setGetterSignature(sembast_jdb.SembastStorageJdb, () => ({
    __proto__: dart.getGetters(sembast_jdb.SembastStorageJdb.__proto__),
    supported: core.bool,
    entries: async.Stream$(jdb.JdbEntry),
    updates: dart.nullable(async.Stream$(storage.StorageJdbStateUpdate)),
    revisionUpdate: async.Stream$(core.int)
  }));
  dart.setLibraryUri(sembast_jdb.SembastStorageJdb, I[19]);
  dart.setFieldSignature(sembast_jdb.SembastStorageJdb, () => ({
    __proto__: dart.getFields(sembast_jdb.SembastStorageJdb.__proto__),
    jdbFactory: dart.finalFieldType(jdb.JdbFactory),
    jdbDatabase: dart.fieldType(dart.nullable(jdb.JdbDatabase)),
    options: dart.fieldType(dart.nullable(database_factory_mixin.DatabaseOpenOptions)),
    path: dart.finalFieldType(core.String),
    [_logV]: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(sembast_jdb.SembastStorageJdb, ['toString']);
  var jdbFactory$0 = dart.privateName(sembast_jdb, "DatabaseFactoryJdb.jdbFactory");
  database_factory_mixin.SembastDatabaseFactory = class SembastDatabaseFactory extends core.Object {};
  (database_factory_mixin.SembastDatabaseFactory.new = function() {
    ;
  }).prototype = database_factory_mixin.SembastDatabaseFactory.prototype;
  dart.addTypeTests(database_factory_mixin.SembastDatabaseFactory);
  dart.addTypeCaches(database_factory_mixin.SembastDatabaseFactory);
  database_factory_mixin.SembastDatabaseFactory[dart.implements] = () => [factory.DatabaseFactory];
  dart.setLibraryUri(database_factory_mixin.SembastDatabaseFactory, I[20]);
  var _databaseOpenHelpers = dart.privateName(database_factory_mixin, "_databaseOpenHelpers");
  database_factory_mixin.DatabaseFactoryMixin = class DatabaseFactoryMixin extends core.Object {};
  database_factory_mixin.DatabaseFactoryMixin[dart.mixinOn] = Object => class DatabaseFactoryMixin extends Object {
    openDatabaseWithOptions(path, options) {
      if (path == null) dart.nullFailed(I[21], 128, 14, "path");
      if (options == null) dart.nullFailed(I[21], 128, 40, "options");
      let helper = this.getDatabaseOpenHelper(path, options);
      return helper.openDatabase();
    }
    openDatabase(path, opts) {
      if (path == null) dart.nullFailed(I[21], 135, 40, "path");
      let version = opts && 'version' in opts ? opts.version : null;
      let onVersionChanged = opts && 'onVersionChanged' in opts ? opts.onVersionChanged : null;
      let mode = opts && 'mode' in opts ? opts.mode : null;
      let codec = opts && 'codec' in opts ? opts.codec : null;
      return this.openDatabaseWithOptions(path, new database_factory_mixin.DatabaseOpenOptions.new({version: version, onVersionChanged: onVersionChanged, mode: mode, codec: codec}));
    }
    getDatabaseOpenHelper(path, options) {
      if (path == null) dart.nullFailed(I[21], 151, 14, "path");
      if (options == null) dart.nullFailed(I[21], 151, 40, "options");
      let helper = this.getExistingDatabaseOpenHelper(path);
      if (helper == null) {
        helper = new database_factory_mixin.DatabaseOpenHelper.new(this, path, options);
        this.setDatabaseOpenHelper(path, helper);
      }
      return helper;
    }
    getExistingDatabaseOpenHelper(path) {
      if (path == null) dart.nullFailed(I[21], 161, 60, "path");
      return this[_databaseOpenHelpers][$_get](path);
    }
    removeDatabaseOpenHelper(path) {
      if (path == null) dart.nullFailed(I[21], 166, 40, "path");
      this[_databaseOpenHelpers][$remove](path);
    }
    setDatabaseOpenHelper(path, helper) {
      if (path == null) dart.nullFailed(I[21], 171, 37, "path");
      this[_databaseOpenHelpers][$remove](path);
      this[_databaseOpenHelpers][$_set](path, dart.nullCheck(helper));
    }
    deleteDatabase(path) {
      if (path == null) dart.nullFailed(I[21], 177, 32, "path");
      return async.async(dart.dynamic, (function* deleteDatabase() {
        let helper = this.getExistingDatabaseOpenHelper(path);
        if (helper != null && helper.database != null) {
          yield helper.lock.synchronized(dart.dynamic, dart.fn(() => helper.lockedCloseDatabase(), T$.VoidToFuture()));
        }
        return this.doDeleteDatabase(path);
      }).bind(this));
    }
    flush() {
      return async.async(dart.dynamic, (function* flush() {
        let t51;
        let helpers = T$.ListOfDatabaseOpenHelper().from(this[_databaseOpenHelpers][$values], {growable: false});
        for (let helper of helpers) {
          yield (t51 = helper.database, t51 == null ? null : t51.flush());
        }
      }).bind(this));
    }
  };
  (database_factory_mixin.DatabaseFactoryMixin[dart.mixinNew] = function() {
    this[_databaseOpenHelpers] = new (T$.IdentityMapOfString$DatabaseOpenHelper()).new();
  }).prototype = database_factory_mixin.DatabaseFactoryMixin.prototype;
  dart.addTypeTests(database_factory_mixin.DatabaseFactoryMixin);
  dart.addTypeCaches(database_factory_mixin.DatabaseFactoryMixin);
  database_factory_mixin.DatabaseFactoryMixin[dart.implements] = () => [database_factory_mixin.SembastDatabaseFactory, core.Object];
  dart.setMethodSignature(database_factory_mixin.DatabaseFactoryMixin, () => ({
    __proto__: dart.getMethods(database_factory_mixin.DatabaseFactoryMixin.__proto__),
    openDatabaseWithOptions: dart.fnType(async.Future$(database$.Database), [core.String, database_factory_mixin.DatabaseOpenOptions]),
    openDatabase: dart.fnType(async.Future$(database$.Database), [core.String], {codec: dart.nullable(codec.SembastCodec), mode: dart.nullable(database_mode.DatabaseMode), onVersionChanged: dart.nullable(dart.fnType(dart.dynamic, [database$.Database, core.int, core.int])), version: dart.nullable(core.int)}, {}),
    getDatabaseOpenHelper: dart.fnType(database_factory_mixin.DatabaseOpenHelper, [core.String, database_factory_mixin.DatabaseOpenOptions]),
    getExistingDatabaseOpenHelper: dart.fnType(dart.nullable(database_factory_mixin.DatabaseOpenHelper), [core.String]),
    removeDatabaseOpenHelper: dart.fnType(dart.void, [core.String]),
    setDatabaseOpenHelper: dart.fnType(dart.void, [core.String, dart.nullable(database_factory_mixin.DatabaseOpenHelper)]),
    deleteDatabase: dart.fnType(async.Future, [core.String]),
    flush: dart.fnType(async.Future, [])
  }));
  dart.setLibraryUri(database_factory_mixin.DatabaseFactoryMixin, I[20]);
  dart.setFieldSignature(database_factory_mixin.DatabaseFactoryMixin, () => ({
    __proto__: dart.getFields(database_factory_mixin.DatabaseFactoryMixin.__proto__),
    [_databaseOpenHelpers]: dart.finalFieldType(core.Map$(core.String, database_factory_mixin.DatabaseOpenHelper))
  }));
  const SembastDatabaseFactory_DatabaseFactoryMixin$36 = class SembastDatabaseFactory_DatabaseFactoryMixin extends database_factory_mixin.SembastDatabaseFactory {};
  (SembastDatabaseFactory_DatabaseFactoryMixin$36.new = function() {
    database_factory_mixin.DatabaseFactoryMixin[dart.mixinNew].call(this);
  }).prototype = SembastDatabaseFactory_DatabaseFactoryMixin$36.prototype;
  dart.applyMixin(SembastDatabaseFactory_DatabaseFactoryMixin$36, database_factory_mixin.DatabaseFactoryMixin);
  sembast_jdb.DatabaseFactoryJdb = class DatabaseFactoryJdb extends SembastDatabaseFactory_DatabaseFactoryMixin$36 {
    get jdbFactory() {
      return this[jdbFactory$0];
    }
    set jdbFactory(value) {
      super.jdbFactory = value;
    }
    newDatabase(openHelper) {
      if (openHelper == null) dart.nullFailed(I[18], 158, 50, "openHelper");
      return new database_impl.SembastDatabase.new(openHelper, new sembast_jdb.SembastStorageJdb.new(this.jdbFactory, openHelper.path, openHelper.options));
    }
    doDeleteDatabase(path) {
      if (path == null) dart.nullFailed(I[18], 163, 34, "path");
      return async.async(dart.dynamic, (function* doDeleteDatabase() {
        return new sembast_jdb.SembastStorageJdb.new(this.jdbFactory, path, null).delete();
      }).bind(this));
    }
    get hasStorage() {
      return true;
    }
  };
  (sembast_jdb.DatabaseFactoryJdb.new = function(jdbFactory) {
    if (jdbFactory == null) dart.nullFailed(I[18], 155, 27, "jdbFactory");
    this[jdbFactory$0] = jdbFactory;
    sembast_jdb.DatabaseFactoryJdb.__proto__.new.call(this);
    ;
  }).prototype = sembast_jdb.DatabaseFactoryJdb.prototype;
  dart.addTypeTests(sembast_jdb.DatabaseFactoryJdb);
  dart.addTypeCaches(sembast_jdb.DatabaseFactoryJdb);
  sembast_jdb.DatabaseFactoryJdb[dart.implements] = () => [factory.DatabaseFactory];
  dart.setMethodSignature(sembast_jdb.DatabaseFactoryJdb, () => ({
    __proto__: dart.getMethods(sembast_jdb.DatabaseFactoryJdb.__proto__),
    newDatabase: dart.fnType(database_impl.SembastDatabase, [database_factory_mixin.DatabaseOpenHelper]),
    doDeleteDatabase: dart.fnType(async.Future, [core.String])
  }));
  dart.setGetterSignature(sembast_jdb.DatabaseFactoryJdb, () => ({
    __proto__: dart.getGetters(sembast_jdb.DatabaseFactoryJdb.__proto__),
    hasStorage: core.bool
  }));
  dart.setLibraryUri(sembast_jdb.DatabaseFactoryJdb, I[19]);
  dart.setFieldSignature(sembast_jdb.DatabaseFactoryJdb, () => ({
    __proto__: dart.getFields(sembast_jdb.DatabaseFactoryJdb.__proto__),
    jdbFactory: dart.finalFieldType(jdb.JdbFactory)
  }));
  var infoEntries$ = dart.privateName(sembast_jdb, "StorageJdbWriteQuery.infoEntries");
  var entries$ = dart.privateName(sembast_jdb, "StorageJdbWriteQuery.entries");
  var revision$0 = dart.privateName(sembast_jdb, "StorageJdbWriteQuery.revision");
  sembast_jdb.StorageJdbWriteQuery = class StorageJdbWriteQuery extends core.Object {
    get infoEntries() {
      return this[infoEntries$];
    }
    set infoEntries(value) {
      super.infoEntries = value;
    }
    get entries() {
      return this[entries$];
    }
    set entries(value) {
      super.entries = value;
    }
    get revision() {
      return this[revision$0];
    }
    set revision(value) {
      super.revision = value;
    }
  };
  (sembast_jdb.StorageJdbWriteQuery.new = function(opts) {
    let revision = opts && 'revision' in opts ? opts.revision : null;
    let infoEntries = opts && 'infoEntries' in opts ? opts.infoEntries : null;
    if (infoEntries == null) dart.nullFailed(I[18], 185, 21, "infoEntries");
    let entries = opts && 'entries' in opts ? opts.entries : null;
    if (entries == null) dart.nullFailed(I[18], 186, 21, "entries");
    this[revision$0] = revision;
    this[infoEntries$] = infoEntries;
    this[entries$] = entries;
    ;
  }).prototype = sembast_jdb.StorageJdbWriteQuery.prototype;
  dart.addTypeTests(sembast_jdb.StorageJdbWriteQuery);
  dart.addTypeCaches(sembast_jdb.StorageJdbWriteQuery);
  dart.setLibraryUri(sembast_jdb.StorageJdbWriteQuery, I[19]);
  dart.setFieldSignature(sembast_jdb.StorageJdbWriteQuery, () => ({
    __proto__: dart.getFields(sembast_jdb.StorageJdbWriteQuery.__proto__),
    infoEntries: dart.finalFieldType(core.List$(jdb.JdbInfoEntry)),
    entries: dart.finalFieldType(core.List$(jdb.JdbWriteEntry)),
    revision: dart.finalFieldType(dart.nullable(core.int))
  }));
  var query$ = dart.privateName(sembast_jdb, "StorageJdbWriteResult.query");
  var revision$1 = dart.privateName(sembast_jdb, "StorageJdbWriteResult.revision");
  var success$0 = dart.privateName(sembast_jdb, "StorageJdbWriteResult.success");
  sembast_jdb.StorageJdbWriteResult = class StorageJdbWriteResult extends core.Object {
    get query() {
      return this[query$];
    }
    set query(value) {
      super.query = value;
    }
    get revision() {
      return this[revision$1];
    }
    set revision(value) {
      super.revision = value;
    }
    get success() {
      return this[success$0];
    }
    set success(value) {
      super.success = value;
    }
    toString() {
      return "original " + dart.str(this.query.revision) + " read " + dart.str(this.revision) + " success " + dart.str(this.success);
    }
  };
  (sembast_jdb.StorageJdbWriteResult.new = function(opts) {
    let query = opts && 'query' in opts ? opts.query : null;
    if (query == null) dart.nullFailed(I[18], 201, 40, "query");
    let revision = opts && 'revision' in opts ? opts.revision : null;
    let success = opts && 'success' in opts ? opts.success : null;
    this[query$] = query;
    this[revision$1] = revision;
    this[success$0] = success;
    ;
  }).prototype = sembast_jdb.StorageJdbWriteResult.prototype;
  dart.addTypeTests(sembast_jdb.StorageJdbWriteResult);
  dart.addTypeCaches(sembast_jdb.StorageJdbWriteResult);
  dart.setLibraryUri(sembast_jdb.StorageJdbWriteResult, I[19]);
  dart.setFieldSignature(sembast_jdb.StorageJdbWriteResult, () => ({
    __proto__: dart.getFields(sembast_jdb.StorageJdbWriteResult.__proto__),
    query: dart.finalFieldType(sembast_jdb.StorageJdbWriteQuery),
    revision: dart.finalFieldType(dart.nullable(core.int)),
    success: dart.finalFieldType(dart.nullable(core.bool))
  }));
  dart.defineExtensionMethods(sembast_jdb.StorageJdbWriteResult, ['toString']);
  dart.defineLazy(sembast_jdb, {
    /*sembast_jdb.metaKey*/get metaKey() {
      return "meta";
    }
  }, false);
  var _adapters = dart.privateName(json_encodable_codec, "_adapters");
  json_encodable_codec._Encoder = class _Encoder extends convert.Converter$(core.Object, core.Object) {
    convert(value) {
      core.Object.as(value);
      if (value == null) dart.nullFailed(I[22], 12, 25, "value");
      return json_encodable_codec.toJsonEncodable(value, dart.nullCheck(this.codec[_adapters])[$values]);
    }
  };
  (json_encodable_codec._Encoder.new = function(codec) {
    if (codec == null) dart.nullFailed(I[22], 9, 17, "codec");
    this.codec = codec;
    json_encodable_codec._Encoder.__proto__.new.call(this);
    ;
  }).prototype = json_encodable_codec._Encoder.prototype;
  dart.addTypeTests(json_encodable_codec._Encoder);
  dart.addTypeCaches(json_encodable_codec._Encoder);
  dart.setMethodSignature(json_encodable_codec._Encoder, () => ({
    __proto__: dart.getMethods(json_encodable_codec._Encoder.__proto__),
    convert: dart.fnType(core.Object, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(json_encodable_codec._Encoder, I[23]);
  dart.setFieldSignature(json_encodable_codec._Encoder, () => ({
    __proto__: dart.getFields(json_encodable_codec._Encoder.__proto__),
    codec: dart.finalFieldType(json_encodable_codec.JsonEncodableCodec)
  }));
  json_encodable_codec._Decoder = class _Decoder extends convert.Converter$(core.Object, core.Object) {
    convert(value) {
      core.Object.as(value);
      if (value == null) dart.nullFailed(I[22], 22, 25, "value");
      return json_encodable_codec.fromJsonEncodable(value, this.codec[_adapters]);
    }
  };
  (json_encodable_codec._Decoder.new = function(codec) {
    if (codec == null) dart.nullFailed(I[22], 19, 17, "codec");
    this.codec = codec;
    json_encodable_codec._Decoder.__proto__.new.call(this);
    ;
  }).prototype = json_encodable_codec._Decoder.prototype;
  dart.addTypeTests(json_encodable_codec._Decoder);
  dart.addTypeCaches(json_encodable_codec._Decoder);
  dart.setMethodSignature(json_encodable_codec._Decoder, () => ({
    __proto__: dart.getMethods(json_encodable_codec._Decoder.__proto__),
    convert: dart.fnType(core.Object, [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(json_encodable_codec._Decoder, I[23]);
  dart.setFieldSignature(json_encodable_codec._Decoder, () => ({
    __proto__: dart.getFields(json_encodable_codec._Decoder.__proto__),
    codec: dart.finalFieldType(json_encodable_codec.JsonEncodableCodec)
  }));
  var __JsonEncodableCodec__decoder = dart.privateName(json_encodable_codec, "_#JsonEncodableCodec#_decoder");
  var __JsonEncodableCodec__decoder_isSet = dart.privateName(json_encodable_codec, "_#JsonEncodableCodec#_decoder#isSet");
  var __JsonEncodableCodec__encoder = dart.privateName(json_encodable_codec, "_#JsonEncodableCodec#_encoder");
  var __JsonEncodableCodec__encoder_isSet = dart.privateName(json_encodable_codec, "_#JsonEncodableCodec#_encoder#isSet");
  var _decoder = dart.privateName(json_encodable_codec, "_decoder");
  var _encoder = dart.privateName(json_encodable_codec, "_encoder");
  json_encodable_codec.JsonEncodableCodec = class JsonEncodableCodec extends convert.Codec$(core.Object, core.Object) {
    get [_decoder]() {
      let t51;
      return dart.test(this[__JsonEncodableCodec__decoder_isSet]) ? (t51 = this[__JsonEncodableCodec__decoder], t51) : dart.throw(new _internal.LateError.fieldNI("_decoder"));
    }
    set [_decoder](t51) {
      if (t51 == null) dart.nullFailed(I[22], 51, 17, "null");
      this[__JsonEncodableCodec__decoder_isSet] = true;
      this[__JsonEncodableCodec__decoder] = t51;
    }
    get decoder() {
      return this[_decoder];
    }
    get [_encoder]() {
      let t52;
      return dart.test(this[__JsonEncodableCodec__encoder_isSet]) ? (t52 = this[__JsonEncodableCodec__encoder], t52) : dart.throw(new _internal.LateError.fieldNI("_encoder"));
    }
    set [_encoder](t52) {
      if (t52 == null) dart.nullFailed(I[22], 56, 17, "null");
      this[__JsonEncodableCodec__encoder_isSet] = true;
      this[__JsonEncodableCodec__encoder] = t52;
    }
    get encoder() {
      return this[_encoder];
    }
    supportsType(value) {
      if (this[_adapters] != null) {
        for (let adapter of dart.nullCheck(this[_adapters])[$values]) {
          if (dart.test(adapter.isType(value))) {
            return true;
          }
        }
      }
      return false;
    }
  };
  (json_encodable_codec.JsonEncodableCodec.new = function(opts) {
    let adapters = opts && 'adapters' in opts ? opts.adapters : null;
    this[_adapters] = null;
    this[__JsonEncodableCodec__decoder] = null;
    this[__JsonEncodableCodec__decoder_isSet] = false;
    this[__JsonEncodableCodec__encoder] = null;
    this[__JsonEncodableCodec__encoder_isSet] = false;
    json_encodable_codec.JsonEncodableCodec.__proto__.new.call(this);
    this[_adapters] = json_encodable_codec.sembastTypeAdaptersToMap(adapters);
    this[_decoder] = new json_encodable_codec._Decoder.new(this);
    this[_encoder] = new json_encodable_codec._Encoder.new(this);
  }).prototype = json_encodable_codec.JsonEncodableCodec.prototype;
  dart.addTypeTests(json_encodable_codec.JsonEncodableCodec);
  dart.addTypeCaches(json_encodable_codec.JsonEncodableCodec);
  dart.setMethodSignature(json_encodable_codec.JsonEncodableCodec, () => ({
    __proto__: dart.getMethods(json_encodable_codec.JsonEncodableCodec.__proto__),
    supportsType: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setGetterSignature(json_encodable_codec.JsonEncodableCodec, () => ({
    __proto__: dart.getGetters(json_encodable_codec.JsonEncodableCodec.__proto__),
    [_decoder]: json_encodable_codec._Decoder,
    decoder: json_encodable_codec._Decoder,
    [_encoder]: json_encodable_codec._Encoder,
    encoder: json_encodable_codec._Encoder
  }));
  dart.setSetterSignature(json_encodable_codec.JsonEncodableCodec, () => ({
    __proto__: dart.getSetters(json_encodable_codec.JsonEncodableCodec.__proto__),
    [_decoder]: json_encodable_codec._Decoder,
    [_encoder]: json_encodable_codec._Encoder
  }));
  dart.setLibraryUri(json_encodable_codec.JsonEncodableCodec, I[23]);
  dart.setFieldSignature(json_encodable_codec.JsonEncodableCodec, () => ({
    __proto__: dart.getFields(json_encodable_codec.JsonEncodableCodec.__proto__),
    [_adapters]: dart.fieldType(dart.nullable(core.Map$(core.String, type_adapter_impl.SembastTypeAdapter))),
    [__JsonEncodableCodec__decoder]: dart.fieldType(dart.nullable(json_encodable_codec._Decoder)),
    [__JsonEncodableCodec__decoder_isSet]: dart.fieldType(core.bool),
    [__JsonEncodableCodec__encoder]: dart.fieldType(dart.nullable(json_encodable_codec._Encoder)),
    [__JsonEncodableCodec__encoder_isSet]: dart.fieldType(core.bool)
  }));
  json_encodable_codec.sembastTypeAdaptersToMap = function sembastTypeAdaptersToMap(adapters) {
    let _adapters = new (T$.IdentityMapOfString$SembastTypeAdapter()).new();
    if (adapters != null) {
      for (let adapter of adapters) {
        if (!(_adapters[$_get](adapter.name) == null)) dart.assertFailed("Adapter already exists for " + dart.str(adapter.name), I[22], 31, 14, "_adapters[adapter.name] == null");
        _adapters[$_set](adapter.name, adapter);
      }
    }
    return _adapters;
  };
  json_encodable_codec._looksLikeCustomType = function _looksLikeCustomType(map) {
    if (map == null) dart.nullFailed(I[22], 75, 31, "map");
    if (map[$length] === 1) {
      let key = map[$keys][$first];
      if (typeof key == 'string') {
        return key[$startsWith]("@");
      }
      dart.throw(new core.ArgumentError.value(key));
    }
    return false;
  };
  json_encodable_codec._toJsonEncodable = function _toJsonEncodable(value, adapters) {
    let t53, t53$;
    if (adapters == null) dart.nullFailed(I[22], 86, 70, "adapters");
    if (dart.test(utils.isBasicTypeOrNull(value))) {
      return value;
    }
    for (let adapter of adapters) {
      if (dart.test(adapter.isType(value))) {
        return new (T$.IdentityMapOfString$ObjectN()).from(["@" + dart.str(adapter.name), adapter.encode(value)]);
      }
    }
    if (core.Map.is(value)) {
      let map = value;
      if (dart.test(json_encodable_codec._looksLikeCustomType(map))) {
        return new (T$.IdentityMapOfString$ObjectN()).from(["@", map]);
      }
      let clone = null;
      map[$forEach](dart.fn((key, item) => {
        if (!(typeof key == 'string')) {
          dart.throw(new core.ArgumentError.value(key));
        }
        let converted = json_encodable_codec._toJsonEncodable(item, adapters);
        if (!core.identical(converted, item)) {
          clone == null ? clone = T$.LinkedHashMapOfString$ObjectN().from(map) : null;
          dart.nullCheck(clone)[$_set](key, converted);
        }
      }, T$.dynamicAnddynamicTovoid()));
      t53 = clone;
      return t53 == null ? map : t53;
    } else if (core.List.is(value)) {
      let list = value;
      let clone = null;
      for (let i = 0; i < dart.notNull(list[$length]); i = i + 1) {
        let item = list[$_get](i);
        let converted = json_encodable_codec._toJsonEncodable(item, adapters);
        if (!core.identical(converted, item)) {
          clone == null ? clone = core.List.from(list) : null;
          clone[$_set](i, converted);
        }
      }
      t53$ = clone;
      return t53$ == null ? list : t53$;
    } else {
      dart.throw(new core.ArgumentError.value(value));
    }
  };
  json_encodable_codec.toJsonEncodable = function toJsonEncodable(value, adapters) {
    if (value == null) dart.nullFailed(I[22], 132, 31, "value");
    if (adapters == null) dart.nullFailed(I[22], 132, 67, "adapters");
    let converted = null;
    try {
      converted = json_encodable_codec._toJsonEncodable(value, adapters);
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.ArgumentError.is(e)) {
        dart.throw(new core.ArgumentError.value(e[$invalidValue], dart.str(dart.runtimeType(e[$invalidValue])) + " in " + dart.str(value), "not supported"));
      } else
        throw e$;
    }
    if (core.Map.is(converted) && !T$.MapOfString$ObjectN().is(converted)) {
      converted = converted[$cast](core.String, T$.ObjectN());
    }
    return dart.nullCheck(converted);
  };
  json_encodable_codec._fromEncodable = function _fromEncodable(value, adapters) {
    let t55, t55$;
    if (dart.test(utils.isBasicTypeOrNull(value))) {
      return value;
    } else if (core.Map.is(value)) {
      let map = value;
      if (dart.test(json_encodable_codec._looksLikeCustomType(map))) {
        let type = core.String.as(map[$keys][$first])[$substring](1);
        if (type === "") {
          return core.Object.as(map[$values][$first]);
        }
        let adapter = dart.nullCheck(adapters)[$_get](type);
        if (adapter != null) {
          let encodedValue = value[$values][$first];
          try {
            return core.Object.as(adapter.decode(encodedValue));
          } catch (e$) {
            let e = dart.getThrown(e$);
            if (core.Object.is(e)) {
              core.print(dart.str(e) + " - ignoring " + dart.str(encodedValue) + " " + dart.str(dart.runtimeType(encodedValue)));
            } else
              throw e$;
          }
        }
      }
      let clone = null;
      map[$forEach](dart.fn((key, item) => {
        let converted = json_encodable_codec._fromEncodable(item, adapters);
        if (!core.identical(converted, item)) {
          clone == null ? clone = T$.LinkedHashMapOfString$ObjectN().from(map) : null;
          dart.nullCheck(clone)[$_set](dart.toString(key), converted);
        }
      }, T$.dynamicAnddynamicTovoid()));
      t55 = clone;
      return t55 == null ? map : t55;
    } else if (core.List.is(value)) {
      let list = value;
      let clone = null;
      for (let i = 0; i < dart.notNull(list[$length]); i = i + 1) {
        let item = list[$_get](i);
        let converted = json_encodable_codec._fromEncodable(item, adapters);
        if (!core.identical(converted, item)) {
          clone == null ? clone = core.List.from(list) : null;
          clone[$_set](i, converted);
        }
      }
      t55$ = clone;
      return t55$ == null ? list : t55$;
    } else {
      dart.throw(new core.ArgumentError.value(value));
    }
  };
  json_encodable_codec.fromJsonEncodable = function fromJsonEncodable(value, adapters) {
    if (value == null) dart.nullFailed(I[22], 200, 12, "value");
    let converted = null;
    try {
      converted = dart.nullCheck(json_encodable_codec._fromEncodable(value, adapters));
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.ArgumentError.is(e)) {
        dart.throw(new core.ArgumentError.value(e[$invalidValue], dart.str(dart.runtimeType(core.Object.as(e[$invalidValue]))) + " in " + dart.str(value), "not supported"));
      } else
        throw e$;
    }
    if (core.Map.is(converted) && !T$.MapOfString$ObjectN().is(converted)) {
      converted = converted[$cast](core.String, T$.ObjectN());
    }
    return converted;
  };
  dart.defineLazy(json_encodable_codec, {
    /*json_encodable_codec.sembastDefaultJsonEncodableCodec*/get sembastDefaultJsonEncodableCodec() {
      return new json_encodable_codec.JsonEncodableCodec.new({adapters: type_adapter_impl.sembastDefaultTypeAdapters});
    }
  }, false);
  jdb.JdbException = class JdbException extends core.Object {};
  (jdb.JdbException.new = function() {
    ;
  }).prototype = jdb.JdbException.prototype;
  dart.addTypeTests(jdb.JdbException);
  dart.addTypeCaches(jdb.JdbException);
  dart.setLibraryUri(jdb.JdbException, I[24]);
  var id = dart.privateName(jdb, "JdbInfoEntry.id");
  var value$ = dart.privateName(jdb, "JdbInfoEntry.value");
  jdb.JdbInfoEntry = class JdbInfoEntry extends core.Object {
    get id() {
      return this[id];
    }
    set id(value) {
      this[id] = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      this[value$] = value;
    }
    toString() {
      return "[" + dart.str(this.id) + "] " + dart.str(this.value);
    }
    exportToMap() {
      let map = (() => {
        let t56 = new (T$.IdentityMapOfString$ObjectN()).new();
        t56[$_set]("id", this.id);
        if (this.value != null) t56[$_set]("value", this.value);
        return t56;
      })();
      return map;
    }
  };
  (jdb.JdbInfoEntry.new = function() {
    this[id] = null;
    this[value$] = null;
    ;
  }).prototype = jdb.JdbInfoEntry.prototype;
  dart.addTypeTests(jdb.JdbInfoEntry);
  dart.addTypeCaches(jdb.JdbInfoEntry);
  dart.setMethodSignature(jdb.JdbInfoEntry, () => ({
    __proto__: dart.getMethods(jdb.JdbInfoEntry.__proto__),
    exportToMap: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [])
  }));
  dart.setLibraryUri(jdb.JdbInfoEntry, I[24]);
  dart.setFieldSignature(jdb.JdbInfoEntry, () => ({
    __proto__: dart.getFields(jdb.JdbInfoEntry.__proto__),
    id: dart.fieldType(dart.nullable(core.String)),
    value: dart.fieldType(dart.nullable(core.Object))
  }));
  dart.defineExtensionMethods(jdb.JdbInfoEntry, ['toString']);
  jdb.JdbEntry = class JdbEntry extends core.Object {
    toString() {
      return "[" + dart.str(this.id) + "] " + dart.str(this.record) + " " + (dart.test(this.deleted) ? " (deleted)" : " " + dart.str(this.value));
    }
  };
  (jdb.JdbEntry.new = function() {
    ;
  }).prototype = jdb.JdbEntry.prototype;
  dart.addTypeTests(jdb.JdbEntry);
  dart.addTypeCaches(jdb.JdbEntry);
  dart.setLibraryUri(jdb.JdbEntry, I[24]);
  dart.defineExtensionMethods(jdb.JdbEntry, ['toString']);
  var value$0 = dart.privateName(jdb, "JdbReadEntry.value");
  var __JdbReadEntry_id = dart.privateName(jdb, "_#JdbReadEntry#id");
  var __JdbReadEntry_id_isSet = dart.privateName(jdb, "_#JdbReadEntry#id#isSet");
  var __JdbReadEntry_record = dart.privateName(jdb, "_#JdbReadEntry#record");
  var __JdbReadEntry_record_isSet = dart.privateName(jdb, "_#JdbReadEntry#record#isSet");
  var __JdbReadEntry_deleted = dart.privateName(jdb, "_#JdbReadEntry#deleted");
  var __JdbReadEntry_deleted_isSet = dart.privateName(jdb, "_#JdbReadEntry#deleted#isSet");
  jdb.JdbReadEntry = class JdbReadEntry extends jdb.JdbEntry {
    get value() {
      return this[value$0];
    }
    set value(value) {
      this[value$0] = value;
    }
    get id() {
      let t57;
      return dart.test(this[__JdbReadEntry_id_isSet]) ? (t57 = this[__JdbReadEntry_id], t57) : dart.throw(new _internal.LateError.fieldNI("id"));
    }
    set id(t57) {
      if (t57 == null) dart.nullFailed(I[25], 59, 12, "null");
      this[__JdbReadEntry_id_isSet] = true;
      this[__JdbReadEntry_id] = t57;
    }
    get record() {
      let t58;
      return dart.test(this[__JdbReadEntry_record_isSet]) ? (t58 = this[__JdbReadEntry_record], t58) : dart.throw(new _internal.LateError.fieldNI("record"));
    }
    set record(t58) {
      if (t58 == null) dart.nullFailed(I[25], 62, 18, "null");
      this[__JdbReadEntry_record_isSet] = true;
      this[__JdbReadEntry_record] = t58;
    }
    get deleted() {
      let t59;
      return dart.test(this[__JdbReadEntry_deleted_isSet]) ? (t59 = this[__JdbReadEntry_deleted], t59) : dart.throw(new _internal.LateError.fieldNI("deleted"));
    }
    set deleted(t59) {
      if (t59 == null) dart.nullFailed(I[25], 68, 13, "null");
      this[__JdbReadEntry_deleted_isSet] = true;
      this[__JdbReadEntry_deleted] = t59;
    }
  };
  (jdb.JdbReadEntry.new = function() {
    this[__JdbReadEntry_id] = null;
    this[__JdbReadEntry_id_isSet] = false;
    this[__JdbReadEntry_record] = null;
    this[__JdbReadEntry_record_isSet] = false;
    this[value$0] = null;
    this[__JdbReadEntry_deleted] = null;
    this[__JdbReadEntry_deleted_isSet] = false;
    ;
  }).prototype = jdb.JdbReadEntry.prototype;
  dart.addTypeTests(jdb.JdbReadEntry);
  dart.addTypeCaches(jdb.JdbReadEntry);
  dart.setGetterSignature(jdb.JdbReadEntry, () => ({
    __proto__: dart.getGetters(jdb.JdbReadEntry.__proto__),
    id: core.int,
    record: record_ref.RecordRef,
    deleted: core.bool
  }));
  dart.setSetterSignature(jdb.JdbReadEntry, () => ({
    __proto__: dart.getSetters(jdb.JdbReadEntry.__proto__),
    id: core.int,
    record: record_ref.RecordRef,
    deleted: core.bool
  }));
  dart.setLibraryUri(jdb.JdbReadEntry, I[24]);
  dart.setFieldSignature(jdb.JdbReadEntry, () => ({
    __proto__: dart.getFields(jdb.JdbReadEntry.__proto__),
    [__JdbReadEntry_id]: dart.fieldType(dart.nullable(core.int)),
    [__JdbReadEntry_id_isSet]: dart.fieldType(core.bool),
    [__JdbReadEntry_record]: dart.fieldType(dart.nullable(record_ref.RecordRef)),
    [__JdbReadEntry_record_isSet]: dart.fieldType(core.bool),
    value: dart.fieldType(dart.nullable(core.Object)),
    [__JdbReadEntry_deleted]: dart.fieldType(dart.nullable(core.bool)),
    [__JdbReadEntry_deleted_isSet]: dart.fieldType(core.bool)
  }));
  var txnRecord = dart.privateName(jdb, "JdbWriteEntry.txnRecord");
  var __JdbWriteEntry_id = dart.privateName(jdb, "_#JdbWriteEntry#id");
  var __JdbWriteEntry_id_isSet = dart.privateName(jdb, "_#JdbWriteEntry#id#isSet");
  var _value = dart.privateName(jdb, "_value");
  jdb.JdbWriteEntry = class JdbWriteEntry extends jdb.JdbEntry {
    get txnRecord() {
      return this[txnRecord];
    }
    set txnRecord(value) {
      this[txnRecord] = value;
    }
    get id() {
      let t60;
      return dart.test(this[__JdbWriteEntry_id_isSet]) ? (t60 = this[__JdbWriteEntry_id], t60) : dart.throw(new _internal.LateError.fieldNI("id"));
    }
    set id(t60) {
      if (t60 == null) dart.nullFailed(I[25], 74, 12, "null");
      this[__JdbWriteEntry_id_isSet] = true;
      this[__JdbWriteEntry_id] = t60;
    }
    get record() {
      return dart.nullCheck(this.txnRecord).ref;
    }
    get value() {
      let t61;
      t61 = this[_value];
      return t61 == null ? this[_value] = dart.nullCheck(this.txnRecord).record.value : t61;
    }
    toString() {
      return "[" + dart.str(this.id) + "] " + dart.str(this.record) + " " + dart.str(this.value);
    }
    get deleted() {
      return dart.nullCheck(this.txnRecord).deleted;
    }
  };
  (jdb.JdbWriteEntry.new = function() {
    this[__JdbWriteEntry_id] = null;
    this[__JdbWriteEntry_id_isSet] = false;
    this[txnRecord] = null;
    this[_value] = null;
    ;
  }).prototype = jdb.JdbWriteEntry.prototype;
  dart.addTypeTests(jdb.JdbWriteEntry);
  dart.addTypeCaches(jdb.JdbWriteEntry);
  dart.setGetterSignature(jdb.JdbWriteEntry, () => ({
    __proto__: dart.getGetters(jdb.JdbWriteEntry.__proto__),
    id: core.int,
    record: record_ref.RecordRef,
    value: dart.nullable(core.Object),
    deleted: core.bool
  }));
  dart.setSetterSignature(jdb.JdbWriteEntry, () => ({
    __proto__: dart.getSetters(jdb.JdbWriteEntry.__proto__),
    id: core.int
  }));
  dart.setLibraryUri(jdb.JdbWriteEntry, I[24]);
  dart.setFieldSignature(jdb.JdbWriteEntry, () => ({
    __proto__: dart.getFields(jdb.JdbWriteEntry.__proto__),
    [__JdbWriteEntry_id]: dart.fieldType(dart.nullable(core.int)),
    [__JdbWriteEntry_id_isSet]: dart.fieldType(core.bool),
    txnRecord: dart.fieldType(dart.nullable(record_impl.TxnRecord)),
    [_value]: dart.fieldType(dart.nullable(core.Object))
  }));
  dart.defineExtensionMethods(jdb.JdbWriteEntry, ['toString']);
  var value$1 = dart.privateName(jdb, "JdbRawWriteEntry.value");
  var deleted$ = dart.privateName(jdb, "JdbRawWriteEntry.deleted");
  var record$ = dart.privateName(jdb, "JdbRawWriteEntry.record");
  jdb.JdbRawWriteEntry = class JdbRawWriteEntry extends jdb.JdbWriteEntry {
    get value() {
      return this[value$1];
    }
    set value(value) {
      super.value = value;
    }
    get deleted() {
      return this[deleted$];
    }
    set deleted(value) {
      super.deleted = value;
    }
    get record() {
      return this[record$];
    }
    set record(value) {
      super.record = value;
    }
  };
  (jdb.JdbRawWriteEntry.new = function(opts) {
    let value = opts && 'value' in opts ? opts.value : null;
    let deleted = opts && 'deleted' in opts ? opts.deleted : null;
    if (deleted == null) dart.nullFailed(I[25], 106, 47, "deleted");
    let record = opts && 'record' in opts ? opts.record : null;
    if (record == null) dart.nullFailed(I[25], 106, 70, "record");
    this[value$1] = value;
    this[deleted$] = deleted;
    this[record$] = record;
    jdb.JdbRawWriteEntry.__proto__.new.call(this);
    ;
  }).prototype = jdb.JdbRawWriteEntry.prototype;
  dart.addTypeTests(jdb.JdbRawWriteEntry);
  dart.addTypeCaches(jdb.JdbRawWriteEntry);
  dart.setLibraryUri(jdb.JdbRawWriteEntry, I[24]);
  dart.setFieldSignature(jdb.JdbRawWriteEntry, () => ({
    __proto__: dart.getFields(jdb.JdbRawWriteEntry.__proto__),
    value: dart.finalFieldType(dart.nullable(core.Object)),
    deleted: dart.finalFieldType(core.bool),
    record: dart.finalFieldType(record_ref.RecordRef)
  }));
  jdb.JdbDatabase = class JdbDatabase extends core.Object {};
  (jdb.JdbDatabase.new = function() {
    ;
  }).prototype = jdb.JdbDatabase.prototype;
  dart.addTypeTests(jdb.JdbDatabase);
  dart.addTypeCaches(jdb.JdbDatabase);
  dart.setLibraryUri(jdb.JdbDatabase, I[24]);
  jdb.JdbFactory = class JdbFactory extends core.Object {};
  (jdb.JdbFactory.new = function() {
    ;
  }).prototype = jdb.JdbFactory.prototype;
  dart.addTypeTests(jdb.JdbFactory);
  dart.addTypeCaches(jdb.JdbFactory);
  dart.setLibraryUri(jdb.JdbFactory, I[24]);
  field$.Field = class Field extends core.Object {};
  (field$.Field.new = function() {
    ;
  }).prototype = field$.Field.prototype;
  dart.addTypeTests(field$.Field);
  dart.addTypeCaches(field$.Field);
  dart.setLibraryUri(field$.Field, I[26]);
  dart.defineLazy(field$.Field, {
    /*field$.Field.value*/get value() {
      return "_value";
    },
    set value(_) {},
    /*field$.Field.key*/get key() {
      return "_key";
    },
    set key(_) {}
  }, false);
  var _label$ = dart.privateName(field$, "FieldValue._label");
  var _label = dart.privateName(field$, "_label");
  field$.FieldValue = class FieldValue extends core.Object {
    get [_label]() {
      return this[_label$];
    }
    set [_label](value) {
      super[_label] = value;
    }
    toString() {
      return "FieldValue." + dart.str(this[_label]);
    }
  };
  (field$.FieldValue.__ = function(_label) {
    if (_label == null) dart.nullFailed(I[27], 19, 27, "_label");
    this[_label$] = _label;
    ;
  }).prototype = field$.FieldValue.prototype;
  dart.addTypeTests(field$.FieldValue);
  dart.addTypeCaches(field$.FieldValue);
  dart.setLibraryUri(field$.FieldValue, I[26]);
  dart.setFieldSignature(field$.FieldValue, () => ({
    __proto__: dart.getFields(field$.FieldValue.__proto__),
    [_label]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(field$.FieldValue, ['toString']);
  dart.defineLazy(field$.FieldValue, {
    /*field$.FieldValue.delete*/get delete() {
      return C[1] || CT.C1;
    },
    set delete(_) {}
  }, false);
  field$.FieldKey = class FieldKey extends core.Object {
    static escape(field) {
      if (field == null) dart.nullFailed(I[27], 35, 31, "field");
      return dart.nullCheck(utils.escapeKey(field));
    }
  };
  (field$.FieldKey.__ = function() {
    ;
  }).prototype = field$.FieldKey.prototype;
  dart.addTypeTests(field$.FieldKey);
  dart.addTypeCaches(field$.FieldKey);
  dart.setLibraryUri(field$.FieldKey, I[26]);
  database$.Database = class Database extends core.Object {};
  (database$.Database.new = function() {
    ;
  }).prototype = database$.Database.prototype;
  dart.addTypeTests(database$.Database);
  dart.addTypeCaches(database$.Database);
  database$.Database[dart.implements] = () => [client.DatabaseClient];
  dart.setLibraryUri(database$.Database, I[28]);
  factory.DatabaseFactory = class DatabaseFactory extends core.Object {};
  (factory.DatabaseFactory.new = function() {
    ;
  }).prototype = factory.DatabaseFactory.prototype;
  dart.addTypeTests(factory.DatabaseFactory);
  dart.addTypeCaches(factory.DatabaseFactory);
  dart.setLibraryUri(factory.DatabaseFactory, I[29]);
  var version$0 = dart.privateName(database_factory_mixin, "DatabaseOpenOptions.version");
  var onVersionChanged$ = dart.privateName(database_factory_mixin, "DatabaseOpenOptions.onVersionChanged");
  var mode$ = dart.privateName(database_factory_mixin, "DatabaseOpenOptions.mode");
  var codec$0 = dart.privateName(database_factory_mixin, "DatabaseOpenOptions.codec");
  database_factory_mixin.DatabaseOpenOptions = class DatabaseOpenOptions extends core.Object {
    get version() {
      return this[version$0];
    }
    set version(value) {
      super.version = value;
    }
    get onVersionChanged() {
      return this[onVersionChanged$];
    }
    set onVersionChanged(value) {
      super.onVersionChanged = value;
    }
    get mode() {
      return this[mode$];
    }
    set mode(value) {
      super.mode = value;
    }
    get codec() {
      return this[codec$0];
    }
    set codec(value) {
      super.codec = value;
    }
    toString() {
      let map = new (T$.IdentityMapOfString$ObjectN()).new();
      if (this.version != null) {
        map[$_set]("version", this.version);
      }
      if (this.mode != null) {
        map[$_set]("mode", this.mode);
      }
      if (this.codec != null) {
        map[$_set]("codec", this.codec);
      }
      return map[$toString]();
    }
  };
  (database_factory_mixin.DatabaseOpenOptions.new = function(opts) {
    let version = opts && 'version' in opts ? opts.version : null;
    let onVersionChanged = opts && 'onVersionChanged' in opts ? opts.onVersionChanged : null;
    let mode = opts && 'mode' in opts ? opts.mode : null;
    let codec = opts && 'codec' in opts ? opts.codec : null;
    this[version$0] = version;
    this[onVersionChanged$] = onVersionChanged;
    this[mode$] = mode;
    this[codec$0] = codec;
    ;
  }).prototype = database_factory_mixin.DatabaseOpenOptions.prototype;
  dart.addTypeTests(database_factory_mixin.DatabaseOpenOptions);
  dart.addTypeCaches(database_factory_mixin.DatabaseOpenOptions);
  dart.setLibraryUri(database_factory_mixin.DatabaseOpenOptions, I[20]);
  dart.setFieldSignature(database_factory_mixin.DatabaseOpenOptions, () => ({
    __proto__: dart.getFields(database_factory_mixin.DatabaseOpenOptions.__proto__),
    version: dart.finalFieldType(dart.nullable(core.int)),
    onVersionChanged: dart.finalFieldType(dart.nullable(dart.fnType(dart.dynamic, [database$.Database, core.int, core.int]))),
    mode: dart.finalFieldType(dart.nullable(database_mode.DatabaseMode)),
    codec: dart.finalFieldType(dart.nullable(codec.SembastCodec))
  }));
  dart.defineExtensionMethods(database_factory_mixin.DatabaseOpenOptions, ['toString']);
  var factory$0 = dart.privateName(database_factory_mixin, "DatabaseOpenHelper.factory");
  var path$0 = dart.privateName(database_factory_mixin, "DatabaseOpenHelper.path");
  var openMode = dart.privateName(database_factory_mixin, "DatabaseOpenHelper.openMode");
  var options$0 = dart.privateName(database_factory_mixin, "DatabaseOpenHelper.options");
  var lock = dart.privateName(database_factory_mixin, "DatabaseOpenHelper.lock");
  var database$0 = dart.privateName(database_factory_mixin, "DatabaseOpenHelper.database");
  database_factory_mixin.DatabaseOpenHelper = class DatabaseOpenHelper extends core.Object {
    get factory() {
      return this[factory$0];
    }
    set factory(value) {
      super.factory = value;
    }
    get path() {
      return this[path$0];
    }
    set path(value) {
      super.path = value;
    }
    get openMode() {
      return this[openMode];
    }
    set openMode(value) {
      this[openMode] = value;
    }
    get options() {
      return this[options$0];
    }
    set options(value) {
      super.options = value;
    }
    get lock() {
      return this[lock];
    }
    set lock(value) {
      super.lock = value;
    }
    get database() {
      return this[database$0];
    }
    set database(value) {
      this[database$0] = value;
    }
    newDatabase(path) {
      if (path == null) dart.nullFailed(I[21], 73, 38, "path");
      return this.factory.newDatabase(this);
    }
    openDatabase() {
      return this.lock.synchronized(database$.Database, dart.fn(() => async.async(database_impl.SembastDatabase, (function*() {
        if (this.database == null) {
          let database = this.newDatabase(this.path);
          this.database = database;
        }
        dart.nullCheck(this.database).openHelper = this;
        yield dart.nullCheck(this.database).open(this.options);
        this.factory.setDatabaseOpenHelper(this.path, this);
        return dart.nullCheck(this.database);
      }).bind(this)), T$.VoidToFutureOfSembastDatabase()));
    }
    lockedCloseDatabase() {
      return async.async(dart.dynamic, (function* lockedCloseDatabase() {
        if (this.database != null) {
          this.factory.removeDatabaseOpenHelper(this.path);
        }
        return this.database;
      }).bind(this));
    }
    toString() {
      return "DatabaseOpenHelper(" + dart.str(this.path) + ", " + dart.str(this.options) + ")";
    }
  };
  (database_factory_mixin.DatabaseOpenHelper.new = function(factory, path, options) {
    let t61;
    if (factory == null) dart.nullFailed(I[21], 67, 27, "factory");
    if (path == null) dart.nullFailed(I[21], 67, 41, "path");
    if (options == null) dart.nullFailed(I[21], 67, 52, "options");
    this[openMode] = null;
    this[lock] = synchronized.Lock.new();
    this[database$0] = null;
    this[factory$0] = factory;
    this[path$0] = path;
    this[options$0] = options;
    this.openMode == null ? this.openMode = (t61 = this.options.mode, t61 == null ? database_mode.DatabaseMode.defaultMode : t61) : null;
  }).prototype = database_factory_mixin.DatabaseOpenHelper.prototype;
  dart.addTypeTests(database_factory_mixin.DatabaseOpenHelper);
  dart.addTypeCaches(database_factory_mixin.DatabaseOpenHelper);
  dart.setMethodSignature(database_factory_mixin.DatabaseOpenHelper, () => ({
    __proto__: dart.getMethods(database_factory_mixin.DatabaseOpenHelper.__proto__),
    newDatabase: dart.fnType(database_impl.SembastDatabase, [core.String]),
    openDatabase: dart.fnType(async.Future$(database$.Database), []),
    lockedCloseDatabase: dart.fnType(async.Future, [])
  }));
  dart.setLibraryUri(database_factory_mixin.DatabaseOpenHelper, I[20]);
  dart.setFieldSignature(database_factory_mixin.DatabaseOpenHelper, () => ({
    __proto__: dart.getFields(database_factory_mixin.DatabaseOpenHelper.__proto__),
    factory: dart.finalFieldType(database_factory_mixin.SembastDatabaseFactory),
    path: dart.finalFieldType(core.String),
    openMode: dart.fieldType(dart.nullable(database_mode.DatabaseMode)),
    options: dart.finalFieldType(database_factory_mixin.DatabaseOpenOptions),
    lock: dart.finalFieldType(synchronized.Lock),
    database: dart.fieldType(dart.nullable(database_impl.SembastDatabase))
  }));
  dart.defineExtensionMethods(database_factory_mixin.DatabaseOpenHelper, ['toString']);
  var revision = dart.privateName(database_impl, "CommitEntries.revision");
  var txnRecords = dart.privateName(database_impl, "CommitEntries.txnRecords");
  var upgradingMeta = dart.privateName(database_impl, "CommitEntries.upgradingMeta");
  var __CommitEntries_upgrading = dart.privateName(database_impl, "_#CommitEntries#upgrading");
  var __CommitEntries_upgrading_isSet = dart.privateName(database_impl, "_#CommitEntries#upgrading#isSet");
  database_impl.CommitEntries = class CommitEntries extends core.Object {
    get revision() {
      return this[revision];
    }
    set revision(value) {
      this[revision] = value;
    }
    get txnRecords() {
      return this[txnRecords];
    }
    set txnRecords(value) {
      this[txnRecords] = value;
    }
    get upgradingMeta() {
      return this[upgradingMeta];
    }
    set upgradingMeta(value) {
      this[upgradingMeta] = value;
    }
    get upgrading() {
      let t61;
      return dart.test(this[__CommitEntries_upgrading_isSet]) ? (t61 = this[__CommitEntries_upgrading], t61) : dart.throw(new _internal.LateError.fieldNI("upgrading"));
    }
    set upgrading(t61) {
      if (t61 == null) dart.nullFailed(I[30], 42, 13, "null");
      this[__CommitEntries_upgrading_isSet] = true;
      this[__CommitEntries_upgrading] = t61;
    }
    get hasWriteData() {
      let t62, t62$;
      t62$ = (t62 = this.txnRecords, t62 == null ? null : t62[$isNotEmpty]);
      return t62$ == null ? false : t62$;
    }
  };
  (database_impl.CommitEntries.new = function() {
    this[revision] = null;
    this[txnRecords] = null;
    this[__CommitEntries_upgrading] = null;
    this[__CommitEntries_upgrading_isSet] = false;
    this[upgradingMeta] = null;
    ;
  }).prototype = database_impl.CommitEntries.prototype;
  dart.addTypeTests(database_impl.CommitEntries);
  dart.addTypeCaches(database_impl.CommitEntries);
  dart.setGetterSignature(database_impl.CommitEntries, () => ({
    __proto__: dart.getGetters(database_impl.CommitEntries.__proto__),
    upgrading: core.bool,
    hasWriteData: core.bool
  }));
  dart.setSetterSignature(database_impl.CommitEntries, () => ({
    __proto__: dart.getSetters(database_impl.CommitEntries.__proto__),
    upgrading: core.bool
  }));
  dart.setLibraryUri(database_impl.CommitEntries, I[31]);
  dart.setFieldSignature(database_impl.CommitEntries, () => ({
    __proto__: dart.getFields(database_impl.CommitEntries.__proto__),
    revision: dart.fieldType(dart.nullable(core.int)),
    txnRecords: dart.fieldType(dart.nullable(core.List$(record_impl.TxnRecord))),
    [__CommitEntries_upgrading]: dart.fieldType(dart.nullable(core.bool)),
    [__CommitEntries_upgrading_isSet]: dart.fieldType(core.bool),
    upgradingMeta: dart.fieldType(dart.nullable(meta$.Meta))
  }));
  database_impl.CommitData = class CommitData extends database_impl.CommitEntries {};
  (database_impl.CommitData.new = function() {
    database_impl.CommitData.__proto__.new.call(this);
    ;
  }).prototype = database_impl.CommitData.prototype;
  dart.addTypeTests(database_impl.CommitData);
  dart.addTypeCaches(database_impl.CommitData);
  dart.setLibraryUri(database_impl.CommitData, I[31]);
  database_impl.SembastDatabaseMin = class SembastDatabaseMin extends core.Object {};
  database_impl.SembastDatabaseMin[dart.mixinOn] = Object => class SembastDatabaseMin extends Object {};
  (database_impl.SembastDatabaseMin[dart.mixinNew] = function() {
  }).prototype = database_impl.SembastDatabaseMin.prototype;
  dart.addTypeTests(database_impl.SembastDatabaseMin);
  dart.addTypeCaches(database_impl.SembastDatabaseMin);
  database_impl.SembastDatabaseMin[dart.implements] = () => [database$.Database, core.Object];
  dart.setLibraryUri(database_impl.SembastDatabaseMin, I[31]);
  var openHelper$ = dart.privateName(database_impl, "SembastDatabase.openHelper");
  var logV = dart.privateName(database_impl, "SembastDatabase.logV");
  var databaseLock = dart.privateName(database_impl, "SembastDatabase.databaseLock");
  var transactionLock = dart.privateName(database_impl, "SembastDatabase.transactionLock");
  var notificationLock = dart.privateName(database_impl, "SembastDatabase.notificationLock");
  var listener$ = dart.privateName(database_impl, "SembastDatabase.listener");
  var lazyStorageOperations = dart.privateName(database_impl, "SembastDatabase.lazyStorageOperations");
  var cooperator$ = dart.privateName(database_impl, "SembastDatabase.cooperator");
  var _storageFs = dart.privateName(database_impl, "_storageFs");
  var _storageJdb = dart.privateName(database_impl, "_storageJdb");
  var _storageJdbRevisionUpdateSubscription = dart.privateName(database_impl, "_storageJdbRevisionUpdateSubscription");
  var _jdbRevision = dart.privateName(database_impl, "_jdbRevision");
  var _txnId = dart.privateName(database_impl, "_txnId");
  var _meta = dart.privateName(database_impl, "_meta");
  var _upgrading = dart.privateName(database_impl, "_upgrading");
  var _upgradingMeta = dart.privateName(database_impl, "_upgradingMeta");
  var _opened = dart.privateName(database_impl, "_opened");
  var _closed = dart.privateName(database_impl, "_closed");
  var _openTransaction = dart.privateName(database_impl, "_openTransaction");
  var _mainStore = dart.privateName(database_impl, "_mainStore");
  var _stores$ = dart.privateName(database_impl, "_stores");
  var _txnDroppedStores = dart.privateName(database_impl, "_txnDroppedStores");
  var _txnStoreLastIntKeys = dart.privateName(database_impl, "_txnStoreLastIntKeys");
  var _transaction = dart.privateName(database_impl, "_transaction");
  var _pendingListenerContent = dart.privateName(database_impl, "_pendingListenerContent");
  var _exportStat = dart.privateName(database_impl, "_exportStat");
  var _storageBase$ = dart.privateName(database_impl, "_storageBase");
  var _clearTxnData = dart.privateName(database_impl, "_clearTxnData");
  var _recordStore = dart.privateName(database_impl, "_recordStore");
  var _jsonCodec = dart.privateName(database_impl, "_jsonCodec");
  var _jsonEncodableCodec = dart.privateName(database_impl, "_jsonEncodableCodec");
  var _txnBuildCommitEntries = dart.privateName(database_impl, "_txnBuildCommitEntries");
  var _getTxnDatabaseContent = dart.privateName(database_impl, "_getTxnDatabaseContent");
  var _noTxnHasRecord = dart.privateName(database_impl, "_noTxnHasRecord");
  var _addStore = dart.privateName(database_impl, "_addStore");
  var _checkMainStore = dart.privateName(database_impl, "_checkMainStore");
  var _checkOpen = dart.privateName(database_impl, "_checkOpen");
  var FormatException_offset = dart.privateName(core, "FormatException.offset");
  var FormatException_source = dart.privateName(core, "FormatException.source");
  var FormatException_message = dart.privateName(core, "FormatException.message");
  var _needCompact = dart.privateName(database_impl, "_needCompact");
  var _restartListeners = dart.privateName(database_impl, "_restartListeners");
  var _notifyLazilyJdbImportResult = dart.privateName(database_impl, "_notifyLazilyJdbImportResult");
  var _addRecordToPendingListenerContent = dart.privateName(database_impl, "_addRecordToPendingListenerContent");
  var _check = dart.privateName(database_impl, "_check");
  const Object_SembastDatabaseMin$36 = class Object_SembastDatabaseMin extends core.Object {};
  (Object_SembastDatabaseMin$36.new = function() {
  }).prototype = Object_SembastDatabaseMin$36.prototype;
  dart.applyMixin(Object_SembastDatabaseMin$36, database_impl.SembastDatabaseMin);
  database_impl.SembastDatabase = class SembastDatabase extends Object_SembastDatabaseMin$36 {
    get openHelper() {
      return this[openHelper$];
    }
    set openHelper(value) {
      this[openHelper$] = value;
    }
    get logV() {
      return this[logV];
    }
    set logV(value) {
      super.logV = value;
    }
    get databaseLock() {
      return this[databaseLock];
    }
    set databaseLock(value) {
      super.databaseLock = value;
    }
    get transactionLock() {
      return this[transactionLock];
    }
    set transactionLock(value) {
      super.transactionLock = value;
    }
    get notificationLock() {
      return this[notificationLock];
    }
    set notificationLock(value) {
      super.notificationLock = value;
    }
    get listener() {
      return this[listener$];
    }
    set listener(value) {
      super.listener = value;
    }
    get lazyStorageOperations() {
      return this[lazyStorageOperations];
    }
    set lazyStorageOperations(value) {
      super.lazyStorageOperations = value;
    }
    get cooperator() {
      return this[cooperator$];
    }
    set cooperator(value) {
      this[cooperator$] = value;
    }
    get storageJdb() {
      return this[_storageJdb];
    }
    get path() {
      return dart.nullCheck(this[_storageBase$]).path;
    }
    get version() {
      return dart.nullCheck(dart.nullCheck(this[_meta]).version);
    }
    get openOptions() {
      return this.openHelper.options;
    }
    get mainStore() {
      return this[_mainStore];
    }
    get stores() {
      return this[_stores$][$values];
    }
    get storeNames() {
      return this[_stores$][$values][$map](core.String, dart.fn(store => {
        if (store == null) dart.nullFailed(I[30], 133, 58, "store");
        return store.name;
      }, T$.SembastStoreToString()));
    }
    get nonEmptyStoreNames() {
      return this[_stores$][$values][$where](dart.fn(store => {
        if (store == null) dart.nullFailed(I[30], 137, 15, "store");
        return store.recordMap[$isNotEmpty];
      }, T$.SembastStoreTobool()))[$map](core.String, dart.fn(store => {
        if (store == null) dart.nullFailed(I[30], 138, 13, "store");
        return store.name;
      }, T$.SembastStoreToString()));
    }
    [_clearTxnData]() {
      this[_txnDroppedStores][$clear]();
      this[_txnStoreLastIntKeys][$clear]();
      for (let store of this.stores) {
        store.rollback();
      }
    }
    txnRollback(txn) {
      if (txn == null) dart.nullFailed(I[30], 160, 39, "txn");
      this[_clearTxnData]();
    }
    get currentTransaction() {
      return this[_transaction];
    }
    [_recordStore](record) {
      if (record == null) dart.nullFailed(I[30], 173, 43, "record");
      return this.getSembastStore(record.ref.store);
    }
    setRecordInMemory(record) {
      if (record == null) dart.nullFailed(I[30], 179, 36, "record");
      return this[_recordStore](record).setRecordInMemory(record.record);
    }
    jdbDeltaLoadRecord(record) {
      let t62;
      if (record == null) dart.nullFailed(I[30], 186, 53, "record");
      let store = this[_recordStore](record);
      let existing = store.txnGetImmutableRecordSync(null, record.key);
      if (record_impl.ImmutableSembastRecordJdb.is(existing)) {
        if (existing.revision != null) {
          if (dart.notNull((t62 = record.revision, t62 == null ? 0 : t62)) > dart.nullCheck(existing.revision)) {
            this.loadRecord(record);
            return true;
          }
        }
        return false;
      }
      this.loadRecord(record);
      return true;
    }
    loadRecord(record) {
      if (record == null) dart.nullFailed(I[30], 204, 42, "record");
      this[_recordStore](record).loadRecord(record);
    }
    compact() {
      return async.async(dart.dynamic, (function* compact() {
        yield this.databaseOperation(dart.fn(() => this.txnCompact(), T$.VoidToFuture()));
      }).bind(this));
    }
    encodeRecordMap(map) {
      if (map == null) dart.nullFailed(I[30], 216, 30, "map");
      return this[_jsonCodec].encode(this.toJsonEncodable(map));
    }
    decodeRecordLineString(text) {
      if (text == null) dart.nullFailed(I[30], 219, 55, "text");
      let result = this[_jsonEncodableCodec].decode(dart.nullCheck(this[_jsonCodec].decode(text)));
      if (T$.MapOfString$ObjectN().is(result)) {
        return result;
      }
      if (core.Map.is(result)) {
        return result[$cast](core.String, T$.ObjectN());
      }
      return null;
    }
    getCurrentStores() {
      return T$.ListOfSembastStore().from(this.stores);
    }
    getCurrentRecords(store) {
      if (store == null) dart.nullFailed(I[30], 236, 63, "store");
      return store.currentRecords;
    }
    generateUniqueIntKey(store) {
      if (store == null) dart.nullFailed(I[30], 240, 44, "store");
      return async.async(T$.intN(), (function* generateUniqueIntKey() {
        if (this[_storageJdb] != null) {
          let lastIntKey = this[_txnStoreLastIntKeys][$_get](store);
          if (lastIntKey == null) {
            lastIntKey = (yield dart.nullCheck(this[_storageJdb]).generateUniqueIntKey(store));
          } else {
            lastIntKey = dart.notNull(lastIntKey) + 1;
          }
          this[_txnStoreLastIntKeys][$_set](store, lastIntKey);
          return lastIntKey;
        }
        return null;
      }).bind(this));
    }
    generateUniqueStringKey(store) {
      if (store == null) dart.nullFailed(I[30], 259, 50, "store");
      return async.async(T$.StringN(), (function* generateUniqueStringKey() {
        if (this[_storageJdb] != null) {
          return dart.nullCheck(this[_storageJdb]).generateUniqueStringKey(store);
        }
        return null;
      }).bind(this));
    }
    txnCompact() {
      return async.async(dart.dynamic, (function* txnCompact() {
        let t62, t62$, t62$0, t63, t63$;
        if (!dart.test(this.databaseLock.inLock)) dart.assertFailed(null, I[30], 270, 12, "databaseLock.inLock");
        if (dart.test((t62$ = (t62 = this[_storageFs], t62 == null ? null : t62.supported), t62$ == null ? false : t62$))) {
          let tmpStorage = dart.nullCheck(dart.nullCheck(this[_storageFs]).tmpStorage);
          let exportStat = (t62$0 = new database_impl.DatabaseExportStat.new(), (() => {
            t62$0.compactCount = dart.notNull(dart.nullCheck(this[_exportStat]).compactCount) + 1;
            return t62$0;
          })());
          yield tmpStorage.delete();
          yield tmpStorage.findOrCreate();
          let lines = T$.JSArrayOfString().of([]);
          const _addStringLine = line => {
            if (line == null) dart.nullFailed(I[30], 281, 36, "line");
            return async.async(dart.dynamic, (function* _addStringLine() {
              yield this.cooperate();
              exportStat.lineCount = dart.notNull(exportStat.lineCount) + 1;
              if (dart.test(database_impl._debugStorage)) {
                core.print("tmp: " + dart.str(line));
              }
              lines[$add](line);
            }).bind(this));
          };
          dart.fn(_addStringLine, T$.StringToFuture());
          const _addLine = map => {
            if (map == null) dart.nullFailed(I[30], 290, 44, "map");
            return async.async(dart.dynamic, (function* _addLine() {
              let encoded = null;
              try {
                encoded = this.encodeRecordMap(map);
                yield _addStringLine(encoded);
              } catch (e$) {
                let e = dart.getThrown(e$);
                let st = dart.stackTrace(e$);
                if (core.Object.is(e)) {
                  core.print(map);
                  core.print(e);
                  core.print(st);
                  dart.rethrow(e$);
                } else
                  throw e$;
              }
            }).bind(this));
          };
          dart.fn(_addLine, T$.MapOfString$ObjectNToFuture());
          yield _addStringLine(convert.json.encode(dart.nullCheck(this[_meta]).toMap()));
          let stores = this.getCurrentStores();
          for (let store of stores) {
            let records = this.getCurrentRecords(store);
            for (let record of records) {
              yield _addLine(record.toDatabaseRowMap());
            }
          }
          yield tmpStorage.appendLines(lines);
          yield dart.nullCheck(this[_storageFs]).tmpRecover();
          this[_exportStat] = exportStat;
        } else if (dart.test((t63$ = (t63 = this[_storageJdb], t63 == null ? null : t63.supported), t63$ == null ? false : t63$))) {
          yield dart.nullCheck(this[_storageJdb]).compact();
        }
      }).bind(this));
    }
    [_txnBuildCommitEntries]() {
      let t63, t63$, t63$0;
      let txnRecords = T$.JSArrayOfTxnRecord().of([]);
      let stores = this.getCurrentStores();
      for (let store of stores) {
        let records = store.currentTxnRecords;
        if (dart.test((t63$ = (t63 = records, t63 == null ? null : t63[$isNotEmpty]), t63$ == null ? false : t63$))) {
          txnRecords[$addAll](dart.nullCheck(records));
        }
      }
      let commitEntries = (t63$0 = new database_impl.CommitEntries.new(), (() => {
        t63$0.txnRecords = txnRecords;
        t63$0.upgrading = this[_upgrading];
        t63$0.upgradingMeta = this[_upgradingMeta];
        t63$0.revision = this[_jdbRevision];
        return t63$0;
      })());
      return commitEntries;
    }
    [_getTxnDatabaseContent]() {
      let t63, t63$;
      let content = new database_content.TxnDatabaseContent.new();
      for (let store of this.stores) {
        let records = store.currentTxnRecords;
        if (dart.test((t63$ = (t63 = records, t63 == null ? null : t63[$isNotEmpty]), t63$ == null ? false : t63$))) {
          content.addTxnStoreRecords(store.ref, dart.nullCheck(records));
        }
      }
      return content;
    }
    commitInMemory() {
      let t63;
      let content = this[_getTxnDatabaseContent]();
      let txnRecords = content.txnRecords;
      let commitData = (t63 = new database_impl.CommitData.new(), (() => {
        t63.txnRecords = txnRecords;
        return t63;
      })());
      if (dart.test(txnRecords[$isNotEmpty])) {
        const _saveInMemory = () => {
          let t63, t63$, t63$0, t63$1;
          for (let record of txnRecords) {
            let exists = this.setRecordInMemory(record);
            if (dart.test((t63$ = (t63 = this[_storageFs], t63 == null ? null : t63.supported), t63$ == null ? false : t63$))) {
              if (dart.test(exists)) {
                t63$0 = dart.nullCheck(this[_exportStat]);
                t63$0.obsoleteLineCount = dart.notNull(t63$0.obsoleteLineCount) + 1;
              }
              t63$1 = dart.nullCheck(this[_exportStat]);
              t63$1.lineCount = dart.notNull(t63$1.lineCount) + 1;
            }
          }
        };
        dart.fn(_saveInMemory, T$.VoidTovoid());
        _saveInMemory();
      }
      if (dart.test(this[_txnDroppedStores][$isNotEmpty])) {
        for (let store of this[_txnDroppedStores]) {
          this[_stores$][$remove](store);
        }
      }
      if (dart.test(this.listener.isNotEmpty)) {
        for (let storeContent of content.stores) {
          let records = storeContent.records;
          let store = storeContent.store;
          if (records[$isNotEmpty] === true) {
            let listener = this.listener.getStore(store);
            if (listener != null) {
              if (dart.test(listener.hasQueryListener)) {
                let storeListenerContent = this[_pendingListenerContent].addStore(store);
                storeListenerContent.addAll(records);
              } else {
                for (let record of records) {
                  if (dart.test(listener.keyHasRecordListener(record.key))) {
                    this[_pendingListenerContent].addRecord(record);
                  }
                }
              }
            }
          }
        }
      }
      return commitData;
    }
    storageCommitRecords(txnRecords) {
      if (txnRecords == null) dart.nullFailed(I[30], 431, 47, "txnRecords");
      return async.async(dart.dynamic, (function* storageCommitRecords() {
        if (dart.test(txnRecords[$isNotEmpty])) {
          let lines = T$.JSArrayOfString().of([]);
          if (this[_storageFs] != null) {
            for (let record of txnRecords) {
              let map = record.record.toDatabaseRowMap();
              let encoded = null;
              try {
                encoded = this.encodeRecordMap(map);
                if (dart.test(database_impl._debugStorage)) {
                  core.print("add: " + dart.str(encoded));
                }
                lines[$add](encoded);
              } catch (e$) {
                let e = dart.getThrown(e$);
                let st = dart.stackTrace(e$);
                if (core.Object.is(e)) {
                  core.print(map);
                  core.print(e);
                  core.print(st);
                  dart.rethrow(e$);
                } else
                  throw e$;
              }
            }
            yield dart.nullCheck(this[_storageFs]).appendLines(lines);
          }
        }
      }).bind(this));
    }
    txnPutRecords(txn, records) {
      if (txn == null) dart.nullFailed(I[30], 460, 26, "txn");
      if (records == null) dart.nullFailed(I[30], 460, 60, "records");
      return async.async(T$.ListOfImmutableSembastRecordN(), (function* txnPutRecords() {
        records = T$.ListOfImmutableSembastRecord().from(records);
        let recordsResult = T$.ListOfImmutableSembastRecordN().filled(records[$length], null);
        for (let i = 0; i < dart.notNull(records[$length]); i = i + 1) {
          recordsResult[$_set](i, yield this.txnPutRecord(txn, records[$_get](i)));
        }
        return recordsResult;
      }).bind(this));
    }
    txnPutRecord(txn, record) {
      if (txn == null) dart.nullFailed(I[30], 473, 26, "txn");
      if (record == null) dart.nullFailed(I[30], 473, 54, "record");
      return this[_recordStore](record).txnPutRecord(txn, record);
    }
    [_noTxnHasRecord](record) {
      if (record == null) dart.nullFailed(I[30], 478, 47, "record");
      return this[_recordStore](record).txnContainsKey(null, record.key);
    }
    reOpen(options = null) {
      return async.async(database$.Database, (function* reOpen() {
        let t64;
        if ((t64 = options, t64 == null ? null : t64.mode) != null) {
          this.openHelper.openMode = dart.nullCheck(options).mode;
        }
        options == null ? options = this.openOptions : null;
        yield this.close();
        if (this[_storageJdb] != null) {
          return this.openHelper.factory.openDatabase(this.path, {version: options.version, onVersionChanged: options.onVersionChanged, codec: options.codec, mode: options.mode});
        }
        return this.open(options);
      }).bind(this));
    }
    [_checkMainStore]() {
      if (this[_mainStore] == null) {
        this[_addStore](null);
      }
    }
    [_addStore](storeName) {
      if (storeName == null) {
        return this[_mainStore] = this[_addStore]("_main");
      } else {
        let store = new store_impl.SembastStore.new(this, storeName);
        this[_stores$][$_set](storeName, store);
        return store;
      }
    }
    findStore(storeName) {
      if (storeName == null) dart.nullFailed(I[30], 522, 34, "storeName");
      let store = null;
      store = this[_stores$][$_get](storeName);
      return store;
    }
    txnFindStore(txn, storeName) {
      if (txn == null) dart.nullFailed(I[30], 531, 26, "txn");
      if (storeName == null) dart.nullFailed(I[30], 531, 38, "storeName");
      let store = this.findStore(storeName);
      return txn.toExecutor(store);
    }
    [_checkOpen]() {
      if (dart.test(this[_closed])) {
        dart.throw(new exception.DatabaseException.closed());
      }
    }
    getStore(storeName) {
      if (storeName == null) dart.nullFailed(I[30], 546, 32, "storeName");
      this[_checkOpen]();
      let store = this.findStore(storeName);
      store == null ? store = this[_addStore](storeName) : null;
      return store;
    }
    getSembastStore(ref) {
      if (ref == null) dart.nullFailed(I[30], 559, 41, "ref");
      this[_checkOpen]();
      let store = this.findStore(ref.name);
      store == null ? store = this[_addStore](ref.name) : null;
      return store;
    }
    txnGetStore(txn, storeName) {
      if (txn == null) dart.nullFailed(I[30], 569, 26, "txn");
      if (storeName == null) dart.nullFailed(I[30], 569, 38, "storeName");
      let store = this.getSembastStore(store_ref.StoreRef.new(storeName));
      return txn.toExecutor(store);
    }
    deleteStore(storeName) {
      if (storeName == null) dart.nullFailed(I[30], 577, 29, "storeName");
      return this.transaction(dart.dynamic, dart.fn(txn => {
        if (txn == null) dart.nullFailed(I[30], 578, 25, "txn");
        return this.txnDeleteStore(transaction_impl.SembastTransaction.as(txn), storeName);
      }, T$.TransactionToFuture()));
    }
    txnDeleteStore(txn, storeName) {
      if (txn == null) dart.nullFailed(I[30], 584, 44, "txn");
      if (storeName == null) dart.nullFailed(I[30], 584, 56, "storeName");
      return async.async(dart.dynamic, (function* txnDeleteStore() {
        let store = this.txnFindStore(txn, storeName);
        if (store != null) {
          yield store.store.txnClear(txn);
          if (!dart.equals(store.store, this.mainStore)) {
            this[_txnDroppedStores][$add](storeName);
          }
        }
      }).bind(this));
    }
    txnUndeleteStore(txn, storeName) {
      if (txn == null) dart.nullFailed(I[30], 596, 44, "txn");
      if (storeName == null) dart.nullFailed(I[30], 596, 56, "storeName");
      this[_txnDroppedStores][$remove](storeName);
    }
    flush() {
      return async.async(dart.dynamic, (function* flush() {
        yield this.transactionLock.synchronized(core.Null, dart.fn(() => {
        }, T$.VoidToNull()));
        yield this.databaseOperation(null);
      }).bind(this));
    }
    open(options) {
      if (options == null) dart.nullFailed(I[30], 611, 45, "options");
      return async.async(database$.Database, (function* open() {
        let mode = this.openHelper.openMode;
        let version = options.version;
        let _openMode = mode;
        if (dart.test(this[_opened])) {
          return this;
        }
        if (options.codec != null) {
          if (dart.nullCheck(options.codec).signature == null) {
            if (dart.nullCheck(options.codec).codec != null) {
              dart.throw(new exception.DatabaseException.invalidCodec("Codec signature cannot be null"));
            }
          } else {
            if (dart.nullCheck(options.codec).codec == null) {
              dart.throw(new exception.DatabaseException.invalidCodec("Codec implementation cannot be null"));
            }
          }
        }
        yield this.databaseLock.synchronized(dart.dynamic, dart.fn(() => async.async(dart.dynamic, (function*() {
          let t64, t64$, t68, t68$;
          this[_closed] = false;
          try {
            let meta = null;
            const _handleVersionChanged = (oldVersion, newVersion) => {
              return async.async(dart.dynamic, (function* _handleVersionChanged() {
                this[_upgrading] = true;
                try {
                  yield this.transaction(T$.ObjectN(), dart.fn(txn => {
                    if (txn == null) dart.nullFailed(I[30], 648, 32, "txn");
                    return async.async(T$.ObjectN(), (function*() {
                      let result = null;
                      try {
                        this[_openTransaction] = txn;
                        meta = this[_upgradingMeta] = new meta$.Meta.new({version: newVersion, codecSignature: sembast_codec_impl.getCodecEncodedSignature(options.codec)});
                        if (options.onVersionChanged != null) {
                          result = (yield dart.nullCheck(options.onVersionChanged)(this, dart.nullCheck(oldVersion), dart.nullCheck(newVersion)));
                        }
                      } finally {
                        this[_openTransaction] = null;
                      }
                      return result;
                    }).bind(this));
                  }, T$.TransactionToFutureOfObjectN()));
                } finally {
                  this[_upgrading] = false;
                }
              }).bind(this));
            };
            dart.fn(_handleVersionChanged, T$.intNAndintNToFuture());
            const _openDone = () => {
              return async.async(dart.dynamic, (function* _openDone() {
                this[_checkMainStore]();
                meta == null ? meta = new meta$.Meta.new({version: 0, codecSignature: sembast_codec_impl.getCodecEncodedSignature(options.codec)}) : null;
                this[_meta] == null ? this[_meta] = meta : null;
                let needVersionChanged = false;
                let oldVersion = dart.nullCheck(meta).version;
                if (oldVersion === 0) {
                  needVersionChanged = true;
                  version == null ? version = 1 : null;
                  meta = new meta$.Meta.new({version: version, codecSignature: sembast_codec_impl.getCodecEncodedSignature(options.codec)});
                } else {
                  if (version != null && version != oldVersion) {
                    needVersionChanged = true;
                  }
                }
                this[_opened] = true;
                if (needVersionChanged) {
                  yield _handleVersionChanged(oldVersion, version);
                }
                this[_meta] = meta;
              }).bind(this));
            };
            dart.fn(_openDone, T$.VoidToFuture());
            const _findOrCreate = () => {
              return async.async(dart.dynamic, (function* _findOrCreate() {
                if (dart.equals(mode, database_mode.DatabaseMode.existing)) {
                  let found = (yield dart.nullCheck(this[_storageBase$]).find());
                  if (!dart.test(found)) {
                    dart.throw(new exception.DatabaseException.databaseNotFound("Database (open existing only) " + dart.str(this.path) + " not found"));
                  }
                  this.openHelper.openMode = database_mode.DatabaseMode.defaultMode;
                } else {
                  if (dart.equals(mode, database_mode.DatabaseMode.empty)) {
                    yield dart.nullCheck(this[_storageBase$]).delete();
                    this.openHelper.openMode = database_mode.DatabaseMode.defaultMode;
                  }
                  yield dart.nullCheck(this[_storageBase$]).findOrCreate();
                }
              }).bind(this));
            };
            dart.fn(_findOrCreate, T$.VoidToFuture());
            yield _findOrCreate();
            if (dart.test(dart.nullCheck(this[_storageBase$]).supported)) {
              const _clearBeforeImport = () => {
                this[_exportStat] = new database_impl.DatabaseExportStat.new();
                this[_meta] = null;
                this[_mainStore] = null;
                this[_stores$][$clear]();
                this[_checkMainStore]();
                this.listener.close();
                this[_pendingListenerContent].clear();
              };
              dart.fn(_clearBeforeImport, T$.VoidTovoid());
              if (dart.test((t64$ = (t64 = this[_storageFs], t64 == null ? null : t64.supported), t64$ == null ? false : t64$))) {
                let corrupted = false;
                const $import = (lines, opts) => {
                  if (lines == null) dart.nullFailed(I[30], 754, 42, "lines");
                  let safeMode = opts && 'safeMode' in opts ? opts.safeMode : null;
                  return async.async(dart.dynamic, (function* $import() {
                    let t64, t64$, t65, t66, t67, t67$;
                    _clearBeforeImport();
                    let firstLineRead = false;
                    L1: {
                      let iter = async.StreamIterator.new(lines);
                      try {
                        while (yield iter.moveNext()) {
                          let line = iter.current;
                          L0: {
                            t64 = dart.nullCheck(this[_exportStat]);
                            t64.lineCount = dart.notNull(t64.lineCount) + 1;
                            let map = null;
                            if (!firstLineRead) {
                              try {
                                map = (t64$ = T$.MapN().as(convert.json.decode(line)), t64$ == null ? null : t64$[$cast](core.String, T$.ObjectN()));
                              } catch (e) {
                                let _ = dart.getThrown(e);
                                if (core.Exception.is(_)) {
                                } else
                                  throw e;
                              }
                              if (dart.test(meta$.Meta.isMapMeta(map))) {
                                meta = new meta$.Meta.fromMap(dart.nullCheck(map));
                                sembast_codec_impl.checkCodecEncodedSignature(options.codec, dart.nullCheck(meta).codecSignature);
                                firstLineRead = true;
                                break L0;
                              } else {
                                if (dart.equals(_openMode, database_mode.DatabaseMode.neverFails) && (t65 = options.codec, t65 == null ? null : t65.signature) == null) {
                                  corrupted = true;
                                  break L1;
                                } else {
                                  dart.throw(C[2] || CT.C2);
                                }
                              }
                            }
                            try {
                              map = this.decodeRecordLineString(line);
                            } catch (e$) {
                              let _ = dart.getThrown(e$);
                              if (core.Exception.is(_)) {
                                try {
                                  map = (t66 = T$.MapN().as(convert.json.decode(line)), t66 == null ? null : t66[$cast](core.String, T$.ObjectN()));
                                } catch (e$0) {
                                  let _ = dart.getThrown(e$0);
                                  if (core.Exception.is(_)) {
                                    if (dart.equals(_openMode, database_mode.DatabaseMode.neverFails)) {
                                      corrupted = true;
                                      if (dart.test((t67 = safeMode, t67 == null ? false : t67))) {
                                        break L0;
                                      } else {
                                        dart.rethrow(e$0);
                                      }
                                    } else {
                                      dart.rethrow(e$0);
                                    }
                                  } else
                                    throw e$0;
                                }
                              } else
                                throw e$;
                            }
                            if (dart.test(record_impl.isMapRecord(dart.nullCheck(map)))) {
                              let record = new record_impl.ImmutableSembastRecord.fromDatabaseRowMap(this, map);
                              if (dart.test(this[_noTxnHasRecord](record))) {
                                t67$ = dart.nullCheck(this[_exportStat]);
                                t67$.obsoleteLineCount = dart.notNull(t67$.obsoleteLineCount) + 1;
                              }
                              this.loadRecord(record);
                            } else if (dart.test(meta$.Meta.isMapMeta(map))) {
                              meta = new meta$.Meta.fromMap(map);
                              sembast_codec_impl.checkCodecEncodedSignature(options.codec, dart.nullCheck(meta).codecSignature);
                            } else {
                              if (dart.equals(_openMode, database_mode.DatabaseMode.neverFails) && options.codec == null) {
                                corrupted = true;
                                break L1;
                              } else {
                                dart.throw(C[2] || CT.C2);
                              }
                            }
                          }
                        }
                      } finally {
                        yield iter.cancel();
                      }
                    }
                  }).bind(this));
                };
                dart.fn($import, T$.StreamOfString__ToFuture());
                try {
                  yield $import(dart.nullCheck(this[_storageFs]).readLines(), {safeMode: true});
                } catch (e$) {
                  let e = dart.getThrown(e$);
                  if (core.Object.is(e)) {
                    corrupted = true;
                    yield $import(dart.nullCheck(this[_storageFs]).readSafeLines());
                  } else
                    throw e$;
                }
                if (corrupted && meta == null) {
                  yield dart.nullCheck(this[_storageFs]).delete();
                  yield dart.nullCheck(this[_storageFs]).findOrCreate();
                } else {
                  this[_meta] = meta;
                  if (dart.test(this[_needCompact]) || corrupted) {
                    yield this.txnCompact();
                  }
                }
              } else if (dart.test((t68$ = (t68 = this[_storageJdb], t68 == null ? null : t68.supported), t68$ == null ? false : t68$))) {
                _clearBeforeImport();
                let map = (yield dart.nullCheck(this[_storageJdb]).readMeta());
                if (dart.test(meta$.Meta.isMapMeta(map))) {
                  meta = new meta$.Meta.fromMap(dart.nullCheck(map));
                }
                yield this.jdbFullImport();
                this[_storageJdbRevisionUpdateSubscription] = dart.nullCheck(this[_storageJdb]).revisionUpdate.listen(dart.fn(revision => {
                  if (revision == null) dart.nullFailed(I[30], 877, 53, "revision");
                  this.jdbDeltaImport(revision);
                }, T$.intTovoid()));
                this[_meta] = meta;
              }
              return _openDone();
            } else {
              this[_checkMainStore]();
              meta = this[_meta];
              return _openDone();
            }
          } catch (e$0) {
            let _ = dart.getThrown(e$0);
            if (core.Object.is(_)) {
              yield this.lockedClose();
              dart.rethrow(e$0);
            } else
              throw e$0;
          }
        }).bind(this)), T$.VoidToFuture()));
        yield this.flush();
        return this;
      }).bind(this));
    }
    jdbFullImport() {
      return async.async(dart.dynamic, (function* jdbFullImport() {
        let t69, t69$;
        this[_jdbRevision] = (yield dart.nullCheck(this[_storageJdb]).getRevision());
        let iter = async.StreamIterator.new(dart.nullCheck(this[_storageJdb]).entries);
        try {
          while (yield iter.moveNext()) {
            let entry = iter.current;
            {
              let record = new record_impl.ImmutableSembastRecordJdb.new(entry.record, entry.value, {deleted: entry.deleted, revision: entry.id});
              t69 = dart.nullCheck(this[_exportStat]);
              t69.lineCount = dart.notNull(t69.lineCount) + 1;
              if (dart.test(entry.deleted)) {
                t69$ = dart.nullCheck(this[_exportStat]);
                t69$.obsoleteLineCount = dart.notNull(t69$.obsoleteLineCount) + 1;
              }
              this.loadRecord(record);
            }
          }
        } finally {
          yield iter.cancel();
        }
      }).bind(this));
    }
    [_notifyLazilyJdbImportResult](result) {
      if (result == null) dart.nullFailed(I[30], 918, 53, "result");
      if (!dart.test(result.delta)) {
        this[_restartListeners]();
      } else {
        this.notifyListeners();
      }
    }
    jdbDeltaImport(revision) {
      if (revision == null) dart.nullFailed(I[30], 927, 29, "revision");
      return async.async(dart.dynamic, (function* jdbDeltaImport() {
        let result = (yield this.transaction(database_impl.JdbImportResult, dart.fn(txn => {
          if (txn == null) dart.nullFailed(I[30], 928, 37, "txn");
          return async.async(database_impl.JdbImportResult, (function*() {
            return yield this.txnJdbDeltaImport(revision);
          }).bind(this));
        }, T$.TransactionToFutureOfJdbImportResult())));
        this[_notifyLazilyJdbImportResult](result);
      }).bind(this));
    }
    [_addRecordToPendingListenerContent](record) {
      if (record == null) dart.nullFailed(I[30], 934, 66, "record");
      if (dart.test(this.listener.recordHasAnyListener(record.ref))) {
        this[_pendingListenerContent].addRecord(record);
      }
    }
    txnJdbDeltaImport(revision) {
      return async.async(database_impl.JdbImportResult, (function* txnJdbDeltaImport() {
        let t69, t69$, t69$0;
        let delta = null;
        let minRevision = (t69 = this[_jdbRevision], t69 == null ? 0 : t69);
        let deltaMinRevision = (yield dart.nullCheck(this[_storageJdb]).getDeltaMinRevision());
        if (dart.notNull(minRevision) >= dart.notNull(deltaMinRevision)) {
          delta = true;
          let entries = (yield dart.nullCheck(this[_storageJdb]).getEntriesAfter(minRevision));
          if (!dart.test(this[_closed])) {
            for (let entry of entries) {
              let record = new record_impl.ImmutableSembastRecordJdb.new(entry.record, entry.value, {deleted: entry.deleted, revision: entry.id});
              if (dart.test(this.jdbDeltaLoadRecord(record))) {
                this[_addRecordToPendingListenerContent](record);
              }
            }
            this[_jdbRevision] = revision;
          }
        } else {
          delta = false;
          this[_exportStat] = new database_impl.DatabaseExportStat.new();
          let records = T$.JSArrayOfImmutableSembastRecordJdb().of([]);
          let iter = async.StreamIterator.new(dart.nullCheck(this[_storageJdb]).entries);
          try {
            while (yield iter.moveNext()) {
              let entry = iter.current;
              {
                let record = new record_impl.ImmutableSembastRecordJdb.new(entry.record, entry.value, {deleted: entry.deleted, revision: entry.id});
                t69$ = dart.nullCheck(this[_exportStat]);
                t69$.lineCount = dart.notNull(t69$.lineCount) + 1;
                if (dart.test(entry.deleted)) {
                  t69$0 = dart.nullCheck(this[_exportStat]);
                  t69$0.obsoleteLineCount = dart.notNull(t69$0.obsoleteLineCount) + 1;
                }
                records[$add](record);
              }
            }
          } finally {
            yield iter.cancel();
          }
          for (let store of this.stores) {
            store.recordMap[$clear]();
          }
          for (let record of records) {
            this.loadRecord(record);
          }
        }
        return new database_impl.JdbImportResult.new({delta: delta});
      }).bind(this));
    }
    lockedClose() {
      return async.async(dart.dynamic, (function* lockedClose() {
        this[_opened] = false;
        this[_closed] = true;
        if (this[_storageJdb] != null) {
          dart.nullCheck(this[_storageJdb]).close();
        }
        yield this.openHelper.lockedCloseDatabase();
      }).bind(this));
    }
    close() {
      return async.async(dart.dynamic, (function* close() {
        let t69;
        t69 = this[_storageJdbRevisionUpdateSubscription];
        t69 == null ? null : t69.cancel();
        this[_storageJdbRevisionUpdateSubscription] = null;
        return this.openHelper.lock.synchronized(dart.dynamic, dart.fn(() => async.async(core.Null, (function*() {
          this.listener.close();
          yield this.flush();
          yield this.lockedClose();
        }).bind(this)), T$.VoidToFutureOfNull()));
      }).bind(this));
    }
    toJson() {
      let map = new (T$.IdentityMapOfString$ObjectN()).new();
      map[$_set]("path", this.path);
      map[$_set]("version", this.version);
      let stores = T$.JSArrayOfMapOfString$ObjectN().of([]);
      for (let store of this[_stores$][$values]) {
        stores[$add](store.toJson());
      }
      map[$_set]("stores", stores);
      if (this[_exportStat] != null) {
        map[$_set]("exportStat", dart.nullCheck(this[_exportStat]).toJson());
      }
      return map;
    }
    get [_needCompact]() {
      return this[_storageFs] != null && dart.notNull(dart.nullCheck(this[_exportStat]).obsoleteLineCount) > 5 && dart.notNull(dart.nullCheck(this[_exportStat]).obsoleteLineCount) / dart.notNull(dart.nullCheck(this[_exportStat]).lineCount) > 0.2;
    }
    toString() {
      return dart.toString(this.toJson());
    }
    databaseOperation(action) {
      return async.async(dart.dynamic, (function* databaseOperation() {
        if (dart.test(this.lazyStorageOperations[$isEmpty]) && action == null) {
          return;
        }
        yield this.databaseLock.synchronized(core.Null, dart.fn(() => async.async(core.Null, (function*() {
          if (dart.test(this.lazyStorageOperations[$isNotEmpty])) {
            let list = T$.ListOfVoidToFutureOfObjectN().from(this.lazyStorageOperations);
            for (let operation of list) {
              try {
                yield operation();
              } catch (e$) {
                let e = dart.getThrown(e$);
                if (core.Object.is(e)) {
                  core.print("lazy storage err " + dart.str(e));
                } else
                  throw e$;
              }
              this.lazyStorageOperations[$remove](operation);
            }
          }
          if (action != null) {
            yield action();
          }
        }).bind(this)), T$.VoidToFutureOfNull()));
      }).bind(this));
    }
    transaction(T, action) {
      if (action == null) dart.nullFailed(I[30], 1091, 53, "action");
      return async.async(T, (function* transaction() {
        if (this[_openTransaction] != null) {
          return yield action(dart.nullCheck(this[_openTransaction]));
        }
        let commitData = null;
        let upgrading = this[_upgrading];
        let reloadData = false;
        let jdbIncrementRevisionStatus = null;
        let jdbIncrementRevisionStatus$35isSet = false;
        function jdbIncrementRevisionStatus$35get() {
          return jdbIncrementRevisionStatus$35isSet ? jdbIncrementRevisionStatus : dart.throw(new _internal.LateError.localNI("jdbIncrementRevisionStatus"));
        }
        dart.fn(jdbIncrementRevisionStatus$35get, T$.VoidToStorageJdbWriteResult());
        function jdbIncrementRevisionStatus$35set(t73) {
          if (t73 == null) dart.nullFailed(I[30], 1103, 32, "null");
          jdbIncrementRevisionStatus$35isSet = true;
          return jdbIncrementRevisionStatus = t73;
        }
        dart.fn(jdbIncrementRevisionStatus$35set, T$.StorageJdbWriteResultTodynamic());
        let result = null;
        do {
          if (reloadData) {
            yield this.transactionLock.synchronized(core.Null, dart.fn(() => async.async(core.Null, (function*() {
              let result = (yield this.txnJdbDeltaImport(jdbIncrementRevisionStatus$35get().revision));
              this[_notifyLazilyJdbImportResult](result);
            }).bind(this)), T$.VoidToFutureOfNull()));
            reloadData = false;
          }
          result = (yield this.transactionLock.synchronized(T, dart.fn(() => async.async(T, (function*() {
            let t75, t77, t77$, t78, t77$0;
            this[_transaction] = new transaction_impl.SembastTransaction.new(this, this[_txnId] = dart.notNull(this[_txnId]) + 1);
            const _transactionCleanUp = () => {
              let t75;
              upgrading = false;
              this[_clearTxnData]();
              t75 = this[_transaction];
              t75 == null ? null : t75.completer.complete();
              this[_transaction] = null;
            };
            dart.fn(_transactionCleanUp, T$.VoidTovoid());
            let actionResult = null;
            try {
              actionResult = (yield async.Future$(T).sync(dart.fn(() => action(dart.nullCheck(this[_transaction])), dart.fnType(async.FutureOr$(T), []))));
              if (this.storageJdb != null) {
                let commitEntries = this[_txnBuildCommitEntries]();
                if (dart.test(commitEntries.hasWriteData) || dart.test(commitEntries.upgrading)) {
                  let entries = T$.JSArrayOfJdbWriteEntry().of([]);
                  for (let record of dart.nullCheck(commitEntries.txnRecords)) {
                    let entry = (t75 = new jdb.JdbWriteEntry.new(), (() => {
                      t75.txnRecord = record;
                      return t75;
                    })());
                    entries[$add](entry);
                  }
                  let infoEntries = (() => {
                    let t75 = T$.JSArrayOfJdbInfoEntry().of([]);
                    if (dart.test(upgrading)) t75[$add](storage.getMetaInfoEntry(dart.nullCheck(commitEntries.upgradingMeta)));
                    return t75;
                  })();
                  this[_txnStoreLastIntKeys][$forEach](dart.fn((store, lastId) => {
                    if (store == null) dart.nullFailed(I[30], 1151, 45, "store");
                    infoEntries[$add](storage.getStoreLastIntKeyInfoEntry(store, lastId));
                  }, T$.StringAndintNTovoid()));
                  let query = new sembast_jdb.StorageJdbWriteQuery.new({revision: commitEntries.revision, entries: entries, infoEntries: infoEntries});
                  let status = (yield dart.nullCheck(this.storageJdb).writeIfRevision(query));
                  if (!dart.nullCheck(status.success)) {
                    reloadData = true;
                    jdbIncrementRevisionStatus$35set(status);
                    _transactionCleanUp();
                  } else {
                    this[_jdbRevision] = status.revision;
                  }
                }
              }
              commitData = this.commitInMemory();
            } catch (e$) {
              let e = dart.getThrown(e$);
              if (core.Object.is(e)) {
                _transactionCleanUp();
                dart.rethrow(e$);
              } else
                throw e$;
            } finally {
              if (dart.test((t77$ = (t77 = this[_storageFs], t77 == null ? null : t77.supported), t77$ == null ? false : t77$))) {
                let hasRecords = (t77$0 = commitData, t77$0 == null ? null : (t78 = t77$0.txnRecords, t78 == null ? null : t78[$isNotEmpty])) === true;
                if (hasRecords || dart.test(upgrading)) {
                  const postTransaction = () => {
                    return async.async(dart.dynamic, (function* postTransaction() {
                      let t77, t78, t77$;
                      if (dart.test(upgrading)) {
                        yield dart.nullCheck(this[_storageFs]).appendLine(convert.json.encode(dart.nullCheck(this[_upgradingMeta]).toMap()));
                        t77 = dart.nullCheck(this[_exportStat]);
                        t77.lineCount = dart.notNull(t77.lineCount) + 1;
                      }
                      if ((t77$ = commitData, t77$ == null ? null : (t78 = t77$.txnRecords, t78 == null ? null : t78[$isNotEmpty])) === true) {
                        yield this.storageCommitRecords(dart.nullCheck(dart.nullCheck(commitData).txnRecords));
                      }
                      if (!dart.test(this[_upgrading]) && dart.test(this[_needCompact])) {
                        yield this.txnCompact();
                      }
                    }).bind(this));
                  };
                  dart.fn(postTransaction, T$.VoidToFuture());
                  if (dart.test(upgrading)) {
                    yield postTransaction();
                  } else {
                    this.lazyStorageOperations[$add](postTransaction);
                  }
                }
              }
            }
            _transactionCleanUp();
            return actionResult;
          }).bind(this)), dart.fnType(async.Future$(T), []))).whenComplete(dart.fn(() => async.async(dart.void, (function*() {
            this.notifyListenersLazily();
            if (!dart.test(upgrading)) {
              yield this.databaseOperation(null);
            }
          }).bind(this)), T$.VoidToFutureOfvoid())));
        } while (reloadData);
        return result;
      }).bind(this));
    }
    notifyListenersLazily() {
      this.notifyListeners();
    }
    get cooperateOn() {
      let t77, t77$;
      t77$ = (t77 = this.cooperator, t77 == null ? null : t77.cooperateOn);
      return t77$ == null ? false : t77$;
    }
    get needCooperate() {
      return cooperator.cooperateNeeded(this.cooperator);
    }
    cooperate() {
      let t77;
      t77 = this.cooperator;
      return t77 == null ? null : t77.cooperate();
    }
    checkTransaction(transaction) {
      if (transaction != null && !dart.equals(transaction, this.currentTransaction)) {
        dart.throw(new core.StateError.new("The transaction is no longer active. Make sure you (a)wait all pending operations in your transaction block"));
      }
    }
    get sembastDatabase() {
      return this;
    }
    inTransaction(T, action) {
      if (action == null) dart.nullFailed(I[30], 1261, 64, "action");
      return this.transaction(T, dart.fn(txn => {
        if (txn == null) dart.nullFailed(I[30], 1262, 20, "txn");
        return action(transaction_impl.SembastTransaction.as(txn));
      }, dart.fnType(async.FutureOr$(T), [transaction.Transaction])));
    }
    get sembastTransaction() {
      return T$.SembastTransactionN().as(this[_openTransaction]);
    }
    [_restartListeners]() {
      for (let store of this.listener.stores) {
        let storeListener = dart.nullCheck(this.listener.getStore(store));
        storeListener.restart();
      }
    }
    notifyListeners() {
      return async.async(dart.dynamic, (function* notifyListeners() {
        while (true) {
          let storeContent = this[_pendingListenerContent].getAndRemoveFirstStore();
          if (storeContent == null) {
            break;
          }
          let storeListener = this.listener.getStore(storeContent.store);
          if (storeListener != null) {
            yield this.notificationLock.synchronized(core.Null, dart.fn(() => async.async(core.Null, (function*() {
              for (let record of storeContent.records) {
                let ctlrs = storeListener.getRecordControllers(dart.dynamic, dart.dynamic, record.ref);
                if (ctlrs != null) {
                  for (let ctlr of ctlrs) {
                    function _updateRecord() {
                      if (false) {
                        core.print("updating " + dart.str(ctlr) + ": with " + dart.str(record));
                      }
                      if (!dart.test(record.deleted)) {
                        ctlr.add(record);
                      } else {
                        ctlr.add(null);
                      }
                    }
                    dart.fn(_updateRecord, T$.VoidTovoid());
                    if (dart.test(ctlr.hasInitialData)) {
                      _updateRecord();
                    } else {
                      this.notificationLock.synchronized(core.Null, dart.fn(() => async.async(core.Null, function*() {
                        _updateRecord();
                      }), T$.VoidToFutureOfNull()));
                    }
                  }
                }
              }
              for (let query of T$.ListOfQueryListenerController().from(storeListener.getQueryListenerControllers(dart.dynamic, dart.dynamic))) {
                const _updateQuery = () => {
                  return async.async(dart.dynamic, (function* _updateQuery() {
                    if (false) {
                      core.print("updating " + dart.str(query) + ": with " + dart.str(storeContent.records[$length]) + " records ");
                    }
                    yield query.update(storeContent.records, this.cooperator);
                    if (false) {
                      core.print("updated " + dart.str(query) + ": with " + dart.str(storeContent.records[$length]) + " records ");
                    }
                  }).bind(this));
                };
                dart.fn(_updateQuery, T$.VoidToFuture());
                if (dart.test(query.hasInitialData)) {
                  yield _updateQuery();
                } else {
                  this.notificationLock.synchronized(core.Null, dart.fn(() => async.async(core.Null, function*() {
                    yield _updateQuery();
                  }), T$.VoidToFutureOfNull()));
                }
              }
            }).bind(this)), T$.VoidToFutureOfNull()));
          }
        }
      }).bind(this));
    }
    sanitizeValue(value) {
      if (value == null) {
        return null;
      } else if (typeof value == 'number' || typeof value == 'string' || typeof value == 'boolean') {
        return value;
      } else if (core.List.is(value)) {
        return value;
      } else if (core.Map.is(value)) {
        if (!T$.MapOfString$ObjectN().is(value)) {
          return value[$cast](core.String, T$.ObjectN());
        }
        return value;
      }
      if (dart.test(dart.nullCheck(this.openOptions.codec).jsonEncodableCodec.supportsType(value))) {
        return value;
      }
      dart.throw(new core.ArgumentError.value(value, null, "type " + dart.str(dart.runtimeType(value)) + " not supported"));
    }
    get [_jsonCodec]() {
      let t77, t77$;
      t77$ = (t77 = this.openOptions.codec, t77 == null ? null : t77.codec);
      return t77$ == null ? convert.json : t77$;
    }
    get [_jsonEncodableCodec]() {
      let t77, t77$;
      t77$ = (t77 = this.openOptions.codec, t77 == null ? null : t77.jsonEncodableCodec);
      return t77$ == null ? json_encodable_codec.sembastDefaultJsonEncodableCodec : t77$;
    }
    toJsonEncodable(value) {
      if (value == null) dart.nullFailed(I[30], 1378, 33, "value");
      return this[_jsonEncodableCodec].encode(value);
    }
    fromJsonEncodable(value) {
      if (value == null) dart.nullFailed(I[30], 1381, 35, "value");
      return this[_jsonEncodableCodec].decode(value);
    }
    [_check](value, update) {
      if (update == null) dart.nullFailed(I[30], 1384, 35, "update");
      if (dart.test(update)) {
        if (dart.test(utils.isBasicTypeFieldValueOrNull(value))) {
          return;
        }
      } else if (dart.test(utils.isBasicTypeOrNull(value))) {
        return;
      }
      if (core.List.is(value)) {
        for (let item of value) {
          this[_check](item, update);
        }
        return;
      } else if (core.Map.is(value)) {
        for (let item of value[$values]) {
          this[_check](item, update);
        }
        return;
      }
      if (dart.test(this[_jsonEncodableCodec].supportsType(value))) {
        return;
      }
      dart.throw(new core.ArgumentError.value(value, null, "type " + dart.str(dart.runtimeType(value)) + " not supported"));
    }
    sanitizeInputValue(V, value, opts) {
      let update = opts && 'update' in opts ? opts.update : null;
      update == null ? update = false : null;
      if (dart.test(update) && field$.FieldValue.is(value)) {
        dart.throw(new core.ArgumentError.value(value, dart.str(value) + " not supported at root"));
      }
      this[_check](value, update);
      if (core.List.is(value)) {
        try {
          return V.as(value[$cast](T$.ObjectN()));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            dart.throw(new core.ArgumentError.value(value, "type " + dart.str(dart.wrapType(V)) + " not supported", "List must be of type List<Object?> for type " + dart.str(dart.runtimeType(value)) + " value " + dart.str(value)));
          } else
            throw e$;
        }
      } else if (core.Map.is(value)) {
        try {
          return V.as(value[$cast](core.String, T$.ObjectN()));
        } catch (e$0) {
          let e = dart.getThrown(e$0);
          if (core.Object.is(e)) {
            dart.throw(new core.ArgumentError.value(value, "type " + dart.str(dart.wrapType(V)) + " not supported", "Map must be of type Map<String, Object?> for type " + dart.str(dart.runtimeType(value)) + " value " + dart.str(value)));
          } else
            throw e$0;
        }
      }
      return dart.nullable(V).as(value);
    }
  };
  (database_impl.SembastDatabase.new = function(openHelper, _storageBase = null) {
    if (openHelper == null) dart.nullFailed(I[30], 141, 24, "openHelper");
    this[logV] = log_level.sembastLogLevel == log_level.SembastLogLevel.verbose;
    this[_storageFs] = null;
    this[_storageJdb] = null;
    this[_storageJdbRevisionUpdateSubscription] = null;
    this[_jdbRevision] = null;
    this[databaseLock] = synchronized.Lock.new();
    this[transactionLock] = synchronized.Lock.new();
    this[notificationLock] = synchronized.Lock.new();
    this[listener$] = new listener.DatabaseListener.new();
    this[_txnId] = 0;
    this[_meta] = null;
    this[_upgrading] = false;
    this[_upgradingMeta] = null;
    this[_opened] = false;
    this[_closed] = false;
    this[_openTransaction] = null;
    this[_mainStore] = null;
    this[_stores$] = new (T$.IdentityMapOfString$SembastStore()).new();
    this[_txnDroppedStores] = T$.JSArrayOfString().of([]);
    this[_txnStoreLastIntKeys] = new (T$.IdentityMapOfString$int()).new();
    this[_transaction] = null;
    this[_pendingListenerContent] = new database_content.DatabaseListenerContent.new();
    this[lazyStorageOperations] = T$.JSArrayOfVoidToFutureOfObjectN().of([]);
    this[_exportStat] = null;
    this[cooperator$] = dart.test(cooperator.cooperatorDisabled) ? null : cooperator.globalCooperator;
    this[openHelper$] = openHelper;
    this[_storageBase$] = _storageBase;
    if (storage.DatabaseStorage.is(this[_storageBase$])) {
      this[_storageFs] = storage.DatabaseStorage.as(this[_storageBase$]);
    } else if (storage.StorageJdb.is(this[_storageBase$])) {
      this[_storageJdb] = storage.StorageJdb.as(this[_storageBase$]);
    }
  }).prototype = database_impl.SembastDatabase.prototype;
  dart.addTypeTests(database_impl.SembastDatabase);
  dart.addTypeCaches(database_impl.SembastDatabase);
  database_impl.SembastDatabase[dart.implements] = () => [database$.Database, database_client_impl.SembastDatabaseClient];
  dart.setMethodSignature(database_impl.SembastDatabase, () => ({
    __proto__: dart.getMethods(database_impl.SembastDatabase.__proto__),
    [_clearTxnData]: dart.fnType(dart.void, []),
    txnRollback: dart.fnType(dart.void, [transaction_impl.SembastTransaction]),
    [_recordStore]: dart.fnType(store_impl.SembastStore, [record_impl.SembastRecord]),
    setRecordInMemory: dart.fnType(core.bool, [record_impl.TxnRecord]),
    jdbDeltaLoadRecord: dart.fnType(core.bool, [record_impl.ImmutableSembastRecordJdb]),
    loadRecord: dart.fnType(dart.void, [record_impl.ImmutableSembastRecord]),
    compact: dart.fnType(async.Future, []),
    encodeRecordMap: dart.fnType(core.String, [core.Map]),
    decodeRecordLineString: dart.fnType(dart.nullable(core.Map$(core.String, dart.nullable(core.Object))), [core.String]),
    getCurrentStores: dart.fnType(core.List$(store_impl.SembastStore), []),
    getCurrentRecords: dart.fnType(core.List$(record_impl.ImmutableSembastRecord), [store_impl.SembastStore]),
    generateUniqueIntKey: dart.fnType(async.Future$(dart.nullable(core.int)), [core.String]),
    generateUniqueStringKey: dart.fnType(async.Future$(dart.nullable(core.String)), [core.String]),
    txnCompact: dart.fnType(async.Future, []),
    [_txnBuildCommitEntries]: dart.fnType(database_impl.CommitEntries, []),
    [_getTxnDatabaseContent]: dart.fnType(database_content.TxnDatabaseContent, []),
    commitInMemory: dart.fnType(database_impl.CommitData, []),
    storageCommitRecords: dart.fnType(async.Future, [core.List$(record_impl.TxnRecord)]),
    txnPutRecords: dart.fnType(async.Future$(core.List$(dart.nullable(record_impl.ImmutableSembastRecord))), [transaction_impl.SembastTransaction, core.List$(record_impl.ImmutableSembastRecord)]),
    txnPutRecord: dart.fnType(async.Future$(record_impl.ImmutableSembastRecord), [transaction_impl.SembastTransaction, record_impl.ImmutableSembastRecord]),
    [_noTxnHasRecord]: dart.fnType(core.bool, [record_impl.ImmutableSembastRecord]),
    reOpen: dart.fnType(async.Future$(database$.Database), [], [dart.nullable(database_factory_mixin.DatabaseOpenOptions)]),
    [_checkMainStore]: dart.fnType(dart.void, []),
    [_addStore]: dart.fnType(store_impl.SembastStore, [dart.nullable(core.String)]),
    findStore: dart.fnType(dart.nullable(store_impl.SembastStore), [core.String]),
    txnFindStore: dart.fnType(dart.nullable(transaction_impl.SembastTransactionStore), [transaction_impl.SembastTransaction, core.String]),
    [_checkOpen]: dart.fnType(dart.void, []),
    getStore: dart.fnType(store_impl.SembastStore, [core.String]),
    getSembastStore: dart.fnType(store_impl.SembastStore, [store_ref.StoreRef]),
    txnGetStore: dart.fnType(dart.nullable(transaction_impl.SembastTransactionStore), [transaction_impl.SembastTransaction, core.String]),
    deleteStore: dart.fnType(async.Future, [core.String]),
    txnDeleteStore: dart.fnType(async.Future, [transaction_impl.SembastTransaction, core.String]),
    txnUndeleteStore: dart.fnType(dart.void, [transaction_impl.SembastTransaction, core.String]),
    flush: dart.fnType(async.Future, []),
    open: dart.fnType(async.Future$(database$.Database), [database_factory_mixin.DatabaseOpenOptions]),
    jdbFullImport: dart.fnType(async.Future, []),
    [_notifyLazilyJdbImportResult]: dart.fnType(dart.void, [database_impl.JdbImportResult]),
    jdbDeltaImport: dart.fnType(async.Future, [core.int]),
    [_addRecordToPendingListenerContent]: dart.fnType(dart.void, [record_impl.ImmutableSembastRecord]),
    txnJdbDeltaImport: dart.fnType(async.Future$(database_impl.JdbImportResult), [dart.nullable(core.int)]),
    lockedClose: dart.fnType(async.Future, []),
    close: dart.fnType(async.Future, []),
    toJson: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), []),
    databaseOperation: dart.fnType(async.Future, [dart.nullable(dart.fnType(async.Future, []))]),
    transaction: dart.gFnType(T => [async.Future$(T), [dart.fnType(async.FutureOr$(T), [transaction.Transaction])]], T => [dart.nullable(core.Object)]),
    notifyListenersLazily: dart.fnType(dart.void, []),
    cooperate: dart.fnType(dart.dynamic, []),
    checkTransaction: dart.fnType(dart.void, [dart.nullable(transaction_impl.SembastTransaction)]),
    inTransaction: dart.gFnType(T => [async.Future$(T), [dart.fnType(async.FutureOr$(T), [transaction_impl.SembastTransaction])]], T => [dart.nullable(core.Object)]),
    [_restartListeners]: dart.fnType(dart.void, []),
    notifyListeners: dart.fnType(async.Future, []),
    sanitizeValue: dart.fnType(dart.dynamic, [dart.dynamic]),
    toJsonEncodable: dart.fnType(core.Object, [core.Object]),
    fromJsonEncodable: dart.fnType(core.Object, [core.Object]),
    [_check]: dart.fnType(dart.void, [dart.dynamic, core.bool]),
    sanitizeInputValue: dart.gFnType(V => [dart.nullable(V), [dart.dynamic], {update: dart.nullable(core.bool)}, {}], V => [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(database_impl.SembastDatabase, () => ({
    __proto__: dart.getGetters(database_impl.SembastDatabase.__proto__),
    storageJdb: dart.nullable(storage.StorageJdb),
    path: core.String,
    version: core.int,
    openOptions: database_factory_mixin.DatabaseOpenOptions,
    mainStore: dart.nullable(store_impl.SembastStore),
    stores: core.Iterable$(store_impl.SembastStore),
    storeNames: core.Iterable$(core.String),
    nonEmptyStoreNames: core.Iterable$(core.String),
    currentTransaction: dart.nullable(transaction_impl.SembastTransaction),
    [_needCompact]: core.bool,
    cooperateOn: core.bool,
    needCooperate: core.bool,
    sembastDatabase: database_impl.SembastDatabase,
    sembastTransaction: dart.nullable(transaction_impl.SembastTransaction),
    [_jsonCodec]: convert.Codec$(dart.nullable(core.Object), core.String),
    [_jsonEncodableCodec]: json_encodable_codec.JsonEncodableCodec
  }));
  dart.setLibraryUri(database_impl.SembastDatabase, I[31]);
  dart.setFieldSignature(database_impl.SembastDatabase, () => ({
    __proto__: dart.getFields(database_impl.SembastDatabase.__proto__),
    openHelper: dart.fieldType(database_factory_mixin.DatabaseOpenHelper),
    logV: dart.finalFieldType(core.bool),
    [_storageBase$]: dart.finalFieldType(dart.nullable(storage.StorageBase)),
    [_storageFs]: dart.fieldType(dart.nullable(storage.DatabaseStorage)),
    [_storageJdb]: dart.fieldType(dart.nullable(storage.StorageJdb)),
    [_storageJdbRevisionUpdateSubscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(core.int))),
    [_jdbRevision]: dart.fieldType(dart.nullable(core.int)),
    databaseLock: dart.finalFieldType(synchronized.Lock),
    transactionLock: dart.finalFieldType(synchronized.Lock),
    notificationLock: dart.finalFieldType(synchronized.Lock),
    listener: dart.finalFieldType(listener.DatabaseListener),
    [_txnId]: dart.fieldType(core.int),
    [_meta]: dart.fieldType(dart.nullable(meta$.Meta)),
    [_upgrading]: dart.fieldType(core.bool),
    [_upgradingMeta]: dart.fieldType(dart.nullable(meta$.Meta)),
    [_opened]: dart.fieldType(core.bool),
    [_closed]: dart.fieldType(core.bool),
    [_openTransaction]: dart.fieldType(dart.nullable(transaction.Transaction)),
    [_mainStore]: dart.fieldType(dart.nullable(store_impl.SembastStore)),
    [_stores$]: dart.finalFieldType(core.Map$(core.String, store_impl.SembastStore)),
    [_txnDroppedStores]: dart.finalFieldType(core.List$(core.String)),
    [_txnStoreLastIntKeys]: dart.finalFieldType(core.Map$(core.String, dart.nullable(core.int))),
    [_transaction]: dart.fieldType(dart.nullable(transaction_impl.SembastTransaction)),
    [_pendingListenerContent]: dart.finalFieldType(database_content.DatabaseListenerContent),
    lazyStorageOperations: dart.finalFieldType(core.List$(dart.fnType(async.Future$(dart.nullable(core.Object)), []))),
    [_exportStat]: dart.fieldType(dart.nullable(database_impl.DatabaseExportStat)),
    cooperator: dart.fieldType(dart.nullable(cooperator.Cooperator))
  }));
  dart.defineExtensionMethods(database_impl.SembastDatabase, ['toString']);
  var lineCount = dart.privateName(database_impl, "DatabaseExportStat.lineCount");
  var obsoleteLineCount = dart.privateName(database_impl, "DatabaseExportStat.obsoleteLineCount");
  var compactCount = dart.privateName(database_impl, "DatabaseExportStat.compactCount");
  var _mapInt = dart.privateName(database_impl, "_mapInt");
  database_impl.DatabaseExportStat = class DatabaseExportStat extends core.Object {
    get lineCount() {
      return this[lineCount];
    }
    set lineCount(value) {
      this[lineCount] = value;
    }
    get obsoleteLineCount() {
      return this[obsoleteLineCount];
    }
    set obsoleteLineCount(value) {
      this[obsoleteLineCount] = value;
    }
    get compactCount() {
      return this[compactCount];
    }
    set compactCount(value) {
      this[compactCount] = value;
    }
    [_mapInt](map, key) {
      if (map == null) dart.nullFailed(I[30], 1452, 19, "map");
      if (key == null) dart.nullFailed(I[30], 1452, 31, "key");
      let value = map[$_get](key);
      if (core.int.is(value)) {
        return value;
      }
      return 0;
    }
    toJson() {
      let map = new (T$.IdentityMapOfString$ObjectN()).new();
      map[$_set]("lineCount", this.lineCount);
      map[$_set]("obsoleteLineCount", this.obsoleteLineCount);
      map[$_set]("compactCount", this.compactCount);
      return map;
    }
    toString() {
      return dart.toString(this.toJson());
    }
  };
  (database_impl.DatabaseExportStat.new = function() {
    this[lineCount] = 0;
    this[obsoleteLineCount] = 0;
    this[compactCount] = 0;
    ;
  }).prototype = database_impl.DatabaseExportStat.prototype;
  (database_impl.DatabaseExportStat.fromJson = function(map) {
    if (map == null) dart.nullFailed(I[30], 1461, 35, "map");
    this[lineCount] = 0;
    this[obsoleteLineCount] = 0;
    this[compactCount] = 0;
    if (map[$_get]("lineCount") != null) {
      this.lineCount = this[_mapInt](map, "lineCount");
    }
    if (map[$_get]("compactCount") != null) {
      this.compactCount = this[_mapInt](map, "compactCount");
    }
    if (map[$_get]("obsoleteLineCount") != null) {
      this.obsoleteLineCount = this[_mapInt](map, "obsoleteLineCount");
    }
  }).prototype = database_impl.DatabaseExportStat.prototype;
  dart.addTypeTests(database_impl.DatabaseExportStat);
  dart.addTypeCaches(database_impl.DatabaseExportStat);
  dart.setMethodSignature(database_impl.DatabaseExportStat, () => ({
    __proto__: dart.getMethods(database_impl.DatabaseExportStat.__proto__),
    [_mapInt]: dart.fnType(core.int, [core.Map, core.String]),
    toJson: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [])
  }));
  dart.setLibraryUri(database_impl.DatabaseExportStat, I[31]);
  dart.setFieldSignature(database_impl.DatabaseExportStat, () => ({
    __proto__: dart.getFields(database_impl.DatabaseExportStat.__proto__),
    lineCount: dart.fieldType(core.int),
    obsoleteLineCount: dart.fieldType(core.int),
    compactCount: dart.fieldType(core.int)
  }));
  dart.defineExtensionMethods(database_impl.DatabaseExportStat, ['toString']);
  var delta$ = dart.privateName(database_impl, "JdbImportResult.delta");
  database_impl.JdbImportResult = class JdbImportResult extends core.Object {
    get delta() {
      return this[delta$];
    }
    set delta(value) {
      super.delta = value;
    }
  };
  (database_impl.JdbImportResult.new = function(opts) {
    let delta = opts && 'delta' in opts ? opts.delta : null;
    if (delta == null) dart.nullFailed(I[30], 1493, 34, "delta");
    this[delta$] = delta;
    ;
  }).prototype = database_impl.JdbImportResult.prototype;
  dart.addTypeTests(database_impl.JdbImportResult);
  dart.addTypeCaches(database_impl.JdbImportResult);
  dart.setLibraryUri(database_impl.JdbImportResult, I[31]);
  dart.setFieldSignature(database_impl.JdbImportResult, () => ({
    __proto__: dart.getFields(database_impl.JdbImportResult.__proto__),
    delta: dart.finalFieldType(core.bool)
  }));
  database_impl.getDatabase = function getDatabase(database) {
    if (database == null) dart.nullFailed(I[30], 31, 38, "database");
    return database_impl.SembastDatabase.as(database);
  };
  dart.defineLazy(database_impl, {
    /*database_impl._debugStorage*/get _debugStorage() {
      return false;
    }
  }, false);
  database_client_impl.SembastDatabaseClient = class SembastDatabaseClient extends core.Object {};
  (database_client_impl.SembastDatabaseClient.new = function() {
    ;
  }).prototype = database_client_impl.SembastDatabaseClient.prototype;
  dart.addTypeTests(database_client_impl.SembastDatabaseClient);
  dart.addTypeCaches(database_client_impl.SembastDatabaseClient);
  dart.setLibraryUri(database_client_impl.SembastDatabaseClient, I[32]);
  database_client_impl.getClient = function getClient(client) {
    if (client == null) dart.nullFailed(I[33], 10, 48, "client");
    return database_client_impl.SembastDatabaseClient.as(client);
  };
  var sembastDatabase$ = dart.privateName(transaction_impl, "SembastTransaction.sembastDatabase");
  var completer = dart.privateName(transaction_impl, "SembastTransaction.completer");
  var _id$ = dart.privateName(transaction_impl, "_id");
  transaction_impl.SembastTransaction = class SembastTransaction extends core.Object {
    get sembastDatabase() {
      return this[sembastDatabase$];
    }
    set sembastDatabase(value) {
      super.sembastDatabase = value;
    }
    get completer() {
      return this[completer];
    }
    set completer(value) {
      this[completer] = value;
    }
    get id() {
      return this[_id$];
    }
    get isCompleted() {
      return this.completer.isCompleted;
    }
    get completed() {
      return this.completer.future;
    }
    toString() {
      return "txn " + dart.str(this[_id$]) + (dart.test(this.completer.isCompleted) ? " completed" : "");
    }
    toExecutor(store) {
      return store != null ? new transaction_impl.SembastTransactionStore.new(this, store) : null;
    }
    deleteStore(storeName) {
      if (storeName == null) dart.nullFailed(I[34], 43, 29, "storeName");
      return this.database.txnDeleteStore(this, storeName);
    }
    get database() {
      return this.sembastDatabase;
    }
    inTransaction(T, action) {
      if (action == null) dart.nullFailed(I[34], 51, 64, "action");
      return async.async(T, (function* inTransaction() {
        return action(this);
      }).bind(this));
    }
    get sembastTransaction() {
      return this;
    }
    getSembastStore(ref) {
      if (ref == null) dart.nullFailed(I[34], 58, 41, "ref");
      return dart.nullCheck(this.database.txnGetStore(this, ref.name)).store;
    }
  };
  (transaction_impl.SembastTransaction.new = function(sembastDatabase, _id) {
    if (sembastDatabase == null) dart.nullFailed(I[34], 25, 27, "sembastDatabase");
    if (_id == null) dart.nullFailed(I[34], 25, 49, "_id");
    this[completer] = async.Completer.new();
    this[sembastDatabase$] = sembastDatabase;
    this[_id$] = _id;
    ;
  }).prototype = transaction_impl.SembastTransaction.prototype;
  dart.addTypeTests(transaction_impl.SembastTransaction);
  dart.addTypeCaches(transaction_impl.SembastTransaction);
  transaction_impl.SembastTransaction[dart.implements] = () => [transaction.Transaction, database_client_impl.SembastDatabaseClient];
  dart.setMethodSignature(transaction_impl.SembastTransaction, () => ({
    __proto__: dart.getMethods(transaction_impl.SembastTransaction.__proto__),
    toExecutor: dart.fnType(dart.nullable(transaction_impl.SembastTransactionStore), [dart.nullable(store_impl.SembastStore)]),
    deleteStore: dart.fnType(async.Future, [core.String]),
    inTransaction: dart.gFnType(T => [async.Future$(T), [dart.fnType(async.FutureOr$(T), [transaction_impl.SembastTransaction])]], T => [dart.nullable(core.Object)]),
    getSembastStore: dart.fnType(store_impl.SembastStore, [store_ref.StoreRef])
  }));
  dart.setGetterSignature(transaction_impl.SembastTransaction, () => ({
    __proto__: dart.getGetters(transaction_impl.SembastTransaction.__proto__),
    id: core.int,
    isCompleted: core.bool,
    completed: async.Future,
    database: database_impl.SembastDatabase,
    sembastTransaction: transaction_impl.SembastTransaction
  }));
  dart.setLibraryUri(transaction_impl.SembastTransaction, I[35]);
  dart.setFieldSignature(transaction_impl.SembastTransaction, () => ({
    __proto__: dart.getFields(transaction_impl.SembastTransaction.__proto__),
    sembastDatabase: dart.finalFieldType(database_impl.SembastDatabase),
    [_id$]: dart.finalFieldType(core.int),
    completer: dart.fieldType(async.Completer)
  }));
  dart.defineExtensionMethods(transaction_impl.SembastTransaction, ['toString']);
  var sembastTransaction$ = dart.privateName(transaction_impl, "SembastTransactionStore.sembastTransaction");
  var store$2 = dart.privateName(transaction_impl, "SembastTransactionStore.store");
  transaction_impl.SembastTransactionStore = class SembastTransactionStore extends core.Object {
    get sembastTransaction() {
      return this[sembastTransaction$];
    }
    set sembastTransaction(value) {
      super.sembastTransaction = value;
    }
    get store() {
      return this[store$2];
    }
    set store(value) {
      super.store = value;
    }
    toString() {
      return dart.str(this.store);
    }
  };
  (transaction_impl.SembastTransactionStore.new = function(sembastTransaction, store) {
    if (sembastTransaction == null) dart.nullFailed(I[34], 71, 32, "sembastTransaction");
    if (store == null) dart.nullFailed(I[34], 71, 57, "store");
    this[sembastTransaction$] = sembastTransaction;
    this[store$2] = store;
    ;
  }).prototype = transaction_impl.SembastTransactionStore.prototype;
  dart.addTypeTests(transaction_impl.SembastTransactionStore);
  dart.addTypeCaches(transaction_impl.SembastTransactionStore);
  dart.setLibraryUri(transaction_impl.SembastTransactionStore, I[35]);
  dart.setFieldSignature(transaction_impl.SembastTransactionStore, () => ({
    __proto__: dart.getFields(transaction_impl.SembastTransactionStore.__proto__),
    sembastTransaction: dart.finalFieldType(transaction_impl.SembastTransaction),
    store: dart.finalFieldType(store_impl.SembastStore)
  }));
  dart.defineExtensionMethods(transaction_impl.SembastTransactionStore, ['toString']);
  var database$1 = dart.privateName(store_impl, "SembastStore.database");
  var ref = dart.privateName(store_impl, "SembastStore.ref");
  var lastIntKey = dart.privateName(store_impl, "SembastStore.lastIntKey");
  var recordMap = dart.privateName(store_impl, "SembastStore.recordMap");
  var txnRecords$ = dart.privateName(store_impl, "SembastStore.txnRecords");
  var _hasTransactionRecords = dart.privateName(store_impl, "_hasTransactionRecords");
  store_impl.SembastStore = class SembastStore extends core.Object {
    get database() {
      return this[database$1];
    }
    set database(value) {
      super.database = value;
    }
    get ref() {
      return this[ref];
    }
    set ref(value) {
      super.ref = value;
    }
    get lastIntKey() {
      return this[lastIntKey];
    }
    set lastIntKey(value) {
      this[lastIntKey] = value;
    }
    get recordMap() {
      return this[recordMap];
    }
    set recordMap(value) {
      this[recordMap] = value;
    }
    get txnRecords() {
      return this[txnRecords$];
    }
    set txnRecords(value) {
      this[txnRecords$] = value;
    }
    get name() {
      return this.ref.name;
    }
    checkTransaction(transaction) {
      return this.database.checkTransaction(transaction);
    }
    get currentTransaction() {
      return this.database.currentTransaction;
    }
    transaction(T, action) {
      if (action == null) dart.nullFailed(I[36], 54, 58, "action");
      return this.database.transaction(T, action);
    }
    txnPut(txn, value, key, opts) {
      if (txn == null) dart.nullFailed(I[36], 60, 45, "txn");
      let merge = opts && 'merge' in opts ? opts.merge : null;
      return async.async(T$.ObjectN(), (function* txnPut() {
        yield this.cooperate();
        return this.txnPutSync(txn, value, key, {merge: merge});
      }).bind(this));
    }
    txnGenerateUniqueIntKey(txn) {
      return async.async(core.int, (function* txnGenerateUniqueIntKey() {
        let key = null;
        do {
          key = (yield this.database.generateUniqueIntKey(this.name));
          key == null ? key = this.lastIntKey = dart.notNull(this.lastIntKey) + 1 : null;
        } while (dart.test(yield this.txnRecordExists(txn, key)));
        return key;
      }).bind(this));
    }
    txnGenerateUniqueStringKey(txn) {
      return async.async(core.String, (function* txnGenerateUniqueStringKey() {
        let key = null;
        do {
          key = (yield this.database.generateUniqueStringKey(this.name));
          key == null ? key = key_utils.generateStringKey() : null;
        } while (dart.test(yield this.txnRecordExists(txn, key)));
        return key;
      }).bind(this));
    }
    txnAdd(K, V, txn, value, key = null) {
      if (txn == null) dart.nullFailed(I[36], 91, 46, "txn");
      return async.async(dart.nullable(K), (function* txnAdd() {
        yield this.cooperate();
        if (key == null) {
          if (dart.wrapType(K)._equals(dart.wrapType(core.String))) {
            key = K.as(yield this.txnGenerateUniqueStringKey(txn));
          } else {
            let intKey = (yield this.txnGenerateUniqueIntKey(txn));
            try {
              key = K.as(intKey);
            } catch (e$) {
              let e = dart.getThrown(e$);
              if (core.Object.is(e)) {
                dart.throw(new core.ArgumentError.new("Invalid key type " + dart.str(dart.wrapType(K)) + " for generating a key. You should either use String or int or generate the key yourself."));
              } else
                throw e$;
            }
          }
        } else if (dart.test(yield this.txnRecordExists(txn, key))) {
          return null;
        }
        yield this.txnPutSync(txn, value, key);
        return key;
      }).bind(this));
    }
    txnPutSync(txn, value, key, opts) {
      if (txn == null) dart.nullFailed(I[36], 118, 49, "txn");
      let merge = opts && 'merge' in opts ? opts.merge : null;
      return async.async(T$.ObjectN(), (function* txnPutSync() {
        let t80;
        let record = null;
        if (merge === true) {
          record = this.txnGetRecordSync(txn, key);
          value = utils.mergeValue((t80 = record, t80 == null ? null : t80.value), value, {allowDotsInKeys: true});
        } else {
          value = utils.cloneValue(value);
        }
        record = new record_impl.ImmutableSembastRecord.new(this.ref.record(key), value);
        record = this.txnPutRecordSync(txn, record);
        if (dart.test(this.database.logV)) {
          core.print(dart.str(txn) + " put " + dart.str(record));
        }
        return record.value;
      }).bind(this));
    }
    txnPutAll(txn, values, keys, opts) {
      if (txn == null) dart.nullFailed(I[36], 141, 45, "txn");
      if (values == null) dart.nullFailed(I[36], 141, 55, "values");
      if (keys == null) dart.nullFailed(I[36], 141, 68, "keys");
      let merge = opts && 'merge' in opts ? opts.merge : null;
      return async.async(core.List, (function* txnPutAll() {
        let resultValues = [];
        for (let i = 0; i < dart.notNull(values[$length]); i = i + 1) {
          resultValues[$add](yield this.txnPut(txn, values[$_get](i), keys[$_get](i), {merge: merge}));
        }
        return resultValues;
      }).bind(this));
    }
    txnAddAll(K, V, txn, values, keys) {
      if (txn == null) dart.nullFailed(I[36], 152, 26, "txn");
      if (values == null) dart.nullFailed(I[36], 152, 39, "values");
      if (keys == null) dart.nullFailed(I[36], 152, 55, "keys");
      return async.async(core.List$(dart.nullable(K)), (function* txnAddAll() {
        let resultKeys = _interceptors.JSArray$(dart.nullable(K)).of([]);
        for (let i = 0; i < dart.notNull(values[$length]); i = i + 1) {
          resultKeys[$add](yield this.txnAdd(K, V, txn, values[$_get](i), keys[$_get](i)));
        }
        return resultKeys;
      }).bind(this));
    }
    txnUpdate(txn, value, key) {
      if (txn == null) dart.nullFailed(I[36], 164, 26, "txn");
      return async.async(T$.ObjectN(), (function* txnUpdate() {
        yield this.cooperate();
        let existingRecord = this.txnGetRecordSync(txn, key);
        if (existingRecord == null) {
          return null;
        }
        let mergedValue = utils.mergeValue(existingRecord.value, value);
        let record = new record_impl.ImmutableSembastRecord.new(this.ref.record(key), mergedValue);
        this.txnPutRecordSync(txn, record);
        if (dart.test(this.database.logV)) {
          core.print(dart.str(txn) + " update " + dart.str(record));
        }
        return record.value;
      }).bind(this));
    }
    txnGetStream(K, V, transaction, filter) {
      let ctlr = null;
      let ctlr$35isSet = false;
      function ctlr$35get() {
        return ctlr$35isSet ? ctlr : dart.throw(new _internal.LateError.localNI("ctlr"));
      }
      dart.fn(ctlr$35get, dart.fnType(async.StreamController$(record_snapshot.RecordSnapshot$(K, V)), []));
      function ctlr$35set(t83) {
        if (t83 == null) dart.nullFailed(I[36], 187, 49, "null");
        ctlr$35isSet = true;
        return ctlr = t83;
      }
      dart.fn(ctlr$35set, dart.fnType(dart.dynamic, [async.StreamController$(record_snapshot.RecordSnapshot$(K, V))]));
      ctlr$35set(async.StreamController$(record_snapshot.RecordSnapshot$(K, V)).new({onListen: dart.fn(() => {
          this.forEachRecords(transaction, finder.Finder.new({filter: filter}), dart.fn(record => {
            if (record == null) dart.nullFailed(I[36], 189, 60, "record");
            if (dart.test(ctlr$35get().isClosed)) {
              return false;
            }
            ctlr$35get().add(record.cast(K, V));
            return true;
          }, T$.ImmutableSembastRecordTobool())).whenComplete(dart.fn(() => {
            ctlr$35get().close();
          }, T$.VoidToNull()));
        }, T$.VoidTovoid())}));
      return ctlr$35get().stream;
    }
    get currentRecords() {
      return this.recordMap[$values][$toList]({growable: false});
    }
    get txnCurrentRecords() {
      let t85;
      t85 = this.txnRecords;
      return t85 == null ? null : t85[$values][$map](record_impl.ImmutableSembastRecord, dart.fn(txnRecord => {
        if (txnRecord == null) dart.nullFailed(I[36], 212, 13, "txnRecord");
        return txnRecord.record;
      }, T$.TxnRecordToImmutableSembastRecord()))[$toList]({growable: false});
    }
    get currentTxnRecords() {
      return this.txnRecords == null ? null : T$.ListOfTxnRecord().from(dart.nullCheck(this.txnRecords)[$values], {growable: false});
    }
    forEachRecords(txn, finder, action) {
      if (action == null) dart.nullFailed(I[36], 224, 52, "action");
      return async.async(dart.dynamic, (function* forEachRecords() {
        function _finderMatchesRecord(finder, record) {
          if (record == null) dart.nullFailed(I[36], 225, 70, "record");
          if (dart.test(record.deleted)) {
            return false;
          }
          let sembastFinder = T$.SembastFinderN().as(finder);
          return finder_impl.finderMatchesFilterAndBoundaries(sembastFinder, record);
        }
        dart.fn(_finderMatchesRecord, T$.FinderNAndImmutableSembastRecordTobool());
        if (dart.test(this[_hasTransactionRecords](txn))) {
          let records = dart.nullCheck(this.txnCurrentRecords);
          for (let record of records) {
            if (dart.test(this.needCooperate)) {
              yield this.cooperate();
            }
            if (dart.test(_finderMatchesRecord(finder, record))) {
              if (action(record) === false) {
                return;
              }
            }
          }
        }
        let records = this.currentRecords;
        for (let record of records) {
          if (dart.test(this.needCooperate)) {
            yield this.cooperate();
          }
          if (dart.test(this[_hasTransactionRecords](txn))) {
            if (dart.test(dart.nullCheck(this.txnRecords)[$keys][$contains](record.key))) {
              continue;
            }
          }
          if (dart.test(_finderMatchesRecord(finder, record))) {
            if (action(record) === false) {
              return;
            }
          }
        }
      }).bind(this));
    }
    txnFindKey(txn, finder) {
      return async.async(dart.dynamic, (function* txnFindKey() {
        let t85;
        t85 = (yield this.txnFindRecord(txn, finder));
        return t85 == null ? null : t85.key;
      }).bind(this));
    }
    txnFindRecord(txn, finder) {
      return async.async(T$.ImmutableSembastRecordN(), (function* txnFindRecord() {
        finder = finder_impl.cloneFinderFindFirst(finder);
        let records = (yield this.txnFindRecords(txn, finder));
        if (dart.test(records[$isNotEmpty])) {
          return records[$first];
        }
        return null;
      }).bind(this));
    }
    txnFindRecords(txn, finder) {
      return async.async(T$.ListOfImmutableSembastRecord(), (function* txnFindRecords() {
        let t91, t90, t90$;
        let results = null;
        let preOrderedResults = null;
        let preOrderedResults$35isSet = false;
        function preOrderedResults$35get() {
          return preOrderedResults$35isSet ? preOrderedResults : dart.throw(new _internal.LateError.localNI("preOrderedResults"));
        }
        dart.fn(preOrderedResults$35get, T$.VoidToSplayTreeMapOfObjectN$ImmutableSembastRecord());
        function preOrderedResults$35set(t88) {
          if (t88 == null) dart.nullFailed(I[36], 291, 56, "null");
          preOrderedResults$35isSet = true;
          return preOrderedResults = t88;
        }
        dart.fn(preOrderedResults$35set, T$.SplayTreeMapOfObjectN$ImmutableSembastRecordTodynamic());
        let sembastFinder = T$.SembastFinderN().as(finder);
        let hasSortOrder = (t90$ = (t90 = sembastFinder, t90 == null ? null : (t91 = t90.sortOrders, t91 == null ? null : t91[$isNotEmpty])), t90$ == null ? false : t90$);
        let usePreordered = !dart.test(hasSortOrder);
        let preorderedCurrentOffset = 0;
        if (usePreordered) {
          preOrderedResults$35set(new (T$.SplayTreeMapOfObjectN$ImmutableSembastRecord()).new(C[3] || CT.C3));
        } else {
          results = T$.JSArrayOfImmutableSembastRecord().of([]);
        }
        function addRecord(record) {
          let t90, t90$, t90$0;
          if (record == null) dart.nullFailed(I[36], 308, 43, "record");
          if (usePreordered) {
            if ((t90 = sembastFinder, t90 == null ? null : t90.offset) != null) {
              if ((t90$ = preorderedCurrentOffset, preorderedCurrentOffset = t90$ + 1, t90$) < dart.nullCheck(dart.nullCheck(sembastFinder).offset)) {
                return true;
              }
            }
            if ((t90$0 = sembastFinder, t90$0 == null ? null : t90$0.limit) != null) {
              if (dart.notNull(preOrderedResults$35get().length) >= dart.nullCheck(dart.nullCheck(sembastFinder).limit) - 1) {
                preOrderedResults$35get()._set(record.key, record);
                return false;
              }
            }
            preOrderedResults$35get()._set(record.key, record);
          } else {
            dart.nullCheck(results)[$add](record);
          }
          return true;
        }
        dart.fn(addRecord, T$.ImmutableSembastRecordTobool());
        yield this.forEachRecords(txn, sembastFinder, addRecord);
        if (usePreordered) {
          results = preOrderedResults$35get().values[$toList]({growable: false});
        }
        if (finder != null) {
          if (dart.test(hasSortOrder)) {
            if (dart.test(this.cooperateOn)) {
              let sort = new sort$.Sort.new(dart.nullCheck(this.database.cooperator));
              yield sort.sort(record_impl.ImmutableSembastRecord, dart.nullCheck(results), dart.fn((record1, record2) => {
                if (record1 == null) dart.nullFailed(I[36], 343, 30, "record1");
                if (record2 == null) dart.nullFailed(I[36], 343, 53, "record2");
                return dart.nullCheck(sembastFinder).compareThenKey(record1, record2);
              }, T$.SembastRecordAndSembastRecordToint()));
            } else {
              dart.nullCheck(results)[$sort](dart.fn((record1, record2) => {
                if (record1 == null) dart.nullFailed(I[36], 346, 26, "record1");
                if (record2 == null) dart.nullFailed(I[36], 346, 35, "record2");
                return dart.nullCheck(sembastFinder).compareThenKey(record1, record2);
              }, T$.ImmutableSembastRecordAndImmutableSembastRecordToint()));
            }
            results = finder_impl.recordsLimit(results, sembastFinder);
          }
        } else {
        }
        return dart.nullCheck(results);
      }).bind(this));
    }
    txnFindKeys(txn, finder) {
      return async.async(core.List, (function* txnFindKeys() {
        let records = (yield this.txnFindRecords(txn, finder));
        return records[$map](T$.ObjectN(), dart.fn(record => {
          if (record == null) dart.nullFailed(I[36], 362, 39, "record");
          return record.key;
        }, T$.SembastRecordToObjectN()))[$toList]();
      }).bind(this));
    }
    setRecordInMemory(record) {
      if (record == null) dart.nullFailed(I[36], 368, 49, "record");
      let exists = this.recordMap[$_get](record.key) != null;
      if (dart.test(record.deleted)) {
        this.recordMap[$remove](record.key);
      } else {
        this.recordMap[$_set](core.Object.as(record.key), record);
      }
      return exists;
    }
    loadRecord(record) {
      if (record == null) dart.nullFailed(I[36], 380, 42, "record");
      let key = record.key;
      this.setRecordInMemory(record);
      if (core.int.is(key)) {
        if (dart.notNull(key) > dart.notNull(this.lastIntKey)) {
          this.lastIntKey = key;
        }
      }
    }
    txnPutRecord(txn, record) {
      if (txn == null) dart.nullFailed(I[36], 393, 26, "txn");
      if (record == null) dart.nullFailed(I[36], 393, 54, "record");
      return async.async(record_impl.ImmutableSembastRecord, (function* txnPutRecord() {
        yield this.cooperate();
        return this.txnPutRecordSync(txn, record);
      }).bind(this));
    }
    txnPutRecordSync(txn, record) {
      if (txn == null) dart.nullFailed(I[36], 400, 26, "txn");
      if (record == null) dart.nullFailed(I[36], 400, 54, "record");
      let sembastRecord = null;
      if (this.database.storageJdb != null) {
        sembastRecord = record_impl.makeImmutableRecordJdb(record);
      } else {
        sembastRecord = record;
      }
      if (sembastRecord.key == null) {
        sembastRecord.ref = this.ref.record(this.lastIntKey = dart.notNull(this.lastIntKey) + 1);
      } else {
        let recordKey = sembastRecord.key;
        if (core.int.is(recordKey)) {
          let intKey = recordKey;
          if (dart.notNull(intKey) > dart.notNull(this.lastIntKey)) {
            this.lastIntKey = intKey;
          }
        }
      }
      this.checkTransaction(txn);
      this.txnRecords == null ? this.txnRecords = new (T$.LinkedMapOfObject$TxnRecord()).new() : null;
      dart.nullCheck(this.txnRecords)[$_set](core.Object.as(sembastRecord.key), new record_impl.TxnRecord.new(sembastRecord));
      this.database.txnUndeleteStore(txn, sembastRecord.ref.store.name);
      return sembastRecord;
    }
    txnGetImmutableRecordSync(txn, key) {
      let t90;
      let record = null;
      this.checkTransaction(txn);
      if (dart.test(this[_hasTransactionRecords](txn))) {
        record = (t90 = dart.nullCheck(this.txnRecords)[$_get](key), t90 == null ? null : t90.record);
      }
      record == null ? record = this.recordMap[$_get](key) : null;
      if (dart.test(this.database.logV)) {
        core.print(dart.str(this.database.currentTransaction) + " get " + dart.str(record) + " key " + dart.str(key));
      }
      return record;
    }
    txnGetRecord(txn, key) {
      return async.async(T$.ImmutableSembastRecordN(), (function* txnGetRecord() {
        let record = this.txnGetRecordSync(txn, key);
        if (dart.test(this.needCooperate)) {
          yield this.cooperate();
        }
        return record;
      }).bind(this));
    }
    txnRecordExists(txn, key) {
      return async.async(core.bool, (function* txnRecordExists() {
        let t90;
        let record = this.txnGetImmutableRecordSync(txn, key);
        if (dart.test(this.needCooperate)) {
          yield this.cooperate();
        }
        return (t90 = record, t90 == null ? null : t90.deleted) === false;
      }).bind(this));
    }
    txnGetRecordSync(txn, key) {
      let record = this.txnGetImmutableRecordSync(txn, key);
      if (record == null || dart.test(record.deleted)) {
        return null;
      }
      return record;
    }
    txnGetRecordsCompat(txn, keys) {
      if (keys == null) dart.nullFailed(I[36], 489, 41, "keys");
      return async.async(T$.ListOfImmutableSembastRecordN(), (function* txnGetRecordsCompat() {
        let records = T$.JSArrayOfImmutableSembastRecordN().of([]);
        for (let key of keys) {
          let record = this.txnGetImmutableRecordSync(txn, key);
          if (record != null) {
            if (!dart.test(record.deleted)) {
              records[$add](record);
            } else {
              records[$add](null);
            }
          } else {
            records[$add](null);
          }
          if (dart.test(this.needCooperate)) {
            yield this.cooperate();
          }
        }
        return records;
      }).bind(this));
    }
    txnGetRecordSnapshots(K, V, txn, refs) {
      if (refs == null) dart.nullFailed(I[36], 512, 49, "refs");
      return async.async(core.List$(dart.nullable(record_snapshot.RecordSnapshot$(K, V))), (function* txnGetRecordSnapshots() {
        let snapshots = _interceptors.JSArray$(dart.nullable(record_snapshot.RecordSnapshot$(K, V))).of([]);
        for (let key of refs.keys) {
          let immutable = this.txnGetImmutableRecordSync(txn, key);
          if (immutable != null && !dart.test(immutable.deleted)) {
            snapshots[$add](new (record_snapshot_impl.SembastRecordSnapshot$(K, V)).fromRecord(immutable));
          } else {
            snapshots[$add](null);
          }
          if (dart.test(this.needCooperate)) {
            yield this.cooperate();
          }
        }
        return snapshots;
      }).bind(this));
    }
    txnCount(txn, filter) {
      return async.async(core.int, (function* txnCount() {
        let count = 0;
        if (filter == null) {
          count = count + dart.notNull(this.recordMap[$length]);
          if (dart.test(this[_hasTransactionRecords](txn))) {
            dart.nullCheck(this.txnRecords)[$forEach](dart.fn((key, value) => {
              if (key == null) dart.nullFailed(I[36], 539, 30, "key");
              if (value == null) dart.nullFailed(I[36], 539, 35, "value");
              let deleted = value.deleted;
              if (dart.test(this.recordMap[$containsKey](key))) {
                if (dart.test(deleted)) {
                  count = count - 1;
                }
              } else {
                if (!dart.test(deleted)) {
                  count = count + 1;
                }
              }
            }, T$.ObjectAndTxnRecordTovoid()));
          }
        } else {
          yield this.forEachRecords(txn, finder.Finder.new({filter: filter}), dart.fn(record => {
            if (record == null) dart.nullFailed(I[36], 554, 58, "record");
            count = count + 1;
            return true;
          }, T$.ImmutableSembastRecordTobool()));
        }
        return count;
      }).bind(this));
    }
    txnDelete(txn, key) {
      if (txn == null) dart.nullFailed(I[36], 563, 48, "txn");
      return async.async(T$.ObjectN(), (function* txnDelete() {
        let record = this.txnGetImmutableRecordSync(txn, key);
        yield this.cooperate();
        if (record == null) {
          return null;
        } else {
          let clone = record.sembastCloneAsDeleted();
          yield this.txnPutRecord(txn, clone);
          return record.key;
        }
      }).bind(this));
    }
    txnDeleteAll(txn, keys) {
      if (txn == null) dart.nullFailed(I[36], 578, 48, "txn");
      if (keys == null) dart.nullFailed(I[36], 578, 62, "keys");
      return async.async(core.List, (function* txnDeleteAll() {
        let updates = T$.JSArrayOfImmutableSembastRecord().of([]);
        let deletedKeys = [];
        keys = core.List.from(keys, {growable: false});
        for (let key of keys) {
          yield this.cooperate();
          let record = this.txnGetImmutableRecordSync(txn, key);
          if (record != null && !dart.test(record.deleted)) {
            let clone = record.sembastCloneAsDeleted();
            updates[$add](clone);
            deletedKeys[$add](key);
          } else {
            deletedKeys[$add](null);
          }
        }
        if (dart.test(updates[$isNotEmpty])) {
          yield this.database.txnPutRecords(txn, updates);
        }
        return deletedKeys;
      }).bind(this));
    }
    txnUpdateAll(txn, values, keys) {
      if (txn == null) dart.nullFailed(I[36], 606, 26, "txn");
      if (values == null) dart.nullFailed(I[36], 606, 36, "values");
      if (keys == null) dart.nullFailed(I[36], 606, 49, "keys");
      return async.async(core.List, (function* txnUpdateAll() {
        let resultValues = [];
        for (let i = 0; i < dart.notNull(values[$length]); i = i + 1) {
          resultValues[$add](yield this.txnUpdate(txn, values[$_get](i), keys[$_get](i)));
        }
        return resultValues;
      }).bind(this));
    }
    [_hasTransactionRecords](txn) {
      return txn != null && dart.equals(txn, this.currentTransaction) && this.txnRecords != null;
    }
    txnContainsKey(txn, key) {
      if (dart.test(this.recordMap[$containsKey](key))) {
        return true;
      } else if (dart.test(this[_hasTransactionRecords](txn))) {
        return dart.nullCheck(this.txnRecords)[$containsKey](key);
      } else {
        return false;
      }
    }
    rollback() {
      this.txnRecords = null;
    }
    toJson() {
      let map = new (T$.IdentityMapOfString$ObjectN()).new();
      map[$_set]("name", this.name);
      map[$_set]("count", this.recordMap[$length]);
      return map;
    }
    toString() {
      return dart.str(this.name);
    }
    txnClear(txn, opts) {
      if (txn == null) dart.nullFailed(I[36], 653, 44, "txn");
      let finder = opts && 'finder' in opts ? opts.finder : null;
      return async.async(core.List, (function* txnClear() {
        if (finder == null) {
          let deletedKeys = [];
          if (dart.test(this[_hasTransactionRecords](txn))) {
            deletedKeys[$addAll](yield this.txnDeleteAll(txn, core.List.from(dart.nullCheck(this.txnRecords)[$keys], {growable: false})));
          }
          let keys = this.recordMap[$keys];
          deletedKeys[$addAll](yield this.txnDeleteAll(txn, core.List.from(keys, {growable: false})));
          return deletedKeys;
        } else {
          let keys = (yield this.txnFindKeys(txn, finder));
          return yield this.txnDeleteAll(txn, core.List.from(keys, {growable: false}));
        }
      }).bind(this));
    }
    txnUpdateWhere(txn, value, opts) {
      if (txn == null) dart.nullFailed(I[36], 671, 50, "txn");
      let finder = opts && 'finder' in opts ? opts.finder : null;
      return async.async(core.List, (function* txnUpdateWhere() {
        let keys = (yield this.txnFindKeys(txn, finder));
        for (let key of keys) {
          yield this.txnPut(txn, value, key, {merge: true});
        }
        return keys;
      }).bind(this));
    }
    get needCooperate() {
      return this.database.needCooperate;
    }
    get cooperateOn() {
      return this.database.cooperateOn;
    }
    cooperate() {
      return this.database.cooperate();
    }
  };
  (store_impl.SembastStore.new = function(database, name) {
    if (database == null) dart.nullFailed(I[36], 46, 21, "database");
    if (name == null) dart.nullFailed(I[36], 46, 38, "name");
    this[lastIntKey] = 0;
    this[recordMap] = new (T$.SplayTreeMapOfObject$ImmutableSembastRecord()).new(C[3] || CT.C3);
    this[txnRecords$] = null;
    this[database$1] = database;
    this[ref] = T$.StoreRefOfObjectN$ObjectN().new(name);
    ;
  }).prototype = store_impl.SembastStore.prototype;
  dart.addTypeTests(store_impl.SembastStore);
  dart.addTypeCaches(store_impl.SembastStore);
  dart.setMethodSignature(store_impl.SembastStore, () => ({
    __proto__: dart.getMethods(store_impl.SembastStore.__proto__),
    checkTransaction: dart.fnType(dart.void, [dart.nullable(transaction_impl.SembastTransaction)]),
    transaction: dart.gFnType(T => [async.Future$(T), [dart.fnType(async.FutureOr$(T), [dart.nullable(transaction.Transaction)])]], T => [dart.nullable(core.Object)]),
    txnPut: dart.fnType(async.Future$(dart.nullable(core.Object)), [transaction_impl.SembastTransaction, dart.dynamic, dart.dynamic], {merge: dart.nullable(core.bool)}, {}),
    txnGenerateUniqueIntKey: dart.fnType(async.Future$(core.int), [dart.nullable(transaction_impl.SembastTransaction)]),
    txnGenerateUniqueStringKey: dart.fnType(async.Future$(core.String), [dart.nullable(transaction_impl.SembastTransaction)]),
    txnAdd: dart.gFnType((K, V) => [async.Future$(dart.nullable(K)), [transaction_impl.SembastTransaction, dart.dynamic], [dart.nullable(K)]], (K, V) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    txnPutSync: dart.fnType(async.Future$(dart.nullable(core.Object)), [transaction_impl.SembastTransaction, dart.dynamic, dart.dynamic], {merge: dart.nullable(core.bool)}, {}),
    txnPutAll: dart.fnType(async.Future$(core.List), [transaction_impl.SembastTransaction, core.List, core.List], {merge: dart.nullable(core.bool)}, {}),
    txnAddAll: dart.gFnType((K, V) => [async.Future$(core.List$(dart.nullable(K))), [transaction_impl.SembastTransaction, core.List$(V), core.List$(K)]], (K, V) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    txnUpdate: dart.fnType(async.Future$(dart.nullable(core.Object)), [transaction_impl.SembastTransaction, dart.dynamic, dart.dynamic]),
    txnGetStream: dart.gFnType((K, V) => [async.Stream$(record_snapshot.RecordSnapshot$(K, V)), [dart.nullable(transaction_impl.SembastTransaction), dart.nullable(filter.Filter)]], (K, V) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    forEachRecords: dart.fnType(async.Future, [dart.nullable(transaction_impl.SembastTransaction), dart.nullable(finder.Finder), dart.fnType(core.bool, [record_impl.ImmutableSembastRecord])]),
    txnFindKey: dart.fnType(async.Future, [dart.nullable(transaction_impl.SembastTransaction), dart.nullable(finder.Finder)]),
    txnFindRecord: dart.fnType(async.Future$(dart.nullable(record_impl.ImmutableSembastRecord)), [dart.nullable(transaction_impl.SembastTransaction), dart.nullable(finder.Finder)]),
    txnFindRecords: dart.fnType(async.Future$(core.List$(record_impl.ImmutableSembastRecord)), [dart.nullable(transaction_impl.SembastTransaction), dart.nullable(finder.Finder)]),
    txnFindKeys: dart.fnType(async.Future$(core.List), [dart.nullable(transaction_impl.SembastTransaction), dart.nullable(finder.Finder)]),
    setRecordInMemory: dart.fnType(core.bool, [record_impl.ImmutableSembastRecord]),
    loadRecord: dart.fnType(dart.void, [record_impl.ImmutableSembastRecord]),
    txnPutRecord: dart.fnType(async.Future$(record_impl.ImmutableSembastRecord), [transaction_impl.SembastTransaction, record_impl.ImmutableSembastRecord]),
    txnPutRecordSync: dart.fnType(record_impl.ImmutableSembastRecord, [transaction_impl.SembastTransaction, record_impl.ImmutableSembastRecord]),
    txnGetImmutableRecordSync: dart.fnType(dart.nullable(record_impl.ImmutableSembastRecord), [dart.nullable(transaction_impl.SembastTransaction), dart.dynamic]),
    txnGetRecord: dart.fnType(async.Future$(dart.nullable(record_impl.ImmutableSembastRecord)), [dart.nullable(transaction_impl.SembastTransaction), dart.dynamic]),
    txnRecordExists: dart.fnType(async.Future$(core.bool), [dart.nullable(transaction_impl.SembastTransaction), dart.dynamic]),
    txnGetRecordSync: dart.fnType(dart.nullable(record_impl.ImmutableSembastRecord), [dart.nullable(transaction_impl.SembastTransaction), dart.dynamic]),
    txnGetRecordsCompat: dart.fnType(async.Future$(core.List$(dart.nullable(record_impl.ImmutableSembastRecord))), [dart.nullable(transaction_impl.SembastTransaction), core.Iterable]),
    txnGetRecordSnapshots: dart.gFnType((K, V) => [async.Future$(core.List$(dart.nullable(record_snapshot.RecordSnapshot$(K, V)))), [dart.nullable(transaction_impl.SembastTransaction), records_ref.RecordsRef$(K, V)]], (K, V) => [dart.nullable(core.Object), dart.nullable(core.Object)]),
    txnCount: dart.fnType(async.Future$(core.int), [dart.nullable(transaction_impl.SembastTransaction), dart.nullable(filter.Filter)]),
    txnDelete: dart.fnType(async.Future$(dart.nullable(core.Object)), [transaction_impl.SembastTransaction, dart.dynamic]),
    txnDeleteAll: dart.fnType(async.Future$(core.List), [transaction_impl.SembastTransaction, core.Iterable]),
    txnUpdateAll: dart.fnType(async.Future$(core.List), [transaction_impl.SembastTransaction, core.List, core.List]),
    [_hasTransactionRecords]: dart.fnType(core.bool, [dart.nullable(transaction_impl.SembastTransaction)]),
    txnContainsKey: dart.fnType(core.bool, [dart.nullable(transaction_impl.SembastTransaction), dart.dynamic]),
    rollback: dart.fnType(dart.void, []),
    toJson: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), []),
    txnClear: dart.fnType(async.Future$(core.List), [transaction_impl.SembastTransaction], {finder: dart.nullable(finder.Finder)}, {}),
    txnUpdateWhere: dart.fnType(async.Future$(core.List), [transaction_impl.SembastTransaction, dart.dynamic], {finder: dart.nullable(finder.Finder)}, {}),
    cooperate: dart.fnType(dart.dynamic, [])
  }));
  dart.setGetterSignature(store_impl.SembastStore, () => ({
    __proto__: dart.getGetters(store_impl.SembastStore.__proto__),
    name: core.String,
    currentTransaction: dart.nullable(transaction_impl.SembastTransaction),
    currentRecords: core.List$(record_impl.ImmutableSembastRecord),
    txnCurrentRecords: dart.nullable(core.List$(record_impl.ImmutableSembastRecord)),
    currentTxnRecords: dart.nullable(core.List$(record_impl.TxnRecord)),
    needCooperate: core.bool,
    cooperateOn: core.bool
  }));
  dart.setLibraryUri(store_impl.SembastStore, I[37]);
  dart.setFieldSignature(store_impl.SembastStore, () => ({
    __proto__: dart.getFields(store_impl.SembastStore.__proto__),
    database: dart.finalFieldType(database_impl.SembastDatabase),
    ref: dart.finalFieldType(store_ref.StoreRef$(dart.nullable(core.Object), dart.nullable(core.Object))),
    lastIntKey: dart.fieldType(core.int),
    recordMap: dart.fieldType(core.Map$(core.Object, record_impl.ImmutableSembastRecord)),
    txnRecords: dart.fieldType(dart.nullable(core.Map$(core.Object, record_impl.TxnRecord)))
  }));
  dart.defineExtensionMethods(store_impl.SembastStore, ['toString']);
  store_impl.finderRecordMatchBoundaries = function finderRecordMatchBoundaries(finder, result) {
    if (finder == null) dart.nullFailed(I[36], 694, 48, "finder");
    if (result == null) dart.nullFailed(I[36], 694, 71, "result");
    if (finder.start != null) {
      if (!dart.test(finder.starts(result, finder.start))) {
        return false;
      }
    }
    if (finder.end != null) {
      if (!dart.test(finder.ends(result, finder.end))) {
        return false;
      }
    }
    return true;
  };
  var filter$ = dart.privateName(finder_impl, "SembastFinder.filter");
  var offset$ = dart.privateName(finder_impl, "SembastFinder.offset");
  var limit$ = dart.privateName(finder_impl, "SembastFinder.limit");
  var start$ = dart.privateName(finder_impl, "SembastFinder.start");
  var end$ = dart.privateName(finder_impl, "SembastFinder.end");
  var sortOrders$ = dart.privateName(finder_impl, "SembastFinder.sortOrders");
  finder_impl.SembastFinder = class SembastFinder extends core.Object {
    get filter() {
      return this[filter$];
    }
    set filter(value) {
      this[filter$] = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      this[offset$] = value;
    }
    get limit() {
      return this[limit$];
    }
    set limit(value) {
      this[limit$] = value;
    }
    get start() {
      return this[start$];
    }
    set start(value) {
      this[start$] = value;
    }
    get end() {
      return this[end$];
    }
    set end(value) {
      this[end$] = value;
    }
    get sortOrders() {
      return this[sortOrders$];
    }
    set sortOrders(value) {
      this[sortOrders$] = value;
    }
    set sortOrder(sortOrder) {
      if (sortOrder == null) dart.nullFailed(I[38], 72, 27, "sortOrder");
      this.sortOrders = T$.JSArrayOfSortOrder().of([sortOrder]);
    }
    compare(record1, record2) {
      if (record1 == null) dart.nullFailed(I[38], 77, 29, "record1");
      if (record2 == null) dart.nullFailed(I[38], 77, 52, "record2");
      let result = 0;
      if (this.sortOrders != null) {
        for (let order of dart.nullCheck(this.sortOrders)) {
          result = sort_order_impl.SembastSortOrder.as(order).compare(record1, record2);
          if (result !== 0) {
            break;
          }
        }
      }
      return result;
    }
    compareThenKey(record1, record2) {
      if (record1 == null) dart.nullFailed(I[38], 92, 36, "record1");
      if (record2 == null) dart.nullFailed(I[38], 92, 59, "record2");
      let result = this.compare(record1, record2);
      if (result === 0) {
        return utils.compareKey(record1.key, record2.key);
      }
      return result;
    }
    compareToBoundary(record, boundary) {
      let t90;
      if (record == null) dart.nullFailed(I[38], 103, 40, "record");
      let result = 0;
      if (this.sortOrders != null) {
        for (let i = 0; i < dart.notNull(dart.nullCheck(this.sortOrders)[$length]); i = i + 1) {
          let order = dart.nullCheck(this.sortOrders)[$_get](i);
          result = sort_order_impl.SembastSortOrder.as(order).compareToBoundary(record, dart.nullCheck(boundary), i);
          if (result !== 0) {
            break;
          }
        }
      }
      if (result === 0) {
        let sembastBoundary = boundary_impl.SembastBoundary.as(boundary);
        if ((t90 = sembastBoundary.snapshot, t90 == null ? null : t90.key) != null) {
          return utils.compareKey(record.key, dart.nullCheck(sembastBoundary.snapshot).key);
        }
      }
      return result;
    }
    starts(record, boundary) {
      if (record == null) dart.nullFailed(I[38], 129, 30, "record");
      let result = this.compareToBoundary(record, boundary);
      if (result === 0 && dart.test(dart.nullCheck(boundary).include)) {
        return true;
      }
      return dart.notNull(result) > 0;
    }
    ends(record, boundary) {
      if (record == null) dart.nullFailed(I[38], 138, 28, "record");
      let result = this.compareToBoundary(record, boundary);
      if (result === 0 && dart.test(dart.nullCheck(boundary).include)) {
        return true;
      }
      return dart.notNull(result) < 0;
    }
    clone(opts) {
      let t90;
      let limit = opts && 'limit' in opts ? opts.limit : null;
      return new finder_impl.SembastFinder.new({filter: this.filter, sortOrders: this.sortOrders, limit: (t90 = limit, t90 == null ? this.limit : t90), offset: this.offset, start: this.start, end: this.end});
    }
    cloneWithoutLimits() {
      return finder.Finder.new({filter: this.filter, sortOrders: this.sortOrders, start: this.start, end: this.end});
    }
    toString() {
      return "Finder(" + dart.str((() => {
        let t90 = new (T$.IdentityMapOfString$ObjectN()).new();
        if (this.filter != null) t90[$_set]("filter", this.filter);
        if (this.sortOrders != null) t90[$_set]("sort", this.sortOrders);
        if (this.offset != null) t90[$_set]("offset", this.offset);
        if (this.limit != null) t90[$_set]("limit", this.limit);
        if (this.start != null) t90[$_set]("start", this.start);
        if (this.end != null) t90[$_set]("limit", this.end);
        return t90;
      })()) + ")";
    }
  };
  (finder_impl.SembastFinder.new = function(opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    let sortOrders = opts && 'sortOrders' in opts ? opts.sortOrders : null;
    let limit = opts && 'limit' in opts ? opts.limit : null;
    let offset = opts && 'offset' in opts ? opts.offset : null;
    let start = opts && 'start' in opts ? opts.start : null;
    let end = opts && 'end' in opts ? opts.end : null;
    this[sortOrders$] = T$.JSArrayOfSortOrder().of([]);
    this[filter$] = filter;
    this[sortOrders$] = sortOrders;
    this[limit$] = limit;
    this[offset$] = offset;
    this[start$] = start;
    this[end$] = end;
    ;
  }).prototype = finder_impl.SembastFinder.prototype;
  dart.addTypeTests(finder_impl.SembastFinder);
  dart.addTypeCaches(finder_impl.SembastFinder);
  finder_impl.SembastFinder[dart.implements] = () => [finder.Finder];
  dart.setMethodSignature(finder_impl.SembastFinder, () => ({
    __proto__: dart.getMethods(finder_impl.SembastFinder.__proto__),
    compare: dart.fnType(core.int, [record_impl.SembastRecord, record_impl.SembastRecord]),
    compareThenKey: dart.fnType(core.int, [record_impl.SembastRecord, record_impl.SembastRecord]),
    compareToBoundary: dart.fnType(core.int, [record_snapshot.RecordSnapshot, dart.nullable(boundary.Boundary)]),
    starts: dart.fnType(core.bool, [record_snapshot.RecordSnapshot, dart.nullable(boundary.Boundary)]),
    ends: dart.fnType(core.bool, [record_snapshot.RecordSnapshot, dart.nullable(boundary.Boundary)]),
    clone: dart.fnType(finder_impl.SembastFinder, [], {limit: dart.nullable(core.int)}, {}),
    cloneWithoutLimits: dart.fnType(finder.Finder, [])
  }));
  dart.setSetterSignature(finder_impl.SembastFinder, () => ({
    __proto__: dart.getSetters(finder_impl.SembastFinder.__proto__),
    sortOrder: sort_order.SortOrder
  }));
  dart.setLibraryUri(finder_impl.SembastFinder, I[39]);
  dart.setFieldSignature(finder_impl.SembastFinder, () => ({
    __proto__: dart.getFields(finder_impl.SembastFinder.__proto__),
    filter: dart.fieldType(dart.nullable(filter.Filter)),
    offset: dart.fieldType(dart.nullable(core.int)),
    limit: dart.fieldType(dart.nullable(core.int)),
    start: dart.fieldType(dart.nullable(boundary.Boundary)),
    end: dart.fieldType(dart.nullable(boundary.Boundary)),
    sortOrders: dart.fieldType(dart.nullable(core.List$(sort_order.SortOrder)))
  }));
  dart.defineExtensionMethods(finder_impl.SembastFinder, ['toString']);
  finder_impl.finderMatchesFilterAndBoundaries = function finderMatchesFilterAndBoundaries(finder, record) {
    if (record == null) dart.nullFailed(I[38], 13, 43, "record");
    if (finder == null) {
      return true;
    }
    if (!dart.test(store_impl.finderRecordMatchBoundaries(finder, record))) {
      return false;
    }
    if (!dart.test(filter_impl.filterMatchesRecord(finder.filter, record))) {
      return false;
    }
    return true;
  };
  finder_impl.recordsLimit = function recordsLimit(results, finder) {
    if (finder != null) {
      if (finder.offset != null) {
        results = dart.nullCheck(results)[$sublist](math.min(core.int, dart.nullCheck(finder.offset), results[$length]));
      }
      if (finder.limit != null) {
        results = dart.nullCheck(results)[$sublist](0, math.min(core.int, dart.nullCheck(finder.limit), results[$length]));
      }
    }
    return results;
  };
  finder_impl.cloneFinderFindFirst = function cloneFinderFindFirst(finder) {
    let sembastFinder = null;
    let sembastFinder$35isSet = false;
    function sembastFinder$35get() {
      return sembastFinder$35isSet ? sembastFinder : dart.throw(new _internal.LateError.localNI("sembastFinder"));
    }
    dart.fn(sembastFinder$35get, T$.VoidToSembastFinder());
    function sembastFinder$35set(t94) {
      if (t94 == null) dart.nullFailed(I[38], 180, 22, "null");
      sembastFinder$35isSet = true;
      return sembastFinder = t94;
    }
    dart.fn(sembastFinder$35set, T$.SembastFinderTodynamic());
    if (finder != null) {
      sembastFinder$35set(finder_impl.SembastFinder.as(finder));
      if (sembastFinder$35get().limit !== 1) {
        sembastFinder$35set(sembastFinder$35get().clone({limit: 1}));
      }
    } else {
      sembastFinder$35set(new finder_impl.SembastFinder.new({limit: 1}));
    }
    return sembastFinder$35get();
  };
  var ascending$ = dart.privateName(sort_order_impl, "SembastSortOrder.ascending");
  var field$0 = dart.privateName(sort_order_impl, "SembastSortOrder.field");
  var nullLast$ = dart.privateName(sort_order_impl, "SembastSortOrder.nullLast");
  var _toDebugMap = dart.privateName(sort_order_impl, "_toDebugMap");
  sort_order_impl.SembastSortOrder = class SembastSortOrder extends core.Object {
    get ascending() {
      return this[ascending$];
    }
    set ascending(value) {
      super.ascending = value;
    }
    get field() {
      return this[field$0];
    }
    set field(value) {
      super.field = value;
    }
    get nullLast() {
      return this[nullLast$];
    }
    set nullLast(value) {
      super.nullLast = value;
    }
    compare(record1, record2) {
      if (record1 == null) dart.nullFailed(I[40], 26, 30, "record1");
      if (record2 == null) dart.nullFailed(I[40], 26, 54, "record2");
      let result = this.compareAscending(record1, record2);
      return dart.test(this.ascending) ? result : -dart.notNull(result);
    }
    compareToBoundary(record, boundary, index) {
      if (record == null) dart.nullFailed(I[40], 32, 40, "record");
      if (boundary == null) dart.nullFailed(I[40], 32, 57, "boundary");
      if (index == null) dart.nullFailed(I[40], 32, 71, "index");
      let result = this.compareToBoundaryAscending(record, boundary, index);
      return dart.test(this.ascending) ? result : -dart.notNull(result);
    }
    compareToSnapshotAscending(record, snapshot) {
      if (record == null) dart.nullFailed(I[40], 39, 22, "record");
      if (snapshot == null) dart.nullFailed(I[40], 39, 45, "snapshot");
      let value1 = record._get(this.field);
      let value2 = snapshot._get(this.field);
      return this.compareValueAscending(value1, value2);
    }
    compareToBoundaryAscending(record, boundary, index) {
      if (record == null) dart.nullFailed(I[40], 47, 22, "record");
      if (boundary == null) dart.nullFailed(I[40], 47, 39, "boundary");
      if (index == null) dart.nullFailed(I[40], 47, 53, "index");
      let sembastBoundary = boundary_impl.SembastBoundary.as(boundary);
      if (sembastBoundary.values != null) {
        let value = dart.nullCheck(sembastBoundary.values)[$_get](index);
        return this.compareValueAscending(record._get(this.field), value);
      } else if (sembastBoundary.snapshot != null) {
        return this.compareToSnapshotAscending(record, dart.nullCheck(sembastBoundary.snapshot));
      }
      dart.throw(new core.ArgumentError.new("either record or values must be provided"));
    }
    compareAscending(record1, record2) {
      if (record1 == null) dart.nullFailed(I[40], 59, 39, "record1");
      if (record2 == null) dart.nullFailed(I[40], 59, 63, "record2");
      let value1 = record1._get(this.field);
      let value2 = record2._get(this.field);
      return this.compareValueAscending(value1, value2);
    }
    compareValueAscending(value1, value2) {
      if (value1 == null) {
        if (value2 == null) {
          return 0;
        }
        if (dart.test(this.nullLast)) {
          return 1;
        } else {
          return -1;
        }
      } else if (value2 == null) {
        if (dart.test(this.nullLast)) {
          return -1;
        } else {
          return 1;
        }
      }
      return utils.compareValue(value1, value2);
    }
    [_toDebugMap]() {
      let map = (() => {
        let t96 = new (T$.IdentityMapOfString$ObjectN()).new();
        t96[$_set](this.field, dart.test(this.ascending) ? "asc" : "desc");
        if (this.nullLast === true) t96[$_set]("nullLast", true);
        return t96;
      })();
      return map;
    }
    toString() {
      return dart.toString(this[_toDebugMap]());
    }
  };
  (sort_order_impl.SembastSortOrder.new = function(field, ascending = null, nullLast = null) {
    if (field == null) dart.nullFailed(I[40], 21, 25, "field");
    this[field$0] = field;
    this[ascending$] = ascending !== false;
    this[nullLast$] = nullLast === true;
    ;
  }).prototype = sort_order_impl.SembastSortOrder.prototype;
  dart.addTypeTests(sort_order_impl.SembastSortOrder);
  dart.addTypeCaches(sort_order_impl.SembastSortOrder);
  sort_order_impl.SembastSortOrder[dart.implements] = () => [sort_order.SortOrder];
  dart.setMethodSignature(sort_order_impl.SembastSortOrder, () => ({
    __proto__: dart.getMethods(sort_order_impl.SembastSortOrder.__proto__),
    compare: dart.fnType(core.int, [record_snapshot.RecordSnapshot, record_snapshot.RecordSnapshot]),
    compareToBoundary: dart.fnType(core.int, [record_snapshot.RecordSnapshot, boundary.Boundary, core.int]),
    compareToSnapshotAscending: dart.fnType(core.int, [record_snapshot.RecordSnapshot, record_snapshot.RecordSnapshot]),
    compareToBoundaryAscending: dart.fnType(core.int, [record_snapshot.RecordSnapshot, boundary.Boundary, core.int]),
    compareAscending: dart.fnType(core.int, [record_snapshot.RecordSnapshot, record_snapshot.RecordSnapshot]),
    compareValueAscending: dart.fnType(core.int, [dart.dynamic, dart.dynamic]),
    [_toDebugMap]: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [])
  }));
  dart.setLibraryUri(sort_order_impl.SembastSortOrder, I[41]);
  dart.setFieldSignature(sort_order_impl.SembastSortOrder, () => ({
    __proto__: dart.getFields(sort_order_impl.SembastSortOrder.__proto__),
    ascending: dart.finalFieldType(core.bool),
    field: dart.finalFieldType(core.String),
    nullLast: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(sort_order_impl.SembastSortOrder, ['toString']);
  sort_order.SortOrder = class SortOrder extends core.Object {
    static new(field, ascending = true, nullLast = false) {
      if (field == null) dart.nullFailed(I[42], 15, 28, "field");
      if (ascending == null) dart.nullFailed(I[42], 16, 13, "ascending");
      if (nullLast == null) dart.nullFailed(I[42], 16, 36, "nullLast");
      return new sort_order_impl.SembastSortOrder.new(field, ascending, nullLast);
    }
  };
  (sort_order.SortOrder[dart.mixinNew] = function() {
  }).prototype = sort_order.SortOrder.prototype;
  dart.addTypeTests(sort_order.SortOrder);
  dart.addTypeCaches(sort_order.SortOrder);
  dart.setLibraryUri(sort_order.SortOrder, I[43]);
  var _list = dart.privateName(utils, "_list");
  const _is_ImmutableList_default = Symbol('_is_ImmutableList_default');
  utils.ImmutableList$ = dart.generic(E => {
    class ImmutableList extends collection.ListBase$(E) {
      get length() {
        return this[_list][$length];
      }
      _get(index) {
        if (index == null) dart.nullFailed(I[44], 314, 21, "index");
        return E.as(utils.immutableValue(this[_list][$_get](index)));
      }
      _set(index, value$) {
        let value = value$;
        if (index == null) dart.nullFailed(I[44], 317, 25, "index");
        E.as(value);
        dart.throw(new core.StateError.new("read only"));
        return value$;
      }
      set length(newLength) {
        if (newLength == null) dart.nullFailed(I[44], 320, 18, "newLength");
        return dart.throw(new core.StateError.new("read only"));
      }
    }
    (ImmutableList.new = function(list) {
      if (list == null) dart.nullFailed(I[44], 311, 29, "list");
      this[_list] = list[$toList]({growable: false});
      ;
    }).prototype = ImmutableList.prototype;
    dart.addTypeTests(ImmutableList);
    ImmutableList.prototype[_is_ImmutableList_default] = true;
    dart.addTypeCaches(ImmutableList);
    dart.setMethodSignature(ImmutableList, () => ({
      __proto__: dart.getMethods(ImmutableList.__proto__),
      _get: dart.fnType(E, [core.int]),
      [$_get]: dart.fnType(E, [core.int]),
      _set: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [core.int, dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(ImmutableList, () => ({
      __proto__: dart.getGetters(ImmutableList.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setSetterSignature(ImmutableList, () => ({
      __proto__: dart.getSetters(ImmutableList.__proto__),
      length: core.int,
      [$length]: core.int
    }));
    dart.setLibraryUri(ImmutableList, I[45]);
    dart.setFieldSignature(ImmutableList, () => ({
      __proto__: dart.getFields(ImmutableList.__proto__),
      [_list]: dart.finalFieldType(core.List$(E))
    }));
    dart.defineExtensionMethods(ImmutableList, ['_get', '_set']);
    dart.defineExtensionAccessors(ImmutableList, ['length']);
    return ImmutableList;
  });
  utils.ImmutableList = utils.ImmutableList$();
  dart.addTypeTests(utils.ImmutableList, _is_ImmutableList_default);
  var _map$ = dart.privateName(utils, "_map");
  const _is_ImmutableMap_default = Symbol('_is_ImmutableMap_default');
  utils.ImmutableMap$ = dart.generic((K, V) => {
    var VN = () => (VN = dart.constFn(dart.nullable(V)))();
    class ImmutableMap extends collection.MapBase$(K, V) {
      get rawMap() {
        return this[_map$];
      }
      _get(key) {
        return VN().as(utils.immutableValue(this[_map$][$_get](K.as(key))));
      }
      _set(key, value$) {
        let value = value$;
        K.as(key);
        V.as(value);
        dart.throw(new core.StateError.new("read only"));
        return value$;
      }
      clear() {
        return dart.throw(new core.StateError.new("read only"));
      }
      get keys() {
        return this[_map$][$keys];
      }
      remove(key) {
        return dart.throw(new core.StateError.new("read only"));
      }
    }
    (ImmutableMap.new = function(map) {
      if (map == null) dart.nullFailed(I[44], 331, 20, "map");
      this[_map$] = map[$cast](K, V);
      ;
    }).prototype = ImmutableMap.prototype;
    dart.addTypeTests(ImmutableMap);
    ImmutableMap.prototype[_is_ImmutableMap_default] = true;
    dart.addTypeCaches(ImmutableMap);
    dart.setMethodSignature(ImmutableMap, () => ({
      __proto__: dart.getMethods(ImmutableMap.__proto__),
      _get: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      [$_get]: dart.fnType(dart.nullable(V), [dart.nullable(core.Object)]),
      _set: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.nullable(core.Object), dart.nullable(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, []),
      remove: dart.fnType(V, [dart.nullable(core.Object)]),
      [$remove]: dart.fnType(V, [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(ImmutableMap, () => ({
      __proto__: dart.getGetters(ImmutableMap.__proto__),
      rawMap: core.Map$(K, V),
      keys: core.Iterable$(K),
      [$keys]: core.Iterable$(K)
    }));
    dart.setLibraryUri(ImmutableMap, I[45]);
    dart.setFieldSignature(ImmutableMap, () => ({
      __proto__: dart.getFields(ImmutableMap.__proto__),
      [_map$]: dart.finalFieldType(core.Map$(K, V))
    }));
    dart.defineExtensionMethods(ImmutableMap, ['_get', '_set', 'clear', 'remove']);
    dart.defineExtensionAccessors(ImmutableMap, ['keys']);
    return ImmutableMap;
  });
  utils.ImmutableMap = utils.ImmutableMap$();
  dart.addTypeTests(utils.ImmutableMap, _is_ImmutableMap_default);
  utils.checkMapKey = function checkMapKey(key) {
    if (!(typeof key == 'string')) {
      return false;
    }
    if (key[$contains](".")) {
      return false;
    }
    return true;
  };
  utils.checkValue = function checkValue(value) {
    if (value == null) {
      return true;
    } else if (typeof value == 'number' || typeof value == 'string' || typeof value == 'boolean') {
      return true;
    } else if (core.List.is(value)) {
      for (let item of value) {
        if (!dart.test(utils.checkValue(item))) {
          return false;
        }
      }
      return true;
    } else if (core.Map.is(value)) {
      for (let entry of value[$entries]) {
        if (!dart.test(utils.checkMapKey(entry.key))) {
          return false;
        }
        if (!dart.test(utils.checkValue(entry.value))) {
          return false;
        }
      }
      return true;
    } else {
      return false;
    }
  };
  utils.compareKey = function compareKey(key1, key2) {
    return utils.compareValue(key1, key2);
  };
  utils.compareRecordKey = function compareRecordKey(record1, record2) {
    if (record1 == null) dart.nullFailed(I[44], 59, 32, "record1");
    if (record2 == null) dart.nullFailed(I[44], 59, 64, "record2");
    return utils.compareKey(record1.key, record2.key);
  };
  utils.compareValue = function compareValue(value1, value2) {
    try {
      if (core.Comparable.is(value1) && core.Comparable.is(value2)) {
        return core.Comparable.compare(value1, value2);
      } else if (core.List.is(value1) && core.List.is(value2)) {
        let list1 = value1;
        let list2 = value2;
        for (let i = 0; i < math.min(core.num, value1[$length], value2[$length]); i = i + 1) {
          let cmp = utils.compareValue(list1[$_get](i), list2[$_get](i));
          if (cmp === 0) {
            continue;
          }
          return cmp;
        }
        return utils.compareValue(list1[$length], list2[$length]);
      } else if (typeof value1 == 'boolean' && typeof value2 == 'boolean') {
        return utils.compareBool(value1, value2);
      }
    } catch (e) {
      let _ = dart.getThrown(e);
      if (core.Object.is(_)) {
      } else
        throw e;
    }
    let cmp = utils.compareValueType(value1, value2);
    return cmp;
  };
  utils.compareBool = function compareBool(value1, value2) {
    if (value1 == null) dart.nullFailed(I[44], 109, 22, "value1");
    if (value2 == null) dart.nullFailed(I[44], 109, 35, "value2");
    if (dart.test(value1)) {
      if (dart.test(value2)) {
        return 0;
      }
      return 1;
    }
    return dart.test(value2) ? -1 : 0;
  };
  utils.compareValueType = function compareValueType(value1, value2) {
    if (value1 == null) {
      if (value2 == null) {
        return 0;
      } else {
        return -1;
      }
    } else if (value2 == null) {
      return 1;
    } else if (typeof value1 == 'boolean') {
      if (typeof value2 == 'boolean') {
        return 0;
      } else {
        return -1;
      }
    } else if (typeof value2 == 'boolean') {
      return 1;
    } else if (typeof value1 == 'number') {
      if (typeof value2 == 'number') {
        return 0;
      } else {
        return -1;
      }
    } else if (typeof value2 == 'number') {
      return 1;
    } else if (timestamp_impl.Timestamp.is(value1)) {
      if (timestamp_impl.Timestamp.is(value2)) {
        return 0;
      } else {
        return -1;
      }
    } else if (timestamp_impl.Timestamp.is(value2)) {
      return 1;
    } else if (typeof value1 == 'string') {
      if (typeof value2 == 'string') {
        return 0;
      } else {
        return -1;
      }
    } else if (typeof value2 == 'string') {
      return 1;
    } else if (blob_impl.Blob.is(value1)) {
      if (blob_impl.Blob.is(value2)) {
        return 0;
      } else {
        return -1;
      }
    } else if (blob_impl.Blob.is(value2)) {
      return 1;
    } else if (core.List.is(value1)) {
      if (core.List.is(value2)) {
        return 0;
      } else {
        return -1;
      }
    } else if (core.List.is(value2)) {
      return 1;
    } else if (core.Map.is(value1)) {
      if (core.List.is(value2)) {
        return 0;
      } else {
        return -1;
      }
    } else if (core.Map.is(value2)) {
      return 1;
    }
    return utils.compareValue(dart.toString(value1), dart.toString(value2));
  };
  utils._fixMap = function _fixMap(map) {
    if (map == null) dart.nullFailed(I[44], 215, 34, "map");
    let fixedMap = new (T$.IdentityMapOfString$ObjectN()).new();
    map[$forEach](dart.fn((key, value) => {
      if (!dart.equals(value, field$.FieldValue.delete)) {
        fixedMap[$_set](core.String.as(key), utils._fixValue(value));
      }
    }, T$.dynamicAnddynamicTovoid()));
    return fixedMap;
  };
  utils._fixValue = function _fixValue(value) {
    if (core.Map.is(value)) {
      return utils._fixMap(value);
    }
    return value;
  };
  utils.cloneKey = function cloneKey(K, key) {
    if (typeof key == 'string') {
      return key;
    }
    if (typeof key == 'number') {
      return key;
    }
    if (key == null) {
      return key;
    }
    dart.throw(new exception.DatabaseException.badParam("key " + dart.str(key) + " not supported " + dart.str(dart.runtimeType(key))));
  };
  utils.isValueMutable = function isValueMutable(value) {
    return core.Map.is(value) || core.Iterable.is(value);
  };
  utils.cloneValue = function cloneValue(value) {
    if (core.Map.is(value)) {
      return value[$map](core.String, T$.ObjectN(), dart.fn((key, value) => new (T$.MapEntryOfString$ObjectN()).__(core.String.as(key), utils.cloneValue(value)), T$.dynamicAnddynamicToMapEntryOfString$ObjectN()));
    }
    if (core.Iterable.is(value)) {
      return value[$map](dart.dynamic, dart.fn(value => utils.cloneValue(value), T$.dynamicTodynamic()))[$toList]();
    }
    return value;
  };
  utils.sanitizeValueIfMap = function sanitizeValueIfMap(value) {
    if (core.Map.is(value)) {
      if (!T$.MapOfString$ObjectN().is(value)) {
        return value[$cast](core.String, T$.ObjectN());
      }
    }
    return value;
  };
  utils.isBasicTypeOrNull = function isBasicTypeOrNull(value) {
    if (value == null) {
      return true;
    } else if (typeof value == 'number' || typeof value == 'string' || typeof value == 'boolean') {
      return true;
    }
    return false;
  };
  utils.isBasicTypeFieldValueOrNull = function isBasicTypeFieldValueOrNull(value) {
    if (dart.test(utils.isBasicTypeOrNull(value))) {
      return true;
    } else if (field$.FieldValue.is(value)) {
      return true;
    }
    return false;
  };
  utils.immutableValue = function immutableValue(value) {
    if (core.Map.is(value)) {
      return new (T$.ImmutableMapOfString$ObjectN()).new(value);
    } else if (core.Iterable.is(value)) {
      return new utils.ImmutableList.new(value);
    }
    return value;
  };
  utils.getPartsMapValue = function getPartsMapValue(T, map, parts) {
    if (map == null) dart.nullFailed(I[44], 350, 28, "map");
    if (parts == null) dart.nullFailed(I[44], 350, 50, "parts");
    let value = map;
    for (let part of parts) {
      if (core.Map.is(value)) {
        value = value[$_get](part);
      } else {
        return null;
      }
    }
    return dart.nullable(T).as(value);
  };
  utils.getPartsMapRawValue = function getPartsMapRawValue(T, map, parts) {
    if (map == null) dart.nullFailed(I[44], 363, 31, "map");
    if (parts == null) dart.nullFailed(I[44], 363, 53, "parts");
    if (utils.ImmutableMap.is(map)) {
      map = map.rawMap;
    }
    let value = map;
    for (let part of parts) {
      if (core.Map.is(value)) {
        value = value[$_get](part);
      } else {
        return null;
      }
    }
    return dart.nullable(T).as(value);
  };
  utils.setPartsMapValue = function setPartsMapValue(T, map, parts, value) {
    if (map == null) dart.nullFailed(I[44], 380, 30, "map");
    if (parts == null) dart.nullFailed(I[44], 380, 48, "parts");
    for (let i = 0; i < dart.notNull(parts[$length]) - 1; i = i + 1) {
      let part = parts[$_get](i);
      let sub = map[$_get](part);
      if (!core.Map.is(sub)) {
        sub = new (T$.IdentityMapOfString$ObjectN()).new();
        map[$_set](part, sub);
      }
      map = sub;
    }
    map[$_set](parts[$last], value);
  };
  utils.isBacktickEnclosed = function isBacktickEnclosed(field) {
    if (field == null) dart.nullFailed(I[44], 394, 32, "field");
    let length = field.length;
    if (length < 2) {
      return false;
    }
    return field[$codeUnitAt](0) === utils.backtickChrCode && field[$codeUnitAt](length - 1) === utils.backtickChrCode;
  };
  utils._escapeKey = function _escapeKey(field) {
    if (field == null) dart.nullFailed(I[44], 403, 26, "field");
    return "`" + dart.str(field) + "`";
  };
  utils.escapeKey = function escapeKey(field) {
    if (field == null) {
      return null;
    }
    if (dart.test(utils.isBacktickEnclosed(field))) {
      return utils._escapeKey(field);
    } else if (field[$contains](".")) {
      return utils._escapeKey(field);
    }
    return field;
  };
  utils._unescapeKey = function _unescapeKey(field) {
    if (field == null) dart.nullFailed(I[44], 418, 28, "field");
    return field[$substring](1, field.length - 1);
  };
  utils.getFieldParts = function getFieldParts(field) {
    if (field == null) dart.nullFailed(I[44], 421, 35, "field");
    if (dart.test(utils.isBacktickEnclosed(field))) {
      return T$.JSArrayOfString().of([utils._unescapeKey(field)]);
    }
    return utils.getRawFieldParts(field);
  };
  utils.getRawFieldParts = function getRawFieldParts(field) {
    if (field == null) dart.nullFailed(I[44], 429, 38, "field");
    return field[$split](".");
  };
  utils.getMapFieldValue = function getMapFieldValue(T, map, field) {
    if (map == null) dart.nullFailed(I[44], 432, 28, "map");
    if (field == null) dart.nullFailed(I[44], 432, 40, "field");
    return utils.getPartsMapValue(T, map, utils.getFieldParts(field));
  };
  utils.getMapFieldRawValue = function getMapFieldRawValue(T, map, field) {
    if (map == null) dart.nullFailed(I[44], 437, 31, "map");
    if (field == null) dart.nullFailed(I[44], 437, 43, "field");
    return utils.getPartsMapRawValue(T, map, utils.getFieldParts(field));
  };
  utils.setMapFieldValue = function setMapFieldValue(T, map, field, value) {
    if (map == null) dart.nullFailed(I[44], 442, 30, "map");
    if (field == null) dart.nullFailed(I[44], 442, 42, "field");
    utils.setPartsMapValue(T, map, utils.getFieldParts(field), value);
  };
  utils.mergeValue = function mergeValue(existingValue, newValue, opts) {
    let allowDotsInKeys = opts && 'allowDotsInKeys' in opts ? opts.allowDotsInKeys : null;
    allowDotsInKeys == null ? allowDotsInKeys = false : null;
    if (newValue == null) {
      return existingValue;
    }
    if (!core.Map.is(existingValue)) {
      return utils._fixValue(newValue);
    }
    if (!core.Map.is(newValue)) {
      return newValue;
    }
    let mergedMap = T$.MapNOfString$ObjectN().as(utils.cloneValue(existingValue));
    let currentMap = mergedMap;
    function merge(key, value) {
      let stringKey = core.String.as(key);
      let keyParts = null;
      if (dart.nullCheck(allowDotsInKeys)) {
        keyParts = T$.JSArrayOfString().of([stringKey]);
      } else {
        keyParts = utils.getFieldParts(stringKey);
      }
      if (keyParts[$length] === 1) {
        stringKey = keyParts[$_get](0);
        if (dart.equals(value, field$.FieldValue.delete)) {
          dart.nullCheck(currentMap)[$remove](stringKey);
        } else {
          dart.nullCheck(currentMap)[$_set](stringKey, value);
        }
      } else {
        if (dart.equals(value, field$.FieldValue.delete)) {
          let map = currentMap;
          for (let part of keyParts[$sublist](0, dart.notNull(keyParts[$length]) - 1)) {
            let sub = dart.nullCheck(map)[$_get](part);
            if (core.Map.is(sub)) {
              map = sub;
            } else {
              map = null;
              break;
            }
          }
          if (map != null) {
            map[$remove](keyParts[$last]);
          }
        } else {
          let map = currentMap;
          for (let part of keyParts[$sublist](0, dart.notNull(keyParts[$length]) - 1)) {
            let sub = dart.nullCheck(map)[$_get](part);
            if (core.Map.is(sub)) {
              map = sub;
            } else {
              sub = new (T$.IdentityMapOfString$ObjectN()).new();
              map[$_set](part, sub);
              map = sub;
            }
          }
          let previousMap = currentMap;
          currentMap = map;
          merge(keyParts[$last], value);
          currentMap = previousMap;
        }
      }
    }
    dart.fn(merge, T$.dynamicAnddynamicTovoid());
    newValue[$forEach](merge);
    return mergedMap;
  };
  utils.intListStreamToUint8ListStream = function intListStreamToUint8ListStream(stream) {
    if (stream == null) dart.nullFailed(I[44], 529, 57, "stream");
    if (T$.StreamOfUint8List().is(stream)) {
      return stream;
    } else if (T$.StreamOfListOfint().is(stream)) {
      return stream.transform(typed_data.Uint8List, new (T$._StreamHandlerTransformerOfListOfint$Uint8List()).new({handleData: dart.fn((list, sink) => {
          if (list == null) dart.nullFailed(I[44], 535, 26, "list");
          if (sink == null) dart.nullFailed(I[44], 535, 32, "sink");
          sink.add(_native_typed_data.NativeUint8List.fromList(list));
        }, T$.ListOfintAndEventSinkOfUint8ListTovoid())}));
    } else {
      dart.throw(new core.ArgumentError.new("Invalid stream type: " + dart.str(dart.runtimeType(stream))));
    }
  };
  dart.defineLazy(utils, {
    /*utils.backtickChrCode*/get backtickChrCode() {
      return "`"[$codeUnitAt](0);
    }
  }, false);
  var revision$2 = dart.privateName(record_snapshot_impl, "RecordSnapshotMixin.revision");
  var _$35RecordSnapshotMixin$35ref = dart.privateName(record_snapshot_impl, "RecordSnapshotMixin._#RecordSnapshotMixin#ref");
  var _$35RecordSnapshotMixin$35ref$35isSet = dart.privateName(record_snapshot_impl, "RecordSnapshotMixin._#RecordSnapshotMixin#ref#isSet");
  var _$35RecordSnapshotMixin$35rawValue = dart.privateName(record_snapshot_impl, "RecordSnapshotMixin._#RecordSnapshotMixin#rawValue");
  var _$35RecordSnapshotMixin$35rawValue$35isSet = dart.privateName(record_snapshot_impl, "RecordSnapshotMixin._#RecordSnapshotMixin#rawValue#isSet");
  var __RecordSnapshotMixin_ref = dart.privateName(record_snapshot_impl, "_#RecordSnapshotMixin#ref");
  var __RecordSnapshotMixin_ref_isSet = dart.privateName(record_snapshot_impl, "_#RecordSnapshotMixin#ref#isSet");
  var __RecordSnapshotMixin_rawValue = dart.privateName(record_snapshot_impl, "_#RecordSnapshotMixin#rawValue");
  var __RecordSnapshotMixin_rawValue_isSet = dart.privateName(record_snapshot_impl, "_#RecordSnapshotMixin#rawValue#isSet");
  const _is_RecordSnapshotMixin_default = Symbol('_is_RecordSnapshotMixin_default');
  record_snapshot_impl.RecordSnapshotMixin$ = dart.generic((K, V) => {
    var RecordRefOfK$V = () => (RecordRefOfK$V = dart.constFn(record_ref.RecordRef$(K, V)))();
    class RecordSnapshotMixin extends core.Object {}
    RecordSnapshotMixin[dart.mixinOn] = Object => {
      class RecordSnapshotMixin extends Object {
        get revision() {
          return this[revision$2];
        }
        set revision(value) {
          this[revision$2] = value;
        }
        get [__RecordSnapshotMixin_ref]() {
          return this[_$35RecordSnapshotMixin$35ref];
        }
        set [__RecordSnapshotMixin_ref](value) {
          this[_$35RecordSnapshotMixin$35ref] = value;
        }
        get [__RecordSnapshotMixin_ref_isSet]() {
          return this[_$35RecordSnapshotMixin$35ref$35isSet];
        }
        set [__RecordSnapshotMixin_ref_isSet](value) {
          this[_$35RecordSnapshotMixin$35ref$35isSet] = value;
        }
        get [__RecordSnapshotMixin_rawValue]() {
          return this[_$35RecordSnapshotMixin$35rawValue];
        }
        set [__RecordSnapshotMixin_rawValue](value) {
          this[_$35RecordSnapshotMixin$35rawValue] = value;
        }
        get [__RecordSnapshotMixin_rawValue_isSet]() {
          return this[_$35RecordSnapshotMixin$35rawValue$35isSet];
        }
        set [__RecordSnapshotMixin_rawValue_isSet](value) {
          this[_$35RecordSnapshotMixin$35rawValue$35isSet] = value;
        }
        get ref() {
          let t98;
          return dart.test(this[__RecordSnapshotMixin_ref_isSet]) ? (t98 = this[__RecordSnapshotMixin_ref], t98) : dart.throw(new _internal.LateError.fieldNI("ref"));
        }
        set ref(t98) {
          RecordRefOfK$V().as(t98);
          if (t98 == null) dart.nullFailed(I[46], 14, 24, "null");
          this[__RecordSnapshotMixin_ref_isSet] = true;
          this[__RecordSnapshotMixin_ref] = t98;
        }
        get key() {
          return this.ref.key;
        }
        get value() {
          return this.rawValue;
        }
        get rawValue() {
          let t99;
          return dart.test(this[__RecordSnapshotMixin_rawValue_isSet]) ? (t99 = this[__RecordSnapshotMixin_rawValue], t99) : dart.throw(new _internal.LateError.fieldNI("rawValue"));
        }
        set rawValue(t99) {
          V.as(t99);
          this[__RecordSnapshotMixin_rawValue_isSet] = true;
          this[__RecordSnapshotMixin_rawValue] = t99;
        }
        toString() {
          return dart.str(this.ref) + " " + dart.str(this.rawValue);
        }
        _get(field) {
          if (field == null) dart.nullFailed(I[46], 33, 30, "field");
          return this.getValue(field);
        }
        getValue(field) {
          if (field == null) dart.nullFailed(I[46], 36, 27, "field");
          if (field == field$.Field.value) {
            return this.value;
          } else if (field == field$.Field.key) {
            return this.key;
          } else {
            return utils.getMapFieldValue(core.Object, core.Map.as(this.value), field);
          }
        }
        getRawValue(field) {
          if (field == null) dart.nullFailed(I[46], 47, 30, "field");
          if (field == field$.Field.value) {
            return this.value;
          } else if (field == field$.Field.key) {
            return this.key;
          } else {
            return utils.getMapFieldRawValue(dart.dynamic, core.Map.as(this.value), field);
          }
        }
        cast(RK, RV) {
          if (record_snapshot.RecordSnapshot$(RK, RV).is(this)) {
            return record_snapshot.RecordSnapshot$(RK, RV).as(this);
          }
          return record_ref_impl['SembastRecordRefExtension|snapshot'](RK, RV, this.ref.cast(RK, RV), RV.as(this.value));
        }
      }
      dart.defineExtensionMethods(RecordSnapshotMixin, ['toString']);
      return RecordSnapshotMixin;
    };
    (RecordSnapshotMixin[dart.mixinNew] = function() {
      this[revision$2] = null;
      this[_$35RecordSnapshotMixin$35ref] = null;
      this[_$35RecordSnapshotMixin$35ref$35isSet] = false;
      this[_$35RecordSnapshotMixin$35rawValue] = null;
      this[_$35RecordSnapshotMixin$35rawValue$35isSet] = false;
    }).prototype = RecordSnapshotMixin.prototype;
    dart.addTypeTests(RecordSnapshotMixin);
    RecordSnapshotMixin.prototype[_is_RecordSnapshotMixin_default] = true;
    dart.addTypeCaches(RecordSnapshotMixin);
    RecordSnapshotMixin[dart.implements] = () => [record_snapshot.RecordSnapshot$(K, V), record_impl.SembastRecordValue$(V), core.Object];
    dart.setMethodSignature(RecordSnapshotMixin, () => ({
      __proto__: dart.getMethods(RecordSnapshotMixin.__proto__),
      _get: dart.fnType(dart.nullable(core.Object), [core.String]),
      getValue: dart.fnType(dart.nullable(core.Object), [core.String]),
      getRawValue: dart.fnType(dart.dynamic, [core.String]),
      cast: dart.gFnType((RK, RV) => [record_snapshot.RecordSnapshot$(RK, RV), []], (RK, RV) => [dart.nullable(core.Object), dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(RecordSnapshotMixin, () => ({
      __proto__: dart.getGetters(RecordSnapshotMixin.__proto__),
      ref: record_ref.RecordRef$(K, V),
      key: K,
      value: V,
      rawValue: V
    }));
    dart.setSetterSignature(RecordSnapshotMixin, () => ({
      __proto__: dart.getSetters(RecordSnapshotMixin.__proto__),
      ref: dart.nullable(core.Object),
      rawValue: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(RecordSnapshotMixin, I[47]);
    dart.setFieldSignature(RecordSnapshotMixin, () => ({
      __proto__: dart.getFields(RecordSnapshotMixin.__proto__),
      revision: dart.fieldType(dart.nullable(core.int)),
      [__RecordSnapshotMixin_ref]: dart.fieldType(dart.nullable(record_ref.RecordRef$(K, V))),
      [__RecordSnapshotMixin_ref_isSet]: dart.fieldType(core.bool),
      [__RecordSnapshotMixin_rawValue]: dart.fieldType(dart.nullable(V)),
      [__RecordSnapshotMixin_rawValue_isSet]: dart.fieldType(core.bool)
    }));
    return RecordSnapshotMixin;
  });
  record_snapshot_impl.RecordSnapshotMixin = record_snapshot_impl.RecordSnapshotMixin$();
  dart.addTypeTests(record_snapshot_impl.RecordSnapshotMixin, _is_RecordSnapshotMixin_default);
  var __SembastRecordValue_rawValue_isSet = dart.privateName(record_snapshot_impl, "_#SembastRecordValue#rawValue#isSet");
  var __SembastRecordValue_rawValue_isSet$ = dart.privateName(record_impl, "_#SembastRecordValue#rawValue#isSet");
  var __SembastRecordValue_rawValue = dart.privateName(record_snapshot_impl, "_#SembastRecordValue#rawValue");
  var __SembastRecordValue_rawValue$ = dart.privateName(record_impl, "_#SembastRecordValue#rawValue");
  var __SembastRecordValue_rawValue_isSet_ = dart.privateName(record_snapshot_impl, "_#SembastRecordValue#rawValue#isSet=");
  var __SembastRecordValue_rawValue_ = dart.privateName(record_snapshot_impl, "_#SembastRecordValue#rawValue=");
  const _is_SembastRecordSnapshot_default = Symbol('_is_SembastRecordSnapshot_default');
  record_snapshot_impl.SembastRecordSnapshot$ = dart.generic((K, V) => {
    var VN = () => (VN = dart.constFn(dart.nullable(V)))();
    const Object_RecordSnapshotMixin$36 = class Object_RecordSnapshotMixin extends core.Object {};
    (Object_RecordSnapshotMixin$36.new = function() {
      record_snapshot_impl.RecordSnapshotMixin$(K, V)[dart.mixinNew].call(this);
    }).prototype = Object_RecordSnapshotMixin$36.prototype;
    dart.applyMixin(Object_RecordSnapshotMixin$36, record_snapshot_impl.RecordSnapshotMixin$(K, V));
    class SembastRecordSnapshot extends Object_RecordSnapshotMixin$36 {
      get [__SembastRecordValue_rawValue_isSet$]() {
        return this[$noSuchMethod](new core._Invocation.getter(C[4] || CT.C4));
      }
      get [__SembastRecordValue_rawValue$]() {
        return VN().as(this[$noSuchMethod](new core._Invocation.getter(C[5] || CT.C5)));
      }
      set [__SembastRecordValue_rawValue_isSet$](value) {
        return this[$noSuchMethod](new core._Invocation.setter(C[6] || CT.C6, value));
      }
      set [__SembastRecordValue_rawValue$](value) {
        VN().as(value);
        return this[$noSuchMethod](new core._Invocation.setter(C[7] || CT.C7, value));
      }
    }
    (SembastRecordSnapshot.fromRecord = function(record) {
      if (record == null) dart.nullFailed(I[46], 69, 59, "record");
      SembastRecordSnapshot.__proto__.new.call(this);
      this.ref = record.ref.cast(K, V);
      this.rawValue = V.as(record.value);
    }).prototype = SembastRecordSnapshot.prototype;
    (SembastRecordSnapshot.new = function(ref, value) {
      if (ref == null) dart.nullFailed(I[46], 75, 41, "ref");
      SembastRecordSnapshot.__proto__.new.call(this);
      this.ref = ref;
      this.rawValue = value;
    }).prototype = SembastRecordSnapshot.prototype;
    dart.addTypeTests(SembastRecordSnapshot);
    SembastRecordSnapshot.prototype[_is_SembastRecordSnapshot_default] = true;
    dart.addTypeCaches(SembastRecordSnapshot);
    dart.setGetterSignature(SembastRecordSnapshot, () => ({
      __proto__: dart.getGetters(SembastRecordSnapshot.__proto__),
      [__SembastRecordValue_rawValue_isSet$]: dart.dynamic,
      [__SembastRecordValue_rawValue$]: dart.nullable(V)
    }));
    dart.setSetterSignature(SembastRecordSnapshot, () => ({
      __proto__: dart.getSetters(SembastRecordSnapshot.__proto__),
      [__SembastRecordValue_rawValue_isSet$]: dart.dynamic,
      [__SembastRecordValue_rawValue$]: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(SembastRecordSnapshot, I[47]);
    return SembastRecordSnapshot;
  });
  record_snapshot_impl.SembastRecordSnapshot = record_snapshot_impl.SembastRecordSnapshot$();
  dart.addTypeTests(record_snapshot_impl.SembastRecordSnapshot, _is_SembastRecordSnapshot_default);
  var snapshot$ = dart.privateName(record_snapshot_impl, "SembastRecordRawSnapshot.snapshot");
  const _is_SembastRecordRawSnapshot_default = Symbol('_is_SembastRecordRawSnapshot_default');
  record_snapshot_impl.SembastRecordRawSnapshot$ = dart.generic((K, V) => {
    var RecordSnapshotMixinOfK$V = () => (RecordSnapshotMixinOfK$V = dart.constFn(record_snapshot_impl.RecordSnapshotMixin$(K, V)))();
    class SembastRecordRawSnapshot extends core.Object {
      get snapshot() {
        return this[snapshot$];
      }
      set snapshot(value) {
        super.snapshot = value;
      }
      _get(field) {
        return this.snapshot.getRawValue(dart.nullCheck(field));
      }
      get value() {
        return this.snapshot.rawValue;
      }
      cast(RK, RV) {
        return new (record_snapshot_impl.SembastRecordRawSnapshot$(RK, RV)).new(this.snapshot.cast(RK, RV));
      }
      get key() {
        return this.snapshot.key;
      }
      get ref() {
        return this.snapshot.ref;
      }
    }
    (SembastRecordRawSnapshot.new = function(snapshot) {
      if (snapshot == null) dart.nullFailed(I[46], 89, 49, "snapshot");
      this[snapshot$] = RecordSnapshotMixinOfK$V().as(snapshot);
      ;
    }).prototype = SembastRecordRawSnapshot.prototype;
    dart.addTypeTests(SembastRecordRawSnapshot);
    SembastRecordRawSnapshot.prototype[_is_SembastRecordRawSnapshot_default] = true;
    dart.addTypeCaches(SembastRecordRawSnapshot);
    SembastRecordRawSnapshot[dart.implements] = () => [record_snapshot.RecordSnapshot$(K, V)];
    dart.setMethodSignature(SembastRecordRawSnapshot, () => ({
      __proto__: dart.getMethods(SembastRecordRawSnapshot.__proto__),
      _get: dart.fnType(dart.dynamic, [dart.nullable(core.String)]),
      cast: dart.gFnType((RK, RV) => [record_snapshot.RecordSnapshot$(RK, RV), []], (RK, RV) => [dart.nullable(core.Object), dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(SembastRecordRawSnapshot, () => ({
      __proto__: dart.getGetters(SembastRecordRawSnapshot.__proto__),
      value: V,
      key: K,
      ref: record_ref.RecordRef$(K, V)
    }));
    dart.setLibraryUri(SembastRecordRawSnapshot, I[47]);
    dart.setFieldSignature(SembastRecordRawSnapshot, () => ({
      __proto__: dart.getFields(SembastRecordRawSnapshot.__proto__),
      snapshot: dart.finalFieldType(record_snapshot_impl.RecordSnapshotMixin$(K, V))
    }));
    return SembastRecordRawSnapshot;
  });
  record_snapshot_impl.SembastRecordRawSnapshot = record_snapshot_impl.SembastRecordRawSnapshot$();
  dart.addTypeTests(record_snapshot_impl.SembastRecordRawSnapshot, _is_SembastRecordRawSnapshot_default);
  const _is_RecordSnapshot_default = Symbol('_is_RecordSnapshot_default');
  record_snapshot.RecordSnapshot$ = dart.generic((K, V) => {
    class RecordSnapshot extends core.Object {}
    (RecordSnapshot.new = function() {
      ;
    }).prototype = RecordSnapshot.prototype;
    dart.addTypeTests(RecordSnapshot);
    RecordSnapshot.prototype[_is_RecordSnapshot_default] = true;
    dart.addTypeCaches(RecordSnapshot);
    dart.setLibraryUri(RecordSnapshot, I[48]);
    return RecordSnapshot;
  });
  record_snapshot.RecordSnapshot = record_snapshot.RecordSnapshot$();
  dart.addTypeTests(record_snapshot.RecordSnapshot, _is_RecordSnapshot_default);
  filter_impl.SembastFilterBase = class SembastFilterBase extends core.Object {};
  (filter_impl.SembastFilterBase.new = function() {
    ;
  }).prototype = filter_impl.SembastFilterBase.prototype;
  dart.addTypeTests(filter_impl.SembastFilterBase);
  dart.addTypeCaches(filter_impl.SembastFilterBase);
  filter_impl.SembastFilterBase[dart.implements] = () => [filter.Filter];
  dart.setLibraryUri(filter_impl.SembastFilterBase, I[49]);
  var matches$ = dart.privateName(filter_impl, "SembastCustomFilter.matches");
  filter_impl.SembastCustomFilter = class SembastCustomFilter extends filter_impl.SembastFilterBase {
    get matches() {
      return this[matches$];
    }
    set matches(value) {
      super.matches = value;
    }
    matchesRecord(record) {
      let t100;
      if (record == null) dart.nullFailed(I[50], 36, 37, "record");
      try {
        t100 = record;
        return this.matches(t100);
      } catch (e) {
        let _ = dart.getThrown(e);
        if (core.Object.is(_)) {
          return false;
        } else
          throw e;
      }
    }
  };
  (filter_impl.SembastCustomFilter.new = function(matches) {
    if (matches == null) dart.nullFailed(I[50], 33, 28, "matches");
    this[matches$] = matches;
    ;
  }).prototype = filter_impl.SembastCustomFilter.prototype;
  dart.addTypeTests(filter_impl.SembastCustomFilter);
  dart.addTypeCaches(filter_impl.SembastCustomFilter);
  dart.setMethodSignature(filter_impl.SembastCustomFilter, () => ({
    __proto__: dart.getMethods(filter_impl.SembastCustomFilter.__proto__),
    matchesRecord: dart.fnType(core.bool, [record_snapshot.RecordSnapshot])
  }));
  dart.setLibraryUri(filter_impl.SembastCustomFilter, I[49]);
  dart.setFieldSignature(filter_impl.SembastCustomFilter, () => ({
    __proto__: dart.getFields(filter_impl.SembastCustomFilter.__proto__),
    matches: dart.finalFieldType(dart.fnType(core.bool, [record_snapshot.RecordSnapshot]))
  }));
  var anyInList = dart.privateName(filter_impl, "FilterAnyInListMixin.anyInList");
  filter_impl.FilterAnyInListMixin = class FilterAnyInListMixin extends core.Object {};
  filter_impl.FilterAnyInListMixin[dart.mixinOn] = Object => class FilterAnyInListMixin extends Object {
    get anyInList() {
      return this[anyInList];
    }
    set anyInList(value) {
      this[anyInList] = value;
    }
  };
  (filter_impl.FilterAnyInListMixin[dart.mixinNew] = function() {
    this[anyInList] = null;
  }).prototype = filter_impl.FilterAnyInListMixin.prototype;
  dart.addTypeTests(filter_impl.FilterAnyInListMixin);
  dart.addTypeCaches(filter_impl.FilterAnyInListMixin);
  filter_impl.FilterAnyInListMixin[dart.implements] = () => [filter_impl.SembastFilterBase, core.Object];
  dart.setLibraryUri(filter_impl.FilterAnyInListMixin, I[49]);
  dart.setFieldSignature(filter_impl.FilterAnyInListMixin, () => ({
    __proto__: dart.getFields(filter_impl.FilterAnyInListMixin.__proto__),
    anyInList: dart.fieldType(dart.nullable(core.bool))
  }));
  var _$35FilterValueMixin$35value = dart.privateName(filter_impl, "FilterValueMixin._#FilterValueMixin#value");
  var _$35FilterValueMixin$35value$35isSet = dart.privateName(filter_impl, "FilterValueMixin._#FilterValueMixin#value#isSet");
  var __FilterValueMixin_value = dart.privateName(filter_impl, "_#FilterValueMixin#value");
  var __FilterValueMixin_value_isSet = dart.privateName(filter_impl, "_#FilterValueMixin#value#isSet");
  filter_impl.FilterValueMixin = class FilterValueMixin extends core.Object {};
  filter_impl.FilterValueMixin[dart.mixinOn] = Object => class FilterValueMixin extends Object {
    get [__FilterValueMixin_value]() {
      return this[_$35FilterValueMixin$35value];
    }
    set [__FilterValueMixin_value](value) {
      this[_$35FilterValueMixin$35value] = value;
    }
    get [__FilterValueMixin_value_isSet]() {
      return this[_$35FilterValueMixin$35value$35isSet];
    }
    set [__FilterValueMixin_value_isSet](value) {
      this[_$35FilterValueMixin$35value$35isSet] = value;
    }
    get value() {
      return dart.test(this[__FilterValueMixin_value_isSet]) ? this[__FilterValueMixin_value] : dart.throw(new _internal.LateError.fieldNI("value"));
    }
    set value(t101) {
      this[__FilterValueMixin_value_isSet] = true;
      this[__FilterValueMixin_value] = t101;
    }
  };
  (filter_impl.FilterValueMixin[dart.mixinNew] = function() {
    this[_$35FilterValueMixin$35value] = null;
    this[_$35FilterValueMixin$35value$35isSet] = false;
  }).prototype = filter_impl.FilterValueMixin.prototype;
  dart.addTypeTests(filter_impl.FilterValueMixin);
  dart.addTypeCaches(filter_impl.FilterValueMixin);
  filter_impl.FilterValueMixin[dart.implements] = () => [filter_impl.SembastFilterBase, core.Object];
  dart.setGetterSignature(filter_impl.FilterValueMixin, () => ({
    __proto__: dart.getGetters(filter_impl.FilterValueMixin.__proto__),
    value: dart.nullable(core.Object)
  }));
  dart.setSetterSignature(filter_impl.FilterValueMixin, () => ({
    __proto__: dart.getSetters(filter_impl.FilterValueMixin.__proto__),
    value: dart.nullable(core.Object)
  }));
  dart.setLibraryUri(filter_impl.FilterValueMixin, I[49]);
  dart.setFieldSignature(filter_impl.FilterValueMixin, () => ({
    __proto__: dart.getFields(filter_impl.FilterValueMixin.__proto__),
    [__FilterValueMixin_value]: dart.fieldType(dart.nullable(core.Object)),
    [__FilterValueMixin_value_isSet]: dart.fieldType(core.bool)
  }));
  var _$35FilterFieldMixin$35field = dart.privateName(filter_impl, "FilterFieldMixin._#FilterFieldMixin#field");
  var _$35FilterFieldMixin$35field$35isSet = dart.privateName(filter_impl, "FilterFieldMixin._#FilterFieldMixin#field#isSet");
  var __FilterFieldMixin_field = dart.privateName(filter_impl, "_#FilterFieldMixin#field");
  var __FilterFieldMixin_field_isSet = dart.privateName(filter_impl, "_#FilterFieldMixin#field#isSet");
  filter_impl.FilterFieldMixin = class FilterFieldMixin extends core.Object {};
  filter_impl.FilterFieldMixin[dart.mixinOn] = Object => class FilterFieldMixin extends Object {
    get [__FilterFieldMixin_field]() {
      return this[_$35FilterFieldMixin$35field];
    }
    set [__FilterFieldMixin_field](value) {
      this[_$35FilterFieldMixin$35field] = value;
    }
    get [__FilterFieldMixin_field_isSet]() {
      return this[_$35FilterFieldMixin$35field$35isSet];
    }
    set [__FilterFieldMixin_field_isSet](value) {
      this[_$35FilterFieldMixin$35field$35isSet] = value;
    }
    get field() {
      let t102;
      return dart.test(this[__FilterFieldMixin_field_isSet]) ? (t102 = this[__FilterFieldMixin_field], t102) : dart.throw(new _internal.LateError.fieldNI("field"));
    }
    set field(t102) {
      if (t102 == null) dart.nullFailed(I[50], 62, 15, "null");
      this[__FilterFieldMixin_field_isSet] = true;
      this[__FilterFieldMixin_field] = t102;
    }
  };
  (filter_impl.FilterFieldMixin[dart.mixinNew] = function() {
    this[_$35FilterFieldMixin$35field] = null;
    this[_$35FilterFieldMixin$35field$35isSet] = false;
  }).prototype = filter_impl.FilterFieldMixin.prototype;
  dart.addTypeTests(filter_impl.FilterFieldMixin);
  dart.addTypeCaches(filter_impl.FilterFieldMixin);
  filter_impl.FilterFieldMixin[dart.implements] = () => [filter_impl.SembastFilterBase, core.Object];
  dart.setGetterSignature(filter_impl.FilterFieldMixin, () => ({
    __proto__: dart.getGetters(filter_impl.FilterFieldMixin.__proto__),
    field: core.String
  }));
  dart.setSetterSignature(filter_impl.FilterFieldMixin, () => ({
    __proto__: dart.getSetters(filter_impl.FilterFieldMixin.__proto__),
    field: core.String
  }));
  dart.setLibraryUri(filter_impl.FilterFieldMixin, I[49]);
  dart.setFieldSignature(filter_impl.FilterFieldMixin, () => ({
    __proto__: dart.getFields(filter_impl.FilterFieldMixin.__proto__),
    [__FilterFieldMixin_field]: dart.fieldType(dart.nullable(core.String)),
    [__FilterFieldMixin_field_isSet]: dart.fieldType(core.bool)
  }));
  const SembastFilterBase_FilterAnyInListMixin$36 = class SembastFilterBase_FilterAnyInListMixin extends filter_impl.SembastFilterBase {};
  (SembastFilterBase_FilterAnyInListMixin$36.new = function() {
    filter_impl.FilterAnyInListMixin[dart.mixinNew].call(this);
  }).prototype = SembastFilterBase_FilterAnyInListMixin$36.prototype;
  dart.applyMixin(SembastFilterBase_FilterAnyInListMixin$36, filter_impl.FilterAnyInListMixin);
  const SembastFilterBase_FilterValueMixin$36 = class SembastFilterBase_FilterValueMixin extends SembastFilterBase_FilterAnyInListMixin$36 {};
  (SembastFilterBase_FilterValueMixin$36.new = function() {
    filter_impl.FilterValueMixin[dart.mixinNew].call(this);
    SembastFilterBase_FilterValueMixin$36.__proto__.new.call(this);
  }).prototype = SembastFilterBase_FilterValueMixin$36.prototype;
  dart.applyMixin(SembastFilterBase_FilterValueMixin$36, filter_impl.FilterValueMixin);
  const SembastFilterBase_FilterFieldMixin$36 = class SembastFilterBase_FilterFieldMixin extends SembastFilterBase_FilterValueMixin$36 {};
  (SembastFilterBase_FilterFieldMixin$36.new = function() {
    filter_impl.FilterFieldMixin[dart.mixinNew].call(this);
    SembastFilterBase_FilterFieldMixin$36.__proto__.new.call(this);
  }).prototype = SembastFilterBase_FilterFieldMixin$36.prototype;
  dart.applyMixin(SembastFilterBase_FilterFieldMixin$36, filter_impl.FilterFieldMixin);
  filter_impl.SembastEqualsFilter = class SembastEqualsFilter extends SembastFilterBase_FilterFieldMixin$36 {
    matchesRecord(record) {
      if (record == null) dart.nullFailed(I[50], 76, 37, "record");
      if (!dart.test(filter_impl.canMatch(this.field, record.value))) {
        return false;
      }
      let fieldValue = record._get(this.field);
      if (this.anyInList === true) {
        if (core.Iterable.is(fieldValue)) {
          for (let itemValue of fieldValue) {
            if (dart.equals(itemValue, this.value)) {
              return true;
            }
          }
        }
        return false;
      } else {
        return dart.equals(fieldValue, this.value);
      }
    }
    toString() {
      return dart.str(this.field) + " == " + dart.str(this.value);
    }
  };
  (filter_impl.SembastEqualsFilter.new = function(field, value, anyInList) {
    if (field == null) dart.nullFailed(I[50], 69, 30, "field");
    filter_impl.SembastEqualsFilter.__proto__.new.call(this);
    this.field = field;
    this.value = value;
    this.anyInList = anyInList;
  }).prototype = filter_impl.SembastEqualsFilter.prototype;
  dart.addTypeTests(filter_impl.SembastEqualsFilter);
  dart.addTypeCaches(filter_impl.SembastEqualsFilter);
  dart.setMethodSignature(filter_impl.SembastEqualsFilter, () => ({
    __proto__: dart.getMethods(filter_impl.SembastEqualsFilter.__proto__),
    matchesRecord: dart.fnType(core.bool, [record_snapshot.RecordSnapshot])
  }));
  dart.setLibraryUri(filter_impl.SembastEqualsFilter, I[49]);
  dart.defineExtensionMethods(filter_impl.SembastEqualsFilter, ['toString']);
  var regExp$ = dart.privateName(filter_impl, "SembastMatchesFilter.regExp");
  const SembastFilterBase_FilterAnyInListMixin$36$ = class SembastFilterBase_FilterAnyInListMixin extends filter_impl.SembastFilterBase {};
  (SembastFilterBase_FilterAnyInListMixin$36$.new = function() {
    filter_impl.FilterAnyInListMixin[dart.mixinNew].call(this);
  }).prototype = SembastFilterBase_FilterAnyInListMixin$36$.prototype;
  dart.applyMixin(SembastFilterBase_FilterAnyInListMixin$36$, filter_impl.FilterAnyInListMixin);
  const SembastFilterBase_FilterFieldMixin$36$ = class SembastFilterBase_FilterFieldMixin extends SembastFilterBase_FilterAnyInListMixin$36$ {};
  (SembastFilterBase_FilterFieldMixin$36$.new = function() {
    filter_impl.FilterFieldMixin[dart.mixinNew].call(this);
    SembastFilterBase_FilterFieldMixin$36$.__proto__.new.call(this);
  }).prototype = SembastFilterBase_FilterFieldMixin$36$.prototype;
  dart.applyMixin(SembastFilterBase_FilterFieldMixin$36$, filter_impl.FilterFieldMixin);
  filter_impl.SembastMatchesFilter = class SembastMatchesFilter extends SembastFilterBase_FilterFieldMixin$36$ {
    get regExp() {
      return this[regExp$];
    }
    set regExp(value) {
      super.regExp = value;
    }
    matchesRecord(record) {
      if (record == null) dart.nullFailed(I[50], 114, 37, "record");
      if (!dart.test(filter_impl.canMatch(this.field, record.value))) {
        return false;
      }
      let fieldValue = record._get(this.field);
      const _matches = value => {
        if (typeof value == 'string') {
          return this.regExp.hasMatch(value);
        }
        return false;
      };
      dart.fn(_matches, T$.dynamicTobool());
      if (this.anyInList === true) {
        if (core.Iterable.is(fieldValue)) {
          for (let itemValue of fieldValue) {
            if (dart.test(_matches(itemValue))) {
              return true;
            }
          }
        }
        return false;
      } else {
        return _matches(fieldValue);
      }
    }
    toString() {
      return dart.str(this.field) + " MATCHES " + dart.str(this.regExp);
    }
  };
  (filter_impl.SembastMatchesFilter.new = function(field, regExp, anyInList) {
    if (field == null) dart.nullFailed(I[50], 108, 31, "field");
    if (regExp == null) dart.nullFailed(I[50], 108, 43, "regExp");
    this[regExp$] = regExp;
    filter_impl.SembastMatchesFilter.__proto__.new.call(this);
    this.field = field;
    this.anyInList = anyInList;
  }).prototype = filter_impl.SembastMatchesFilter.prototype;
  dart.addTypeTests(filter_impl.SembastMatchesFilter);
  dart.addTypeCaches(filter_impl.SembastMatchesFilter);
  dart.setMethodSignature(filter_impl.SembastMatchesFilter, () => ({
    __proto__: dart.getMethods(filter_impl.SembastMatchesFilter.__proto__),
    matchesRecord: dart.fnType(core.bool, [record_snapshot.RecordSnapshot])
  }));
  dart.setLibraryUri(filter_impl.SembastMatchesFilter, I[49]);
  dart.setFieldSignature(filter_impl.SembastMatchesFilter, () => ({
    __proto__: dart.getFields(filter_impl.SembastMatchesFilter.__proto__),
    regExp: dart.finalFieldType(core.RegExp)
  }));
  dart.defineExtensionMethods(filter_impl.SembastMatchesFilter, ['toString']);
  var isAnd = dart.privateName(filter_impl, "SembastCompositeFilter.isAnd");
  var filters$ = dart.privateName(filter_impl, "SembastCompositeFilter.filters");
  filter_impl.SembastCompositeFilter = class SembastCompositeFilter extends filter_impl.SembastFilterBase {
    get isAnd() {
      return this[isAnd];
    }
    set isAnd(value) {
      this[isAnd] = value;
    }
    get filters() {
      return this[filters$];
    }
    set filters(value) {
      this[filters$] = value;
    }
    get isOr() {
      return !dart.test(this.isAnd);
    }
    matchesRecord(record) {
      if (record == null) dart.nullFailed(I[50], 165, 37, "record");
      for (let filter of this.filters) {
        if (dart.test(filter_impl.SembastFilterBase.as(filter).matchesRecord(record))) {
          if (dart.test(this.isOr)) {
            return true;
          }
        } else {
          if (dart.test(this.isAnd)) {
            return false;
          }
        }
      }
      return this.isAnd;
    }
    toString() {
      return this.filters[$join](" " + (dart.test(this.isAnd) ? "AND" : "OR") + " ");
    }
  };
  (filter_impl.SembastCompositeFilter.or = function(filters) {
    if (filters == null) dart.nullFailed(I[50], 159, 34, "filters");
    this[filters$] = filters;
    this[isAnd] = false;
    ;
  }).prototype = filter_impl.SembastCompositeFilter.prototype;
  (filter_impl.SembastCompositeFilter.and = function(filters) {
    if (filters == null) dart.nullFailed(I[50], 162, 35, "filters");
    this[filters$] = filters;
    this[isAnd] = true;
    ;
  }).prototype = filter_impl.SembastCompositeFilter.prototype;
  dart.addTypeTests(filter_impl.SembastCompositeFilter);
  dart.addTypeCaches(filter_impl.SembastCompositeFilter);
  dart.setMethodSignature(filter_impl.SembastCompositeFilter, () => ({
    __proto__: dart.getMethods(filter_impl.SembastCompositeFilter.__proto__),
    matchesRecord: dart.fnType(core.bool, [record_snapshot.RecordSnapshot])
  }));
  dart.setGetterSignature(filter_impl.SembastCompositeFilter, () => ({
    __proto__: dart.getGetters(filter_impl.SembastCompositeFilter.__proto__),
    isOr: core.bool
  }));
  dart.setLibraryUri(filter_impl.SembastCompositeFilter, I[49]);
  dart.setFieldSignature(filter_impl.SembastCompositeFilter, () => ({
    __proto__: dart.getFields(filter_impl.SembastCompositeFilter.__proto__),
    isAnd: dart.fieldType(core.bool),
    filters: dart.fieldType(core.List$(filter.Filter))
  }));
  dart.defineExtensionMethods(filter_impl.SembastCompositeFilter, ['toString']);
  var operation$ = dart.privateName(filter_impl, "SembastFilterPredicate.operation");
  var FilterOperation_value = dart.privateName(filter_impl, "FilterOperation.value");
  const SembastFilterBase_FilterValueMixin$36$ = class SembastFilterBase_FilterValueMixin extends filter_impl.SembastFilterBase {};
  (SembastFilterBase_FilterValueMixin$36$.new = function() {
    filter_impl.FilterValueMixin[dart.mixinNew].call(this);
  }).prototype = SembastFilterBase_FilterValueMixin$36$.prototype;
  dart.applyMixin(SembastFilterBase_FilterValueMixin$36$, filter_impl.FilterValueMixin);
  const SembastFilterBase_FilterFieldMixin$36$0 = class SembastFilterBase_FilterFieldMixin extends SembastFilterBase_FilterValueMixin$36$ {};
  (SembastFilterBase_FilterFieldMixin$36$0.new = function() {
    filter_impl.FilterFieldMixin[dart.mixinNew].call(this);
    SembastFilterBase_FilterFieldMixin$36$0.__proto__.new.call(this);
  }).prototype = SembastFilterBase_FilterFieldMixin$36$0.prototype;
  dart.applyMixin(SembastFilterBase_FilterFieldMixin$36$0, filter_impl.FilterFieldMixin);
  filter_impl.SembastFilterPredicate = class SembastFilterPredicate extends SembastFilterBase_FilterFieldMixin$36$0 {
    get operation() {
      return this[operation$];
    }
    set operation(value) {
      this[operation$] = value;
    }
    matchesRecord(record) {
      if (record == null) dart.nullFailed(I[50], 200, 37, "record");
      function _safeCompare(value1, value2) {
        try {
          if (core.Comparable.is(value1) && core.Comparable.is(value2)) {
            return core.Comparable.compare(value1, value2);
          }
        } catch (e) {
          let _ = dart.getThrown(e);
          if (core.Object.is(_)) {
          } else
            throw e;
        }
        return null;
      }
      dart.fn(_safeCompare, T$.dynamicAnddynamicTointN());
      function _lessThan(value1, value2) {
        let cmp = _safeCompare(value1, value2);
        return cmp != null && dart.notNull(cmp) < 0;
      }
      dart.fn(_lessThan, T$.dynamicAnddynamicTobool());
      function _greaterThan(value1, value2) {
        let cmp = _safeCompare(value1, value2);
        return cmp != null && dart.notNull(cmp) > 0;
      }
      dart.fn(_greaterThan, T$.dynamicAnddynamicTobool());
      if (!dart.test(filter_impl.canMatch(this.field, record.value))) {
        return false;
      }
      let fieldValue = record._get(this.field);
      switch (this.operation) {
        case C[8] || CT.C8:
        {
          return !dart.equals(fieldValue, this.value);
        }
        case C[9] || CT.C9:
        {
          return _lessThan(fieldValue, this.value);
        }
        case C[10] || CT.C10:
        {
          return dart.test(_lessThan(fieldValue, this.value)) || dart.equals(fieldValue, this.value);
        }
        case C[11] || CT.C11:
        {
          return _greaterThan(fieldValue, this.value);
        }
        case C[12] || CT.C12:
        {
          return dart.test(_greaterThan(fieldValue, this.value)) || dart.equals(fieldValue, this.value);
        }
        case C[13] || CT.C13:
        {
          return core.List.as(this.value)[$contains](record._get(this.field));
        }
        default:
        {
          dart.throw(dart.str(this) + " not supported");
        }
      }
    }
    toString() {
      return dart.str(this.field) + " " + dart.str(this.operation) + " " + dart.str(this.value);
    }
  };
  (filter_impl.SembastFilterPredicate.new = function(field, operation, value) {
    if (field == null) dart.nullFailed(I[50], 194, 33, "field");
    if (operation == null) dart.nullFailed(I[50], 194, 45, "operation");
    this[operation$] = operation;
    filter_impl.SembastFilterPredicate.__proto__.new.call(this);
    this.field = field;
    this.value = value;
  }).prototype = filter_impl.SembastFilterPredicate.prototype;
  dart.addTypeTests(filter_impl.SembastFilterPredicate);
  dart.addTypeCaches(filter_impl.SembastFilterPredicate);
  dart.setMethodSignature(filter_impl.SembastFilterPredicate, () => ({
    __proto__: dart.getMethods(filter_impl.SembastFilterPredicate.__proto__),
    matchesRecord: dart.fnType(core.bool, [record_snapshot.RecordSnapshot])
  }));
  dart.setLibraryUri(filter_impl.SembastFilterPredicate, I[49]);
  dart.setFieldSignature(filter_impl.SembastFilterPredicate, () => ({
    __proto__: dart.getFields(filter_impl.SembastFilterPredicate.__proto__),
    operation: dart.fieldType(filter_impl.FilterOperation)
  }));
  dart.defineExtensionMethods(filter_impl.SembastFilterPredicate, ['toString']);
  const value$2 = FilterOperation_value;
  filter_impl.FilterOperation = class FilterOperation extends core.Object {
    get value() {
      return this[value$2];
    }
    set value(value) {
      super.value = value;
    }
    toString() {
      switch (this) {
        case C[14] || CT.C14:
        {
          return "=";
        }
        case C[8] || CT.C8:
        {
          return "!=";
        }
        case C[9] || CT.C9:
        {
          return "<";
        }
        case C[10] || CT.C10:
        {
          return "<=";
        }
        case C[11] || CT.C11:
        {
          return ">";
        }
        case C[12] || CT.C12:
        {
          return ">=";
        }
        case C[13] || CT.C13:
        {
          return "IN";
        }
        case C[15] || CT.C15:
        {
          return "MATCHES";
        }
        default:
        {
          dart.throw(dart.str(this) + " not supported");
        }
      }
    }
  };
  (filter_impl.FilterOperation.__ = function(value) {
    if (value == null) dart.nullFailed(I[50], 258, 32, "value");
    this[value$2] = value;
    ;
  }).prototype = filter_impl.FilterOperation.prototype;
  dart.addTypeTests(filter_impl.FilterOperation);
  dart.addTypeCaches(filter_impl.FilterOperation);
  dart.setLibraryUri(filter_impl.FilterOperation, I[49]);
  dart.setFieldSignature(filter_impl.FilterOperation, () => ({
    __proto__: dart.getFields(filter_impl.FilterOperation.__proto__),
    value: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(filter_impl.FilterOperation, ['toString']);
  dart.defineLazy(filter_impl.FilterOperation, {
    /*filter_impl.FilterOperation.equals*/get equals() {
      return C[14] || CT.C14;
    },
    /*filter_impl.FilterOperation.notEquals*/get notEquals() {
      return C[8] || CT.C8;
    },
    /*filter_impl.FilterOperation.lessThan*/get lessThan() {
      return C[9] || CT.C9;
    },
    /*filter_impl.FilterOperation.lessThanOrEquals*/get lessThanOrEquals() {
      return C[10] || CT.C10;
    },
    /*filter_impl.FilterOperation.greaterThan*/get greaterThan() {
      return C[11] || CT.C11;
    },
    /*filter_impl.FilterOperation.greaterThanOrEquals*/get greaterThanOrEquals() {
      return C[12] || CT.C12;
    },
    /*filter_impl.FilterOperation.inList*/get inList() {
      return C[13] || CT.C13;
    },
    /*filter_impl.FilterOperation.matches*/get matches() {
      return C[15] || CT.C15;
    }
  }, false);
  filter_impl.canMatch = function canMatch(field, recordValue) {
    return core.Map.is(recordValue) || field == field$.Field.value || field == field$.Field.key;
  };
  filter_impl.filterMatchesRecord = function filterMatchesRecord(filter, record) {
    if (record == null) dart.nullFailed(I[50], 11, 57, "record");
    if (filter == null) {
      return true;
    }
    return filter_impl.SembastFilterBase.as(filter).matchesRecord(new record_snapshot_impl.SembastRecordRawSnapshot.new(record));
  };
  filter.Filter = class Filter extends core.Object {
    static equals(field, value, opts) {
      if (field == null) dart.nullFailed(I[51], 10, 32, "field");
      let anyInList = opts && 'anyInList' in opts ? opts.anyInList : null;
      return new filter_impl.SembastEqualsFilter.new(field, value, anyInList);
    }
    static notEquals(field, value) {
      if (field == null) dart.nullFailed(I[51], 15, 35, "field");
      return new filter_impl.SembastFilterPredicate.new(field, filter_impl.FilterOperation.notEquals, value);
    }
    static notNull(field) {
      if (field == null) dart.nullFailed(I[51], 20, 33, "field");
      return filter.Filter.notEquals(field, null);
    }
    static isNull(field) {
      if (field == null) dart.nullFailed(I[51], 23, 32, "field");
      return filter.Filter.equals(field, null);
    }
    static lessThan(field, value) {
      if (field == null) dart.nullFailed(I[51], 26, 34, "field");
      return new filter_impl.SembastFilterPredicate.new(field, filter_impl.FilterOperation.lessThan, value);
    }
    static lessThanOrEquals(field, value) {
      if (field == null) dart.nullFailed(I[51], 32, 42, "field");
      return new filter_impl.SembastFilterPredicate.new(field, filter_impl.FilterOperation.lessThanOrEquals, value);
    }
    static greaterThan(field, value) {
      if (field == null) dart.nullFailed(I[51], 38, 37, "field");
      return new filter_impl.SembastFilterPredicate.new(field, filter_impl.FilterOperation.greaterThan, value);
    }
    static greaterThanOrEquals(field, value) {
      if (field == null) dart.nullFailed(I[51], 43, 45, "field");
      return new filter_impl.SembastFilterPredicate.new(field, filter_impl.FilterOperation.greaterThanOrEquals, value);
    }
    static inList(field, list) {
      if (field == null) dart.nullFailed(I[51], 49, 32, "field");
      if (list == null) dart.nullFailed(I[51], 49, 44, "list");
      return new filter_impl.SembastFilterPredicate.new(field, filter_impl.FilterOperation.inList, list);
    }
    static matches(field, pattern, opts) {
      if (field == null) dart.nullFailed(I[51], 57, 33, "field");
      if (pattern == null) dart.nullFailed(I[51], 57, 47, "pattern");
      let anyInList = opts && 'anyInList' in opts ? opts.anyInList : null;
      return filter.Filter.matchesRegExp(field, core.RegExp.new(pattern), {anyInList: anyInList});
    }
    static matchesRegExp(field, regExp, opts) {
      if (field == null) dart.nullFailed(I[51], 64, 39, "field");
      if (regExp == null) dart.nullFailed(I[51], 64, 53, "regExp");
      let anyInList = opts && 'anyInList' in opts ? opts.anyInList : null;
      return new filter_impl.SembastMatchesFilter.new(field, regExp, anyInList);
    }
    static or(filters) {
      if (filters == null) dart.nullFailed(I[51], 71, 34, "filters");
      return new filter_impl.SembastCompositeFilter.or(filters);
    }
    static and(filters) {
      if (filters == null) dart.nullFailed(I[51], 76, 35, "filters");
      return new filter_impl.SembastCompositeFilter.and(filters);
    }
    static byKey(key) {
      return filter.Filter.equals(field$.Field.key, key);
    }
    static custom(matches) {
      if (matches == null) dart.nullFailed(I[51], 86, 62, "matches");
      return new filter_impl.SembastCustomFilter.new(matches);
    }
  };
  (filter.Filter[dart.mixinNew] = function() {
  }).prototype = filter.Filter.prototype;
  dart.addTypeTests(filter.Filter);
  dart.addTypeCaches(filter.Filter);
  dart.setLibraryUri(filter.Filter, I[52]);
  filter['SembastFilterCombination||'] = function SembastFilterCombination$124$124($this, other) {
    if ($this == null) dart.nullFailed(I[51], 95, 19, "#this");
    if (other == null) dart.nullFailed(I[51], 95, 28, "other");
    return new filter_impl.SembastCompositeFilter.or(T$.JSArrayOfFilter().of([$this, other]));
  };
  filter['SembastFilterCombination|&'] = function SembastFilterCombination$124$38($this, other) {
    if ($this == null) dart.nullFailed(I[51], 100, 19, "#this");
    if (other == null) dart.nullFailed(I[51], 100, 28, "other");
    return new filter_impl.SembastCompositeFilter.and(T$.JSArrayOfFilter().of([$this, other]));
  };
  finder.Finder = class Finder extends core.Object {
    static new(opts) {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      let sortOrders = opts && 'sortOrders' in opts ? opts.sortOrders : null;
      let limit = opts && 'limit' in opts ? opts.limit : null;
      let offset = opts && 'offset' in opts ? opts.offset : null;
      let start = opts && 'start' in opts ? opts.start : null;
      let end = opts && 'end' in opts ? opts.end : null;
      return new finder_impl.SembastFinder.new({filter: filter, sortOrders: sortOrders, limit: limit, offset: offset, start: start, end: end});
    }
  };
  (finder.Finder[dart.mixinNew] = function() {
  }).prototype = finder.Finder.prototype;
  dart.addTypeTests(finder.Finder);
  dart.addTypeCaches(finder.Finder);
  dart.setLibraryUri(finder.Finder, I[53]);
  var _$35StoreRefMixin$35name = dart.privateName(store_ref_impl, "StoreRefMixin._#StoreRefMixin#name");
  var _$35StoreRefMixin$35name$35isSet = dart.privateName(store_ref_impl, "StoreRefMixin._#StoreRefMixin#name#isSet");
  var __StoreRefMixin_name = dart.privateName(store_ref_impl, "_#StoreRefMixin#name");
  var __StoreRefMixin_name_isSet = dart.privateName(store_ref_impl, "_#StoreRefMixin#name#isSet");
  const _is_StoreRefMixin_default = Symbol('_is_StoreRefMixin_default');
  store_ref_impl.StoreRefMixin$ = dart.generic((K, V) => {
    var SembastRecordRefOfK$V = () => (SembastRecordRefOfK$V = dart.constFn(record_ref_impl.SembastRecordRef$(K, V)))();
    var IterableOfK = () => (IterableOfK = dart.constFn(core.Iterable$(K)))();
    var SembastRecordsRefOfK$V = () => (SembastRecordsRefOfK$V = dart.constFn(records_ref_impl.SembastRecordsRef$(K, V)))();
    class StoreRefMixin extends core.Object {}
    StoreRefMixin[dart.mixinOn] = Object => {
      class StoreRefMixin extends Object {
        get [__StoreRefMixin_name]() {
          return this[_$35StoreRefMixin$35name];
        }
        set [__StoreRefMixin_name](value) {
          this[_$35StoreRefMixin$35name] = value;
        }
        get [__StoreRefMixin_name_isSet]() {
          return this[_$35StoreRefMixin$35name$35isSet];
        }
        set [__StoreRefMixin_name_isSet](value) {
          this[_$35StoreRefMixin$35name$35isSet] = value;
        }
        get name() {
          let t106;
          return dart.test(this[__StoreRefMixin_name_isSet]) ? (t106 = this[__StoreRefMixin_name], t106) : dart.throw(new _internal.LateError.fieldNI("name"));
        }
        set name(t106) {
          if (t106 == null) dart.nullFailed(I[54], 25, 15, "null");
          this[__StoreRefMixin_name_isSet] = true;
          this[__StoreRefMixin_name] = t106;
        }
        record(key) {
          K.as(key);
          if (key == null) {
            dart.throw(new core.ArgumentError.new("Record key cannot be null"));
          }
          return new (SembastRecordRefOfK$V()).new(this, key);
        }
        records(keys) {
          IterableOfK().as(keys);
          if (keys == null) dart.nullFailed(I[54], 36, 40, "keys");
          return new (SembastRecordsRefOfK$V()).new(this, keys);
        }
        toString() {
          return "Store(" + dart.str(this.name) + ")";
        }
        get hashCode() {
          return dart.hashCode(this.name);
        }
        _equals(other) {
          if (other == null) return false;
          if (store_ref.StoreRef.is(other)) {
            return other.name == this.name;
          }
          return false;
        }
        cast(RK, RV) {
          if (store_ref.StoreRef$(RK, RV).is(this)) {
            return store_ref.StoreRef$(RK, RV).as(this);
          }
          return store_ref.StoreRef$(RK, RV).new(this.name);
        }
      }
      dart.defineExtensionMethods(StoreRefMixin, ['toString', '_equals']);
      dart.defineExtensionAccessors(StoreRefMixin, ['hashCode']);
      return StoreRefMixin;
    };
    (StoreRefMixin[dart.mixinNew] = function() {
      this[_$35StoreRefMixin$35name] = null;
      this[_$35StoreRefMixin$35name$35isSet] = false;
    }).prototype = StoreRefMixin.prototype;
    dart.addTypeTests(StoreRefMixin);
    StoreRefMixin.prototype[_is_StoreRefMixin_default] = true;
    dart.addTypeCaches(StoreRefMixin);
    StoreRefMixin[dart.implements] = () => [store_ref.StoreRef$(K, V), core.Object];
    dart.setMethodSignature(StoreRefMixin, () => ({
      __proto__: dart.getMethods(StoreRefMixin.__proto__),
      record: dart.fnType(record_ref.RecordRef$(K, V), [dart.nullable(core.Object)]),
      records: dart.fnType(records_ref.RecordsRef$(K, V), [dart.nullable(core.Object)]),
      cast: dart.gFnType((RK, RV) => [store_ref.StoreRef$(RK, RV), []], (RK, RV) => [dart.nullable(core.Object), dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(StoreRefMixin, () => ({
      __proto__: dart.getGetters(StoreRefMixin.__proto__),
      name: core.String
    }));
    dart.setSetterSignature(StoreRefMixin, () => ({
      __proto__: dart.getSetters(StoreRefMixin.__proto__),
      name: core.String
    }));
    dart.setLibraryUri(StoreRefMixin, I[55]);
    dart.setFieldSignature(StoreRefMixin, () => ({
      __proto__: dart.getFields(StoreRefMixin.__proto__),
      [__StoreRefMixin_name]: dart.fieldType(dart.nullable(core.String)),
      [__StoreRefMixin_name_isSet]: dart.fieldType(core.bool)
    }));
    return StoreRefMixin;
  });
  store_ref_impl.StoreRefMixin = store_ref_impl.StoreRefMixin$();
  dart.addTypeTests(store_ref_impl.StoreRefMixin, _is_StoreRefMixin_default);
  const _is_SembastStoreRef_default = Symbol('_is_SembastStoreRef_default');
  store_ref_impl.SembastStoreRef$ = dart.generic((K, V) => {
    const Object_StoreRefMixin$36 = class Object_StoreRefMixin extends core.Object {};
    (Object_StoreRefMixin$36.new = function() {
      store_ref_impl.StoreRefMixin$(K, V)[dart.mixinNew].call(this);
    }).prototype = Object_StoreRefMixin$36.prototype;
    dart.applyMixin(Object_StoreRefMixin$36, store_ref_impl.StoreRefMixin$(K, V));
    class SembastStoreRef extends Object_StoreRefMixin$36 {}
    (SembastStoreRef.new = function(name) {
      if (name == null) dart.nullFailed(I[54], 17, 26, "name");
      SembastStoreRef.__proto__.new.call(this);
      this.name = name;
    }).prototype = SembastStoreRef.prototype;
    dart.addTypeTests(SembastStoreRef);
    SembastStoreRef.prototype[_is_SembastStoreRef_default] = true;
    dart.addTypeCaches(SembastStoreRef);
    dart.setLibraryUri(SembastStoreRef, I[55]);
    return SembastStoreRef;
  });
  store_ref_impl.SembastStoreRef = store_ref_impl.SembastStoreRef$();
  dart.addTypeTests(store_ref_impl.SembastStoreRef, _is_SembastStoreRef_default);
  const _is_StoreFactoryMixin_default = Symbol('_is_StoreFactoryMixin_default');
  store_ref_impl.StoreFactoryMixin$ = dart.generic((K, V) => {
    var StoreRefOfK$V = () => (StoreRefOfK$V = dart.constFn(store_ref.StoreRef$(K, V)))();
    class StoreFactoryMixin extends core.Object {}
    StoreFactoryMixin[dart.mixinOn] = Object => class StoreFactoryMixin extends Object {
      store(name = null) {
        if (name == null) {
          return StoreRefOfK$V().main();
        } else {
          return StoreRefOfK$V().new(name);
        }
      }
    };
    (StoreFactoryMixin[dart.mixinNew] = function() {
    }).prototype = StoreFactoryMixin.prototype;
    dart.addTypeTests(StoreFactoryMixin);
    StoreFactoryMixin.prototype[_is_StoreFactoryMixin_default] = true;
    dart.addTypeCaches(StoreFactoryMixin);
    StoreFactoryMixin[dart.implements] = () => [store_ref.StoreFactory$(K, V), core.Object];
    dart.setMethodSignature(StoreFactoryMixin, () => ({
      __proto__: dart.getMethods(StoreFactoryMixin.__proto__),
      store: dart.fnType(store_ref.StoreRef$(K, V), [], [dart.nullable(core.String)])
    }));
    dart.setLibraryUri(StoreFactoryMixin, I[55]);
    return StoreFactoryMixin;
  });
  store_ref_impl.StoreFactoryMixin = store_ref_impl.StoreFactoryMixin$();
  dart.addTypeTests(store_ref_impl.StoreFactoryMixin, _is_StoreFactoryMixin_default);
  const _is_StoreFactoryBase_default = Symbol('_is_StoreFactoryBase_default');
  store_ref_impl.StoreFactoryBase$ = dart.generic((K, V) => {
    const Object_StoreFactoryMixin$36 = class Object_StoreFactoryMixin extends core.Object {};
    (Object_StoreFactoryMixin$36.new = function() {
    }).prototype = Object_StoreFactoryMixin$36.prototype;
    dart.applyMixin(Object_StoreFactoryMixin$36, store_ref_impl.StoreFactoryMixin$(K, V));
    class StoreFactoryBase extends Object_StoreFactoryMixin$36 {}
    (StoreFactoryBase.new = function() {
      ;
    }).prototype = StoreFactoryBase.prototype;
    dart.addTypeTests(StoreFactoryBase);
    StoreFactoryBase.prototype[_is_StoreFactoryBase_default] = true;
    dart.addTypeCaches(StoreFactoryBase);
    dart.setLibraryUri(StoreFactoryBase, I[55]);
    return StoreFactoryBase;
  });
  store_ref_impl.StoreFactoryBase = store_ref_impl.StoreFactoryBase$();
  dart.addTypeTests(store_ref_impl.StoreFactoryBase, _is_StoreFactoryBase_default);
  store_ref_impl['SembastStoreRefExtensionImpl|findImmutableRecords'] = function SembastStoreRefExtensionImpl$124findImmutableRecords(K, V, $this, databaseClient, opts) {
    if ($this == null) dart.nullFailed(I[54], 67, 40, "#this");
    if (databaseClient == null) dart.nullFailed(I[54], 68, 22, "databaseClient");
    let finder = opts && 'finder' in opts ? opts.finder : null;
    return async.async(T$.ListOfImmutableSembastRecord(), function* SembastStoreRefExtensionImpl$124findImmutableRecords() {
      let client = database_client_impl.getClient(databaseClient);
      return yield client.getSembastStore($this).txnFindRecords(client.sembastTransaction, finder);
    });
  };
  store_ref_impl['SembastStoreRefExtensionImpl|get#findImmutableRecords'] = function SembastStoreRefExtensionImpl$124get$35findImmutableRecords(K, V, $this) {
    if ($this == null) dart.nullFailed(I[54], 67, 40, "#this");
    return dart.fn((databaseClient, opts) => {
      if (databaseClient == null) dart.nullFailed(I[54], 68, 22, "databaseClient");
      let finder = opts && 'finder' in opts ? opts.finder : null;
      return store_ref_impl['SembastStoreRefExtensionImpl|findImmutableRecords'](K, V, $this, databaseClient, {finder: finder});
    }, T$.DatabaseClient__ToFutureOfListOfImmutableSembastRecord());
  };
  store_ref_impl['SembastStoreRefExtension|drop'] = function SembastStoreRefExtension$124drop(K, V, $this, databaseClient) {
    if ($this == null) dart.nullFailed(I[54], 83, 10, "#this");
    if (databaseClient == null) dart.nullFailed(I[54], 83, 30, "databaseClient");
    let client = database_client_impl.getClient(databaseClient);
    return client.inTransaction(dart.dynamic, dart.fn(txn => {
      if (txn == null) dart.nullFailed(I[54], 85, 34, "txn");
      return client.sembastDatabase.txnDeleteStore(txn, $this.name);
    }, T$.SembastTransactionToFuture()));
  };
  store_ref_impl['SembastStoreRefExtension|get#drop'] = function SembastStoreRefExtension$124get$35drop(K, V, $this) {
    if ($this == null) dart.nullFailed(I[54], 83, 10, "#this");
    return dart.fn(databaseClient => {
      if (databaseClient == null) dart.nullFailed(I[54], 83, 30, "databaseClient");
      return store_ref_impl['SembastStoreRefExtension|drop'](K, V, $this, databaseClient);
    }, T$.DatabaseClientToFuture());
  };
  store_ref_impl['SembastStoreRefExtension|findFirst'] = function SembastStoreRefExtension$124findFirst(K, V, $this, databaseClient, opts) {
    if ($this == null) dart.nullFailed(I[54], 93, 33, "#this");
    if (databaseClient == null) dart.nullFailed(I[54], 93, 58, "databaseClient");
    let finder = opts && 'finder' in opts ? opts.finder : null;
    return async.async(dart.nullable(record_snapshot.RecordSnapshot$(K, V)), function* SembastStoreRefExtension$124findFirst() {
      let client = database_client_impl.getClient(databaseClient);
      let record = (yield client.getSembastStore($this).txnFindRecord(client.sembastTransaction, finder));
      if (record == null) {
        return null;
      } else {
        return new (record_snapshot_impl.SembastRecordSnapshot$(K, V)).fromRecord(record);
      }
    });
  };
  store_ref_impl['SembastStoreRefExtension|get#findFirst'] = function SembastStoreRefExtension$124get$35findFirst(K, V, $this) {
    if ($this == null) dart.nullFailed(I[54], 93, 33, "#this");
    return dart.fn((databaseClient, opts) => {
      if (databaseClient == null) dart.nullFailed(I[54], 93, 58, "databaseClient");
      let finder = opts && 'finder' in opts ? opts.finder : null;
      return store_ref_impl['SembastStoreRefExtension|findFirst'](K, V, $this, databaseClient, {finder: finder});
    }, dart.fnType(async.Future$(dart.nullable(record_snapshot.RecordSnapshot$(K, V))), [client.DatabaseClient], {finder: T$.FinderN()}, {}));
  };
  store_ref_impl['SembastStoreRefExtension|find'] = function SembastStoreRefExtension$124find(K, V, $this, databaseClient, opts) {
    if ($this == null) dart.nullFailed(I[54], 112, 38, "#this");
    if (databaseClient == null) dart.nullFailed(I[54], 112, 58, "databaseClient");
    let finder = opts && 'finder' in opts ? opts.finder : null;
    return async.async(core.List$(record_snapshot.RecordSnapshot$(K, V)), function* SembastStoreRefExtension$124find() {
      let records = (yield store_ref_impl['SembastStoreRefExtensionImpl|findImmutableRecords'](K, V, $this, databaseClient, {finder: finder}));
      return record_impl.immutableListToSnapshots(K, V, records);
    });
  };
  store_ref_impl['SembastStoreRefExtension|get#find'] = function SembastStoreRefExtension$124get$35find(K, V, $this) {
    if ($this == null) dart.nullFailed(I[54], 112, 38, "#this");
    return dart.fn((databaseClient, opts) => {
      if (databaseClient == null) dart.nullFailed(I[54], 112, 58, "databaseClient");
      let finder = opts && 'finder' in opts ? opts.finder : null;
      return store_ref_impl['SembastStoreRefExtension|find'](K, V, $this, databaseClient, {finder: finder});
    }, dart.fnType(async.Future$(core.List$(record_snapshot.RecordSnapshot$(K, V))), [client.DatabaseClient], {finder: T$.FinderN()}, {}));
  };
  store_ref_impl['SembastStoreRefExtension|query'] = function SembastStoreRefExtension$124query(K, V, $this, opts) {
    if ($this == null) dart.nullFailed(I[54], 121, 18, "#this");
    let finder = opts && 'finder' in opts ? opts.finder : null;
    return new (query_ref_impl.SembastQueryRef$(K, V)).new($this, T$.SembastFinderN().as(finder));
  };
  store_ref_impl['SembastStoreRefExtension|get#query'] = function SembastStoreRefExtension$124get$35query(K, V, $this) {
    if ($this == null) dart.nullFailed(I[54], 121, 18, "#this");
    return dart.fn(opts => {
      let finder = opts && 'finder' in opts ? opts.finder : null;
      return store_ref_impl['SembastStoreRefExtension|query'](K, V, $this, {finder: finder});
    }, dart.fnType(query_ref.QueryRef$(K, V), [], {finder: T$.FinderN()}, {}));
  };
  store_ref_impl['SembastStoreRefExtension|findKey'] = function SembastStoreRefExtension$124findKey(K, V, $this, databaseClient, opts) {
    if ($this == null) dart.nullFailed(I[54], 130, 14, "#this");
    if (databaseClient == null) dart.nullFailed(I[54], 130, 37, "databaseClient");
    let finder = opts && 'finder' in opts ? opts.finder : null;
    return async.async(dart.nullable(K), function* SembastStoreRefExtension$124findKey() {
      let client = database_client_impl.getClient(databaseClient);
      let key = (yield client.getSembastStore($this).txnFindKey(client.sembastTransaction, finder));
      return dart.nullable(K).as(key);
    });
  };
  store_ref_impl['SembastStoreRefExtension|get#findKey'] = function SembastStoreRefExtension$124get$35findKey(K, V, $this) {
    if ($this == null) dart.nullFailed(I[54], 130, 14, "#this");
    return dart.fn((databaseClient, opts) => {
      if (databaseClient == null) dart.nullFailed(I[54], 130, 37, "databaseClient");
      let finder = opts && 'finder' in opts ? opts.finder : null;
      return store_ref_impl['SembastStoreRefExtension|findKey'](K, V, $this, databaseClient, {finder: finder});
    }, dart.fnType(async.Future$(dart.nullable(K)), [client.DatabaseClient], {finder: T$.FinderN()}, {}));
  };
  store_ref_impl['SembastStoreRefExtension|findKeys'] = function SembastStoreRefExtension$124findKeys(K, V, $this, databaseClient, opts) {
    if ($this == null) dart.nullFailed(I[54], 144, 19, "#this");
    if (databaseClient == null) dart.nullFailed(I[54], 144, 43, "databaseClient");
    let finder = opts && 'finder' in opts ? opts.finder : null;
    return async.async(core.List$(K), function* SembastStoreRefExtension$124findKeys() {
      let client = database_client_impl.getClient(databaseClient);
      let keys = (yield client.getSembastStore($this).txnFindKeys(client.sembastTransaction, finder));
      return keys[$cast](K);
    });
  };
  store_ref_impl['SembastStoreRefExtension|get#findKeys'] = function SembastStoreRefExtension$124get$35findKeys(K, V, $this) {
    if ($this == null) dart.nullFailed(I[54], 144, 19, "#this");
    return dart.fn((databaseClient, opts) => {
      if (databaseClient == null) dart.nullFailed(I[54], 144, 43, "databaseClient");
      let finder = opts && 'finder' in opts ? opts.finder : null;
      return store_ref_impl['SembastStoreRefExtension|findKeys'](K, V, $this, databaseClient, {finder: finder});
    }, dart.fnType(async.Future$(core.List$(K)), [client.DatabaseClient], {finder: T$.FinderN()}, {}));
  };
  store_ref_impl['SembastStoreRefExtension|stream'] = function SembastStoreRefExtension$124stream(K, V, $this, databaseClient, opts) {
    if ($this == null) dart.nullFailed(I[54], 155, 32, "#this");
    if (databaseClient == null) dart.nullFailed(I[54], 155, 54, "databaseClient");
    let filter = opts && 'filter' in opts ? opts.filter : null;
    let client = database_client_impl.getClient(databaseClient);
    return client.getSembastStore($this).txnGetStream(K, V, client.sembastTransaction, filter);
  };
  store_ref_impl['SembastStoreRefExtension|get#stream'] = function SembastStoreRefExtension$124get$35stream(K, V, $this) {
    if ($this == null) dart.nullFailed(I[54], 155, 32, "#this");
    return dart.fn((databaseClient, opts) => {
      if (databaseClient == null) dart.nullFailed(I[54], 155, 54, "databaseClient");
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return store_ref_impl['SembastStoreRefExtension|stream'](K, V, $this, databaseClient, {filter: filter});
    }, dart.fnType(async.Stream$(record_snapshot.RecordSnapshot$(K, V)), [client.DatabaseClient], {filter: T$.FilterN()}, {}));
  };
  store_ref_impl['SembastStoreRefExtension|count'] = function SembastStoreRefExtension$124count(K, V, $this, databaseClient, opts) {
    if ($this == null) dart.nullFailed(I[54], 167, 15, "#this");
    if (databaseClient == null) dart.nullFailed(I[54], 167, 36, "databaseClient");
    let filter = opts && 'filter' in opts ? opts.filter : null;
    let client = database_client_impl.getClient(databaseClient);
    return client.getSembastStore($this).txnCount(client.sembastTransaction, filter);
  };
  store_ref_impl['SembastStoreRefExtension|get#count'] = function SembastStoreRefExtension$124get$35count(K, V, $this) {
    if ($this == null) dart.nullFailed(I[54], 167, 15, "#this");
    return dart.fn((databaseClient, opts) => {
      if (databaseClient == null) dart.nullFailed(I[54], 167, 36, "databaseClient");
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return store_ref_impl['SembastStoreRefExtension|count'](K, V, $this, databaseClient, {filter: filter});
    }, T$.DatabaseClient__ToFutureOfint());
  };
  store_ref_impl['SembastStoreRefExtension|add'] = function SembastStoreRefExtension$124add(K, V, $this, databaseClient, value) {
    if ($this == null) dart.nullFailed(I[54], 178, 13, "#this");
    if (databaseClient == null) dart.nullFailed(I[54], 178, 32, "databaseClient");
    return async.async(K, function* SembastStoreRefExtension$124add() {
      let client = database_client_impl.getClient(databaseClient);
      value = dart.nullCheck(client.sembastDatabase.sanitizeInputValue(V, value));
      return yield client.inTransaction(K, dart.fn(txn => {
        if (txn == null) dart.nullFailed(I[54], 181, 40, "txn");
        return async.async(K, function*() {
          let key = (yield client.getSembastStore($this).txnAdd(K, V, txn, value));
          return K.as(key);
        });
      }, dart.fnType(async.Future$(K), [transaction_impl.SembastTransaction])));
    });
  };
  store_ref_impl['SembastStoreRefExtension|get#add'] = function SembastStoreRefExtension$124get$35add(K, V, $this) {
    if ($this == null) dart.nullFailed(I[54], 178, 13, "#this");
    return dart.fn((databaseClient, value) => {
      if (databaseClient == null) dart.nullFailed(I[54], 178, 32, "databaseClient");
      return store_ref_impl['SembastStoreRefExtension|add'](K, V, $this, databaseClient, value);
    }, dart.fnType(async.Future$(K), [client.DatabaseClient, V]));
  };
  store_ref_impl['SembastStoreRefExtension|addAll'] = function SembastStoreRefExtension$124addAll(K, V, $this, databaseClient, values) {
    if ($this == null) dart.nullFailed(I[54], 190, 19, "#this");
    if (databaseClient == null) dart.nullFailed(I[54], 190, 41, "databaseClient");
    if (values == null) dart.nullFailed(I[54], 190, 65, "values");
    return async.async(core.List$(K), function* SembastStoreRefExtension$124addAll() {
      let client = database_client_impl.getClient(databaseClient);
      let sanitizedValues = values[$map](dart.nullable(V), dart.fn(value => client.sembastDatabase.sanitizeInputValue(V, value), dart.fnType(dart.nullable(V), [V])));
      let keys = _interceptors.JSArray$(K).of([]);
      yield client.inTransaction(core.Null, dart.fn(txn => {
        if (txn == null) dart.nullFailed(I[54], 195, 33, "txn");
        return async.async(core.Null, function*() {
          let store = client.getSembastStore($this);
          for (let value of sanitizedValues) {
            keys[$add](dart.nullCheck(yield store.txnAdd(K, V, txn, value)));
          }
        });
      }, T$.SembastTransactionToFutureOfNull()));
      return keys;
    });
  };
  store_ref_impl['SembastStoreRefExtension|get#addAll'] = function SembastStoreRefExtension$124get$35addAll(K, V, $this) {
    if ($this == null) dart.nullFailed(I[54], 190, 19, "#this");
    return dart.fn((databaseClient, values) => {
      if (databaseClient == null) dart.nullFailed(I[54], 190, 41, "databaseClient");
      if (values == null) dart.nullFailed(I[54], 190, 65, "values");
      return store_ref_impl['SembastStoreRefExtension|addAll'](K, V, $this, databaseClient, values);
    }, dart.fnType(async.Future$(core.List$(K)), [client.DatabaseClient, core.List$(V)]));
  };
  store_ref_impl['SembastStoreRefExtension|update'] = function SembastStoreRefExtension$124update(K, V, $this, databaseClient, value, opts) {
    if ($this == null) dart.nullFailed(I[54], 207, 15, "#this");
    if (databaseClient == null) dart.nullFailed(I[54], 207, 37, "databaseClient");
    let finder = opts && 'finder' in opts ? opts.finder : null;
    let client = database_client_impl.getClient(databaseClient);
    value = dart.nullCheck(client.sembastDatabase.sanitizeInputValue(V, value, {update: true}));
    return client.inTransaction(core.int, dart.fn(txn => {
      if (txn == null) dart.nullFailed(I[54], 210, 34, "txn");
      return async.async(core.int, function*() {
        return (yield client.getSembastStore($this).txnUpdateWhere(txn, value, {finder: finder}))[$length];
      });
    }, T$.SembastTransactionToFutureOfint()));
  };
  store_ref_impl['SembastStoreRefExtension|get#update'] = function SembastStoreRefExtension$124get$35update(K, V, $this) {
    if ($this == null) dart.nullFailed(I[54], 207, 15, "#this");
    return dart.fn((databaseClient, value, opts) => {
      if (databaseClient == null) dart.nullFailed(I[54], 207, 37, "databaseClient");
      let finder = opts && 'finder' in opts ? opts.finder : null;
      return store_ref_impl['SembastStoreRefExtension|update'](K, V, $this, databaseClient, value, {finder: finder});
    }, dart.fnType(T$.FutureOfint(), [client.DatabaseClient, V], {finder: T$.FinderN()}, {}));
  };
  store_ref_impl['SembastStoreRefExtension|delete'] = function SembastStoreRefExtension$124delete(K, V, $this, databaseClient, opts) {
    if ($this == null) dart.nullFailed(I[54], 221, 15, "#this");
    if (databaseClient == null) dart.nullFailed(I[54], 221, 37, "databaseClient");
    let finder = opts && 'finder' in opts ? opts.finder : null;
    let client = database_client_impl.getClient(databaseClient);
    return client.inTransaction(core.int, dart.fn(txn => {
      if (txn == null) dart.nullFailed(I[54], 223, 34, "txn");
      return async.async(core.int, function*() {
        return (yield client.getSembastStore($this).txnClear(txn, {finder: finder}))[$length];
      });
    }, T$.SembastTransactionToFutureOfint()));
  };
  store_ref_impl['SembastStoreRefExtension|get#delete'] = function SembastStoreRefExtension$124get$35delete(K, V, $this) {
    if ($this == null) dart.nullFailed(I[54], 221, 15, "#this");
    return dart.fn((databaseClient, opts) => {
      if (databaseClient == null) dart.nullFailed(I[54], 221, 37, "databaseClient");
      let finder = opts && 'finder' in opts ? opts.finder : null;
      return store_ref_impl['SembastStoreRefExtension|delete'](K, V, $this, databaseClient, {finder: finder});
    }, T$.DatabaseClient__ToFutureOfint$1());
  };
  dart.defineLazy(store_ref_impl, {
    /*store_ref_impl.intMapStoreFactory*/get intMapStoreFactory() {
      return new (T$.StoreFactoryBaseOfint$MapOfString$ObjectN()).new();
    },
    /*store_ref_impl.stringMapStoreFactory*/get stringMapStoreFactory() {
      return new (T$.StoreFactoryBaseOfString$MapOfString$ObjectN()).new();
    }
  }, false);
  dart.defineLazy(sembast_impl, {
    /*sembast_impl.dbVersionKey*/get dbVersionKey() {
      return "version";
    },
    /*sembast_impl.dbDembastVersionKey*/get dbDembastVersionKey() {
      return "sembast";
    },
    /*sembast_impl.dbDembastCodecSignatureKey*/get dbDembastCodecSignatureKey() {
      return "codec";
    },
    /*sembast_impl.dbRecordKey*/get dbRecordKey() {
      return "key";
    },
    /*sembast_impl.dbStoreNameKey*/get dbStoreNameKey() {
      return "store";
    },
    /*sembast_impl.dbRecordValueKey*/get dbRecordValueKey() {
      return "value";
    },
    /*sembast_impl.dbRecordDeletedKey*/get dbRecordDeletedKey() {
      return "deleted";
    },
    /*sembast_impl.dbMainStore*/get dbMainStore() {
      return "_main";
    },
    /*sembast_impl.mainStoreRef*/get mainStoreRef() {
      return T$.StoreRefOfObjectN$ObjectN().new("_main");
    },
    /*sembast_impl.jdbRevisionKey*/get jdbRevisionKey() {
      return "revision";
    },
    /*sembast_impl.jdbDeltaMinRevisionKey*/get jdbDeltaMinRevisionKey() {
      return "deltaMinRevision";
    }
  }, false);
  const _is_RecordsRef_default = Symbol('_is_RecordsRef_default');
  records_ref.RecordsRef$ = dart.generic((K, V) => {
    class RecordsRef extends core.Object {}
    (RecordsRef.new = function() {
      ;
    }).prototype = RecordsRef.prototype;
    dart.addTypeTests(RecordsRef);
    RecordsRef.prototype[_is_RecordsRef_default] = true;
    dart.addTypeCaches(RecordsRef);
    dart.setLibraryUri(RecordsRef, I[56]);
    return RecordsRef;
  });
  records_ref.RecordsRef = records_ref.RecordsRef$();
  dart.addTypeTests(records_ref.RecordsRef, _is_RecordsRef_default);
  const _is_StoreRef_default = Symbol('_is_StoreRef_default');
  store_ref.StoreRef$ = dart.generic((K, V) => {
    class StoreRef extends core.Object {
      static new(name) {
        if (name == null) dart.nullFailed(I[57], 25, 27, "name");
        return new (store_ref_impl.SembastStoreRef$(K, V)).new(name);
      }
      static main() {
        return new (store_ref_impl.SembastStoreRef$(K, V)).new("_main");
      }
    }
    (StoreRef[dart.mixinNew] = function() {
    }).prototype = StoreRef.prototype;
    dart.addTypeTests(StoreRef);
    StoreRef.prototype[_is_StoreRef_default] = true;
    dart.addTypeCaches(StoreRef);
    dart.setLibraryUri(StoreRef, I[58]);
    return StoreRef;
  });
  store_ref.StoreRef = store_ref.StoreRef$();
  dart.addTypeTests(store_ref.StoreRef, _is_StoreRef_default);
  const _is_StoreFactory_default = Symbol('_is_StoreFactory_default');
  store_ref.StoreFactory$ = dart.generic((K, V) => {
    class StoreFactory extends core.Object {}
    (StoreFactory.new = function() {
      ;
    }).prototype = StoreFactory.prototype;
    dart.addTypeTests(StoreFactory);
    StoreFactory.prototype[_is_StoreFactory_default] = true;
    dart.addTypeCaches(StoreFactory);
    dart.setLibraryUri(StoreFactory, I[58]);
    return StoreFactory;
  });
  store_ref.StoreFactory = store_ref.StoreFactory$();
  dart.addTypeTests(store_ref.StoreFactory, _is_StoreFactory_default);
  dart.defineLazy(store_ref, {
    /*store_ref.intMapStoreFactory*/get intMapStoreFactory() {
      return new (T$.StoreFactoryBaseOfint$MapOfString$ObjectN()).new();
    },
    /*store_ref.stringMapStoreFactory*/get stringMapStoreFactory() {
      return new (T$.StoreFactoryBaseOfString$MapOfString$ObjectN()).new();
    }
  }, false);
  const _is_RecordRef_default = Symbol('_is_RecordRef_default');
  record_ref.RecordRef$ = dart.generic((K, V) => {
    class RecordRef extends core.Object {}
    (RecordRef.new = function() {
      ;
    }).prototype = RecordRef.prototype;
    dart.addTypeTests(RecordRef);
    RecordRef.prototype[_is_RecordRef_default] = true;
    dart.addTypeCaches(RecordRef);
    dart.setLibraryUri(RecordRef, I[59]);
    return RecordRef;
  });
  record_ref.RecordRef = record_ref.RecordRef$();
  dart.addTypeTests(record_ref.RecordRef, _is_RecordRef_default);
  record_impl.SembastRecord = class SembastRecord extends record_snapshot.RecordSnapshot$(dart.nullable(core.Object), dart.nullable(core.Object)) {};
  (record_impl.SembastRecord.new = function() {
    ;
  }).prototype = record_impl.SembastRecord.prototype;
  dart.addTypeTests(record_impl.SembastRecord);
  dart.addTypeCaches(record_impl.SembastRecord);
  dart.setLibraryUri(record_impl.SembastRecord, I[60]);
  var _toBaseMap = dart.privateName(record_impl, "_toBaseMap");
  record_impl.SembastRecordHelperMixin = class SembastRecordHelperMixin extends core.Object {};
  record_impl.SembastRecordHelperMixin[dart.mixinOn] = Object => {
    class SembastRecordHelperMixin extends Object {
      sembastClone(opts) {
        let t133, t133$;
        let store = opts && 'store' in opts ? opts.store : null;
        let key = opts && 'key' in opts ? opts.key : null;
        let ref = opts && 'ref' in opts ? opts.ref : null;
        let value = opts && 'value' in opts ? opts.value : null;
        let deleted = opts && 'deleted' in opts ? opts.deleted : null;
        if (deleted == null) dart.nullFailed(I[61], 28, 21, "deleted");
        return new record_impl.ImmutableSembastRecord.new((t133 = ref, t133 == null ? this.ref : t133), core.Map.as((t133$ = value, t133$ == null ? this.value : t133$)), {deleted: deleted});
      }
      sembastCloneAsDeleted() {
        return new record_impl.ImmutableSembastRecord.new(this.ref, null, {deleted: true});
      }
      [_toBaseMap]() {
        let map = new (T$.IdentityMapOfString$ObjectN()).new();
        map[$_set]("key", this.key);
        if (this.deleted === true) {
          map[$_set]("deleted", true);
        }
        if (!dart.equals(this.ref.store, sembast_impl.mainStoreRef)) {
          map[$_set]("store", this.ref.store.name);
        }
        return map;
      }
      toDatabaseRowMap() {
        let map = this[_toBaseMap]();
        if (this.value != null && !dart.test(this.deleted)) {
          map[$_set]("value", this.value);
        }
        return map;
      }
      get hashCode() {
        return this.key == null ? 0 : dart.hashCode(this.key);
      }
      _equals(o) {
        if (o == null) return false;
        if (record_impl.SembastRecord.is(o)) {
          return this.key == null ? false : dart.equals(this.key, o.key);
        }
        return false;
      }
    }
    dart.defineExtensionMethods(SembastRecordHelperMixin, ['_equals']);
    dart.defineExtensionAccessors(SembastRecordHelperMixin, ['hashCode']);
    return SembastRecordHelperMixin;
  };
  (record_impl.SembastRecordHelperMixin[dart.mixinNew] = function() {
  }).prototype = record_impl.SembastRecordHelperMixin.prototype;
  dart.addTypeTests(record_impl.SembastRecordHelperMixin);
  dart.addTypeCaches(record_impl.SembastRecordHelperMixin);
  record_impl.SembastRecordHelperMixin[dart.implements] = () => [record_impl.SembastRecord, core.Object];
  dart.setMethodSignature(record_impl.SembastRecordHelperMixin, () => ({
    __proto__: dart.getMethods(record_impl.SembastRecordHelperMixin.__proto__),
    sembastClone: dart.fnType(record_impl.ImmutableSembastRecord, [], {key: dart.dynamic, ref: dart.nullable(record_ref.RecordRef$(dart.nullable(core.Object), dart.nullable(core.Object))), store: dart.nullable(store_impl.SembastStore), value: dart.dynamic}, {deleted: core.bool}),
    sembastCloneAsDeleted: dart.fnType(record_impl.ImmutableSembastRecord, []),
    [_toBaseMap]: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), []),
    toDatabaseRowMap: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [])
  }));
  dart.setLibraryUri(record_impl.SembastRecordHelperMixin, I[60]);
  const _is_SembastRecordValue_default = Symbol('_is_SembastRecordValue_default');
  record_impl.SembastRecordValue$ = dart.generic(V => {
    class SembastRecordValue extends core.Object {
      get rawValue() {
        let t133;
        return dart.test(this[__SembastRecordValue_rawValue_isSet$]) ? (t133 = this[__SembastRecordValue_rawValue$], t133) : dart.throw(new _internal.LateError.fieldNI("rawValue"));
      }
      set rawValue(t133) {
        V.as(t133);
        this[__SembastRecordValue_rawValue_isSet$] = true;
        this[__SembastRecordValue_rawValue$] = t133;
      }
    }
    (SembastRecordValue.new = function() {
      this[__SembastRecordValue_rawValue$] = null;
      this[__SembastRecordValue_rawValue_isSet$] = false;
      ;
    }).prototype = SembastRecordValue.prototype;
    dart.addTypeTests(SembastRecordValue);
    SembastRecordValue.prototype[_is_SembastRecordValue_default] = true;
    dart.addTypeCaches(SembastRecordValue);
    dart.setGetterSignature(SembastRecordValue, () => ({
      __proto__: dart.getGetters(SembastRecordValue.__proto__),
      rawValue: V
    }));
    dart.setSetterSignature(SembastRecordValue, () => ({
      __proto__: dart.getSetters(SembastRecordValue.__proto__),
      rawValue: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(SembastRecordValue, I[60]);
    dart.setFieldSignature(SembastRecordValue, () => ({
      __proto__: dart.getFields(SembastRecordValue.__proto__),
      [__SembastRecordValue_rawValue$]: dart.fieldType(dart.nullable(V)),
      [__SembastRecordValue_rawValue_isSet$]: dart.fieldType(core.bool)
    }));
    return SembastRecordValue;
  });
  record_impl.SembastRecordValue = record_impl.SembastRecordValue$();
  dart.addTypeTests(record_impl.SembastRecordValue, _is_SembastRecordValue_default);
  var _deleted = dart.privateName(record_impl, "SembastRecordMixin._deleted");
  var _deleted$ = dart.privateName(record_impl, "_deleted");
  record_impl.SembastRecordMixin = class SembastRecordMixin extends core.Object {};
  record_impl.SembastRecordMixin[dart.mixinOn] = Object => class SembastRecordMixin extends Object {
    get [_deleted$]() {
      return this[_deleted];
    }
    set [_deleted$](value) {
      this[_deleted] = value;
    }
    get deleted() {
      return this[_deleted$] === true;
    }
    set deleted(deleted) {
      if (deleted == null) dart.nullFailed(I[61], 87, 20, "deleted");
      return this[_deleted$] = deleted;
    }
    set value(value) {
      return this.rawValue = utils.sanitizeValueIfMap(value);
    }
  };
  (record_impl.SembastRecordMixin[dart.mixinNew] = function() {
    this[_deleted] = null;
  }).prototype = record_impl.SembastRecordMixin.prototype;
  dart.addTypeTests(record_impl.SembastRecordMixin);
  dart.addTypeCaches(record_impl.SembastRecordMixin);
  record_impl.SembastRecordMixin[dart.implements] = () => [record_impl.SembastRecord, record_impl.SembastRecordValue, core.Object];
  dart.setGetterSignature(record_impl.SembastRecordMixin, () => ({
    __proto__: dart.getGetters(record_impl.SembastRecordMixin.__proto__),
    deleted: core.bool
  }));
  dart.setSetterSignature(record_impl.SembastRecordMixin, () => ({
    __proto__: dart.getSetters(record_impl.SembastRecordMixin.__proto__),
    deleted: core.bool,
    value: dart.nullable(core.Object)
  }));
  dart.setLibraryUri(record_impl.SembastRecordMixin, I[60]);
  dart.setFieldSignature(record_impl.SembastRecordMixin, () => ({
    __proto__: dart.getFields(record_impl.SembastRecordMixin.__proto__),
    [_deleted$]: dart.fieldType(dart.nullable(core.bool))
  }));
  var _makeRevision = dart.privateName(record_impl, "_makeRevision");
  const value$3 = Symbol("value");
  const Object_SembastRecordMixin$36 = class Object_SembastRecordMixin extends core.Object {};
  (Object_SembastRecordMixin$36.new = function() {
    record_impl.SembastRecordMixin[dart.mixinNew].call(this);
  }).prototype = Object_SembastRecordMixin$36.prototype;
  dart.applyMixin(Object_SembastRecordMixin$36, record_impl.SembastRecordMixin);
  const Object_SembastRecordHelperMixin$36 = class Object_SembastRecordHelperMixin extends Object_SembastRecordMixin$36 {};
  (Object_SembastRecordHelperMixin$36.new = function() {
    Object_SembastRecordHelperMixin$36.__proto__.new.call(this);
  }).prototype = Object_SembastRecordHelperMixin$36.prototype;
  dart.applyMixin(Object_SembastRecordHelperMixin$36, record_impl.SembastRecordHelperMixin);
  const Object_RecordSnapshotMixin$36 = class Object_RecordSnapshotMixin extends Object_SembastRecordHelperMixin$36 {};
  (Object_RecordSnapshotMixin$36.new = function() {
    record_snapshot_impl.RecordSnapshotMixin[dart.mixinNew].call(this);
    Object_RecordSnapshotMixin$36.__proto__.new.call(this);
  }).prototype = Object_RecordSnapshotMixin$36.prototype;
  dart.applyMixin(Object_RecordSnapshotMixin$36, record_snapshot_impl.RecordSnapshotMixin);
  record_impl.ImmutableSembastRecord = class ImmutableSembastRecord extends Object_RecordSnapshotMixin$36 {
    set value(value) {
      dart.throw(new core.StateError.new("Record is immutable. Clone to modify it"));
    }
    get value() {
      return utils.immutableValue(super.value);
    }
    [_makeRevision]() {
      return record_impl.ImmutableSembastRecord._lastRevision = dart.notNull(record_impl.ImmutableSembastRecord._lastRevision) + 1;
    }
    toString() {
      let map = this.toDatabaseRowMap();
      if (this.revision != null) {
        map[$_set]("revision", this.revision);
      }
      return dart.toString(map);
    }
    set [value$3](x) {
      super.value = x;
    }
  };
  (record_impl.ImmutableSembastRecord.fromDatabaseRowMap = function(db, map) {
    if (db == null) dart.nullFailed(I[61], 122, 54, "db");
    if (map == null) dart.nullFailed(I[61], 122, 62, "map");
    record_impl.ImmutableSembastRecord.__proto__.new.call(this);
    let storeName = T$.StringN().as(map[$_get]("store"));
    let storeRef = storeName == null ? sembast_impl.mainStoreRef : T$.StoreRefOfObjectN$ObjectN().new(storeName);
    this.ref = storeRef.record(map[$_get]("key"));
    this[value$3] = utils.sanitizeValueIfMap(map[$_get]("value"));
    this[_deleted$] = dart.equals(map[$_get]("deleted"), true);
    this.revision = this[_makeRevision]();
  }).prototype = record_impl.ImmutableSembastRecord.prototype;
  (record_impl.ImmutableSembastRecord.new = function(ref, value, opts) {
    if (ref == null) dart.nullFailed(I[61], 140, 54, "ref");
    let deleted = opts && 'deleted' in opts ? opts.deleted : false;
    if (deleted == null) dart.nullFailed(I[61], 141, 13, "deleted");
    record_impl.ImmutableSembastRecord.__proto__.new.call(this);
    this.ref = ref;
    this[value$3] = value;
    this[_deleted$] = deleted;
    this.revision = this[_makeRevision]();
  }).prototype = record_impl.ImmutableSembastRecord.prototype;
  dart.addTypeTests(record_impl.ImmutableSembastRecord);
  dart.addTypeCaches(record_impl.ImmutableSembastRecord);
  dart.setMethodSignature(record_impl.ImmutableSembastRecord, () => ({
    __proto__: dart.getMethods(record_impl.ImmutableSembastRecord.__proto__),
    [_makeRevision]: dart.fnType(core.int, [])
  }));
  dart.setGetterSignature(record_impl.ImmutableSembastRecord, () => ({
    __proto__: dart.getGetters(record_impl.ImmutableSembastRecord.__proto__),
    value: dart.nullable(core.Object)
  }));
  dart.setSetterSignature(record_impl.ImmutableSembastRecord, () => ({
    __proto__: dart.getSetters(record_impl.ImmutableSembastRecord.__proto__),
    value: dart.dynamic
  }));
  dart.setLibraryUri(record_impl.ImmutableSembastRecord, I[60]);
  dart.defineExtensionMethods(record_impl.ImmutableSembastRecord, ['toString']);
  dart.defineLazy(record_impl.ImmutableSembastRecord, {
    /*record_impl.ImmutableSembastRecord._lastRevision*/get _lastRevision() {
      return 0;
    },
    set _lastRevision(_) {}
  }, false);
  record_impl.ImmutableSembastRecordJdb = class ImmutableSembastRecordJdb extends record_impl.ImmutableSembastRecord {};
  (record_impl.ImmutableSembastRecordJdb.new = function(ref, value, opts) {
    if (ref == null) dart.nullFailed(I[61], 97, 39, "ref");
    let deleted = opts && 'deleted' in opts ? opts.deleted : false;
    if (deleted == null) dart.nullFailed(I[61], 98, 13, "deleted");
    let revision = opts && 'revision' in opts ? opts.revision : null;
    if (revision == null) dart.nullFailed(I[61], 98, 43, "revision");
    record_impl.ImmutableSembastRecordJdb.__proto__.new.call(this, ref, value, {deleted: deleted});
    this.revision = revision;
  }).prototype = record_impl.ImmutableSembastRecordJdb.prototype;
  dart.addTypeTests(record_impl.ImmutableSembastRecordJdb);
  dart.addTypeCaches(record_impl.ImmutableSembastRecordJdb);
  dart.setLibraryUri(record_impl.ImmutableSembastRecordJdb, I[60]);
  var record$0 = dart.privateName(record_impl, "TxnRecord.record");
  const Object_SembastRecordHelperMixin$36$ = class Object_SembastRecordHelperMixin extends core.Object {};
  (Object_SembastRecordHelperMixin$36$.new = function() {
  }).prototype = Object_SembastRecordHelperMixin$36$.prototype;
  dart.applyMixin(Object_SembastRecordHelperMixin$36$, record_impl.SembastRecordHelperMixin);
  record_impl.TxnRecord = class TxnRecord extends Object_SembastRecordHelperMixin$36$ {
    get record() {
      return this[record$0];
    }
    set record(value) {
      this[record$0] = value;
    }
    _get(field) {
      return this.record._get(dart.nullCheck(field));
    }
    get deleted() {
      return this.record.deleted;
    }
    get key() {
      return this.record.key;
    }
    get value() {
      return this.record.value;
    }
    get ref() {
      return this.record.ref;
    }
    cast(RK, RV) {
      return this.record.cast(RK, RV);
    }
    get nonDeletedRecord() {
      return dart.test(this.deleted) ? null : this.record;
    }
  };
  (record_impl.TxnRecord.new = function(record) {
    if (record == null) dart.nullFailed(I[61], 164, 18, "record");
    this[record$0] = record;
    ;
  }).prototype = record_impl.TxnRecord.prototype;
  dart.addTypeTests(record_impl.TxnRecord);
  dart.addTypeCaches(record_impl.TxnRecord);
  record_impl.TxnRecord[dart.implements] = () => [record_impl.SembastRecord];
  dart.setMethodSignature(record_impl.TxnRecord, () => ({
    __proto__: dart.getMethods(record_impl.TxnRecord.__proto__),
    _get: dart.fnType(dart.dynamic, [dart.nullable(core.String)]),
    cast: dart.gFnType((RK, RV) => [record_snapshot.RecordSnapshot$(RK, RV), []], (RK, RV) => [dart.nullable(core.Object), dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(record_impl.TxnRecord, () => ({
    __proto__: dart.getGetters(record_impl.TxnRecord.__proto__),
    deleted: core.bool,
    key: dart.dynamic,
    value: dart.dynamic,
    ref: record_ref.RecordRef,
    nonDeletedRecord: dart.nullable(record_impl.ImmutableSembastRecord)
  }));
  dart.setLibraryUri(record_impl.TxnRecord, I[60]);
  dart.setFieldSignature(record_impl.TxnRecord, () => ({
    __proto__: dart.getFields(record_impl.TxnRecord.__proto__),
    record: dart.fieldType(record_impl.ImmutableSembastRecord)
  }));
  record_impl.isMapRecord = function isMapRecord(map) {
    if (map == null) dart.nullFailed(I[61], 191, 22, "map");
    let key = map[$_get]("key");
    return key != null;
  };
  record_impl.makeImmutableRecordJdb = function makeImmutableRecordJdb(record) {
    if (record == null) dart.nullFailed(I[61], 198, 28, "record");
    if (record_impl.ImmutableSembastRecordJdb.is(record)) {
      return record;
    }
    return new record_impl.ImmutableSembastRecordJdb.new(record.ref, utils.cloneValue(record.value), {deleted: record.deleted, revision: dart.nullCheck(record.revision)});
  };
  record_impl.makeImmutableRecordSnapshot = function makeImmutableRecordSnapshot(record) {
    if (record_impl.ImmutableSembastRecord.is(record)) {
      return record;
    } else if (record_snapshot_impl.SembastRecordSnapshot.is(record)) {
      return record;
    } else if (record == null) {
      return null;
    }
    return new record_snapshot_impl.SembastRecordSnapshot.new(record.ref, utils.cloneValue(record.value));
  };
  record_impl.immutableListToSnapshots = function immutableListToSnapshots(K, V, records) {
    if (records == null) dart.nullFailed(I[61], 222, 34, "records");
    return records[$map](record_snapshot_impl.SembastRecordSnapshot$(K, V), dart.fn(immutable => {
      if (immutable == null) dart.nullFailed(I[61], 224, 13, "immutable");
      return new (record_snapshot_impl.SembastRecordSnapshot$(K, V)).fromRecord(immutable);
    }, dart.fnType(record_snapshot_impl.SembastRecordSnapshot$(K, V), [record_impl.ImmutableSembastRecord])))[$toList]({growable: false});
  };
  var snapshot = dart.privateName(boundary_impl, "SembastBoundary.snapshot");
  var values$ = dart.privateName(boundary_impl, "SembastBoundary.values");
  var include$ = dart.privateName(boundary_impl, "SembastBoundary.include");
  var _toDebugMap$ = dart.privateName(boundary_impl, "_toDebugMap");
  boundary_impl.SembastBoundary = class SembastBoundary extends core.Object {
    get snapshot() {
      return this[snapshot];
    }
    set snapshot(value) {
      super.snapshot = value;
    }
    get values() {
      return this[values$];
    }
    set values(value) {
      this[values$] = value;
    }
    get include() {
      return this[include$];
    }
    set include(value) {
      this[include$] = value;
    }
    [_toDebugMap$]() {
      let debugMap = new (T$.IdentityMapOfString$ObjectN()).new();
      if (this.values != null) {
        debugMap[$_set]("values", dart.toString(this.values));
      } else if (this.snapshot != null) {
        debugMap[$_set]("snapshot", dart.toString(this.snapshot));
      }
      debugMap[$_set]("include", this.include);
      return debugMap;
    }
    toString() {
      return dart.toString(this[_toDebugMap$]());
    }
  };
  (boundary_impl.SembastBoundary.new = function(opts) {
    let record = opts && 'record' in opts ? opts.record : null;
    let include = opts && 'include' in opts ? opts.include : null;
    let values = opts && 'values' in opts ? opts.values : null;
    this[values$] = values;
    this[include$] = include === true;
    this[snapshot] = record_impl.makeImmutableRecordSnapshot(record);
    ;
  }).prototype = boundary_impl.SembastBoundary.prototype;
  dart.addTypeTests(boundary_impl.SembastBoundary);
  dart.addTypeCaches(boundary_impl.SembastBoundary);
  boundary_impl.SembastBoundary[dart.implements] = () => [boundary.Boundary];
  dart.setMethodSignature(boundary_impl.SembastBoundary, () => ({
    __proto__: dart.getMethods(boundary_impl.SembastBoundary.__proto__),
    [_toDebugMap$]: dart.fnType(core.Map$(core.String, dart.nullable(core.Object)), [])
  }));
  dart.setLibraryUri(boundary_impl.SembastBoundary, I[62]);
  dart.setFieldSignature(boundary_impl.SembastBoundary, () => ({
    __proto__: dart.getFields(boundary_impl.SembastBoundary.__proto__),
    snapshot: dart.finalFieldType(dart.nullable(record_snapshot.RecordSnapshot)),
    values: dart.fieldType(dart.nullable(core.List$(dart.nullable(core.Object)))),
    include: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(boundary_impl.SembastBoundary, ['toString']);
  boundary.Boundary = class Boundary extends core.Object {
    static new(opts) {
      let record = opts && 'record' in opts ? opts.record : null;
      let include = opts && 'include' in opts ? opts.include : null;
      let values = opts && 'values' in opts ? opts.values : null;
      return new boundary_impl.SembastBoundary.new({record: record, include: include, values: values});
    }
  };
  (boundary.Boundary[dart.mixinNew] = function() {
  }).prototype = boundary.Boundary.prototype;
  dart.addTypeTests(boundary.Boundary);
  dart.addTypeCaches(boundary.Boundary);
  dart.setLibraryUri(boundary.Boundary, I[63]);
  dart.trackLibraries("packages/sembast/src/sembast_codec.dart", {
    "package:sembast/src/sembast_codec.dart": sembast_codec,
    "package:sembast/src/api/database.dart": database,
    "package:sembast/src/api/codec.dart": codec,
    "package:sembast/src/records_ref_impl.dart": records_ref_impl,
    "package:sembast/src/record_ref_impl.dart": record_ref_impl,
    "package:sembast/src/sembast_codec_impl.dart": sembast_codec_impl,
    "package:sembast/src/query_ref_impl.dart": query_ref_impl,
    "package:sembast/src/api/query_ref.dart": query_ref,
    "package:sembast/src/listener.dart": listener,
    "package:sembast/src/database_content.dart": database_content,
    "package:sembast/src/meta.dart": meta$,
    "package:sembast/src/storage.dart": storage,
    "package:sembast/src/sembast_jdb.dart": sembast_jdb,
    "package:sembast/src/json_encodable_codec.dart": json_encodable_codec,
    "package:sembast/src/jdb.dart": jdb,
    "package:sembast/src/api/field.dart": field$,
    "package:sembast/src/api/v2/database.dart": database$,
    "package:sembast/src/api/v2/sembast.dart": sembast,
    "package:sembast/src/api/v2/factory.dart": factory,
    "package:sembast/src/api/factory.dart": factory$,
    "package:sembast/src/database_factory_mixin.dart": database_factory_mixin,
    "package:sembast/src/api/protected/jdb.dart": jdb$,
    "package:sembast/src/database_impl.dart": database_impl,
    "package:sembast/src/database_client_impl.dart": database_client_impl,
    "package:sembast/src/transaction_impl.dart": transaction_impl,
    "package:sembast/src/store_impl.dart": store_impl,
    "package:sembast/src/finder_impl.dart": finder_impl,
    "package:sembast/src/sort_order_impl.dart": sort_order_impl,
    "package:sembast/src/api/sort_order.dart": sort_order,
    "package:sembast/src/utils.dart": utils,
    "package:sembast/src/record_snapshot_impl.dart": record_snapshot_impl,
    "package:sembast/src/api/record_snapshot.dart": record_snapshot,
    "package:sembast/src/filter_impl.dart": filter_impl,
    "package:sembast/src/api/filter.dart": filter,
    "package:sembast/src/api/finder.dart": finder,
    "package:sembast/src/store_ref_impl.dart": store_ref_impl,
    "package:sembast/src/sembast_impl.dart": sembast_impl,
    "package:sembast/src/api/records_ref.dart": records_ref,
    "package:sembast/src/api/store_ref.dart": store_ref,
    "package:sembast/src/api/record_ref.dart": record_ref,
    "package:sembast/src/record_impl.dart": record_impl,
    "package:sembast/src/boundary_impl.dart": boundary_impl,
    "package:sembast/src/api/boundary.dart": boundary,
    "package:sembast/src/api/sembast.dart": sembast$,
    "package:sembast/sembast.dart": sembast$0
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["sembast_codec.dart","api/codec.dart","records_ref_impl.dart","record_ref_impl.dart","sembast_codec_impl.dart","query_ref_impl.dart","api/query_ref.dart","listener.dart","database_content.dart","meta.dart","storage.dart","sembast_jdb.dart","database_factory_mixin.dart","json_encodable_codec.dart","jdb.dart","api/field.dart","api/v2/database.dart","api/v2/factory.dart","database_impl.dart","database_client_impl.dart","transaction_impl.dart","store_impl.dart","finder_impl.dart","sort_order_impl.dart","api/sort_order.dart","utils.dart","record_snapshot_impl.dart","api/record_snapshot.dart","filter_impl.dart","api/filter.dart","api/finder.dart","store_ref_impl.dart","sembast_impl.dart","api/records_ref.dart","api/store_ref.dart","api/record_ref.dart","record_impl.dart","boundary_impl.dart","api/boundary.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../packages/sembast/src/sembast_codec.dart.lib.js"}');
  // Exports:
  return {
    src__sembast_codec: sembast_codec,
    src__api__database: database,
    src__api__codec: codec,
    src__records_ref_impl: records_ref_impl,
    src__record_ref_impl: record_ref_impl,
    src__sembast_codec_impl: sembast_codec_impl,
    src__query_ref_impl: query_ref_impl,
    src__api__query_ref: query_ref,
    src__listener: listener,
    src__database_content: database_content,
    src__meta: meta$,
    src__storage: storage,
    src__sembast_jdb: sembast_jdb,
    src__json_encodable_codec: json_encodable_codec,
    src__jdb: jdb,
    src__api__field: field$,
    src__api__v2__database: database$,
    src__api__v2__sembast: sembast,
    src__api__v2__factory: factory,
    src__api__factory: factory$,
    src__database_factory_mixin: database_factory_mixin,
    src__api__protected__jdb: jdb$,
    src__database_impl: database_impl,
    src__database_client_impl: database_client_impl,
    src__transaction_impl: transaction_impl,
    src__store_impl: store_impl,
    src__finder_impl: finder_impl,
    src__sort_order_impl: sort_order_impl,
    src__api__sort_order: sort_order,
    src__utils: utils,
    src__record_snapshot_impl: record_snapshot_impl,
    src__api__record_snapshot: record_snapshot,
    src__filter_impl: filter_impl,
    src__api__filter: filter,
    src__api__finder: finder,
    src__store_ref_impl: store_ref_impl,
    src__sembast_impl: sembast_impl,
    src__api__records_ref: records_ref,
    src__api__store_ref: store_ref,
    src__api__record_ref: record_ref,
    src__record_impl: record_impl,
    src__boundary_impl: boundary_impl,
    src__api__boundary: boundary,
    src__api__sembast: sembast$,
    sembast: sembast$0
  };
}));

//# sourceMappingURL=sembast_codec.dart.lib.js.map
