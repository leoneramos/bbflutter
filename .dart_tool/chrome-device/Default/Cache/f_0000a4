define(['dart_sdk', 'packages/idb_shim/src/common/common_key_range.dart', 'packages/idb_shim/src/common/common_exception.dart', 'packages/sembast/src/api/v2/transaction.dart', 'packages/idb_shim/src/database_exception.dart', 'packages/idb_shim/src/common/common_transaction.dart', 'packages/idb_shim/src/common/common_meta.dart', 'packages/sembast/src/sembast_codec.dart', 'packages/idb_shim/src/sembast/sembast_filter.dart', 'packages/idb_shim/src/common/common_validation.dart', 'packages/idb_shim/src/sembast/sembast_value.dart', 'packages/sembast/src/api/client.dart', 'packages/idb_shim/src/common/common_database.dart', 'packages/path/src/path_set.dart', 'packages/sembast/src/memory/database_factory_memory.dart'], (function load__packages__idb_shim__src__sembast__sembast_transaction_dart(dart_sdk, packages__idb_shim__src__common__common_key_range$46dart, packages__idb_shim__src__common__common_exception$46dart, packages__sembast__src__api__v2__transaction$46dart, packages__idb_shim__src__database_exception$46dart, packages__idb_shim__src__common__common_transaction$46dart, packages__idb_shim__src__common__common_meta$46dart, packages__sembast__src__sembast_codec$46dart, packages__idb_shim__src__sembast__sembast_filter$46dart, packages__idb_shim__src__common__common_validation$46dart, packages__idb_shim__src__sembast__sembast_value$46dart, packages__sembast__src__api__client$46dart, packages__idb_shim__src__common__common_database$46dart, packages__path__src__path_set$46dart, packages__sembast__src__memory__database_factory_memory$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const _internal = dart_sdk._internal;
  const collection = dart_sdk.collection;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const idb = packages__idb_shim__src__common__common_key_range$46dart.idb;
  const common_value = packages__idb_shim__src__common__common_key_range$46dart.src__common__common_value;
  const error = packages__idb_shim__src__common__common_key_range$46dart.src__client__error;
  const common_factory = packages__idb_shim__src__common__common_key_range$46dart.src__common__common_factory;
  const common_exception = packages__idb_shim__src__common__common_exception$46dart.src__common__common_exception;
  const transaction = packages__sembast__src__api__v2__transaction$46dart.src__api__v2__transaction;
  const database_exception = packages__idb_shim__src__database_exception$46dart.src__database_exception;
  const common_transaction = packages__idb_shim__src__common__common_transaction$46dart.src__common__common_transaction;
  const common_meta = packages__idb_shim__src__common__common_meta$46dart.src__common__common_meta;
  const database = packages__sembast__src__sembast_codec$46dart.src__api__v2__database;
  const store_ref_impl = packages__sembast__src__sembast_codec$46dart.src__store_ref_impl;
  const finder$ = packages__sembast__src__sembast_codec$46dart.src__api__finder;
  const record_snapshot = packages__sembast__src__sembast_codec$46dart.src__api__record_snapshot;
  const filter = packages__sembast__src__sembast_codec$46dart.src__api__filter;
  const sort_order = packages__sembast__src__sembast_codec$46dart.src__api__sort_order;
  const record_ref_impl = packages__sembast__src__sembast_codec$46dart.src__record_ref_impl;
  const store_ref = packages__sembast__src__sembast_codec$46dart.src__api__store_ref;
  const field = packages__sembast__src__sembast_codec$46dart.src__api__field;
  const records_ref_impl = packages__sembast__src__sembast_codec$46dart.src__records_ref_impl;
  const factory = packages__sembast__src__sembast_codec$46dart.src__api__v2__factory;
  const sembast_filter = packages__idb_shim__src__sembast__sembast_filter$46dart.src__sembast__sembast_filter;
  const common_validation = packages__idb_shim__src__common__common_validation$46dart.src__common__common_validation;
  const sembast_value = packages__idb_shim__src__sembast__sembast_value$46dart.src__sembast__sembast_value;
  const client = packages__sembast__src__api__client$46dart.src__api__client;
  const common_database = packages__idb_shim__src__common__common_database$46dart.src__common__common_database;
  const path = packages__path__src__path_set$46dart.path;
  const sembast_memory = packages__sembast__src__memory__database_factory_memory$46dart.src__api__v2__sembast_memory;
  var sembast_transaction = Object.create(dart.library);
  var sembast_index = Object.create(dart.library);
  var sembast_cursor = Object.create(dart.library);
  var sembast_object_store = Object.create(dart.library);
  var sembast_database = Object.create(dart.library);
  var idb_client_sembast = Object.create(dart.library);
  var sembast_factory = Object.create(dart.library);
  var $_get = dartx._get;
  var $length = dartx.length;
  var $add = dartx.add;
  var $addAll = dartx.addAll;
  var $toString = dartx.toString;
  var $isNotEmpty = dartx.isNotEmpty;
  var $first = dartx.first;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $removeAt = dartx.removeAt;
  var $_set = dartx._set;
  var $sort = dartx.sort;
  var $forEach = dartx.forEach;
  var $cast = dartx.cast;
  var $noSuchMethod = dartx.noSuchMethod;
  dart._checkModuleNullSafetyMode(false);
  var T$ = {
    CompleterOfDatabase: () => (T$.CompleterOfDatabase = dart.constFn(async.Completer$(idb.Database)))(),
    JSArrayOfCompleter: () => (T$.JSArrayOfCompleter = dart.constFn(_interceptors.JSArray$(async.Completer)))(),
    JSArrayOfFunction: () => (T$.JSArrayOfFunction = dart.constFn(_interceptors.JSArray$(core.Function)))(),
    JSArrayOfFuture: () => (T$.JSArrayOfFuture = dart.constFn(_interceptors.JSArray$(async.Future)))(),
    FutureOfNull: () => (T$.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    voidToFutureOfNull: () => (T$.voidToFutureOfNull = dart.constFn(dart.fnType(T$.FutureOfNull(), [dart.void])))(),
    VoidToFutureOr: () => (T$.VoidToFutureOr = dart.constFn(dart.fnType(dart.dynamic, [])))(),
    VoidToFutureOfNull: () => (T$.VoidToFutureOfNull = dart.constFn(dart.fnType(T$.FutureOfNull(), [])))(),
    dynamicToNull: () => (T$.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    ObjectAndStackTraceToNull: () => (T$.ObjectAndStackTraceToNull = dart.constFn(dart.fnType(core.Null, [core.Object, core.StackTrace])))(),
    dynamicToFuture: () => (T$.dynamicToFuture = dart.constFn(dart.fnType(async.Future, [dart.dynamic])))(),
    VoidToFuture: () => (T$.VoidToFuture = dart.constFn(dart.fnType(async.Future, [])))(),
    TransactionToFuture: () => (T$.TransactionToFuture = dart.constFn(dart.fnType(async.Future, [transaction.Transaction])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectToNull: () => (T$.ObjectToNull = dart.constFn(dart.fnType(core.Null, [core.Object])))(),
    dynamicToFutureOfNull: () => (T$.dynamicToFutureOfNull = dart.constFn(dart.fnType(T$.FutureOfNull(), [dart.dynamic])))(),
    FutureOfint: () => (T$.FutureOfint = dart.constFn(async.Future$(core.int)))(),
    VoidToFutureOfint: () => (T$.VoidToFutureOfint = dart.constFn(dart.fnType(T$.FutureOfint(), [])))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    RecordSnapshotOfObject$Object: () => (T$.RecordSnapshotOfObject$Object = dart.constFn(record_snapshot.RecordSnapshot$(core.Object, core.Object)))(),
    ListOfRecordSnapshotOfObject$Object: () => (T$.ListOfRecordSnapshotOfObject$Object = dart.constFn(core.List$(T$.RecordSnapshotOfObject$Object())))(),
    ListOfRecordSnapshotOfObject$ObjectToObjectN: () => (T$.ListOfRecordSnapshotOfObject$ObjectToObjectN = dart.constFn(dart.fnType(T$.ObjectN(), [T$.ListOfRecordSnapshotOfObject$Object()])))(),
    ListOfObject: () => (T$.ListOfObject = dart.constFn(core.List$(core.Object)))(),
    RecordSnapshotOfObject$ObjectToObject: () => (T$.RecordSnapshotOfObject$ObjectToObject = dart.constFn(dart.fnType(core.Object, [T$.RecordSnapshotOfObject$Object()])))(),
    FutureOfListOfObject: () => (T$.FutureOfListOfObject = dart.constFn(async.Future$(T$.ListOfObject())))(),
    VoidToFutureOfListOfObject: () => (T$.VoidToFutureOfListOfObject = dart.constFn(dart.fnType(T$.FutureOfListOfObject(), [])))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    JSArrayOfIndexRecordSnapshotSembast: () => (T$.JSArrayOfIndexRecordSnapshotSembast = dart.constFn(_interceptors.JSArray$(sembast_cursor.IndexRecordSnapshotSembast)))(),
    MapN: () => (T$.MapN = dart.constFn(dart.nullable(core.Map)))(),
    IndexRecordSnapshotSembastAndIndexRecordSnapshotSembastToint: () => (T$.IndexRecordSnapshotSembastAndIndexRecordSnapshotSembastToint = dart.constFn(dart.fnType(core.int, [sembast_cursor.IndexRecordSnapshotSembast, sembast_cursor.IndexRecordSnapshotSembast])))(),
    RecordSnapshotOfObject$ObjectToIndexRecordSnapshotSembast: () => (T$.RecordSnapshotOfObject$ObjectToIndexRecordSnapshotSembast = dart.constFn(dart.fnType(sembast_cursor.IndexRecordSnapshotSembast, [T$.RecordSnapshotOfObject$Object()])))(),
    FutureN: () => (T$.FutureN = dart.constFn(dart.nullable(async.Future)))(),
    dynamicToFutureN: () => (T$.dynamicToFutureN = dart.constFn(dart.fnType(T$.FutureN(), [dart.dynamic])))(),
    RecordSnapshotOfObject$ObjectToRecordSnapshotSembast: () => (T$.RecordSnapshotOfObject$ObjectToRecordSnapshotSembast = dart.constFn(dart.fnType(sembast_cursor.RecordSnapshotSembast, [T$.RecordSnapshotOfObject$Object()])))(),
    JSArrayOfSortOrder: () => (T$.JSArrayOfSortOrder = dart.constFn(_interceptors.JSArray$(sort_order.SortOrder)))(),
    ListOfSortOrder: () => (T$.ListOfSortOrder = dart.constFn(core.List$(sort_order.SortOrder)))(),
    intToSortOrder: () => (T$.intToSortOrder = dart.constFn(dart.fnType(sort_order.SortOrder, [core.int])))(),
    StoreRefOfObject$Object: () => (T$.StoreRefOfObject$Object = dart.constFn(store_ref.StoreRef$(core.Object, core.Object)))(),
    RecordSnapshotNOfObject$Object: () => (T$.RecordSnapshotNOfObject$Object = dart.constFn(dart.nullable(T$.RecordSnapshotOfObject$Object())))(),
    RecordSnapshotNOfObject$ObjectToNull: () => (T$.RecordSnapshotNOfObject$ObjectToNull = dart.constFn(dart.fnType(core.Null, [T$.RecordSnapshotNOfObject$Object()])))(),
    IdbIndexMetaTovoid: () => (T$.IdbIndexMetaTovoid = dart.constFn(dart.fnType(dart.void, [common_meta.IdbIndexMeta])))(),
    ObjectToObject: () => (T$.ObjectToObject = dart.constFn(dart.fnType(core.Object, [core.Object])))(),
    FutureOfObject: () => (T$.FutureOfObject = dart.constFn(async.Future$(core.Object)))(),
    ListToFutureOfObject: () => (T$.ListToFutureOfObject = dart.constFn(dart.fnType(T$.FutureOfObject(), [core.List])))(),
    ObjectNToFutureOfObject: () => (T$.ObjectNToFutureOfObject = dart.constFn(dart.fnType(T$.FutureOfObject(), [T$.ObjectN()])))(),
    VoidToFutureOfObject: () => (T$.VoidToFutureOfObject = dart.constFn(dart.fnType(T$.FutureOfObject(), [])))(),
    intToNull: () => (T$.intToNull = dart.constFn(dart.fnType(core.Null, [core.int])))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    VoidToFutureOfvoid: () => (T$.VoidToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [])))(),
    RecordSnapshotNOfObject$ObjectToObjectN: () => (T$.RecordSnapshotNOfObject$ObjectToObjectN = dart.constFn(dart.fnType(T$.ObjectN(), [T$.RecordSnapshotNOfObject$Object()])))(),
    FutureOfObjectN: () => (T$.FutureOfObjectN = dart.constFn(async.Future$(T$.ObjectN())))(),
    VoidToFutureOfObjectN: () => (T$.VoidToFutureOfObjectN = dart.constFn(dart.fnType(T$.FutureOfObjectN(), [])))(),
    StoreRefOfString$ObjectN: () => (T$.StoreRefOfString$ObjectN = dart.constFn(store_ref.StoreRef$(core.String, T$.ObjectN())))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    StringTovoid: () => (T$.StringTovoid = dart.constFn(dart.fnType(dart.void, [core.String])))(),
    ListOfIdbObjectStoreMeta: () => (T$.ListOfIdbObjectStoreMeta = dart.constFn(core.List$(common_meta.IdbObjectStoreMeta)))(),
    JSArrayOfIdbObjectStoreMeta: () => (T$.JSArrayOfIdbObjectStoreMeta = dart.constFn(_interceptors.JSArray$(common_meta.IdbObjectStoreMeta)))(),
    RecordSnapshotOfString$ObjectN: () => (T$.RecordSnapshotOfString$ObjectN = dart.constFn(record_snapshot.RecordSnapshot$(core.String, T$.ObjectN())))(),
    RecordSnapshotNOfString$ObjectN: () => (T$.RecordSnapshotNOfString$ObjectN = dart.constFn(dart.nullable(T$.RecordSnapshotOfString$ObjectN())))(),
    RecordSnapshotNOfString$ObjectNTovoid: () => (T$.RecordSnapshotNOfString$ObjectNTovoid = dart.constFn(dart.fnType(dart.void, [T$.RecordSnapshotNOfString$ObjectN()])))(),
    ListOfRecordSnapshotNOfString$ObjectN: () => (T$.ListOfRecordSnapshotNOfString$ObjectN = dart.constFn(core.List$(T$.RecordSnapshotNOfString$ObjectN())))(),
    ListOfRecordSnapshotNOfString$ObjectNToListOfIdbObjectStoreMeta: () => (T$.ListOfRecordSnapshotNOfString$ObjectNToListOfIdbObjectStoreMeta = dart.constFn(dart.fnType(T$.ListOfIdbObjectStoreMeta(), [T$.ListOfRecordSnapshotNOfString$ObjectN()])))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))(),
    IdbObjectStoreMetaTovoid: () => (T$.IdbObjectStoreMetaTovoid = dart.constFn(dart.fnType(dart.void, [common_meta.IdbObjectStoreMeta])))(),
    ListOfIdbObjectStoreMetaToNull: () => (T$.ListOfIdbObjectStoreMetaToNull = dart.constFn(dart.fnType(core.Null, [T$.ListOfIdbObjectStoreMeta()])))(),
    TransactionToFutureOfint: () => (T$.TransactionToFutureOfint = dart.constFn(dart.fnType(T$.FutureOfint(), [transaction.Transaction])))(),
    VoidToint: () => (T$.VoidToint = dart.constFn(dart.fnType(core.int, [])))(),
    intTodynamic: () => (T$.intTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.int])))(),
    DatabaseAndintAndintToNull: () => (T$.DatabaseAndintAndintToNull = dart.constFn(dart.fnType(core.Null, [database.Database, core.int, core.int])))(),
    SetOfIdbObjectStoreMeta: () => (T$.SetOfIdbObjectStoreMeta = dart.constFn(core.Set$(common_meta.IdbObjectStoreMeta)))(),
    VoidToSetOfIdbObjectStoreMeta: () => (T$.VoidToSetOfIdbObjectStoreMeta = dart.constFn(dart.fnType(T$.SetOfIdbObjectStoreMeta(), [])))(),
    SetOfIdbObjectStoreMetaTodynamic: () => (T$.SetOfIdbObjectStoreMetaTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.SetOfIdbObjectStoreMeta()])))(),
    LinkedHashSetOfIdbObjectStoreMeta: () => (T$.LinkedHashSetOfIdbObjectStoreMeta = dart.constFn(collection.LinkedHashSet$(common_meta.IdbObjectStoreMeta)))(),
    TransactionToFutureOfNull: () => (T$.TransactionToFutureOfNull = dart.constFn(dart.fnType(T$.FutureOfNull(), [transaction.Transaction])))(),
    DatabaseN: () => (T$.DatabaseN = dart.constFn(dart.nullable(database.Database)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T$);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 0
      });
    },
    get C1() {
      return C[1] = dart.const(new _js_helper.PrivateSymbol.new('_factory', _factory));
    }
  }, false);
  var C = Array(2).fill(void 0);
  var I = [
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/idb_shim-2.0.0+2/lib/src/sembast/sembast_transaction.dart",
    "package:idb_shim/src/sembast/sembast_transaction.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/idb_shim-2.0.0+2/lib/src/sembast/sembast_index.dart",
    "package:idb_shim/src/sembast/sembast_index.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/idb_shim-2.0.0+2/lib/src/sembast/sembast_cursor.dart",
    "package:idb_shim/src/sembast/sembast_cursor.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/idb_shim-2.0.0+2/lib/src/sembast/sembast_object_store.dart",
    "package:idb_shim/src/sembast/sembast_object_store.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/idb_shim-2.0.0+2/lib/src/sembast/sembast_database.dart",
    "package:idb_shim/src/sembast/sembast_database.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/idb_shim-2.0.0+2/lib/idb_client_sembast.dart",
    "package:idb_shim/idb_client_sembast.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/idb_shim-2.0.0+2/lib/src/sembast/sembast_factory.dart",
    "package:idb_shim/src/sembast/sembast_factory.dart"
  ];
  var sdbTransaction = dart.privateName(sembast_transaction, "TransactionSembast.sdbTransaction");
  var meta$ = dart.privateName(sembast_transaction, "TransactionSembast.meta");
  var _debugId = dart.privateName(sembast_transaction, "_debugId");
  var _index = dart.privateName(sembast_transaction, "_index");
  var _inactive = dart.privateName(sembast_transaction, "_inactive");
  var _aborted = dart.privateName(sembast_transaction, "_aborted");
  var _endException = dart.privateName(sembast_transaction, "_endException");
  var _completedCompleter = dart.privateName(sembast_transaction, "_completedCompleter");
  var _lazyExecution = dart.privateName(sembast_transaction, "_lazyExecution");
  var _transactionCompleter = dart.privateName(sembast_transaction, "_transactionCompleter");
  var _completers = dart.privateName(sembast_transaction, "_completers");
  var _actions = dart.privateName(sembast_transaction, "_actions");
  var _futures = dart.privateName(sembast_transaction, "_futures");
  var _completed = dart.privateName(sembast_transaction, "_completed");
  var _complete = dart.privateName(sembast_transaction, "_complete");
  var _completeError = dart.privateName(sembast_transaction, "_completeError");
  var _execute = dart.privateName(sembast_transaction, "_execute");
  var _next = dart.privateName(sembast_transaction, "_next");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  var _enqueue = dart.privateName(sembast_transaction, "_enqueue");
  const IdbTransactionBase_TransactionWithMetaMixin$36 = class IdbTransactionBase_TransactionWithMetaMixin extends common_transaction.IdbTransactionBase {};
  (IdbTransactionBase_TransactionWithMetaMixin$36.new = function(database) {
    IdbTransactionBase_TransactionWithMetaMixin$36.__proto__.new.call(this, database);
  }).prototype = IdbTransactionBase_TransactionWithMetaMixin$36.prototype;
  dart.applyMixin(IdbTransactionBase_TransactionWithMetaMixin$36, common_meta.TransactionWithMetaMixin);
  sembast_transaction.TransactionSembast = class TransactionSembast extends IdbTransactionBase_TransactionWithMetaMixin$36 {
    get sdbTransaction() {
      return this[sdbTransaction];
    }
    set sdbTransaction(value) {
      this[sdbTransaction] = value;
    }
    get meta() {
      return this[meta$];
    }
    set meta(value) {
      super.meta = value;
    }
    get database() {
      return sembast_database.DatabaseSembast.as(super.database);
    }
    set database(value) {
      super.database = value;
    }
    get sdbDatabase() {
      return dart.nullCheck(this.database.db);
    }
    [_complete]() {
      if (!dart.test(this[_completedCompleter].isCompleted)) {
        if (dart.test(this[_aborted])) {
          this[_completeError](common_exception.newAbortException());
        } else {
          this[_completedCompleter].complete(this.database);
        }
      }
    }
    [_completeError](e, st = null) {
      if (e == null) dart.nullFailed(I[0], 64, 30, "e");
      if (!dart.test(this[_completedCompleter].isCompleted)) {
        this[_completedCompleter].completeError(e, st);
      }
    }
    [_execute](i) {
      if (i == null) dart.nullFailed(I[0], 70, 23, "i");
      if (dart.test(sembast_transaction._debugTransaction)) {
        core.print("exec " + dart.str(i));
      }
      let completer = this[_completers][$_get](i);
      let action = T$.VoidToFutureOr().as(this[_actions][$_get](i));
      if (dart.test(sembast_transaction.newTransaction)) {
        return dart.fn(() => async.async(core.Null, function*() {
          try {
            let result = action();
            if (async.Future.is(result)) {
              result = (yield result);
            }
            if (dart.test(sembast_transaction._debugTransaction)) {
              core.print("done " + dart.str(i));
            }
            completer.complete(result);
          } catch (e$) {
            let e = dart.getThrown(e$);
            let st = dart.stackTrace(e$);
            if (core.Object.is(e)) {
              if (dart.test(sembast_transaction._debugTransaction)) {
                core.print("err " + dart.str(i) + " " + dart.str(e));
              }
              completer.completeError(e, st);
            } else
              throw e$;
          }
        }), T$.VoidToFutureOfNull())();
      } else {
        return async.Future.sync(action).then(core.Null, dart.fn(result => {
          if (dart.test(sembast_transaction._debugTransaction)) {
            core.print("done " + dart.str(i));
          }
          completer.complete(result);
        }, T$.dynamicToNull())).catchError(dart.fn((e, st) => {
          if (e == null) dart.nullFailed(I[0], 104, 29, "e");
          if (st == null) dart.nullFailed(I[0], 104, 43, "st");
          if (dart.test(sembast_transaction._debugTransaction)) {
            core.print("err " + dart.str(i) + " " + dart.str(e));
          }
          completer.completeError(e, st);
        }, T$.ObjectAndStackTraceToNull()));
      }
    }
    [_next]() {
      let t2;
      if (dart.test(this[_aborted])) {
        if (dart.test(sembast_transaction._debugTransaction)) {
          core.print("throwing abort exception");
        }
        dart.throw(common_exception.newAbortException("Transaction aborted"));
      }
      if (dart.notNull(this[_index]) < dart.notNull(this[_actions][$length])) {
        return this[_execute]((t2 = this[_index], this[_index] = dart.notNull(t2) + 1, t2)).then(dart.dynamic, dart.fn(_ => this[_next](), T$.dynamicToFuture()));
      } else {
        if (dart.test(sembast_transaction._debugTransaction)) {
          core.print("transaction done?");
        }
        const _checkNextAction = () => {
          if (dart.notNull(this[_index]) < dart.notNull(this[_actions][$length])) {
            return this[_next]();
          }
          if (dart.test(sembast_transaction._debugTransaction)) {
            core.print("transaction done");
          }
          this[_inactive] = true;
          return async.Future.value(null);
        };
        dart.fn(_checkNextAction, T$.VoidToFuture());
        if (dart.test(sembast_transaction._transactionLazyMode)) {
          return async.Future.delayed(C[0] || CT.C0, _checkNextAction);
        } else {
          return _checkNextAction();
        }
      }
    }
    execute(T, action) {
      if (action == null) dart.nullFailed(I[0], 171, 47, "action");
      let actionFuture = this[_enqueue](T, action);
      this[_futures][$add](actionFuture);
      if (this[_lazyExecution] == null) {
        const _sdbAction = () => {
          return this.sdbDatabase.transaction(dart.dynamic, dart.fn(txn => {
            if (txn == null) dart.nullFailed(I[0], 184, 41, "txn");
            return async.async(dart.dynamic, (function*() {
              this.sdbTransaction = txn;
              let result = (yield this[_next]());
              if (this[_endException] != null) {
                dart.throw(dart.nullCheck(this[_endException]));
              }
              return result;
            }).bind(this));
          }, T$.TransactionToFuture())).whenComplete(dart.fn(() => {
            if (!dart.test(this[_transactionCompleter].isCompleted)) {
              this[_transactionCompleter].complete();
            }
            if (dart.test(sembast_transaction._debugTransaction)) {
              core.print("txn end of sembast transaction");
            }
          }, T$.VoidToNull())).catchError(dart.fn(e => {
            if (e == null) dart.nullFailed(I[0], 204, 31, "e");
            if (!dart.test(this[_transactionCompleter].isCompleted)) {
              this[_transactionCompleter].completeError(e);
            }
          }, T$.ObjectToNull()));
        };
        dart.fn(_sdbAction, T$.VoidToFuture());
        if (dart.test(sembast_transaction._transactionLazyMode)) {
          this[_lazyExecution] = async.Future.microtask(_sdbAction);
        } else {
          this[_lazyExecution] = async.Future.sync(_sdbAction);
        }
      }
      return actionFuture;
    }
    [_enqueue](T, action) {
      if (action == null) dart.nullFailed(I[0], 226, 48, "action");
      if (dart.test(sembast_transaction._debugTransaction)) {
        core.print("enqueing");
      }
      if (dart.test(this[_inactive])) {
        return async.Future$(T).error(new idb.DatabaseError.new("TransactionInactiveError"));
      }
      let completer = async.Completer$(T).sync();
      this[_completers][$add](completer);
      this[_actions][$add](action);
      return completer.future.then(T, dart.fn(result => result, dart.fnType(T, [T])));
    }
    get [_completed]() {
      return async.async(dart.void, (function* _completed() {
        try {
          if (this[_lazyExecution] == null) {
            if (dart.test(sembast_transaction._debugTransaction)) {
              core.print("no lazy executor " + dart.str(this[_debugId]) + "...");
            }
            this[_inactive] = true;
          } else {
            if (dart.test(sembast_transaction._debugTransaction)) {
              core.print("lazy executor created " + dart.str(this[_debugId]) + "...");
            }
            yield dart.nullCheck(this[_lazyExecution]).then(core.Null, dart.fn(_ => async.async(core.Null, (function*() {
              try {
                yield async.Future.wait(dart.dynamic, (() => {
                  let t2 = T$.JSArrayOfFuture().of([this[_transactionCompleter].future]);
                  t2[$addAll](this[_futures]);
                  return t2;
                })());
              } catch (e$) {
                let e = dart.getThrown(e$);
                if (core.Object.is(e)) {
                  if (dart.test(sembast_transaction._debugTransaction)) {
                    core.print("Handling transaction error " + dart.str(e));
                  }
                  this[_endException] = new database_exception.DatabaseException.new(dart.toString(e));
                } else
                  throw e$;
              }
            }).bind(this)), T$.dynamicToFutureOfNull()));
          }
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            if (dart.test(sembast_transaction._debugTransaction)) {
              core.print("Catch _completed exception " + dart.str(e));
            }
            dart.rethrow(e$);
          } else
            throw e$;
        }
      }).bind(this));
    }
    get completed() {
      return async.async(idb.Database, (function* completed() {
        yield async.Future.value();
        try {
          yield this[_completed];
        } catch (e) {
          let _ = dart.getThrown(e);
          if (core.Object.is(_)) {
          } else
            throw e;
        }
        return this[_completedCompleter].future;
      }).bind(this));
    }
    objectStore(name) {
      if (name == null) dart.nullFailed(I[0], 386, 34, "name");
      dart.nullCheck(this.meta).checkObjectStore(name);
      return new sembast_object_store.ObjectStoreSembast.new(this, this.database.meta.getObjectStore(name));
    }
    abort() {
      if (dart.test(sembast_transaction._debugTransaction)) {
        core.print("abort");
      }
      this[_aborted] = true;
      this[_endException] = common_exception.newAbortException();
    }
  };
  (sembast_transaction.TransactionSembast.new = function(database, meta) {
    if (database == null) dart.nullFailed(I[0], 257, 38, "database");
    this[sdbTransaction] = null;
    this[_debugId] = null;
    this[_index] = 0;
    this[_inactive] = false;
    this[_aborted] = false;
    this[_endException] = null;
    this[_completedCompleter] = T$.CompleterOfDatabase().sync();
    this[_lazyExecution] = null;
    this[_transactionCompleter] = async.Completer.new();
    this[_completers] = T$.JSArrayOfCompleter().of([]);
    this[_actions] = T$.JSArrayOfFunction().of([]);
    this[_futures] = T$.JSArrayOfFuture().of([]);
    this[meta$] = meta;
    sembast_transaction.TransactionSembast.__proto__.new.call(this, database);
    if (dart.test(sembast_transaction._debugTransaction)) {
      this[_debugId] = sembast_transaction.TransactionSembast._debugAllIds = dart.notNull(sembast_transaction.TransactionSembast._debugAllIds) + 1;
    }
    if (!dart.test(sembast_transaction._transactionLazyMode)) {
      sembast_transaction._delayedInit().then(core.Null, dart.fn(_ => async.async(core.Null, (function*() {
        if (dart.test(sembast_transaction._debugTransaction)) {
          core.print("Delayed init triggered");
        }
        try {
          yield this[_completed];
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            if (dart.test(sembast_transaction._debugTransaction)) {
              core.print("Handle TransactionSembast constructor async completed error " + dart.str(e));
            }
          } else
            throw e$;
        }
        if (dart.test(sembast_transaction._debugTransaction)) {
          core.print("completed aborted: " + dart.str(this[_aborted]));
        }
        this[_inactive] = true;
        yield async.Future.value();
        this[_complete]();
      }).bind(this)), T$.voidToFutureOfNull()));
    }
  }).prototype = sembast_transaction.TransactionSembast.prototype;
  dart.addTypeTests(sembast_transaction.TransactionSembast);
  dart.addTypeCaches(sembast_transaction.TransactionSembast);
  dart.setMethodSignature(sembast_transaction.TransactionSembast, () => ({
    __proto__: dart.getMethods(sembast_transaction.TransactionSembast.__proto__),
    [_complete]: dart.fnType(dart.void, []),
    [_completeError]: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
    [_execute]: dart.fnType(async.Future, [core.int]),
    [_next]: dart.fnType(async.Future, []),
    execute: dart.gFnType(T => [async.Future$(T), [dart.fnType(async.FutureOr$(T), [])]], T => [dart.nullable(core.Object)]),
    [_enqueue]: dart.gFnType(T => [async.Future$(T), [dart.fnType(async.FutureOr$(T), [])]], T => [dart.nullable(core.Object)]),
    objectStore: dart.fnType(idb.ObjectStore, [core.String])
  }));
  dart.setGetterSignature(sembast_transaction.TransactionSembast, () => ({
    __proto__: dart.getGetters(sembast_transaction.TransactionSembast.__proto__),
    database: sembast_database.DatabaseSembast,
    sdbDatabase: database.Database,
    [_completed]: async.Future$(dart.void),
    completed: async.Future$(idb.Database)
  }));
  dart.setLibraryUri(sembast_transaction.TransactionSembast, I[1]);
  dart.setFieldSignature(sembast_transaction.TransactionSembast, () => ({
    __proto__: dart.getFields(sembast_transaction.TransactionSembast.__proto__),
    sdbTransaction: dart.fieldType(dart.nullable(transaction.Transaction)),
    [_debugId]: dart.fieldType(dart.nullable(core.int)),
    [_index]: dart.fieldType(core.int),
    [_inactive]: dart.fieldType(core.bool),
    [_aborted]: dart.fieldType(core.bool),
    [_endException]: dart.fieldType(dart.nullable(core.Exception)),
    [_completedCompleter]: dart.finalFieldType(async.Completer$(idb.Database)),
    [_lazyExecution]: dart.fieldType(dart.nullable(async.Future)),
    [_transactionCompleter]: dart.finalFieldType(async.Completer),
    [_completers]: dart.finalFieldType(core.List$(async.Completer)),
    [_actions]: dart.finalFieldType(core.List$(core.Function)),
    [_futures]: dart.finalFieldType(core.List$(async.Future)),
    meta: dart.finalFieldType(dart.nullable(common_meta.IdbTransactionMeta))
  }));
  dart.defineLazy(sembast_transaction.TransactionSembast, {
    /*sembast_transaction.TransactionSembast._debugAllIds*/get _debugAllIds() {
      return 0;
    },
    set _debugAllIds(_) {}
  }, false);
  sembast_transaction._delayedInit = function _delayedInit() {
    return async.async(dart.void, function* _delayedInit() {
      yield async.Future.delayed(C[0] || CT.C0);
    });
  };
  dart.defineLazy(sembast_transaction, {
    /*sembast_transaction._debugTransaction*/get _debugTransaction() {
      return false;
    },
    set _debugTransaction(_) {},
    /*sembast_transaction._transactionLazyMode*/get _transactionLazyMode() {
      return false;
    },
    set _transactionLazyMode(_) {},
    /*sembast_transaction.newTransaction*/get newTransaction() {
      return false;
    },
    set newTransaction(_) {}
  }, false);
  var store$ = dart.privateName(sembast_index, "IndexSembast.store");
  var meta$0 = dart.privateName(sembast_index, "IndexSembast.meta");
  var _indexKeyOrRangeFilter = dart.privateName(sembast_index, "_indexKeyOrRangeFilter");
  const Index_IndexWithMetaMixin$36 = class Index_IndexWithMetaMixin extends idb.Index {};
  (Index_IndexWithMetaMixin$36.new = function() {
  }).prototype = Index_IndexWithMetaMixin$36.prototype;
  dart.applyMixin(Index_IndexWithMetaMixin$36, common_meta.IndexWithMetaMixin);
  sembast_index.IndexSembast = class IndexSembast extends Index_IndexWithMetaMixin$36 {
    get store() {
      return this[store$];
    }
    set store(value) {
      super.store = value;
    }
    get meta() {
      return this[meta$0];
    }
    set meta(value) {
      super.meta = value;
    }
    inTransaction(T, computation) {
      if (computation == null) dart.nullFailed(I[2], 17, 53, "computation");
      return this.store.inTransaction(T, computation);
    }
    [_indexKeyOrRangeFilter](keyOrRange = null) {
      if (keyOrRange == null) {
        return sembast_filter.keyNotNullFilter(this.meta.keyPath);
      }
      return sembast_filter.keyOrRangeFilter(this.meta.keyPath, keyOrRange, this.multiEntry);
    }
    count(keyOrRange = null) {
      return this.inTransaction(core.int, dart.fn(() => store_ref_impl['SembastStoreRefExtension|count'](core.Object, core.Object, this.store.sdbStore, this.store.sdbClient, {filter: this[_indexKeyOrRangeFilter](keyOrRange)}), T$.VoidToFutureOfint()));
    }
    get(key) {
      if (key == null) dart.nullFailed(I[2], 38, 14, "key");
      common_validation.checkKeyParam(key);
      return this.inTransaction(dart.dynamic, dart.fn(() => {
        let finder = finder$.Finder.new({filter: this[_indexKeyOrRangeFilter](key), limit: 1});
        return store_ref_impl['SembastStoreRefExtension|find'](core.Object, core.Object, this.store.sdbStore, this.store.sdbClient, {finder: finder}).then(dart.dynamic, dart.fn(records => {
          if (records == null) dart.nullFailed(I[2], 44, 18, "records");
          if (dart.test(records[$isNotEmpty])) {
            return this.store.recordToValue(records[$first]);
          }
        }, T$.ListOfRecordSnapshotOfObject$ObjectToObjectN()));
      }, T$.VoidToFuture()));
    }
    getKey(key) {
      if (key == null) dart.nullFailed(I[2], 53, 17, "key");
      common_validation.checkKeyParam(key);
      return this.inTransaction(dart.dynamic, dart.fn(() => {
        let finder = finder$.Finder.new({filter: this[_indexKeyOrRangeFilter](key), limit: 1});
        return store_ref_impl['SembastStoreRefExtension|find'](core.Object, core.Object, this.store.sdbStore, this.store.sdbClient, {finder: finder}).then(dart.dynamic, dart.fn(records => {
          if (records == null) dart.nullFailed(I[2], 59, 18, "records");
          if (dart.test(records[$isNotEmpty])) {
            return records[$first].key;
          }
        }, T$.ListOfRecordSnapshotOfObject$ObjectToObjectN()));
      }, T$.VoidToFuture()));
    }
    openCursor(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let range = opts && 'range' in opts ? opts.range : null;
      let direction = opts && 'direction' in opts ? opts.direction : null;
      let autoAdvance = opts && 'autoAdvance' in opts ? opts.autoAdvance : null;
      let cursorMeta = new common_meta.IdbCursorMeta.new(key, range, direction, autoAdvance);
      let ctlr = new sembast_cursor.IndexCursorWithValueControllerSembast.new(this, cursorMeta);
      this.inTransaction(dart.dynamic, dart.fn(() => ctlr.openCursor(), T$.VoidToFuture()));
      return ctlr.stream;
    }
    openKeyCursor(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let range = opts && 'range' in opts ? opts.range : null;
      let direction = opts && 'direction' in opts ? opts.direction : null;
      let autoAdvance = opts && 'autoAdvance' in opts ? opts.autoAdvance : null;
      let cursorMeta = new common_meta.IdbCursorMeta.new(key, range, direction, autoAdvance);
      let ctlr = new sembast_cursor.IndexKeyCursorControllerSembast.new(this, cursorMeta);
      this.inTransaction(dart.dynamic, dart.fn(() => ctlr.openCursor(), T$.VoidToFuture()));
      return ctlr.stream;
    }
    cursorFilter(key, range) {
      return sembast_filter.keyCursorFilter(this.keyPath, key, range, this.multiEntry);
    }
    sortOrders(ascending) {
      if (ascending == null) dart.nullFailed(I[2], 97, 39, "ascending");
      return sembast_cursor.keyPathSortOrders(this.keyPath, ascending);
    }
    getAll(query = null, count = null) {
      return this.inTransaction(T$.ListOfObject(), dart.fn(() => async.async(T$.ListOfObject(), (function*() {
        let finder = finder$.Finder.new({filter: this[_indexKeyOrRangeFilter](query), limit: count, sortOrders: this.sortOrders(true)});
        return (yield store_ref_impl['SembastStoreRefExtension|find'](core.Object, core.Object, this.store.sdbStore, this.store.sdbClient, {finder: finder}))[$map](core.Object, dart.fn(r => {
          if (r == null) dart.nullFailed(I[2], 108, 17, "r");
          return dart.nullCheck(this.store.recordToValue(r));
        }, T$.RecordSnapshotOfObject$ObjectToObject()))[$toList]({growable: false});
      }).bind(this)), T$.VoidToFutureOfListOfObject()));
    }
    getAllKeys(query = null, count = null) {
      return this.inTransaction(T$.ListOfObject(), dart.fn(() => async.async(T$.ListOfObject(), (function*() {
        let finder = finder$.Finder.new({filter: this[_indexKeyOrRangeFilter](query), limit: count, sortOrders: this.sortOrders(true)});
        return store_ref_impl['SembastStoreRefExtension|findKeys'](core.Object, core.Object, this.store.sdbStore, this.store.sdbClient, {finder: finder});
      }).bind(this)), T$.VoidToFutureOfListOfObject()));
    }
  };
  (sembast_index.IndexSembast.new = function(store, meta) {
    if (store == null) dart.nullFailed(I[2], 15, 21, "store");
    if (meta == null) dart.nullFailed(I[2], 15, 33, "meta");
    this[store$] = store;
    this[meta$0] = meta;
    ;
  }).prototype = sembast_index.IndexSembast.prototype;
  dart.addTypeTests(sembast_index.IndexSembast);
  dart.addTypeCaches(sembast_index.IndexSembast);
  dart.setMethodSignature(sembast_index.IndexSembast, () => ({
    __proto__: dart.getMethods(sembast_index.IndexSembast.__proto__),
    inTransaction: dart.gFnType(T => [async.Future$(T), [dart.fnType(async.FutureOr$(T), [])]], T => [dart.nullable(core.Object)]),
    [_indexKeyOrRangeFilter]: dart.fnType(filter.Filter, [], [dart.dynamic]),
    count: dart.fnType(async.Future$(core.int), [], [dart.dynamic]),
    get: dart.fnType(async.Future, [core.Object]),
    getKey: dart.fnType(async.Future, [core.Object]),
    openCursor: dart.fnType(async.Stream$(idb.CursorWithValue), [], {autoAdvance: dart.nullable(core.bool), direction: dart.nullable(core.String), key: dart.dynamic, range: dart.nullable(idb.KeyRange)}, {}),
    openKeyCursor: dart.fnType(async.Stream$(idb.Cursor), [], {autoAdvance: dart.nullable(core.bool), direction: dart.nullable(core.String), key: dart.dynamic, range: dart.nullable(idb.KeyRange)}, {}),
    cursorFilter: dart.fnType(filter.Filter, [dart.dynamic, dart.nullable(idb.KeyRange)]),
    sortOrders: dart.fnType(core.List$(sort_order.SortOrder), [core.bool]),
    getAll: dart.fnType(async.Future$(core.List$(core.Object)), [], [dart.nullable(core.Object), dart.nullable(core.int)]),
    getAllKeys: dart.fnType(async.Future$(core.List$(core.Object)), [], [dart.nullable(core.Object), dart.nullable(core.int)])
  }));
  dart.setLibraryUri(sembast_index.IndexSembast, I[3]);
  dart.setFieldSignature(sembast_index.IndexSembast, () => ({
    __proto__: dart.getFields(sembast_index.IndexSembast.__proto__),
    store: dart.finalFieldType(sembast_object_store.ObjectStoreSembast),
    meta: dart.finalFieldType(common_meta.IdbIndexMeta)
  }));
  var _$35KeyCursorSembastMixin$35recordIndex = dart.privateName(sembast_cursor, "KeyCursorSembastMixin._#KeyCursorSembastMixin#recordIndex");
  var _$35KeyCursorSembastMixin$35recordIndex$35isSet = dart.privateName(sembast_cursor, "KeyCursorSembastMixin._#KeyCursorSembastMixin#recordIndex#isSet");
  var _$35KeyCursorSembastMixin$35ctlr = dart.privateName(sembast_cursor, "KeyCursorSembastMixin._#KeyCursorSembastMixin#ctlr");
  var _$35KeyCursorSembastMixin$35ctlr$35isSet = dart.privateName(sembast_cursor, "KeyCursorSembastMixin._#KeyCursorSembastMixin#ctlr#isSet");
  var __KeyCursorSembastMixin_recordIndex = dart.privateName(sembast_cursor, "_#KeyCursorSembastMixin#recordIndex");
  var __KeyCursorSembastMixin_recordIndex_isSet = dart.privateName(sembast_cursor, "_#KeyCursorSembastMixin#recordIndex#isSet");
  var __KeyCursorSembastMixin_ctlr = dart.privateName(sembast_cursor, "_#KeyCursorSembastMixin#ctlr");
  var __KeyCursorSembastMixin_ctlr_isSet = dart.privateName(sembast_cursor, "_#KeyCursorSembastMixin#ctlr#isSet");
  sembast_cursor.KeyCursorSembastMixin = class KeyCursorSembastMixin extends core.Object {
    get [__KeyCursorSembastMixin_recordIndex]() {
      return this[_$35KeyCursorSembastMixin$35recordIndex];
    }
    set [__KeyCursorSembastMixin_recordIndex](value) {
      this[_$35KeyCursorSembastMixin$35recordIndex] = value;
    }
    get [__KeyCursorSembastMixin_recordIndex_isSet]() {
      return this[_$35KeyCursorSembastMixin$35recordIndex$35isSet];
    }
    set [__KeyCursorSembastMixin_recordIndex_isSet](value) {
      this[_$35KeyCursorSembastMixin$35recordIndex$35isSet] = value;
    }
    get [__KeyCursorSembastMixin_ctlr]() {
      return this[_$35KeyCursorSembastMixin$35ctlr];
    }
    set [__KeyCursorSembastMixin_ctlr](value) {
      this[_$35KeyCursorSembastMixin$35ctlr] = value;
    }
    get [__KeyCursorSembastMixin_ctlr_isSet]() {
      return this[_$35KeyCursorSembastMixin$35ctlr$35isSet];
    }
    set [__KeyCursorSembastMixin_ctlr_isSet](value) {
      this[_$35KeyCursorSembastMixin$35ctlr$35isSet] = value;
    }
    get recordIndex() {
      let t6;
      return dart.test(this[__KeyCursorSembastMixin_recordIndex_isSet]) ? (t6 = this[__KeyCursorSembastMixin_recordIndex], t6) : dart.throw(new _internal.LateError.fieldNI("recordIndex"));
    }
    set recordIndex(t6) {
      if (t6 == null) dart.nullFailed(I[4], 11, 12, "null");
      this[__KeyCursorSembastMixin_recordIndex_isSet] = true;
      this[__KeyCursorSembastMixin_recordIndex] = t6;
    }
    get ctlr() {
      let t7;
      return dart.test(this[__KeyCursorSembastMixin_ctlr_isSet]) ? (t7 = this[__KeyCursorSembastMixin_ctlr], t7) : dart.throw(new _internal.LateError.fieldNI("ctlr"));
    }
    set ctlr(t7) {
      if (t7 == null) dart.nullFailed(I[4], 12, 41, "null");
      this[__KeyCursorSembastMixin_ctlr_isSet] = true;
      this[__KeyCursorSembastMixin_ctlr] = t7;
    }
    get store() {
      return this.ctlr.store;
    }
    get meta() {
      return this.ctlr.meta;
    }
    get record() {
      return dart.nullCheck(this.ctlr.records)[$_get](this.recordIndex);
    }
    get direction() {
      return this.meta.direction;
    }
    advance(count) {
      if (count == null) dart.nullFailed(I[4], 27, 20, "count");
      this.ctlr.advance(count);
    }
    next() {
      return dart.nullCheck(this.store.transaction).execute(dart.void, dart.fn(() => this.advance(1), T$.VoidTovoid()));
    }
    delete() {
      return async.async(dart.dynamic, (function* $delete() {
        yield this.store.delete(this.record.primaryKey);
        let i = dart.notNull(this.recordIndex) + 1;
        while (i < dart.notNull(dart.nullCheck(this.ctlr.records)[$length])) {
          if (dart.equals(dart.nullCheck(this.ctlr.records)[$_get](i).primaryKey, this.record.primaryKey)) {
            dart.nullCheck(this.ctlr.records)[$removeAt](i);
          } else {
            i = i + 1;
          }
        }
      }).bind(this));
    }
    get key() {
      return this.record.key;
    }
    get primaryKey() {
      return this.record.primaryKey;
    }
    update(value) {
      if (value == null) dart.nullFailed(I[4], 56, 30, "value");
      return async.async(dart.void, (function* update() {
        yield this.store.put(value, this.store.getUpdateKeyIfNeeded(value, this.primaryKey));
        yield dart.nullCheck(this.store.transaction).execute(core.Null, dart.fn(() => async.async(core.Null, (function*() {
          let sdbSnapshot = (yield record_ref_impl['SembastRecordRefExtension|getSnapshot'](core.Object, core.Object, this.store.sdbStore.record(this.primaryKey), this.store.sdbClient));
          let i = dart.notNull(this.recordIndex) + 1;
          while (i < dart.notNull(dart.nullCheck(this.ctlr.records)[$length])) {
            if (dart.equals(dart.nullCheck(this.ctlr.records)[$_get](i).primaryKey, this.record.primaryKey)) {
              if (sdbSnapshot == null) {
                dart.nullCheck(this.ctlr.records)[$removeAt](i);
              } else {
                dart.nullCheck(this.ctlr.records)[$_set](i, new sembast_cursor.IndexRecordSnapshotSembast.new(dart.nullCheck(this.ctlr.records)[$_get](i).key, sdbSnapshot));
                i = i + 1;
              }
            } else {
              i = i + 1;
            }
          }
        }).bind(this)), T$.VoidToFutureOfNull()));
      }).bind(this));
    }
  };
  (sembast_cursor.KeyCursorSembastMixin.new = function() {
    this[_$35KeyCursorSembastMixin$35recordIndex] = null;
    this[_$35KeyCursorSembastMixin$35recordIndex$35isSet] = false;
    this[_$35KeyCursorSembastMixin$35ctlr] = null;
    this[_$35KeyCursorSembastMixin$35ctlr$35isSet] = false;
    ;
  }).prototype = sembast_cursor.KeyCursorSembastMixin.prototype;
  dart.addTypeTests(sembast_cursor.KeyCursorSembastMixin);
  dart.addTypeCaches(sembast_cursor.KeyCursorSembastMixin);
  sembast_cursor.KeyCursorSembastMixin[dart.implements] = () => [idb.Cursor];
  dart.setMethodSignature(sembast_cursor.KeyCursorSembastMixin, () => ({
    __proto__: dart.getMethods(sembast_cursor.KeyCursorSembastMixin.__proto__),
    advance: dart.fnType(dart.void, [core.int]),
    next: dart.fnType(dart.void, []),
    delete: dart.fnType(async.Future, []),
    update: dart.fnType(async.Future$(dart.void), [core.Object])
  }));
  dart.setGetterSignature(sembast_cursor.KeyCursorSembastMixin, () => ({
    __proto__: dart.getGetters(sembast_cursor.KeyCursorSembastMixin.__proto__),
    recordIndex: core.int,
    ctlr: sembast_cursor.BaseCursorControllerSembastMixin$(idb.Cursor),
    store: sembast_object_store.ObjectStoreSembast,
    meta: common_meta.IdbCursorMeta,
    record: sembast_cursor.RecordSnapshotSembast,
    direction: core.String,
    key: core.Object,
    primaryKey: core.Object
  }));
  dart.setSetterSignature(sembast_cursor.KeyCursorSembastMixin, () => ({
    __proto__: dart.getSetters(sembast_cursor.KeyCursorSembastMixin.__proto__),
    recordIndex: core.int,
    ctlr: sembast_cursor.BaseCursorControllerSembastMixin$(idb.Cursor)
  }));
  dart.setLibraryUri(sembast_cursor.KeyCursorSembastMixin, I[5]);
  dart.setFieldSignature(sembast_cursor.KeyCursorSembastMixin, () => ({
    __proto__: dart.getFields(sembast_cursor.KeyCursorSembastMixin.__proto__),
    [__KeyCursorSembastMixin_recordIndex]: dart.fieldType(dart.nullable(core.int)),
    [__KeyCursorSembastMixin_recordIndex_isSet]: dart.fieldType(core.bool),
    [__KeyCursorSembastMixin_ctlr]: dart.fieldType(dart.nullable(sembast_cursor.BaseCursorControllerSembastMixin$(idb.Cursor))),
    [__KeyCursorSembastMixin_ctlr_isSet]: dart.fieldType(core.bool)
  }));
  sembast_cursor.IndexCursorSembastMixin = class IndexCursorSembastMixin extends core.Object {
    get index() {
      return this.indexCtlr.index;
    }
  };
  (sembast_cursor.IndexCursorSembastMixin.new = function() {
    ;
  }).prototype = sembast_cursor.IndexCursorSembastMixin.prototype;
  dart.addTypeTests(sembast_cursor.IndexCursorSembastMixin);
  dart.addTypeCaches(sembast_cursor.IndexCursorSembastMixin);
  sembast_cursor.IndexCursorSembastMixin[dart.implements] = () => [idb.Cursor];
  dart.setGetterSignature(sembast_cursor.IndexCursorSembastMixin, () => ({
    __proto__: dart.getGetters(sembast_cursor.IndexCursorSembastMixin.__proto__),
    index: sembast_index.IndexSembast
  }));
  dart.setLibraryUri(sembast_cursor.IndexCursorSembastMixin, I[5]);
  sembast_cursor.CursorWithValueSembastMixin = class CursorWithValueSembastMixin extends core.Object {
    get value() {
      return dart.nullCheck(this.store.recordToValue(this.record.snapshot));
    }
  };
  (sembast_cursor.CursorWithValueSembastMixin.new = function() {
    ;
  }).prototype = sembast_cursor.CursorWithValueSembastMixin.prototype;
  dart.addTypeTests(sembast_cursor.CursorWithValueSembastMixin);
  dart.addTypeCaches(sembast_cursor.CursorWithValueSembastMixin);
  sembast_cursor.CursorWithValueSembastMixin[dart.implements] = () => [idb.CursorWithValue];
  dart.setGetterSignature(sembast_cursor.CursorWithValueSembastMixin, () => ({
    __proto__: dart.getGetters(sembast_cursor.CursorWithValueSembastMixin.__proto__),
    value: core.Object
  }));
  dart.setLibraryUri(sembast_cursor.CursorWithValueSembastMixin, I[5]);
  const Object_KeyCursorSembastMixin$36 = class Object_KeyCursorSembastMixin extends core.Object {};
  (Object_KeyCursorSembastMixin$36.new = function() {
    sembast_cursor.KeyCursorSembastMixin.new.call(this);
  }).prototype = Object_KeyCursorSembastMixin$36.prototype;
  dart.applyMixin(Object_KeyCursorSembastMixin$36, sembast_cursor.KeyCursorSembastMixin);
  const Object_IndexCursorSembastMixin$36 = class Object_IndexCursorSembastMixin extends Object_KeyCursorSembastMixin$36 {};
  (Object_IndexCursorSembastMixin$36.new = function() {
    Object_IndexCursorSembastMixin$36.__proto__.new.call(this);
  }).prototype = Object_IndexCursorSembastMixin$36.prototype;
  dart.applyMixin(Object_IndexCursorSembastMixin$36, sembast_cursor.IndexCursorSembastMixin);
  sembast_cursor.IndexKeyCursorSembast = class IndexKeyCursorSembast extends Object_IndexCursorSembastMixin$36 {
    get indexCtlr() {
      return sembast_cursor.IndexKeyCursorControllerSembast.as(this.ctlr);
    }
  };
  (sembast_cursor.IndexKeyCursorSembast.new = function(ctlr, index) {
    if (ctlr == null) dart.nullFailed(I[4], 105, 57, "ctlr");
    if (index == null) dart.nullFailed(I[4], 105, 67, "index");
    sembast_cursor.IndexKeyCursorSembast.__proto__.new.call(this);
    this.ctlr = ctlr;
    this.recordIndex = index;
  }).prototype = sembast_cursor.IndexKeyCursorSembast.prototype;
  dart.addTypeTests(sembast_cursor.IndexKeyCursorSembast);
  dart.addTypeCaches(sembast_cursor.IndexKeyCursorSembast);
  sembast_cursor.IndexKeyCursorSembast[dart.implements] = () => [idb.Cursor];
  dart.setGetterSignature(sembast_cursor.IndexKeyCursorSembast, () => ({
    __proto__: dart.getGetters(sembast_cursor.IndexKeyCursorSembast.__proto__),
    indexCtlr: sembast_cursor.IndexKeyCursorControllerSembast
  }));
  dart.setLibraryUri(sembast_cursor.IndexKeyCursorSembast, I[5]);
  const Object_KeyCursorSembastMixin$36$ = class Object_KeyCursorSembastMixin extends core.Object {};
  (Object_KeyCursorSembastMixin$36$.new = function() {
    sembast_cursor.KeyCursorSembastMixin.new.call(this);
  }).prototype = Object_KeyCursorSembastMixin$36$.prototype;
  dart.applyMixin(Object_KeyCursorSembastMixin$36$, sembast_cursor.KeyCursorSembastMixin);
  const Object_CursorWithValueSembastMixin$36 = class Object_CursorWithValueSembastMixin extends Object_KeyCursorSembastMixin$36$ {};
  (Object_CursorWithValueSembastMixin$36.new = function() {
    Object_CursorWithValueSembastMixin$36.__proto__.new.call(this);
  }).prototype = Object_CursorWithValueSembastMixin$36.prototype;
  dart.applyMixin(Object_CursorWithValueSembastMixin$36, sembast_cursor.CursorWithValueSembastMixin);
  sembast_cursor.IndexCursorWithValueSembast = class IndexCursorWithValueSembast extends Object_CursorWithValueSembastMixin$36 {
    get indexCtlr() {
      return sembast_cursor.IndexCursorWithValueControllerSembast.as(this.ctlr);
    }
  };
  (sembast_cursor.IndexCursorWithValueSembast.new = function(ctlr, index) {
    if (ctlr == null) dart.nullFailed(I[4], 117, 40, "ctlr");
    if (index == null) dart.nullFailed(I[4], 117, 50, "index");
    sembast_cursor.IndexCursorWithValueSembast.__proto__.new.call(this);
    this.ctlr = ctlr;
    this.recordIndex = index;
  }).prototype = sembast_cursor.IndexCursorWithValueSembast.prototype;
  dart.addTypeTests(sembast_cursor.IndexCursorWithValueSembast);
  dart.addTypeCaches(sembast_cursor.IndexCursorWithValueSembast);
  dart.setGetterSignature(sembast_cursor.IndexCursorWithValueSembast, () => ({
    __proto__: dart.getGetters(sembast_cursor.IndexCursorWithValueSembast.__proto__),
    indexCtlr: sembast_cursor.IndexCursorWithValueControllerSembast
  }));
  dart.setLibraryUri(sembast_cursor.IndexCursorWithValueSembast, I[5]);
  const Object_KeyCursorSembastMixin$36$0 = class Object_KeyCursorSembastMixin extends core.Object {};
  (Object_KeyCursorSembastMixin$36$0.new = function() {
    sembast_cursor.KeyCursorSembastMixin.new.call(this);
  }).prototype = Object_KeyCursorSembastMixin$36$0.prototype;
  dart.applyMixin(Object_KeyCursorSembastMixin$36$0, sembast_cursor.KeyCursorSembastMixin);
  const Object_CursorWithValueSembastMixin$36$ = class Object_CursorWithValueSembastMixin extends Object_KeyCursorSembastMixin$36$0 {};
  (Object_CursorWithValueSembastMixin$36$.new = function() {
    Object_CursorWithValueSembastMixin$36$.__proto__.new.call(this);
  }).prototype = Object_CursorWithValueSembastMixin$36$.prototype;
  dart.applyMixin(Object_CursorWithValueSembastMixin$36$, sembast_cursor.CursorWithValueSembastMixin);
  sembast_cursor.StoreCursorWithValueSembast = class StoreCursorWithValueSembast extends Object_CursorWithValueSembastMixin$36$ {};
  (sembast_cursor.StoreCursorWithValueSembast.new = function(ctlr, index) {
    if (ctlr == null) dart.nullFailed(I[4], 126, 40, "ctlr");
    if (index == null) dart.nullFailed(I[4], 126, 50, "index");
    sembast_cursor.StoreCursorWithValueSembast.__proto__.new.call(this);
    this.ctlr = ctlr;
    this.recordIndex = index;
  }).prototype = sembast_cursor.StoreCursorWithValueSembast.prototype;
  dart.addTypeTests(sembast_cursor.StoreCursorWithValueSembast);
  dart.addTypeCaches(sembast_cursor.StoreCursorWithValueSembast);
  dart.setLibraryUri(sembast_cursor.StoreCursorWithValueSembast, I[5]);
  const Object_KeyCursorSembastMixin$36$1 = class Object_KeyCursorSembastMixin extends core.Object {};
  (Object_KeyCursorSembastMixin$36$1.new = function() {
    sembast_cursor.KeyCursorSembastMixin.new.call(this);
  }).prototype = Object_KeyCursorSembastMixin$36$1.prototype;
  dart.applyMixin(Object_KeyCursorSembastMixin$36$1, sembast_cursor.KeyCursorSembastMixin);
  sembast_cursor.StoreKeyCursorSembast = class StoreKeyCursorSembast extends Object_KeyCursorSembastMixin$36$1 {};
  (sembast_cursor.StoreKeyCursorSembast.new = function(ctlr, index) {
    if (ctlr == null) dart.nullFailed(I[4], 133, 58, "ctlr");
    if (index == null) dart.nullFailed(I[4], 133, 68, "index");
    sembast_cursor.StoreKeyCursorSembast.__proto__.new.call(this);
    this.ctlr = ctlr;
    this.recordIndex = index;
  }).prototype = sembast_cursor.StoreKeyCursorSembast.prototype;
  dart.addTypeTests(sembast_cursor.StoreKeyCursorSembast);
  dart.addTypeCaches(sembast_cursor.StoreKeyCursorSembast);
  dart.setLibraryUri(sembast_cursor.StoreKeyCursorSembast, I[5]);
  sembast_cursor._ICursorSembast = class _ICursorSembast extends core.Object {};
  (sembast_cursor._ICursorSembast.new = function() {
    this.records = null;
    ;
  }).prototype = sembast_cursor._ICursorSembast.prototype;
  dart.addTypeTests(sembast_cursor._ICursorSembast);
  dart.addTypeCaches(sembast_cursor._ICursorSembast);
  dart.setLibraryUri(sembast_cursor._ICursorSembast, I[5]);
  dart.setFieldSignature(sembast_cursor._ICursorSembast, () => ({
    __proto__: dart.getFields(sembast_cursor._ICursorSembast.__proto__),
    records: dart.fieldType(dart.nullable(core.List$(sembast_cursor.RecordSnapshotSembast)))
  }));
  var snapshot$ = dart.privateName(sembast_cursor, "RecordSnapshotSembast.snapshot");
  sembast_cursor.RecordSnapshotSembast = class RecordSnapshotSembast extends core.Object {
    get snapshot() {
      return this[snapshot$];
    }
    set snapshot(value) {
      super.snapshot = value;
    }
    get primaryKey() {
      return this.snapshot.key;
    }
    get key() {
      return this.primaryKey;
    }
    toString() {
      return dart.str(this.snapshot);
    }
  };
  (sembast_cursor.RecordSnapshotSembast.new = function(snapshot) {
    if (snapshot == null) dart.nullFailed(I[4], 165, 30, "snapshot");
    this[snapshot$] = snapshot;
    ;
  }).prototype = sembast_cursor.RecordSnapshotSembast.prototype;
  dart.addTypeTests(sembast_cursor.RecordSnapshotSembast);
  dart.addTypeCaches(sembast_cursor.RecordSnapshotSembast);
  dart.setGetterSignature(sembast_cursor.RecordSnapshotSembast, () => ({
    __proto__: dart.getGetters(sembast_cursor.RecordSnapshotSembast.__proto__),
    primaryKey: core.Object,
    key: core.Object
  }));
  dart.setLibraryUri(sembast_cursor.RecordSnapshotSembast, I[5]);
  dart.setFieldSignature(sembast_cursor.RecordSnapshotSembast, () => ({
    __proto__: dart.getFields(sembast_cursor.RecordSnapshotSembast.__proto__),
    snapshot: dart.finalFieldType(record_snapshot.RecordSnapshot$(core.Object, core.Object))
  }));
  dart.defineExtensionMethods(sembast_cursor.RecordSnapshotSembast, ['toString']);
  var key$ = dart.privateName(sembast_cursor, "IndexRecordSnapshotSembast.key");
  sembast_cursor.IndexRecordSnapshotSembast = class IndexRecordSnapshotSembast extends sembast_cursor.RecordSnapshotSembast {
    get key() {
      return this[key$];
    }
    set key(value) {
      super.key = value;
    }
    toString() {
      return dart.str(this.key) + " " + dart.str(this.snapshot);
    }
  };
  (sembast_cursor.IndexRecordSnapshotSembast.new = function(key, snapshot) {
    if (key == null) dart.nullFailed(I[4], 175, 12, "key");
    if (snapshot == null) dart.nullFailed(I[4], 175, 52, "snapshot");
    this[key$] = key;
    sembast_cursor.IndexRecordSnapshotSembast.__proto__.new.call(this, snapshot);
    ;
  }).prototype = sembast_cursor.IndexRecordSnapshotSembast.prototype;
  dart.addTypeTests(sembast_cursor.IndexRecordSnapshotSembast);
  dart.addTypeCaches(sembast_cursor.IndexRecordSnapshotSembast);
  dart.setLibraryUri(sembast_cursor.IndexRecordSnapshotSembast, I[5]);
  dart.setFieldSignature(sembast_cursor.IndexRecordSnapshotSembast, () => ({
    __proto__: dart.getFields(sembast_cursor.IndexRecordSnapshotSembast.__proto__),
    key: dart.finalFieldType(core.Object)
  }));
  dart.defineExtensionMethods(sembast_cursor.IndexRecordSnapshotSembast, ['toString']);
  var _$35IndexCursorControllerSembastMixin$35index = dart.privateName(sembast_cursor, "IndexCursorControllerSembastMixin._#IndexCursorControllerSembastMixin#index");
  var _$35IndexCursorControllerSembastMixin$35index$35isSet = dart.privateName(sembast_cursor, "IndexCursorControllerSembastMixin._#IndexCursorControllerSembastMixin#index#isSet");
  var __IndexCursorControllerSembastMixin_index = dart.privateName(sembast_cursor, "_#IndexCursorControllerSembastMixin#index");
  var __IndexCursorControllerSembastMixin_index_isSet = dart.privateName(sembast_cursor, "_#IndexCursorControllerSembastMixin#index#isSet");
  sembast_cursor.IndexCursorControllerSembastMixin = class IndexCursorControllerSembastMixin extends core.Object {
    get [__IndexCursorControllerSembastMixin_index]() {
      return this[_$35IndexCursorControllerSembastMixin$35index];
    }
    set [__IndexCursorControllerSembastMixin_index](value) {
      this[_$35IndexCursorControllerSembastMixin$35index] = value;
    }
    get [__IndexCursorControllerSembastMixin_index_isSet]() {
      return this[_$35IndexCursorControllerSembastMixin$35index$35isSet];
    }
    set [__IndexCursorControllerSembastMixin_index_isSet](value) {
      this[_$35IndexCursorControllerSembastMixin$35index$35isSet] = value;
    }
    get index() {
      let t8;
      return dart.test(this[__IndexCursorControllerSembastMixin_index_isSet]) ? (t8 = this[__IndexCursorControllerSembastMixin_index], t8) : dart.throw(new _internal.LateError.fieldNI("index"));
    }
    set index(t8) {
      if (t8 == null) dart.nullFailed(I[4], 183, 21, "null");
      this[__IndexCursorControllerSembastMixin_index_isSet] = true;
      this[__IndexCursorControllerSembastMixin_index] = t8;
    }
    get sortOrders() {
      return this.index.sortOrders(this.meta.ascending);
    }
    get filter() {
      return this.index.cursorFilter(this.meta.key, this.meta.range);
    }
    setRecords(records) {
      if (records == null) dart.nullFailed(I[4], 199, 60, "records");
      if (dart.test(this.index.multiEntry)) {
        let list = T$.JSArrayOfIndexRecordSnapshotSembast().of([]);
        for (let record of records) {
          let keys = common_value.valueAsSet(common_value.mapValueAtKeyPath(T$.MapN().as(record.value), this.index.keyPath));
          if (keys != null) {
            for (let key of keys) {
              list[$add](new sembast_cursor.IndexRecordSnapshotSembast.new(common_value.decodeKey(dart.nullCheck(key)), record));
            }
          }
        }
        list[$sort](dart.fn((a, b) => {
          if (a == null) dart.nullFailed(I[4], 212, 18, "a");
          if (b == null) dart.nullFailed(I[4], 212, 21, "b");
          return common_value.fixCompareValue(common_value.compareKeys(a.key, b.key), {asc: this.meta.ascending});
        }, T$.IndexRecordSnapshotSembastAndIndexRecordSnapshotSembastToint()));
        this.records = list;
      } else {
        this.records = records[$map](sembast_cursor.IndexRecordSnapshotSembast, dart.fn(snapshot => {
          if (snapshot == null) dart.nullFailed(I[4], 217, 17, "snapshot");
          return new sembast_cursor.IndexRecordSnapshotSembast.new(dart.nullCheck(common_value.mapValueAtKeyPath(core.Map.as(snapshot.value), this.index.keyPath)), snapshot);
        }, T$.RecordSnapshotOfObject$ObjectToIndexRecordSnapshotSembast()))[$toList]({growable: false});
      }
    }
  };
  (sembast_cursor.IndexCursorControllerSembastMixin.new = function() {
    this[_$35IndexCursorControllerSembastMixin$35index] = null;
    this[_$35IndexCursorControllerSembastMixin$35index$35isSet] = false;
    ;
  }).prototype = sembast_cursor.IndexCursorControllerSembastMixin.prototype;
  dart.addTypeTests(sembast_cursor.IndexCursorControllerSembastMixin);
  dart.addTypeCaches(sembast_cursor.IndexCursorControllerSembastMixin);
  sembast_cursor.IndexCursorControllerSembastMixin[dart.implements] = () => [sembast_cursor._ICursorSembast];
  dart.setMethodSignature(sembast_cursor.IndexCursorControllerSembastMixin, () => ({
    __proto__: dart.getMethods(sembast_cursor.IndexCursorControllerSembastMixin.__proto__),
    setRecords: dart.fnType(dart.void, [core.List$(record_snapshot.RecordSnapshot$(core.Object, core.Object))])
  }));
  dart.setGetterSignature(sembast_cursor.IndexCursorControllerSembastMixin, () => ({
    __proto__: dart.getGetters(sembast_cursor.IndexCursorControllerSembastMixin.__proto__),
    index: sembast_index.IndexSembast,
    sortOrders: core.List$(sort_order.SortOrder),
    filter: filter.Filter
  }));
  dart.setSetterSignature(sembast_cursor.IndexCursorControllerSembastMixin, () => ({
    __proto__: dart.getSetters(sembast_cursor.IndexCursorControllerSembastMixin.__proto__),
    index: sembast_index.IndexSembast
  }));
  dart.setLibraryUri(sembast_cursor.IndexCursorControllerSembastMixin, I[5]);
  dart.setFieldSignature(sembast_cursor.IndexCursorControllerSembastMixin, () => ({
    __proto__: dart.getFields(sembast_cursor.IndexCursorControllerSembastMixin.__proto__),
    [__IndexCursorControllerSembastMixin_index]: dart.fieldType(dart.nullable(sembast_index.IndexSembast)),
    [__IndexCursorControllerSembastMixin_index_isSet]: dart.fieldType(core.bool)
  }));
  sembast_cursor.StoreCursorControllerSembastMixin = class StoreCursorControllerSembastMixin extends core.Object {
    get sortOrders() {
      return this.store.sortOrders(this.meta.ascending);
    }
    get filter() {
      return this.store.cursorFilter(this.meta.key, this.meta.range);
    }
  };
  (sembast_cursor.StoreCursorControllerSembastMixin.new = function() {
    ;
  }).prototype = sembast_cursor.StoreCursorControllerSembastMixin.prototype;
  dart.addTypeTests(sembast_cursor.StoreCursorControllerSembastMixin);
  dart.addTypeCaches(sembast_cursor.StoreCursorControllerSembastMixin);
  sembast_cursor.StoreCursorControllerSembastMixin[dart.implements] = () => [sembast_cursor._ICursorSembast];
  dart.setGetterSignature(sembast_cursor.StoreCursorControllerSembastMixin, () => ({
    __proto__: dart.getGetters(sembast_cursor.StoreCursorControllerSembastMixin.__proto__),
    sortOrders: core.List$(sort_order.SortOrder),
    filter: filter.Filter
  }));
  dart.setLibraryUri(sembast_cursor.StoreCursorControllerSembastMixin, I[5]);
  var _$35BaseCursorControllerSembastMixin$35meta = dart.privateName(sembast_cursor, "BaseCursorControllerSembastMixin._#BaseCursorControllerSembastMixin#meta");
  var _$35BaseCursorControllerSembastMixin$35meta$35isSet = dart.privateName(sembast_cursor, "BaseCursorControllerSembastMixin._#BaseCursorControllerSembastMixin#meta#isSet");
  var records = dart.privateName(sembast_cursor, "BaseCursorControllerSembastMixin.records");
  var currentIndex = dart.privateName(sembast_cursor, "BaseCursorControllerSembastMixin.currentIndex");
  var _$35BaseCursorControllerSembastMixin$35ctlr = dart.privateName(sembast_cursor, "BaseCursorControllerSembastMixin._#BaseCursorControllerSembastMixin#ctlr");
  var _$35BaseCursorControllerSembastMixin$35ctlr$35isSet = dart.privateName(sembast_cursor, "BaseCursorControllerSembastMixin._#BaseCursorControllerSembastMixin#ctlr#isSet");
  var __BaseCursorControllerSembastMixin_meta = dart.privateName(sembast_cursor, "_#BaseCursorControllerSembastMixin#meta");
  var __BaseCursorControllerSembastMixin_meta_isSet = dart.privateName(sembast_cursor, "_#BaseCursorControllerSembastMixin#meta#isSet");
  var __BaseCursorControllerSembastMixin_ctlr = dart.privateName(sembast_cursor, "_#BaseCursorControllerSembastMixin#ctlr");
  var __BaseCursorControllerSembastMixin_ctlr_isSet = dart.privateName(sembast_cursor, "_#BaseCursorControllerSembastMixin#ctlr#isSet");
  const _is_BaseCursorControllerSembastMixin_default = Symbol('_is_BaseCursorControllerSembastMixin_default');
  sembast_cursor.BaseCursorControllerSembastMixin$ = dart.generic(T => {
    var StreamControllerOfT = () => (StreamControllerOfT = dart.constFn(async.StreamController$(T)))();
    class BaseCursorControllerSembastMixin extends core.Object {
      get [__BaseCursorControllerSembastMixin_meta]() {
        return this[_$35BaseCursorControllerSembastMixin$35meta];
      }
      set [__BaseCursorControllerSembastMixin_meta](value) {
        this[_$35BaseCursorControllerSembastMixin$35meta] = value;
      }
      get [__BaseCursorControllerSembastMixin_meta_isSet]() {
        return this[_$35BaseCursorControllerSembastMixin$35meta$35isSet];
      }
      set [__BaseCursorControllerSembastMixin_meta_isSet](value) {
        this[_$35BaseCursorControllerSembastMixin$35meta$35isSet] = value;
      }
      get records() {
        return this[records];
      }
      set records(value) {
        this[records] = value;
      }
      get currentIndex() {
        return this[currentIndex];
      }
      set currentIndex(value) {
        this[currentIndex] = value;
      }
      get [__BaseCursorControllerSembastMixin_ctlr]() {
        return this[_$35BaseCursorControllerSembastMixin$35ctlr];
      }
      set [__BaseCursorControllerSembastMixin_ctlr](value) {
        this[_$35BaseCursorControllerSembastMixin$35ctlr] = value;
      }
      get [__BaseCursorControllerSembastMixin_ctlr_isSet]() {
        return this[_$35BaseCursorControllerSembastMixin$35ctlr$35isSet];
      }
      set [__BaseCursorControllerSembastMixin_ctlr_isSet](value) {
        this[_$35BaseCursorControllerSembastMixin$35ctlr$35isSet] = value;
      }
      get meta() {
        let t9;
        return dart.test(this[__BaseCursorControllerSembastMixin_meta_isSet]) ? (t9 = this[__BaseCursorControllerSembastMixin_meta], t9) : dart.throw(new _internal.LateError.fieldNI("meta"));
      }
      set meta(t9) {
        if (t9 == null) dart.nullFailed(I[4], 243, 22, "null");
        this[__BaseCursorControllerSembastMixin_meta_isSet] = true;
        this[__BaseCursorControllerSembastMixin_meta] = t9;
      }
      get done() {
        return this.currentIndex == null;
      }
      get ctlr() {
        let t10;
        return dart.test(this[__BaseCursorControllerSembastMixin_ctlr_isSet]) ? (t10 = this[__BaseCursorControllerSembastMixin_ctlr], t10) : dart.throw(new _internal.LateError.fieldNI("ctlr"));
      }
      set ctlr(t10) {
        StreamControllerOfT().as(t10);
        if (t10 == null) dart.nullFailed(I[4], 255, 28, "null");
        this[__BaseCursorControllerSembastMixin_ctlr_isSet] = true;
        this[__BaseCursorControllerSembastMixin_ctlr] = t10;
      }
      init() {
        this.ctlr = StreamControllerOfT().new({sync: true});
      }
      autoNext() {
        return this.advance(1).then(dart.dynamic, dart.fn(_ => {
          if (dart.test(this.meta.autoAdvance) && !dart.test(this.done)) {
            return this.autoNext();
          }
          return null;
        }, T$.dynamicToFutureN()));
      }
      advance(count) {
        if (count == null) dart.nullFailed(I[4], 270, 22, "count");
        this.currentIndex = dart.nullCheck(this.currentIndex) + dart.notNull(count);
        if (dart.nullCheck(this.currentIndex) >= dart.notNull(dart.nullCheck(this.records)[$length])) {
          this.currentIndex = null;
          return this.ctlr.close();
        }
        this.ctlr.add(this.nextEvent(dart.nullCheck(this.currentIndex)));
        return async.Future.value();
      }
      openCursor() {
        return async.async(dart.dynamic, (function* openCursor() {
          let filter = this.filter;
          let sortOrders = this.sortOrders;
          let finder = finder$.Finder.new({filter: filter, sortOrders: sortOrders});
          let records = (yield store_ref_impl['SembastStoreRefExtension|find'](core.Object, core.Object, this.store.sdbStore, this.store.sdbClient, {finder: finder}));
          this.setRecords(records);
          return this.autoNext();
        }).bind(this));
      }
      setRecords(records) {
        if (records == null) dart.nullFailed(I[4], 293, 60, "records");
        this.records = records[$map](sembast_cursor.RecordSnapshotSembast, dart.fn(snapshot => {
          if (snapshot == null) dart.nullFailed(I[4], 295, 15, "snapshot");
          return new sembast_cursor.RecordSnapshotSembast.new(snapshot);
        }, T$.RecordSnapshotOfObject$ObjectToRecordSnapshotSembast()))[$toList]({growable: false});
      }
    }
    (BaseCursorControllerSembastMixin.new = function() {
      this[_$35BaseCursorControllerSembastMixin$35meta] = null;
      this[_$35BaseCursorControllerSembastMixin$35meta$35isSet] = false;
      this[records] = null;
      this[currentIndex] = -1;
      this[_$35BaseCursorControllerSembastMixin$35ctlr] = null;
      this[_$35BaseCursorControllerSembastMixin$35ctlr$35isSet] = false;
      ;
    }).prototype = BaseCursorControllerSembastMixin.prototype;
    dart.addTypeTests(BaseCursorControllerSembastMixin);
    BaseCursorControllerSembastMixin.prototype[_is_BaseCursorControllerSembastMixin_default] = true;
    dart.addTypeCaches(BaseCursorControllerSembastMixin);
    BaseCursorControllerSembastMixin[dart.implements] = () => [sembast_cursor._ICursorSembast];
    dart.setMethodSignature(BaseCursorControllerSembastMixin, () => ({
      __proto__: dart.getMethods(BaseCursorControllerSembastMixin.__proto__),
      init: dart.fnType(dart.void, []),
      autoNext: dart.fnType(async.Future, []),
      advance: dart.fnType(async.Future, [core.int]),
      openCursor: dart.fnType(async.Future, []),
      setRecords: dart.fnType(dart.void, [core.List$(record_snapshot.RecordSnapshot$(core.Object, core.Object))])
    }));
    dart.setGetterSignature(BaseCursorControllerSembastMixin, () => ({
      __proto__: dart.getGetters(BaseCursorControllerSembastMixin.__proto__),
      meta: common_meta.IdbCursorMeta,
      done: core.bool,
      ctlr: async.StreamController$(T)
    }));
    dart.setSetterSignature(BaseCursorControllerSembastMixin, () => ({
      __proto__: dart.getSetters(BaseCursorControllerSembastMixin.__proto__),
      meta: common_meta.IdbCursorMeta,
      ctlr: dart.nullable(core.Object)
    }));
    dart.setLibraryUri(BaseCursorControllerSembastMixin, I[5]);
    dart.setFieldSignature(BaseCursorControllerSembastMixin, () => ({
      __proto__: dart.getFields(BaseCursorControllerSembastMixin.__proto__),
      [__BaseCursorControllerSembastMixin_meta]: dart.fieldType(dart.nullable(common_meta.IdbCursorMeta)),
      [__BaseCursorControllerSembastMixin_meta_isSet]: dart.fieldType(core.bool),
      records: dart.fieldType(dart.nullable(core.List$(sembast_cursor.RecordSnapshotSembast))),
      currentIndex: dart.fieldType(dart.nullable(core.int)),
      [__BaseCursorControllerSembastMixin_ctlr]: dart.fieldType(dart.nullable(async.StreamController$(T))),
      [__BaseCursorControllerSembastMixin_ctlr_isSet]: dart.fieldType(core.bool)
    }));
    return BaseCursorControllerSembastMixin;
  });
  sembast_cursor.BaseCursorControllerSembastMixin = sembast_cursor.BaseCursorControllerSembastMixin$();
  dart.addTypeTests(sembast_cursor.BaseCursorControllerSembastMixin, _is_BaseCursorControllerSembastMixin_default);
  sembast_cursor.KeyCursorControllerSembastMixin = class KeyCursorControllerSembastMixin extends core.Object {
    get stream() {
      return this.ctlr.stream;
    }
  };
  (sembast_cursor.KeyCursorControllerSembastMixin.new = function() {
    ;
  }).prototype = sembast_cursor.KeyCursorControllerSembastMixin.prototype;
  dart.addTypeTests(sembast_cursor.KeyCursorControllerSembastMixin);
  dart.addTypeCaches(sembast_cursor.KeyCursorControllerSembastMixin);
  dart.setGetterSignature(sembast_cursor.KeyCursorControllerSembastMixin, () => ({
    __proto__: dart.getGetters(sembast_cursor.KeyCursorControllerSembastMixin.__proto__),
    stream: async.Stream$(idb.Cursor)
  }));
  dart.setLibraryUri(sembast_cursor.KeyCursorControllerSembastMixin, I[5]);
  sembast_cursor.CursorWithValueControllerSembastMixin = class CursorWithValueControllerSembastMixin extends core.Object {
    get stream() {
      return this.ctlr.stream;
    }
  };
  (sembast_cursor.CursorWithValueControllerSembastMixin.new = function() {
    ;
  }).prototype = sembast_cursor.CursorWithValueControllerSembastMixin.prototype;
  dart.addTypeTests(sembast_cursor.CursorWithValueControllerSembastMixin);
  dart.addTypeCaches(sembast_cursor.CursorWithValueControllerSembastMixin);
  dart.setGetterSignature(sembast_cursor.CursorWithValueControllerSembastMixin, () => ({
    __proto__: dart.getGetters(sembast_cursor.CursorWithValueControllerSembastMixin.__proto__),
    stream: async.Stream$(idb.CursorWithValue)
  }));
  dart.setLibraryUri(sembast_cursor.CursorWithValueControllerSembastMixin, I[5]);
  const Object_KeyCursorControllerSembastMixin$36 = class Object_KeyCursorControllerSembastMixin extends core.Object {};
  (Object_KeyCursorControllerSembastMixin$36.new = function() {
  }).prototype = Object_KeyCursorControllerSembastMixin$36.prototype;
  dart.applyMixin(Object_KeyCursorControllerSembastMixin$36, sembast_cursor.KeyCursorControllerSembastMixin);
  const Object_BaseCursorControllerSembastMixin$36 = class Object_BaseCursorControllerSembastMixin extends Object_KeyCursorControllerSembastMixin$36 {};
  (Object_BaseCursorControllerSembastMixin$36.new = function() {
    sembast_cursor.BaseCursorControllerSembastMixin$(idb.Cursor).new.call(this);
  }).prototype = Object_BaseCursorControllerSembastMixin$36.prototype;
  dart.applyMixin(Object_BaseCursorControllerSembastMixin$36, sembast_cursor.BaseCursorControllerSembastMixin$(idb.Cursor));
  const Object_IndexCursorControllerSembastMixin$36 = class Object_IndexCursorControllerSembastMixin extends Object_BaseCursorControllerSembastMixin$36 {};
  (Object_IndexCursorControllerSembastMixin$36.new = function() {
    sembast_cursor.IndexCursorControllerSembastMixin.new.call(this);
    Object_IndexCursorControllerSembastMixin$36.__proto__.new.call(this);
  }).prototype = Object_IndexCursorControllerSembastMixin$36.prototype;
  dart.applyMixin(Object_IndexCursorControllerSembastMixin$36, sembast_cursor.IndexCursorControllerSembastMixin);
  sembast_cursor.IndexKeyCursorControllerSembast = class IndexKeyCursorControllerSembast extends Object_IndexCursorControllerSembastMixin$36 {
    get store() {
      return this.index.store;
    }
    nextEvent(index) {
      if (index == null) dart.nullFailed(I[4], 346, 24, "index");
      let cursor = new sembast_cursor.IndexKeyCursorSembast.new(this, index);
      return cursor;
    }
  };
  (sembast_cursor.IndexKeyCursorControllerSembast.new = function(index, meta) {
    if (index == null) dart.nullFailed(I[4], 339, 48, "index");
    if (meta == null) dart.nullFailed(I[4], 339, 69, "meta");
    sembast_cursor.IndexKeyCursorControllerSembast.__proto__.new.call(this);
    this.meta = meta;
    this.index = index;
    this.init();
  }).prototype = sembast_cursor.IndexKeyCursorControllerSembast.prototype;
  dart.addTypeTests(sembast_cursor.IndexKeyCursorControllerSembast);
  dart.addTypeCaches(sembast_cursor.IndexKeyCursorControllerSembast);
  dart.setMethodSignature(sembast_cursor.IndexKeyCursorControllerSembast, () => ({
    __proto__: dart.getMethods(sembast_cursor.IndexKeyCursorControllerSembast.__proto__),
    nextEvent: dart.fnType(idb.Cursor, [core.int])
  }));
  dart.setGetterSignature(sembast_cursor.IndexKeyCursorControllerSembast, () => ({
    __proto__: dart.getGetters(sembast_cursor.IndexKeyCursorControllerSembast.__proto__),
    store: sembast_object_store.ObjectStoreSembast
  }));
  dart.setLibraryUri(sembast_cursor.IndexKeyCursorControllerSembast, I[5]);
  const Object_CursorWithValueControllerSembastMixin$36 = class Object_CursorWithValueControllerSembastMixin extends core.Object {};
  (Object_CursorWithValueControllerSembastMixin$36.new = function() {
  }).prototype = Object_CursorWithValueControllerSembastMixin$36.prototype;
  dart.applyMixin(Object_CursorWithValueControllerSembastMixin$36, sembast_cursor.CursorWithValueControllerSembastMixin);
  const Object_BaseCursorControllerSembastMixin$36$ = class Object_BaseCursorControllerSembastMixin extends Object_CursorWithValueControllerSembastMixin$36 {};
  (Object_BaseCursorControllerSembastMixin$36$.new = function() {
    sembast_cursor.BaseCursorControllerSembastMixin$(idb.CursorWithValue).new.call(this);
  }).prototype = Object_BaseCursorControllerSembastMixin$36$.prototype;
  dart.applyMixin(Object_BaseCursorControllerSembastMixin$36$, sembast_cursor.BaseCursorControllerSembastMixin$(idb.CursorWithValue));
  const Object_IndexCursorControllerSembastMixin$36$ = class Object_IndexCursorControllerSembastMixin extends Object_BaseCursorControllerSembastMixin$36$ {};
  (Object_IndexCursorControllerSembastMixin$36$.new = function() {
    sembast_cursor.IndexCursorControllerSembastMixin.new.call(this);
    Object_IndexCursorControllerSembastMixin$36$.__proto__.new.call(this);
  }).prototype = Object_IndexCursorControllerSembastMixin$36$.prototype;
  dart.applyMixin(Object_IndexCursorControllerSembastMixin$36$, sembast_cursor.IndexCursorControllerSembastMixin);
  sembast_cursor.IndexCursorWithValueControllerSembast = class IndexCursorWithValueControllerSembast extends Object_IndexCursorControllerSembastMixin$36$ {
    get store() {
      return this.index.store;
    }
    nextEvent(index) {
      if (index == null) dart.nullFailed(I[4], 368, 33, "index");
      let cursor = new sembast_cursor.IndexCursorWithValueSembast.new(this, index);
      return cursor;
    }
  };
  (sembast_cursor.IndexCursorWithValueControllerSembast.new = function(index, meta) {
    if (index == null) dart.nullFailed(I[4], 361, 20, "index");
    if (meta == null) dart.nullFailed(I[4], 361, 41, "meta");
    sembast_cursor.IndexCursorWithValueControllerSembast.__proto__.new.call(this);
    this.meta = meta;
    this.index = index;
    this.init();
  }).prototype = sembast_cursor.IndexCursorWithValueControllerSembast.prototype;
  dart.addTypeTests(sembast_cursor.IndexCursorWithValueControllerSembast);
  dart.addTypeCaches(sembast_cursor.IndexCursorWithValueControllerSembast);
  dart.setMethodSignature(sembast_cursor.IndexCursorWithValueControllerSembast, () => ({
    __proto__: dart.getMethods(sembast_cursor.IndexCursorWithValueControllerSembast.__proto__),
    nextEvent: dart.fnType(idb.CursorWithValue, [core.int])
  }));
  dart.setGetterSignature(sembast_cursor.IndexCursorWithValueControllerSembast, () => ({
    __proto__: dart.getGetters(sembast_cursor.IndexCursorWithValueControllerSembast.__proto__),
    store: sembast_object_store.ObjectStoreSembast
  }));
  dart.setLibraryUri(sembast_cursor.IndexCursorWithValueControllerSembast, I[5]);
  var store$0 = dart.privateName(sembast_cursor, "StoreKeyCursorControllerSembast.store");
  const Object_KeyCursorControllerSembastMixin$36$ = class Object_KeyCursorControllerSembastMixin extends core.Object {};
  (Object_KeyCursorControllerSembastMixin$36$.new = function() {
  }).prototype = Object_KeyCursorControllerSembastMixin$36$.prototype;
  dart.applyMixin(Object_KeyCursorControllerSembastMixin$36$, sembast_cursor.KeyCursorControllerSembastMixin);
  const Object_BaseCursorControllerSembastMixin$36$0 = class Object_BaseCursorControllerSembastMixin extends Object_KeyCursorControllerSembastMixin$36$ {};
  (Object_BaseCursorControllerSembastMixin$36$0.new = function() {
    sembast_cursor.BaseCursorControllerSembastMixin$(idb.Cursor).new.call(this);
  }).prototype = Object_BaseCursorControllerSembastMixin$36$0.prototype;
  dart.applyMixin(Object_BaseCursorControllerSembastMixin$36$0, sembast_cursor.BaseCursorControllerSembastMixin$(idb.Cursor));
  const Object_StoreCursorControllerSembastMixin$36 = class Object_StoreCursorControllerSembastMixin extends Object_BaseCursorControllerSembastMixin$36$0 {};
  (Object_StoreCursorControllerSembastMixin$36.new = function() {
    Object_StoreCursorControllerSembastMixin$36.__proto__.new.call(this);
  }).prototype = Object_StoreCursorControllerSembastMixin$36.prototype;
  dart.applyMixin(Object_StoreCursorControllerSembastMixin$36, sembast_cursor.StoreCursorControllerSembastMixin);
  sembast_cursor.StoreKeyCursorControllerSembast = class StoreKeyCursorControllerSembast extends Object_StoreCursorControllerSembastMixin$36 {
    get store() {
      return this[store$0];
    }
    set store(value) {
      this[store$0] = value;
    }
    nextEvent(index) {
      if (index == null) dart.nullFailed(I[4], 388, 24, "index");
      let cursor = new sembast_cursor.StoreKeyCursorSembast.new(this, index);
      return cursor;
    }
  };
  (sembast_cursor.StoreKeyCursorControllerSembast.new = function(store, meta) {
    if (store == null) dart.nullFailed(I[4], 382, 40, "store");
    if (meta == null) dart.nullFailed(I[4], 382, 61, "meta");
    this[store$0] = store;
    sembast_cursor.StoreKeyCursorControllerSembast.__proto__.new.call(this);
    this.meta = meta;
    this.init();
  }).prototype = sembast_cursor.StoreKeyCursorControllerSembast.prototype;
  dart.addTypeTests(sembast_cursor.StoreKeyCursorControllerSembast);
  dart.addTypeCaches(sembast_cursor.StoreKeyCursorControllerSembast);
  dart.setMethodSignature(sembast_cursor.StoreKeyCursorControllerSembast, () => ({
    __proto__: dart.getMethods(sembast_cursor.StoreKeyCursorControllerSembast.__proto__),
    nextEvent: dart.fnType(idb.Cursor, [core.int])
  }));
  dart.setLibraryUri(sembast_cursor.StoreKeyCursorControllerSembast, I[5]);
  dart.setFieldSignature(sembast_cursor.StoreKeyCursorControllerSembast, () => ({
    __proto__: dart.getFields(sembast_cursor.StoreKeyCursorControllerSembast.__proto__),
    store: dart.fieldType(sembast_object_store.ObjectStoreSembast)
  }));
  var store$1 = dart.privateName(sembast_cursor, "StoreCursorWithValueControllerSembast.store");
  const Object_CursorWithValueControllerSembastMixin$36$ = class Object_CursorWithValueControllerSembastMixin extends core.Object {};
  (Object_CursorWithValueControllerSembastMixin$36$.new = function() {
  }).prototype = Object_CursorWithValueControllerSembastMixin$36$.prototype;
  dart.applyMixin(Object_CursorWithValueControllerSembastMixin$36$, sembast_cursor.CursorWithValueControllerSembastMixin);
  const Object_BaseCursorControllerSembastMixin$36$1 = class Object_BaseCursorControllerSembastMixin extends Object_CursorWithValueControllerSembastMixin$36$ {};
  (Object_BaseCursorControllerSembastMixin$36$1.new = function() {
    sembast_cursor.BaseCursorControllerSembastMixin$(idb.CursorWithValue).new.call(this);
  }).prototype = Object_BaseCursorControllerSembastMixin$36$1.prototype;
  dart.applyMixin(Object_BaseCursorControllerSembastMixin$36$1, sembast_cursor.BaseCursorControllerSembastMixin$(idb.CursorWithValue));
  const Object_StoreCursorControllerSembastMixin$36$ = class Object_StoreCursorControllerSembastMixin extends Object_BaseCursorControllerSembastMixin$36$1 {};
  (Object_StoreCursorControllerSembastMixin$36$.new = function() {
    Object_StoreCursorControllerSembastMixin$36$.__proto__.new.call(this);
  }).prototype = Object_StoreCursorControllerSembastMixin$36$.prototype;
  dart.applyMixin(Object_StoreCursorControllerSembastMixin$36$, sembast_cursor.StoreCursorControllerSembastMixin);
  sembast_cursor.StoreCursorWithValueControllerSembast = class StoreCursorWithValueControllerSembast extends Object_StoreCursorControllerSembastMixin$36$ {
    get store() {
      return this[store$1];
    }
    set store(value) {
      this[store$1] = value;
    }
    nextEvent(index) {
      if (index == null) dart.nullFailed(I[4], 408, 33, "index");
      let cursor = new sembast_cursor.StoreCursorWithValueSembast.new(this, index);
      return cursor;
    }
  };
  (sembast_cursor.StoreCursorWithValueControllerSembast.new = function(store, meta) {
    if (store == null) dart.nullFailed(I[4], 402, 46, "store");
    if (meta == null) dart.nullFailed(I[4], 402, 67, "meta");
    this[store$1] = store;
    sembast_cursor.StoreCursorWithValueControllerSembast.__proto__.new.call(this);
    this.meta = meta;
    this.init();
  }).prototype = sembast_cursor.StoreCursorWithValueControllerSembast.prototype;
  dart.addTypeTests(sembast_cursor.StoreCursorWithValueControllerSembast);
  dart.addTypeCaches(sembast_cursor.StoreCursorWithValueControllerSembast);
  dart.setMethodSignature(sembast_cursor.StoreCursorWithValueControllerSembast, () => ({
    __proto__: dart.getMethods(sembast_cursor.StoreCursorWithValueControllerSembast.__proto__),
    nextEvent: dart.fnType(idb.CursorWithValue, [core.int])
  }));
  dart.setLibraryUri(sembast_cursor.StoreCursorWithValueControllerSembast, I[5]);
  dart.setFieldSignature(sembast_cursor.StoreCursorWithValueControllerSembast, () => ({
    __proto__: dart.getFields(sembast_cursor.StoreCursorWithValueControllerSembast.__proto__),
    store: dart.fieldType(sembast_object_store.ObjectStoreSembast)
  }));
  sembast_cursor.keyPathSortOrders = function keyPathSortOrders(keyPath, ascending) {
    if (ascending == null) dart.nullFailed(I[4], 415, 61, "ascending");
    if (typeof keyPath == 'string') {
      return T$.JSArrayOfSortOrder().of([sort_order.SortOrder.new(keyPath, ascending)]);
    } else if (core.List.is(keyPath)) {
      let keyList = keyPath;
      return T$.ListOfSortOrder().generate(keyList[$length], dart.fn(i => {
        if (i == null) dart.nullFailed(I[4], 421, 26, "i");
        return sort_order.SortOrder.new(core.String.as(keyList[$_get](i)), ascending);
      }, T$.intToSortOrder()));
    }
    dart.throw("invalid keyPath " + dart.str(keyPath));
  };
  var meta$1 = dart.privateName(sembast_object_store, "ObjectStoreSembast.meta");
  var transaction$ = dart.privateName(sembast_object_store, "ObjectStoreSembast.transaction");
  var _sdbClient = dart.privateName(sembast_object_store, "_sdbClient");
  var _sdbStore = dart.privateName(sembast_object_store, "_sdbStore");
  var _inWritableTransaction = dart.privateName(sembast_object_store, "_inWritableTransaction");
  var _storeKeyOrRangeFilter = dart.privateName(sembast_object_store, "_storeKeyOrRangeFilter");
  const ObjectStore_ObjectStoreWithMetaMixin$36 = class ObjectStore_ObjectStoreWithMetaMixin extends idb.ObjectStore {};
  (ObjectStore_ObjectStoreWithMetaMixin$36.new = function() {
  }).prototype = ObjectStore_ObjectStoreWithMetaMixin$36.prototype;
  dart.applyMixin(ObjectStore_ObjectStoreWithMetaMixin$36, common_meta.ObjectStoreWithMetaMixin);
  sembast_object_store.ObjectStoreSembast = class ObjectStoreSembast extends ObjectStore_ObjectStoreWithMetaMixin$36 {
    get meta() {
      return this[meta$1];
    }
    set meta(value) {
      super.meta = value;
    }
    get transaction() {
      return this[transaction$];
    }
    set transaction(value) {
      super.transaction = value;
    }
    get database() {
      return dart.nullCheck(this.transaction).database;
    }
    get sdbDatabase() {
      return this.database.db;
    }
    get sdbTransaction() {
      return dart.nullCheck(this.transaction).sdbTransaction;
    }
    get sdbStore() {
      let t11;
      t11 = this[_sdbStore];
      return t11 == null ? this[_sdbStore] = T$.StoreRefOfObject$Object().new(this.name) : t11;
    }
    get sdbClient() {
      let t12, t11;
      return dart.nullCheck((t11 = this[_sdbClient], t11 == null ? this[_sdbClient] = (t12 = this.sdbTransaction, t12 == null ? this.sdbDatabase : t12) : t11));
    }
    [_inWritableTransaction](T, computation) {
      if (computation == null) dart.nullFailed(I[6], 48, 62, "computation");
      if (dart.nullCheck(dart.nullCheck(this.transaction).meta).mode !== "readwrite") {
        return async.Future$(T).error(new error.DatabaseReadOnlyError.new());
      }
      return this.inTransaction(T, computation);
    }
    inTransaction(T, computation) {
      if (computation == null) dart.nullFailed(I[6], 56, 53, "computation");
      return dart.nullCheck(this.transaction).execute(T, computation);
    }
    getKeyImpl(value, key = null) {
      if (value == null) dart.nullFailed(I[6], 64, 29, "value");
      if (this.keyPath != null) {
        if (key != null) {
          dart.throw(new core.ArgumentError.new("The object store uses in-line keys and the key parameter '" + dart.str(key) + "' was provided"));
        }
        if (core.Map.is(value)) {
          key = common_value.mapValueAtKeyPath(value, this.keyPath);
        }
      }
      if (key == null && !dart.test(this.autoIncrement)) {
        dart.throw(new idb.DatabaseError.new("neither keyPath nor autoIncrement set and trying to add object without key"));
      }
      return key;
    }
    getUpdateKeyIfNeeded(value, key = null) {
      if (this.keyPath == null) {
        return key;
      }
      return null;
    }
    putImpl(value, key) {
      let futures = T$.JSArrayOfFuture().of([]);
      if (core.Map.is(value)) {
        dart.nullCheck(this.meta).indecies[$forEach](dart.fn(indexMeta => {
          if (indexMeta == null) dart.nullFailed(I[6], 95, 44, "indexMeta");
          let fieldValue = common_value.mapValueAtKeyPath(value, indexMeta.keyPath);
          if (fieldValue != null) {
            let finder = finder$.Finder.new({filter: sembast_filter.keyFilter(indexMeta.keyPath, fieldValue, false), limit: 1});
            futures[$add](store_ref_impl['SembastStoreRefExtension|findFirst'](core.Object, core.Object, this.sdbStore, this.sdbClient, {finder: finder}).then(dart.dynamic, dart.fn(record => {
              if (record != null && !dart.equals(record.key, key) && !dart.test(indexMeta.multiEntry) && dart.test(indexMeta.unique)) {
                dart.throw(new idb.DatabaseError.new("key '" + dart.str(fieldValue) + "' already exists in " + dart.str(record) + " for index " + dart.str(indexMeta)));
              }
            }, T$.RecordSnapshotNOfObject$ObjectToNull())));
          }
        }, T$.IdbIndexMetaTovoid()));
      }
      return async.Future.wait(dart.dynamic, futures).then(core.Object, dart.fn(_ => {
        if (_ == null) dart.nullFailed(I[6], 115, 39, "_");
        if (key == null) {
          return store_ref_impl['SembastStoreRefExtension|add'](core.Object, core.Object, this.sdbStore, this.sdbClient, dart.nullCast(value, core.Object));
        } else {
          return record_ref_impl['SembastRecordRefExtension|put'](core.Object, core.Object, this.sdbStore.record(key), this.sdbClient, dart.nullCast(value, core.Object)).then(core.Object, dart.fn(_ => {
            if (_ == null) dart.nullFailed(I[6], 122, 20, "_");
            return key;
          }, T$.ObjectToObject()));
        }
      }, T$.ListToFutureOfObject()));
    }
    add(value, key = null) {
      if (value == null) dart.nullFailed(I[6], 128, 29, "value");
      value = sembast_value.toSembastValue(value);
      return this[_inWritableTransaction](core.Object, dart.fn(() => {
        key = this.getKeyImpl(value, key);
        if (key != null) {
          return record_ref_impl['SembastRecordRefExtension|get'](core.Object, core.Object, this.sdbStore.record(dart.nullCheck(key)), this.sdbClient).then(core.Object, dart.fn(existingValue => {
            if (existingValue != null) {
              dart.throw(new idb.DatabaseError.new("Key " + dart.str(key) + " already exists in the object store"));
            }
            return this.putImpl(value, dart.nullCheck(key));
          }, T$.ObjectNToFutureOfObject()));
        } else {
          return this.putImpl(value, null);
        }
      }, T$.VoidToFutureOfObject()));
    }
    clear() {
      return this[_inWritableTransaction](core.int, dart.fn(() => store_ref_impl['SembastStoreRefExtension|delete'](core.Object, core.Object, this.sdbStore, this.sdbClient), T$.VoidToFutureOfint())).then(dart.dynamic, dart.fn(_ => {
        if (_ == null) dart.nullFailed(I[6], 150, 14, "_");
        return null;
      }, T$.intToNull()));
    }
    [_storeKeyOrRangeFilter](keyOrRange = null) {
      return sembast_filter.keyOrRangeFilter(field.Field.key, keyOrRange, false);
    }
    count(keyOrRange = null) {
      return this.inTransaction(core.int, dart.fn(() => store_ref_impl['SembastStoreRefExtension|count'](core.Object, core.Object, this.sdbStore, this.sdbClient, {filter: this[_storeKeyOrRangeFilter](keyOrRange)}), T$.VoidToFutureOfint()));
    }
    getAll(keyOrRange = null, count = null) {
      return this.inTransaction(T$.ListOfObject(), dart.fn(() => async.async(T$.ListOfObject(), (function*() {
        return (yield store_ref_impl['SembastStoreRefExtension|find'](core.Object, core.Object, this.sdbStore, this.sdbClient, {finder: finder$.Finder.new({filter: this[_storeKeyOrRangeFilter](keyOrRange), limit: count})}))[$map](core.Object, dart.fn(r => {
          if (r == null) dart.nullFailed(I[6], 175, 17, "r");
          return dart.nullCheck(this.recordToValue(r));
        }, T$.RecordSnapshotOfObject$ObjectToObject()))[$toList]({growable: false});
      }).bind(this)), T$.VoidToFutureOfListOfObject()));
    }
    getAllKeys(keyOrRange = null, count = null) {
      return this.inTransaction(T$.ListOfObject(), dart.fn(() => async.async(T$.ListOfObject(), (function*() {
        return yield store_ref_impl['SembastStoreRefExtension|findKeys'](core.Object, core.Object, this.sdbStore, this.sdbClient, {finder: finder$.Finder.new({filter: this[_storeKeyOrRangeFilter](keyOrRange), limit: count})});
      }).bind(this)), T$.VoidToFutureOfListOfObject()));
    }
    createIndex(name, keyPath, opts) {
      if (name == null) dart.nullFailed(I[6], 192, 28, "name");
      let unique = opts && 'unique' in opts ? opts.unique : null;
      let multiEntry = opts && 'multiEntry' in opts ? opts.multiEntry : null;
      let indexMeta = new common_meta.IdbIndexMeta.new(name, keyPath, unique, multiEntry);
      dart.nullCheck(this.meta).createIndex(this.database.meta, indexMeta);
      return new sembast_index.IndexSembast.new(this, indexMeta);
    }
    deleteIndex(name) {
      if (name == null) dart.nullFailed(I[6], 199, 27, "name");
      dart.nullCheck(this.meta).deleteIndex(this.database.meta, name);
    }
    delete(key) {
      if (key == null) dart.nullFailed(I[6], 204, 30, "key");
      return this[_inWritableTransaction](dart.void, dart.fn(() => record_ref_impl['SembastRecordRefExtension|delete'](core.Object, core.Object, this.sdbStore.record(key), this.sdbClient).then(dart.void, dart.fn(_ => null, T$.dynamicToNull())), T$.VoidToFutureOfvoid()));
    }
    recordToValue(record) {
      if (record == null) {
        return null;
      } else {
        let value = record.value;
        if (this.keyPath != null && core.Map.is(value)) {
          value = common_value.cloneValue(value, this.keyPath, record.key);
        }
        return sembast_value.fromSembastValue(value);
      }
    }
    getObject(key) {
      if (key == null) dart.nullFailed(I[6], 229, 29, "key");
      common_validation.checkKeyParam(key);
      return this.inTransaction(T$.ObjectN(), dart.fn(() => record_ref_impl['SembastRecordRefExtension|getSnapshot'](core.Object, core.Object, this.sdbStore.record(key), this.sdbClient).then(T$.ObjectN(), dart.fn(record => this.recordToValue(record), T$.RecordSnapshotNOfObject$ObjectToObjectN())), T$.VoidToFutureOfObjectN()));
    }
    index(name) {
      if (name == null) dart.nullFailed(I[6], 239, 22, "name");
      let indexMeta = dart.nullCheck(this.meta).index(name);
      return new sembast_index.IndexSembast.new(this, indexMeta);
    }
    sortOrders(ascending) {
      if (ascending == null) dart.nullFailed(I[6], 245, 39, "ascending");
      return sembast_cursor.keyPathSortOrders(this.keyField, ascending);
    }
    cursorFilter(key, range) {
      if (range != null) {
        return sembast_filter.keyRangeFilter(this.keyField, range, false);
      } else {
        return sembast_filter.keyFilter(this.keyField, key, false);
      }
    }
    get keyField() {
      let t11;
      t11 = this.keyPath;
      return t11 == null ? field.Field.key : t11;
    }
    openCursor(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let range = opts && 'range' in opts ? opts.range : null;
      let direction = opts && 'direction' in opts ? opts.direction : null;
      let autoAdvance = opts && 'autoAdvance' in opts ? opts.autoAdvance : null;
      let cursorMeta = new common_meta.IdbCursorMeta.new(key, range, direction, autoAdvance);
      let ctlr = new sembast_cursor.StoreCursorWithValueControllerSembast.new(this, cursorMeta);
      this.inTransaction(dart.dynamic, dart.fn(() => ctlr.openCursor(), T$.VoidToFuture()));
      return ctlr.stream;
    }
    openKeyCursor(opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let range = opts && 'range' in opts ? opts.range : null;
      let direction = opts && 'direction' in opts ? opts.direction : null;
      let autoAdvance = opts && 'autoAdvance' in opts ? opts.autoAdvance : null;
      let cursorMeta = new common_meta.IdbCursorMeta.new(key, range, direction, autoAdvance);
      let ctlr = new sembast_cursor.StoreKeyCursorControllerSembast.new(this, cursorMeta);
      this.inTransaction(dart.dynamic, dart.fn(() => ctlr.openCursor(), T$.VoidToFuture()));
      return ctlr.stream;
    }
    put(value, key = null) {
      if (value == null) dart.nullFailed(I[6], 287, 29, "value");
      value = sembast_value.toSembastValue(value);
      return this[_inWritableTransaction](core.Object, dart.fn(() => this.putImpl(value, this.getKeyImpl(value, key)), T$.VoidToFutureOfObject()));
    }
  };
  (sembast_object_store.ObjectStoreSembast.new = function(transaction, meta) {
    this[_sdbClient] = null;
    this[_sdbStore] = null;
    this[transaction$] = transaction;
    this[meta$1] = meta;
  }).prototype = sembast_object_store.ObjectStoreSembast.prototype;
  dart.addTypeTests(sembast_object_store.ObjectStoreSembast);
  dart.addTypeCaches(sembast_object_store.ObjectStoreSembast);
  dart.setMethodSignature(sembast_object_store.ObjectStoreSembast, () => ({
    __proto__: dart.getMethods(sembast_object_store.ObjectStoreSembast.__proto__),
    [_inWritableTransaction]: dart.gFnType(T => [async.Future$(T), [dart.fnType(async.FutureOr$(T), [])]], T => [dart.nullable(core.Object)]),
    inTransaction: dart.gFnType(T => [async.Future$(T), [dart.fnType(async.FutureOr$(T), [])]], T => [dart.nullable(core.Object)]),
    getKeyImpl: dart.fnType(dart.nullable(core.Object), [core.Object], [dart.nullable(core.Object)]),
    getUpdateKeyIfNeeded: dart.fnType(dart.dynamic, [dart.dynamic], [dart.dynamic]),
    putImpl: dart.fnType(async.Future$(core.Object), [dart.nullable(core.Object), dart.nullable(core.Object)]),
    add: dart.fnType(async.Future$(core.Object), [core.Object], [dart.nullable(core.Object)]),
    clear: dart.fnType(async.Future, []),
    [_storeKeyOrRangeFilter]: dart.fnType(filter.Filter, [], [dart.dynamic]),
    count: dart.fnType(async.Future$(core.int), [], [dart.nullable(core.Object)]),
    getAll: dart.fnType(async.Future$(core.List$(core.Object)), [], [dart.nullable(core.Object), dart.nullable(core.int)]),
    getAllKeys: dart.fnType(async.Future$(core.List$(core.Object)), [], [dart.nullable(core.Object), dart.nullable(core.int)]),
    createIndex: dart.fnType(idb.Index, [core.String, dart.dynamic], {multiEntry: dart.nullable(core.bool), unique: dart.nullable(core.bool)}, {}),
    deleteIndex: dart.fnType(dart.void, [core.String]),
    delete: dart.fnType(async.Future$(dart.void), [core.Object]),
    recordToValue: dart.fnType(dart.nullable(core.Object), [dart.nullable(record_snapshot.RecordSnapshot$(core.Object, core.Object))]),
    getObject: dart.fnType(async.Future$(dart.nullable(core.Object)), [core.Object]),
    index: dart.fnType(idb.Index, [core.String]),
    sortOrders: dart.fnType(core.List$(sort_order.SortOrder), [core.bool]),
    cursorFilter: dart.fnType(filter.Filter, [dart.dynamic, dart.nullable(idb.KeyRange)]),
    openCursor: dart.fnType(async.Stream$(idb.CursorWithValue), [], {autoAdvance: dart.nullable(core.bool), direction: dart.nullable(core.String), key: dart.dynamic, range: dart.nullable(idb.KeyRange)}, {}),
    openKeyCursor: dart.fnType(async.Stream$(idb.Cursor), [], {autoAdvance: dart.nullable(core.bool), direction: dart.nullable(core.String), key: dart.dynamic, range: dart.nullable(idb.KeyRange)}, {}),
    put: dart.fnType(async.Future$(core.Object), [core.Object], [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(sembast_object_store.ObjectStoreSembast, () => ({
    __proto__: dart.getGetters(sembast_object_store.ObjectStoreSembast.__proto__),
    database: sembast_database.DatabaseSembast,
    sdbDatabase: dart.nullable(database.Database),
    sdbTransaction: dart.nullable(transaction.Transaction),
    sdbStore: store_ref.StoreRef$(core.Object, core.Object),
    sdbClient: client.DatabaseClient,
    keyField: dart.dynamic
  }));
  dart.setLibraryUri(sembast_object_store.ObjectStoreSembast, I[7]);
  dart.setFieldSignature(sembast_object_store.ObjectStoreSembast, () => ({
    __proto__: dart.getFields(sembast_object_store.ObjectStoreSembast.__proto__),
    meta: dart.finalFieldType(dart.nullable(common_meta.IdbObjectStoreMeta)),
    transaction: dart.finalFieldType(dart.nullable(sembast_transaction.TransactionSembast)),
    [_sdbClient]: dart.fieldType(dart.nullable(client.DatabaseClient)),
    [_sdbStore]: dart.fieldType(dart.nullable(store_ref.StoreRef$(core.Object, core.Object)))
  }));
  var ___SdbVersionChangeEvent_request = dart.privateName(sembast_database, "_#_SdbVersionChangeEvent#request");
  var ___SdbVersionChangeEvent_request_isSet = dart.privateName(sembast_database, "_#_SdbVersionChangeEvent#request#isSet");
  sembast_database._SdbVersionChangeEvent = class _SdbVersionChangeEvent extends common_database.IdbVersionChangeEventBase {
    get request() {
      let t11;
      return dart.test(this[___SdbVersionChangeEvent_request_isSet]) ? (t11 = this[___SdbVersionChangeEvent_request], t11) : dart.throw(new _internal.LateError.fieldNI("request"));
    }
    set request(t11) {
      if (t11 == null) dart.nullFailed(I[8], 16, 16, "null");
      this[___SdbVersionChangeEvent_request_isSet] = true;
      this[___SdbVersionChangeEvent_request] = t11;
    }
    get target() {
      return this.request;
    }
    get database() {
      return this.transaction.database;
    }
    get transaction() {
      return sembast_transaction.TransactionSembast.as(this.request.transaction);
    }
    toString() {
      return dart.str(this.oldVersion) + " => " + dart.str(this.newVersion);
    }
  };
  (sembast_database._SdbVersionChangeEvent.new = function(database, oldVersion, newVersion) {
    let t11;
    if (database == null) dart.nullFailed(I[8], 30, 23, "database");
    if (newVersion == null) dart.nullFailed(I[8], 30, 55, "newVersion");
    this[___SdbVersionChangeEvent_request] = null;
    this[___SdbVersionChangeEvent_request_isSet] = false;
    this.newVersion = newVersion;
    this.oldVersion = (t11 = oldVersion, t11 == null ? 0 : t11);
    if (dart.notNull(this.oldVersion) >= dart.notNull(this.newVersion)) {
      dart.throw(new core.StateError.new("cannot downgrade from " + dart.str(oldVersion) + " to " + dart.str(this.newVersion)));
    }
    this.request = new idb.OpenDBRequest.new(database, dart.nullCheck(database.versionChangeTransaction));
  }).prototype = sembast_database._SdbVersionChangeEvent.prototype;
  dart.addTypeTests(sembast_database._SdbVersionChangeEvent);
  dart.addTypeCaches(sembast_database._SdbVersionChangeEvent);
  dart.setGetterSignature(sembast_database._SdbVersionChangeEvent, () => ({
    __proto__: dart.getGetters(sembast_database._SdbVersionChangeEvent.__proto__),
    request: idb.Request,
    target: core.Object,
    database: idb.Database,
    transaction: sembast_transaction.TransactionSembast
  }));
  dart.setSetterSignature(sembast_database._SdbVersionChangeEvent, () => ({
    __proto__: dart.getSetters(sembast_database._SdbVersionChangeEvent.__proto__),
    request: idb.Request
  }));
  dart.setLibraryUri(sembast_database._SdbVersionChangeEvent, I[9]);
  dart.setFieldSignature(sembast_database._SdbVersionChangeEvent, () => ({
    __proto__: dart.getFields(sembast_database._SdbVersionChangeEvent.__proto__),
    oldVersion: dart.finalFieldType(core.int),
    newVersion: dart.finalFieldType(core.int),
    [___SdbVersionChangeEvent_request]: dart.fieldType(dart.nullable(idb.Request)),
    [___SdbVersionChangeEvent_request_isSet]: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(sembast_database._SdbVersionChangeEvent, ['toString']);
  var versionChangeTransaction = dart.privateName(sembast_database, "DatabaseSembast.versionChangeTransaction");
  var meta = dart.privateName(sembast_database, "DatabaseSembast.meta");
  var db = dart.privateName(sembast_database, "DatabaseSembast.db");
  var mainStore = dart.privateName(sembast_database, "DatabaseSembast.mainStore");
  var _readMetaVersion = dart.privateName(sembast_database, "_readMetaVersion");
  var _loadStoresMeta = dart.privateName(sembast_database, "_loadStoresMeta");
  var _factory = dart.privateName(sembast_database, "_factory");
  var _factory$ = dart.privateName(idb, "_factory");
  const IdbDatabaseBase_DatabaseWithMetaMixin$36 = class IdbDatabaseBase_DatabaseWithMetaMixin extends common_database.IdbDatabaseBase {};
  (IdbDatabaseBase_DatabaseWithMetaMixin$36.new = function(_factory) {
    IdbDatabaseBase_DatabaseWithMetaMixin$36.__proto__.new.call(this, _factory);
  }).prototype = IdbDatabaseBase_DatabaseWithMetaMixin$36.prototype;
  dart.applyMixin(IdbDatabaseBase_DatabaseWithMetaMixin$36, common_meta.DatabaseWithMetaMixin);
  sembast_database.DatabaseSembast = class DatabaseSembast extends IdbDatabaseBase_DatabaseWithMetaMixin$36 {
    get versionChangeTransaction() {
      return this[versionChangeTransaction];
    }
    set versionChangeTransaction(value) {
      this[versionChangeTransaction] = value;
    }
    get meta() {
      return this[meta];
    }
    set meta(value) {
      super.meta = value;
    }
    get db() {
      return this[db];
    }
    set db(value) {
      this[db] = value;
    }
    get mainStore() {
      return this[mainStore];
    }
    set mainStore(value) {
      super.mainStore = value;
    }
    get factory() {
      return idb_client_sembast.IdbFactorySembast.as(super.factory);
    }
    get sdbFactory() {
      return this.factory.sdbFactory;
    }
    static fromDatabase(factory, db) {
      if (factory == null) dart.nullFailed(I[8], 67, 18, "factory");
      if (db == null) dart.nullFailed(I[8], 67, 40, "db");
      return async.async(sembast_database.DatabaseSembast, function* fromDatabase() {
        let idbDb = new sembast_database.DatabaseSembast.__(factory);
        idbDb.db = db;
        let version = (yield idbDb[_readMetaVersion]());
        idbDb.meta.name = db.path;
        idbDb.meta.version = version;
        return idbDb;
      });
    }
    [_loadStoresMeta](storeNames) {
      if (storeNames == null) dart.nullFailed(I[8], 82, 65, "storeNames");
      let keys = T$.JSArrayOfString().of([]);
      storeNames[$forEach](dart.fn(storeName => {
        if (storeName == null) dart.nullFailed(I[8], 84, 32, "storeName");
        keys[$add]("store_" + dart.str(storeName));
      }, T$.StringTovoid()));
      return records_ref_impl['SembastRecordsRefExtension|getSnapshots'](core.String, T$.ObjectN(), this.mainStore.records(keys), dart.nullCheck(this.db)).then(T$.ListOfIdbObjectStoreMeta(), dart.fn(records => {
        if (records == null) dart.nullFailed(I[8], 88, 60, "records");
        let list = T$.JSArrayOfIdbObjectStoreMeta().of([]);
        records[$forEach](dart.fn(record => {
          let map = core.Map.as(dart.nullCheck(record).value)[$cast](core.String, T$.ObjectN());
          let store = new common_meta.IdbObjectStoreMeta.fromMap(map);
          list[$add](store);
        }, T$.RecordSnapshotNOfString$ObjectNTovoid()));
        return list;
      }, T$.ListOfRecordSnapshotNOfString$ObjectNToListOfIdbObjectStoreMeta()));
    }
    [_readMetaVersion]() {
      return async.async(core.int, (function* _readMetaVersion() {
        return dart.nullCheck(this.db).transaction(core.int, dart.fn(txn => {
          if (txn == null) dart.nullFailed(I[8], 101, 29, "txn");
          return async.async(core.int, (function*() {
            let t12;
            this.meta.version = (t12 = T$.intN().as(yield record_ref_impl['SembastRecordRefExtension|get'](core.String, T$.ObjectN(), this.mainStore.record("version"), txn)), t12 == null ? 0 : t12);
            let storeList = (yield record_ref_impl['SembastRecordRefExtension|get'](core.String, T$.ObjectN(), this.mainStore.record("stores"), txn));
            if (storeList != null) {
              let storeNames = core.List.as(storeList)[$cast](core.String);
              yield this[_loadStoresMeta](storeNames).then(core.Null, dart.fn(storeMetas => {
                if (storeMetas == null) dart.nullFailed(I[8], 114, 45, "storeMetas");
                storeMetas[$forEach](dart.fn(store => {
                  if (store == null) dart.nullFailed(I[8], 115, 50, "store");
                  this.meta.putObjectStore(store);
                }, T$.IdbObjectStoreMetaTovoid()));
              }, T$.ListOfIdbObjectStoreMetaToNull()));
            }
            return dart.nullCheck(this.meta.version);
          }).bind(this));
        }, T$.TransactionToFutureOfint()));
      }).bind(this));
    }
    open(newVersion, onUpgradeNeeded) {
      return async.async(T$.DatabaseN(), (function* open() {
        let t28;
        let previousVersion = null;
        let previousVersion$35isSet = false;
        function previousVersion$35get() {
          return previousVersion$35isSet ? previousVersion : dart.throw(new _internal.LateError.localNI("previousVersion"));
        }
        dart.fn(previousVersion$35get, T$.VoidToint());
        function previousVersion$35set(t15) {
          if (t15 == null) dart.nullFailed(I[8], 126, 14, "null");
          previousVersion$35isSet = true;
          return previousVersion = t15;
        }
        dart.fn(previousVersion$35set, T$.intTodynamic());
        if (dart.test(sembast_factory.sembastDebug)) {
          core.print("open2 " + dart.str(onUpgradeNeeded) + " " + (onUpgradeNeeded != null ? "NOT NULL" : "NULL"));
        }
        this.db = (yield this.sdbFactory.openDatabase(this.factory.getDbPath(this.name), {version: 1, onVersionChanged: dart.fn((db, oldVersion, newVersion) => {
            if (db == null) dart.nullFailed(I[8], 135, 28, "db");
            if (oldVersion == null) dart.nullFailed(I[8], 135, 32, "oldVersion");
            if (newVersion == null) dart.nullFailed(I[8], 135, 44, "newVersion");
            if (dart.test(sembast_factory.sembastDebug)) {
              core.print("changing " + dart.str(db.path) + " " + dart.str(oldVersion) + " -> " + dart.str(newVersion));
            }
          }, T$.DatabaseAndintAndintToNull())}));
        try {
          previousVersion$35set(yield this[_readMetaVersion]());
          if (previousVersion$35get() === 0) {
            newVersion == null ? newVersion = 1 : null;
          }
          if (newVersion != null && newVersion != previousVersion$35get()) {
            let changedStores = null;
            let changedStores$35isSet = false;
            function changedStores$35get() {
              return changedStores$35isSet ? changedStores : dart.throw(new _internal.LateError.localNI("changedStores"));
            }
            dart.fn(changedStores$35get, T$.VoidToSetOfIdbObjectStoreMeta());
            function changedStores$35set(t20) {
              if (t20 == null) dart.nullFailed(I[8], 148, 38, "null");
              changedStores$35isSet = true;
              return changedStores = t20;
            }
            dart.fn(changedStores$35set, T$.SetOfIdbObjectStoreMetaTodynamic());
            let deletedStores = null;
            let deletedStores$35isSet = false;
            function deletedStores$35get() {
              return deletedStores$35isSet ? deletedStores : dart.throw(new _internal.LateError.localNI("deletedStores"));
            }
            dart.fn(deletedStores$35get, T$.VoidToSetOfIdbObjectStoreMeta());
            function deletedStores$35set(t25) {
              if (t25 == null) dart.nullFailed(I[8], 149, 38, "null");
              deletedStores$35isSet = true;
              return deletedStores = t25;
            }
            dart.fn(deletedStores$35set, T$.SetOfIdbObjectStoreMetaTodynamic());
            yield this.meta.onUpgradeNeeded(dart.fn(() => async.async(core.Null, (function*() {
              this.versionChangeTransaction = new sembast_transaction.TransactionSembast.new(this, this.meta.versionChangeTransaction);
              if (onUpgradeNeeded != null) {
                yield onUpgradeNeeded(new sembast_database._SdbVersionChangeEvent.new(this, previousVersion$35get(), dart.nullCheck(newVersion)));
              }
              yield dart.nullCheck(this.versionChangeTransaction).completed;
              changedStores$35set(T$.LinkedHashSetOfIdbObjectStoreMeta().from(dart.nullCheck(this.meta.versionChangeTransaction).createdStores));
              changedStores$35get().addAll(dart.nullCheck(this.meta.versionChangeTransaction).updatedStores);
              deletedStores$35set(dart.nullCheck(this.meta.versionChangeTransaction).deletedStores);
            }).bind(this)), T$.VoidToFutureOfNull()));
            yield dart.nullCheck(this.db).transaction(core.Null, dart.fn(txn => {
              if (txn == null) dart.nullFailed(I[8], 167, 32, "txn");
              return async.async(core.Null, (function*() {
                let t27;
                yield record_ref_impl['SembastRecordRefExtension|put'](core.String, T$.ObjectN(), this.mainStore.record("version"), txn, newVersion);
                for (let storeMeta of deletedStores$35get()) {
                  yield store_ref_impl['SembastStoreRefExtension|drop'](dart.dynamic, dart.dynamic, store_ref.StoreRef.new(storeMeta.name), txn);
                }
                if (dart.test(changedStores$35get()[$isNotEmpty]) || dart.test(deletedStores$35get()[$isNotEmpty])) {
                  yield record_ref_impl['SembastRecordRefExtension|put'](core.String, T$.ObjectN(), this.mainStore.record("stores"), txn, (t27 = core.List.from(this.objectStoreNames), (() => {
                    t27[$sort]();
                    return t27;
                  })()));
                }
                for (let storeMeta of changedStores$35get()) {
                  yield record_ref_impl['SembastRecordRefExtension|put'](core.String, T$.ObjectN(), this.mainStore.record("store_" + dart.str(storeMeta.name)), txn, storeMeta.toMap());
                }
              }).bind(this));
            }, T$.TransactionToFutureOfNull()));
            this.meta.version = newVersion;
          } else {
            this.meta.version = previousVersion$35get();
          }
          return this.db;
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (core.Object.is(e)) {
            try {
              yield (t28 = this.db, t28 == null ? null : t28.close());
            } catch (e$0) {
              let _ = dart.getThrown(e$0);
              if (core.Object.is(_)) {
              } else
                throw e$0;
            }
            dart.rethrow(e$);
          } else
            throw e$;
        }
      }).bind(this));
    }
    close() {
      dart.nullCheck(this.db).close();
    }
    createObjectStore(name, opts) {
      if (name == null) dart.nullFailed(I[8], 210, 40, "name");
      let keyPath = opts && 'keyPath' in opts ? opts.keyPath : null;
      let autoIncrement = opts && 'autoIncrement' in opts ? opts.autoIncrement : null;
      let storeMeta = new common_meta.IdbObjectStoreMeta.new(name, keyPath, autoIncrement);
      this.meta.createObjectStore(storeMeta);
      return new sembast_object_store.ObjectStoreSembast.new(this.versionChangeTransaction, storeMeta);
    }
    deleteObjectStore(name) {
      if (name == null) dart.nullFailed(I[8], 218, 33, "name");
      this.meta.deleteObjectStore(name);
    }
    get objectStoreNames() {
      return this.meta.objectStoreNames;
    }
    get onVersionChange() {
      dart.throw("not implemented yet");
    }
    transaction(storeNameOrStoreNames, mode) {
      if (mode == null) dart.nullFailed(I[8], 233, 57, "mode");
      let txnMeta = this.meta.transaction(storeNameOrStoreNames, mode);
      return new sembast_transaction.TransactionSembast.new(this, txnMeta);
    }
    transactionList(storeNames, mode) {
      if (storeNames == null) dart.nullFailed(I[8], 242, 44, "storeNames");
      if (mode == null) dart.nullFailed(I[8], 242, 63, "mode");
      let txnMeta = this.meta.transaction(storeNames, mode);
      return new sembast_transaction.TransactionSembast.new(this, txnMeta);
    }
    get version() {
      let t29;
      t29 = this.meta.version;
      return t29 == null ? 0 : t29;
    }
    toDebugMap() {
      let map = this.meta.toDebugMap();
      return map;
    }
    toString() {
      return dart.toString(this.toDebugMap());
    }
    get [_factory$]() {
      return idb.IdbFactory.as(this[$noSuchMethod](new core._Invocation.getter(C[1] || CT.C1)));
    }
  };
  (sembast_database.DatabaseSembast.__ = function(factory) {
    if (factory == null) dart.nullFailed(I[8], 62, 32, "factory");
    this[versionChangeTransaction] = null;
    this[meta] = new common_meta.IdbDatabaseMeta.new();
    this[db] = null;
    this[mainStore] = T$.StoreRefOfString$ObjectN().main();
    sembast_database.DatabaseSembast.__proto__.new.call(this, factory);
    ;
  }).prototype = sembast_database.DatabaseSembast.prototype;
  (sembast_database.DatabaseSembast.new = function(factory, name) {
    if (factory == null) dart.nullFailed(I[8], 78, 30, "factory");
    if (name == null) dart.nullFailed(I[8], 78, 46, "name");
    this[versionChangeTransaction] = null;
    this[meta] = new common_meta.IdbDatabaseMeta.new();
    this[db] = null;
    this[mainStore] = T$.StoreRefOfString$ObjectN().main();
    sembast_database.DatabaseSembast.__proto__.new.call(this, factory);
    this.meta.name = name;
  }).prototype = sembast_database.DatabaseSembast.prototype;
  dart.addTypeTests(sembast_database.DatabaseSembast);
  dart.addTypeCaches(sembast_database.DatabaseSembast);
  dart.setMethodSignature(sembast_database.DatabaseSembast, () => ({
    __proto__: dart.getMethods(sembast_database.DatabaseSembast.__proto__),
    [_loadStoresMeta]: dart.fnType(async.Future$(core.List$(common_meta.IdbObjectStoreMeta)), [core.List$(core.String)]),
    [_readMetaVersion]: dart.fnType(async.Future$(core.int), []),
    open: dart.fnType(async.Future$(dart.nullable(database.Database)), [dart.nullable(core.int), dart.nullable(dart.fnType(dart.void, [idb.VersionChangeEvent]))]),
    close: dart.fnType(dart.void, []),
    createObjectStore: dart.fnType(idb.ObjectStore, [core.String], {autoIncrement: dart.nullable(core.bool), keyPath: dart.nullable(core.String)}, {}),
    transaction: dart.fnType(idb.Transaction, [dart.dynamic, core.String]),
    transactionList: dart.fnType(idb.Transaction, [core.List$(core.String), core.String]),
    toDebugMap: dart.fnType(core.Map, [])
  }));
  dart.setGetterSignature(sembast_database.DatabaseSembast, () => ({
    __proto__: dart.getGetters(sembast_database.DatabaseSembast.__proto__),
    factory: idb_client_sembast.IdbFactorySembast,
    sdbFactory: factory.DatabaseFactory,
    onVersionChange: async.Stream$(idb.VersionChangeEvent),
    [_factory$]: idb.IdbFactory
  }));
  dart.setLibraryUri(sembast_database.DatabaseSembast, I[9]);
  dart.setFieldSignature(sembast_database.DatabaseSembast, () => ({
    __proto__: dart.getFields(sembast_database.DatabaseSembast.__proto__),
    versionChangeTransaction: dart.fieldType(dart.nullable(sembast_transaction.TransactionSembast)),
    meta: dart.finalFieldType(common_meta.IdbDatabaseMeta),
    db: dart.fieldType(dart.nullable(database.Database)),
    mainStore: dart.finalFieldType(store_ref.StoreRef$(core.String, dart.nullable(core.Object)))
  }));
  dart.defineExtensionMethods(sembast_database.DatabaseSembast, ['toString']);
  idb_client_sembast.IdbFactorySembast = class IdbFactorySembast extends common_factory.IdbFactoryBase {
    static new(databaseFactory, path = null) {
      if (databaseFactory == null) dart.nullFailed(I[10], 22, 49, "databaseFactory");
      return new sembast_factory.IdbFactorySembastImpl.new(databaseFactory, path);
    }
  };
  dart.addTypeTests(idb_client_sembast.IdbFactorySembast);
  dart.addTypeCaches(idb_client_sembast.IdbFactorySembast);
  dart.setLibraryUri(idb_client_sembast.IdbFactorySembast, I[11]);
  dart.copyProperties(idb_client_sembast, {
    get idbFactorySembastMemory() {
      return sembast_factory.idbFactorySembastMemoryImpl;
    }
  });
  dart.defineLazy(idb_client_sembast, {
    /*idb_client_sembast.idbFactoryNameSembast*/get idbFactoryNameSembast() {
      return "sembast";
    }
  }, false);
  var _databaseFactory$ = dart.privateName(sembast_factory, "_databaseFactory");
  var _path$ = dart.privateName(sembast_factory, "_path");
  sembast_factory.IdbFactorySembastImpl = class IdbFactorySembastImpl extends common_factory.IdbFactoryBase {
    getDbPath(dbName) {
      if (dbName == null) dart.nullFailed(I[12], 34, 27, "dbName");
      return this[_path$] == null ? dbName : path.join(dart.nullCheck(this[_path$]), dbName);
    }
    get sdbFactory() {
      return this[_databaseFactory$];
    }
    get persistent() {
      return this[_databaseFactory$].hasStorage;
    }
    get name() {
      return "sembast";
    }
    getSdbDatabase(db) {
      if (db == null) dart.nullFailed(I[12], 50, 41, "db");
      return sembast_database.DatabaseSembast.as(db).db;
    }
    openFromSdbDatabase(sdbDb) {
      if (sdbDb == null) dart.nullFailed(I[12], 53, 53, "sdbDb");
      return sembast_database.DatabaseSembast.fromDatabase(this, sdbDb);
    }
    open(dbName, opts) {
      if (dbName == null) dart.nullFailed(I[12], 57, 32, "dbName");
      let version = opts && 'version' in opts ? opts.version : null;
      let onUpgradeNeeded = opts && 'onUpgradeNeeded' in opts ? opts.onUpgradeNeeded : null;
      let onBlocked = opts && 'onBlocked' in opts ? opts.onBlocked : null;
      return async.async(idb.Database, (function* open() {
        this.checkOpenArguments({version: version, onUpgradeNeeded: onUpgradeNeeded});
        let db = new sembast_database.DatabaseSembast.new(this, dbName);
        if (dart.test(sembast_factory.sembastDebug)) {
          core.print("open1 onUpgradeNeeded " + (onUpgradeNeeded != null ? "NOT NULL" : "NULL"));
        }
        yield db.open(version, onUpgradeNeeded);
        return db;
      }).bind(this));
    }
    deleteDatabase(dbName, opts) {
      if (dbName == null) dart.nullFailed(I[12], 82, 44, "dbName");
      let onBlocked = opts && 'onBlocked' in opts ? opts.onBlocked : null;
      return async.async(idb.IdbFactory, (function* deleteDatabase() {
        yield this[_databaseFactory$].deleteDatabase(this.getDbPath(dbName));
        return this;
      }).bind(this));
    }
    get supportsDatabaseNames() {
      return false;
    }
    getDatabaseNames() {
      dart.throw(new database_exception.DatabaseException.new("getDatabaseNames not supported"));
    }
    get supportsDoubleKey() {
      return true;
    }
    toString() {
      return "IdbFactorySembast(" + dart.str(this[_databaseFactory$]) + ")";
    }
  };
  (sembast_factory.IdbFactorySembastImpl.new = function(_databaseFactory, _path = null) {
    if (_databaseFactory == null) dart.nullFailed(I[12], 43, 30, "_databaseFactory");
    this[_databaseFactory$] = _databaseFactory;
    this[_path$] = _path;
    sembast_factory.IdbFactorySembastImpl.__proto__.new.call(this);
    ;
  }).prototype = sembast_factory.IdbFactorySembastImpl.prototype;
  dart.addTypeTests(sembast_factory.IdbFactorySembastImpl);
  dart.addTypeCaches(sembast_factory.IdbFactorySembastImpl);
  sembast_factory.IdbFactorySembastImpl[dart.implements] = () => [idb_client_sembast.IdbFactorySembast];
  dart.setMethodSignature(sembast_factory.IdbFactorySembastImpl, () => ({
    __proto__: dart.getMethods(sembast_factory.IdbFactorySembastImpl.__proto__),
    getDbPath: dart.fnType(core.String, [core.String]),
    getSdbDatabase: dart.fnType(dart.nullable(database.Database), [idb.Database]),
    openFromSdbDatabase: dart.fnType(async.Future$(idb.Database), [database.Database]),
    open: dart.fnType(async.Future$(idb.Database), [core.String], {onBlocked: dart.nullable(dart.fnType(dart.void, [idb.Event])), onUpgradeNeeded: dart.nullable(dart.fnType(dart.void, [idb.VersionChangeEvent])), version: dart.nullable(core.int)}, {}),
    deleteDatabase: dart.fnType(async.Future$(idb.IdbFactory), [core.String], {onBlocked: dart.nullable(dart.fnType(dart.void, [idb.Event]))}, {}),
    getDatabaseNames: dart.fnType(async.Future$(core.List$(core.String)), [])
  }));
  dart.setGetterSignature(sembast_factory.IdbFactorySembastImpl, () => ({
    __proto__: dart.getGetters(sembast_factory.IdbFactorySembastImpl.__proto__),
    sdbFactory: factory.DatabaseFactory,
    persistent: core.bool,
    name: core.String,
    supportsDatabaseNames: core.bool,
    supportsDoubleKey: core.bool
  }));
  dart.setLibraryUri(sembast_factory.IdbFactorySembastImpl, I[13]);
  dart.setFieldSignature(sembast_factory.IdbFactorySembastImpl, () => ({
    __proto__: dart.getFields(sembast_factory.IdbFactorySembastImpl.__proto__),
    [_databaseFactory$]: dart.finalFieldType(factory.DatabaseFactory),
    [_path$]: dart.finalFieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(sembast_factory.IdbFactorySembastImpl, ['toString']);
  sembast_factory.newIdbFactorySembastMemoryImpl = function newIdbFactorySembastMemoryImpl() {
    return idb_client_sembast.IdbFactorySembast.new(sembast_memory.newDatabaseFactoryMemory());
  };
  dart.copyProperties(sembast_factory, {
    get idbFactorySembastMemoryFsImpl() {
      let t29;
      t29 = sembast_factory._idbFactorySembastMemoryFsImpl;
      return t29 == null ? sembast_factory._idbFactorySembastMemoryFsImpl = idb_client_sembast.IdbFactorySembast.new(sembast_memory.databaseFactoryMemoryFs) : t29;
    },
    get idbFactorySembastMemoryImpl() {
      let t29;
      t29 = sembast_factory._idbSembastMemoryFactoryImpl;
      return t29 == null ? sembast_factory._idbSembastMemoryFactoryImpl = idb_client_sembast.IdbFactorySembast.new(sembast_memory.databaseFactoryMemory) : t29;
    }
  });
  dart.defineLazy(sembast_factory, {
    /*sembast_factory.sembastDebug*/get sembastDebug() {
      return false;
    },
    set sembastDebug(_) {},
    /*sembast_factory._idbFactorySembastMemoryFsImpl*/get _idbFactorySembastMemoryFsImpl() {
      return null;
    },
    set _idbFactorySembastMemoryFsImpl(_) {},
    /*sembast_factory._idbSembastMemoryFactoryImpl*/get _idbSembastMemoryFactoryImpl() {
      return null;
    },
    set _idbSembastMemoryFactoryImpl(_) {}
  }, false);
  dart.trackLibraries("packages/idb_shim/src/sembast/sembast_transaction.dart", {
    "package:idb_shim/src/sembast/sembast_transaction.dart": sembast_transaction,
    "package:idb_shim/src/sembast/sembast_index.dart": sembast_index,
    "package:idb_shim/src/sembast/sembast_cursor.dart": sembast_cursor,
    "package:idb_shim/src/sembast/sembast_object_store.dart": sembast_object_store,
    "package:idb_shim/src/sembast/sembast_database.dart": sembast_database,
    "package:idb_shim/idb_client_sembast.dart": idb_client_sembast,
    "package:idb_shim/src/sembast/sembast_factory.dart": sembast_factory
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["../common/common_transaction.dart","sembast_transaction.dart","sembast_index.dart","sembast_cursor.dart","sembast_object_store.dart","sembast_database.dart","../common/common_database.dart","../../idb_client_sembast.dart","sembast_factory.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../packages/idb_shim/src/sembast/sembast_transaction.dart.lib.js"}');
  // Exports:
  return {
    src__sembast__sembast_transaction: sembast_transaction,
    src__sembast__sembast_index: sembast_index,
    src__sembast__sembast_cursor: sembast_cursor,
    src__sembast__sembast_object_store: sembast_object_store,
    src__sembast__sembast_database: sembast_database,
    idb_client_sembast: idb_client_sembast,
    src__sembast__sembast_factory: sembast_factory
  };
}));

//# sourceMappingURL=sembast_transaction.dart.lib.js.map
