define(['dart_sdk'], (function load__packages__xxtea__xxtea_dart(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const _native_typed_data = dart_sdk._native_typed_data;
  const convert = dart_sdk.convert;
  const typed_data = dart_sdk.typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var xxtea = Object.create(dart.library);
  var $length = dartx.length;
  var $_get = dartx._get;
  var $rightShift = dartx['>>'];
  var $_set = dartx._set;
  var $leftShift = dartx['<<'];
  var $setAll = dartx.setAll;
  var $sublist = dartx.sublist;
  var $truncate = dartx.truncate;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    Uint8ListN: () => (T.Uint8ListN = dart.constFn(dart.nullable(typed_data.Uint8List)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: xxtea.XXTEA.prototype
      });
    }
  }, false);
  var C = [void 0];
  var I = [
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/xxtea-2.1.0/lib/xxtea.dart",
    "package:xxtea/xxtea.dart"
  ];
  var _toUint8List = dart.privateName(xxtea, "_toUint8List");
  var _toUint32List = dart.privateName(xxtea, "_toUint32List");
  var _mx = dart.privateName(xxtea, "_mx");
  var _fixkey = dart.privateName(xxtea, "_fixkey");
  var _int = dart.privateName(xxtea, "_int");
  var _encryptUint32List = dart.privateName(xxtea, "_encryptUint32List");
  var _decryptUint32List = dart.privateName(xxtea, "_decryptUint32List");
  xxtea.XXTEA = class XXTEA extends core.Object {
    [_toUint8List](v, includeLength) {
      if (v == null) dart.nullFailed(I[0], 44, 38, "v");
      if (includeLength == null) dart.nullFailed(I[0], 44, 46, "includeLength");
      let length = v[$length];
      let n = dart.notNull(length) << 2 >>> 0;
      if (dart.test(includeLength)) {
        let m = v[$_get](dart.notNull(length) - 1);
        n = dart.notNull(n) - 4;
        if (dart.notNull(m) < dart.notNull(n) - 3 || dart.notNull(m) > dart.notNull(n)) {
          return null;
        }
        n = m;
      }
      let bytes = _native_typed_data.NativeUint8List.new(n);
      for (let i = 0; i < dart.notNull(n); i = i + 1) {
        bytes[$_set](i, v[$_get](i[$rightShift](2))[$rightShift]((i & 3) << 3));
      }
      return bytes;
    }
    [_toUint32List](bytes, includeLength) {
      let t1, t0;
      if (bytes == null) dart.nullFailed(I[0], 62, 38, "bytes");
      let length = bytes[$length];
      let n = length[$rightShift](2);
      if ((dart.notNull(length) & 3) !== 0) n = n + 1;
      let v = null;
      if (dart.dtest(includeLength)) {
        v = _native_typed_data.NativeUint32List.new(n + 1);
        v[$_set](n, length);
      } else {
        v = _native_typed_data.NativeUint32List.new(n);
      }
      for (let i = 0; i < dart.notNull(length); i = i + 1) {
        t0 = v;
        t1 = i[$rightShift](2);
        t0[$_set](t1, (dart.notNull(t0[$_get](t1)) | bytes[$_get](i)[$leftShift]((i & 3) << 3)) >>> 0);
      }
      return v;
    }
    [_mx](sum, y, z, p, e, k) {
      if (sum == null) dart.nullFailed(I[0], 79, 15, "sum");
      if (y == null) dart.nullFailed(I[0], 79, 24, "y");
      if (z == null) dart.nullFailed(I[0], 79, 31, "z");
      if (p == null) dart.nullFailed(I[0], 79, 38, "p");
      if (e == null) dart.nullFailed(I[0], 79, 45, "e");
      if (k == null) dart.nullFailed(I[0], 79, 59, "k");
      return (((z[$rightShift](5) ^ dart.notNull(y) << 2 >>> 0) >>> 0) + ((y[$rightShift](3) ^ dart.notNull(z) << 4 >>> 0) >>> 0) ^ ((dart.notNull(sum) ^ dart.notNull(y)) >>> 0) + ((dart.notNull(k[$_get]((dart.notNull(p) & 3 ^ dart.notNull(e)) >>> 0)) ^ dart.notNull(z)) >>> 0)) >>> 0;
    }
    [_fixkey](key) {
      if (key == null) dart.nullFailed(I[0], 84, 31, "key");
      if (dart.notNull(key[$length]) < 16) {
        let k = _native_typed_data.NativeUint8List.new(16);
        k[$setAll](0, key);
        return k;
      }
      return key[$sublist](0, 16);
    }
    [_int](i) {
      if (i == null) dart.nullFailed(I[0], 93, 16, "i");
      return (dart.notNull(i) & 4294967295) >>> 0;
    }
    [_encryptUint32List](v, k) {
      let t4, t3, t2, t3$, t2$;
      if (v == null) dart.nullFailed(I[0], 97, 44, "v");
      if (k == null) dart.nullFailed(I[0], 97, 58, "k");
      let length = v[$length];
      let n = dart.notNull(length) - 1;
      let y = null;
      let z = null;
      let sum = null;
      let e = null;
      let p = null;
      let q = null;
      z = v[$_get](n);
      sum = 0;
      for (let t0 = q = 6 + (52 / dart.notNull(length))[$truncate](); dart.dtest(dart.dsend(q, '>', [0])); q = dart.dsend(q, '-', [1])) {
        sum = this[_int](core.int.as(dart.dsend(sum, '+', [2654435769.0])));
        e = dart.dsend(dart.dsend(sum, '>>', [2]), '&', [3]);
        for (let t1 = p = 0; dart.dtest(dart.dsend(p, '<', [n])); p = dart.dsend(p, '+', [1])) {
          y = v[$_get](core.int.as(dart.dsend(p, '+', [1])));
          z = (t2 = v, t3 = core.int.as(p), t4 = this[_int](dart.notNull(v[$_get](core.int.as(p))) + dart.notNull(this[_mx](core.int.as(sum), core.int.as(y), core.int.as(z), core.int.as(p), core.int.as(e), k))), t2[$_set](t3, t4), t4);
        }
        y = v[$_get](0);
        z = (t2$ = v, t3$ = this[_int](dart.notNull(v[$_get](n)) + dart.notNull(this[_mx](core.int.as(sum), core.int.as(y), core.int.as(z), core.int.as(p), core.int.as(e), k))), t2$[$_set](n, t3$), t3$);
      }
      return v;
    }
    [_decryptUint32List](v, k) {
      let t6, t5, t4, t6$, t5$, t4$;
      if (v == null) dart.nullFailed(I[0], 116, 44, "v");
      if (k == null) dart.nullFailed(I[0], 116, 58, "k");
      let length = v[$length];
      let n = dart.notNull(length) - 1;
      let y = null;
      let z = null;
      let sum = null;
      let e = null;
      let p = null;
      let q = null;
      y = v[$_get](0);
      q = 6 + (52 / dart.notNull(length))[$truncate]();
      for (let t2 = sum = this[_int](core.int.as(dart.dsend(q, '*', [2654435769.0]))); !dart.equals(sum, 0); sum = this[_int](core.int.as(dart.dsend(sum, '-', [2654435769.0])))) {
        e = dart.dsend(dart.dsend(sum, '>>', [2]), '&', [3]);
        for (let t3 = p = n; dart.dtest(dart.dsend(p, '>', [0])); p = dart.dsend(p, '-', [1])) {
          z = v[$_get](core.int.as(dart.dsend(p, '-', [1])));
          y = (t4 = v, t5 = core.int.as(p), t6 = this[_int](dart.notNull(v[$_get](core.int.as(p))) - dart.notNull(this[_mx](core.int.as(sum), core.int.as(y), core.int.as(z), core.int.as(p), core.int.as(e), k))), t4[$_set](t5, t6), t6);
        }
        z = v[$_get](n);
        y = (t4$ = v, t5$ = 0, t6$ = this[_int](dart.notNull(v[$_get](0)) - dart.notNull(this[_mx](core.int.as(sum), core.int.as(y), core.int.as(z), core.int.as(p), core.int.as(e), k))), t4$[$_set](t5$, t6$), t6$);
      }
      return v;
    }
    encrypt(data, key, opts) {
      let includeLength = opts && 'includeLength' in opts ? opts.includeLength : true;
      if (includeLength == null) dart.nullFailed(I[0], 134, 55, "includeLength");
      if (typeof data == 'string') data = convert.utf8.encode(data);
      if (typeof key == 'string') key = convert.utf8.encode(key);
      if (data == null || dart.equals(dart.dload(data, 'length'), 0)) {
        return T.Uint8ListN().as(data);
      }
      return this[_toUint8List](this[_encryptUint32List](this[_toUint32List](typed_data.Uint8List.as(data), includeLength), this[_toUint32List](this[_fixkey](typed_data.Uint8List.as(key)), false)), false);
    }
    encryptToString(data, key, opts) {
      let includeLength = opts && 'includeLength' in opts ? opts.includeLength : true;
      if (includeLength == null) dart.nullFailed(I[0], 147, 13, "includeLength");
      let encrypted = this.encrypt(data, key, {includeLength: includeLength});
      if (encrypted != null) {
        return convert.base64.encode(encrypted);
      }
    }
    decrypt(data, key, opts) {
      let includeLength = opts && 'includeLength' in opts ? opts.includeLength : true;
      if (includeLength == null) dart.nullFailed(I[0], 155, 55, "includeLength");
      if (typeof data == 'string') data = convert.base64.decode(data);
      if (typeof key == 'string') key = convert.utf8.encode(key);
      if (data == null || dart.equals(dart.dload(data, 'length'), 0)) {
        return T.Uint8ListN().as(data);
      }
      return this[_toUint8List](this[_decryptUint32List](this[_toUint32List](typed_data.Uint8List.as(data), false), this[_toUint32List](this[_fixkey](typed_data.Uint8List.as(key)), false)), includeLength);
    }
    decryptToString(data, key, opts) {
      let includeLength = opts && 'includeLength' in opts ? opts.includeLength : true;
      if (includeLength == null) dart.nullFailed(I[0], 168, 13, "includeLength");
      let decrypted = this.decrypt(data, key, {includeLength: includeLength});
      if (decrypted != null) {
        return convert.utf8.decode(decrypted);
      }
    }
  };
  (xxtea.XXTEA.new = function() {
    ;
  }).prototype = xxtea.XXTEA.prototype;
  dart.addTypeTests(xxtea.XXTEA);
  dart.addTypeCaches(xxtea.XXTEA);
  dart.setMethodSignature(xxtea.XXTEA, () => ({
    __proto__: dart.getMethods(xxtea.XXTEA.__proto__),
    [_toUint8List]: dart.fnType(dart.nullable(typed_data.Uint8List), [typed_data.Uint32List, core.bool]),
    [_toUint32List]: dart.fnType(typed_data.Uint32List, [typed_data.Uint8List, dart.dynamic]),
    [_mx]: dart.fnType(core.int, [core.int, core.int, core.int, core.int, core.int, typed_data.Uint32List]),
    [_fixkey]: dart.fnType(typed_data.Uint8List, [typed_data.Uint8List]),
    [_int]: dart.fnType(core.int, [core.int]),
    [_encryptUint32List]: dart.fnType(typed_data.Uint32List, [typed_data.Uint32List, typed_data.Uint32List]),
    [_decryptUint32List]: dart.fnType(typed_data.Uint32List, [typed_data.Uint32List, typed_data.Uint32List]),
    encrypt: dart.fnType(dart.nullable(typed_data.Uint8List), [dart.dynamic, dart.dynamic], {includeLength: core.bool}, {}),
    encryptToString: dart.fnType(dart.nullable(core.String), [dart.dynamic, dart.dynamic], {includeLength: core.bool}, {}),
    decrypt: dart.fnType(dart.nullable(typed_data.Uint8List), [dart.dynamic, dart.dynamic], {includeLength: core.bool}, {}),
    decryptToString: dart.fnType(dart.nullable(core.String), [dart.dynamic, dart.dynamic], {includeLength: core.bool}, {})
  }));
  dart.setLibraryUri(xxtea.XXTEA, I[1]);
  dart.defineLazy(xxtea.XXTEA, {
    /*xxtea.XXTEA._DELTA*/get _DELTA() {
      return 2654435769.0;
    }
  }, false);
  xxtea.xxteaEncrypt = function xxteaEncrypt(data, key, opts) {
    let includeLength = opts && 'includeLength' in opts ? opts.includeLength : true;
    if (includeLength == null) dart.nullFailed(I[0], 24, 15, "includeLength");
    return xxtea.xxtea.encrypt(data, key, {includeLength: includeLength});
  };
  xxtea.xxteaDecrypt = function xxteaDecrypt(data, key, opts) {
    let includeLength = opts && 'includeLength' in opts ? opts.includeLength : true;
    if (includeLength == null) dart.nullFailed(I[0], 28, 15, "includeLength");
    return xxtea.xxtea.decrypt(data, key, {includeLength: includeLength});
  };
  xxtea.xxteaEncryptToString = function xxteaEncryptToString(data, key, opts) {
    let includeLength = opts && 'includeLength' in opts ? opts.includeLength : true;
    if (includeLength == null) dart.nullFailed(I[0], 32, 15, "includeLength");
    return xxtea.xxtea.encryptToString(data, key, {includeLength: includeLength});
  };
  xxtea.xxteaDecryptToString = function xxteaDecryptToString(data, key, opts) {
    let includeLength = opts && 'includeLength' in opts ? opts.includeLength : true;
    if (includeLength == null) dart.nullFailed(I[0], 36, 15, "includeLength");
    return xxtea.xxtea.decryptToString(data, key, {includeLength: includeLength});
  };
  dart.defineLazy(xxtea, {
    /*xxtea.xxtea*/get xxtea() {
      return C[0] || CT.C0;
    }
  }, false);
  dart.trackLibraries("packages/xxtea/xxtea.dart", {
    "package:xxtea/xxtea.dart": xxtea
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["xxtea.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../packages/xxtea/xxtea.dart.lib.js"}');
  // Exports:
  return {
    xxtea: xxtea
  };
}));

//# sourceMappingURL=xxtea.dart.lib.js.map
