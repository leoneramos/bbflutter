define(['dart_sdk', 'packages/async/src/stream_completer.dart', 'packages/async/src/stream_sink_completer.dart', 'packages/async/src/null_stream_sink.dart', 'packages/async/src/stream_sink_transformer/typed.dart', 'packages/async/src/async_memoizer.dart', 'packages/async/src/delegate/stream_sink.dart', 'packages/async/src/single_subscription_transformer.dart'], (function load__packages__stream_channel__src__stream_channel_controller_dart(dart_sdk, packages__async__src__stream_completer$46dart, packages__async__src__stream_sink_completer$46dart, packages__async__src__null_stream_sink$46dart, packages__async__src__stream_sink_transformer__typed$46dart, packages__async__src__async_memoizer$46dart, packages__async__src__delegate__stream_sink$46dart, packages__async__src__single_subscription_transformer$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _internal = dart_sdk._internal;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const _interceptors = dart_sdk._interceptors;
  const convert = dart_sdk.convert;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const stream_completer = packages__async__src__stream_completer$46dart.src__stream_completer;
  const stream_sink_completer = packages__async__src__stream_sink_completer$46dart.src__stream_sink_completer;
  const null_stream_sink = packages__async__src__null_stream_sink$46dart.src__null_stream_sink;
  const stream_sink_transformer = packages__async__src__stream_sink_transformer__typed$46dart.src__stream_sink_transformer;
  const stream_transformer_wrapper = packages__async__src__stream_sink_transformer__typed$46dart.src__stream_sink_transformer__stream_transformer_wrapper;
  const async_memoizer = packages__async__src__async_memoizer$46dart.src__async_memoizer;
  const stream_sink = packages__async__src__delegate__stream_sink$46dart.src__delegate__stream_sink;
  const single_subscription_transformer = packages__async__src__single_subscription_transformer$46dart.src__single_subscription_transformer;
  var stream_channel_controller = Object.create(dart.library);
  var stream_channel_completer = Object.create(dart.library);
  var multi_channel = Object.create(dart.library);
  var json_document_transformer = Object.create(dart.library);
  var disconnector = Object.create(dart.library);
  var delegating_stream_channel = Object.create(dart.library);
  var stream_channel_transformer = Object.create(dart.library);
  var close_guarantee_channel = Object.create(dart.library);
  var guarantee_channel = Object.create(dart.library);
  var stream_channel = Object.create(dart.library);
  var $_set = dartx._set;
  var $_get = dartx._get;
  var $putIfAbsent = dartx.putIfAbsent;
  var $length = dartx.length;
  var $containsKey = dartx.containsKey;
  var $remove = dartx.remove;
  var $isEmpty = dartx.isEmpty;
  var $values = dartx.values;
  var $clear = dartx.clear;
  var $noSuchMethod = dartx.noSuchMethod;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $add = dartx.add;
  dart._checkModuleNullSafetyMode(false);
  var T$ = {
    LinkedHashSetOfint: () => (T$.LinkedHashSetOfint = dart.constFn(collection.LinkedHashSet$(core.int)))(),
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    JSArrayOfObjectN: () => (T$.JSArrayOfObjectN = dart.constFn(_interceptors.JSArray$(T$.ObjectN())))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListTovoid: () => (T$.ListTovoid = dart.constFn(dart.fnType(dart.void, [core.List])))(),
    JSArrayOfint: () => (T$.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    StreamChannelOfString: () => (T$.StreamChannelOfString = dart.constFn(stream_channel.StreamChannel$(core.String)))(),
    ObjectNAndObjectNToObjectN: () => (T$.ObjectNAndObjectNToObjectN = dart.constFn(dart.fnType(T$.ObjectN(), [T$.ObjectN(), T$.ObjectN()])))(),
    ObjectNAndObjectNToNObjectN: () => (T$.ObjectNAndObjectNToNObjectN = dart.constFn(dart.nullable(T$.ObjectNAndObjectNToObjectN())))(),
    String__Todynamic: () => (T$.String__Todynamic = dart.constFn(dart.fnType(dart.dynamic, [core.String], {reviver: T$.ObjectNAndObjectNToNObjectN()}, {})))(),
    StreamSinkTransformerOfObject$String: () => (T$.StreamSinkTransformerOfObject$String = dart.constFn(stream_sink_transformer.StreamSinkTransformer$(core.Object, core.String)))(),
    EventSinkOfString: () => (T$.EventSinkOfString = dart.constFn(async.EventSink$(core.String)))(),
    ObjectAndEventSinkOfStringTovoid: () => (T$.ObjectAndEventSinkOfStringTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, T$.EventSinkOfString()])))(),
    StreamChannelOfObjectN: () => (T$.StreamChannelOfObjectN = dart.constFn(stream_channel.StreamChannel$(T$.ObjectN())))(),
    StreamSinkTransformerOfObjectN$String: () => (T$.StreamSinkTransformerOfObjectN$String = dart.constFn(stream_sink_transformer.StreamSinkTransformer$(T$.ObjectN(), core.String)))(),
    StreamTransformerOfString$ObjectN: () => (T$.StreamTransformerOfString$ObjectN = dart.constFn(async.StreamTransformer$(core.String, T$.ObjectN())))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    ListOfvoid: () => (T$.ListOfvoid = dart.constFn(core.List$(dart.void)))(),
    FutureOfListOfvoid: () => (T$.FutureOfListOfvoid = dart.constFn(async.Future$(T$.ListOfvoid())))(),
    VoidToFutureOfListOfvoid: () => (T$.VoidToFutureOfListOfvoid = dart.constFn(dart.fnType(T$.FutureOfListOfvoid(), [])))(),
    dynamicToNull: () => (T$.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T$);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(convert.jsonDecode, T$.String__Todynamic());
    },
    get C1() {
      return C[1] = dart.const(new _js_helper.PrivateSymbol.new('_sinkTransformer', _sinkTransformer));
    },
    get C2() {
      return C[2] = dart.const(new _js_helper.PrivateSymbol.new('_streamTransformer', _streamTransformer));
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: json_document_transformer._JsonDocument.prototype
      });
    },
    get C4() {
      return C[4] = dart.const(new _js_helper.PrivateSymbol.new('_sinkTransformer', _sinkTransformer$0));
    },
    get C5() {
      return C[5] = dart.const(new _js_helper.PrivateSymbol.new('_streamTransformer', _streamTransformer$0));
    }
  }, false);
  var C = Array(6).fill(void 0);
  var I = [
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/stream_channel-2.1.0/lib/src/stream_channel_controller.dart",
    "package:stream_channel/src/stream_channel_controller.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/stream_channel-2.1.0/lib/src/stream_channel_completer.dart",
    "package:stream_channel/src/stream_channel_completer.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/stream_channel-2.1.0/lib/src/multi_channel.dart",
    "package:stream_channel/src/multi_channel.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/stream_channel-2.1.0/lib/stream_channel.dart",
    "package:stream_channel/stream_channel.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/stream_channel-2.1.0/lib/src/json_document_transformer.dart",
    "package:stream_channel/src/json_document_transformer.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/stream_channel-2.1.0/lib/src/disconnector.dart",
    "package:stream_channel/src/disconnector.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/stream_channel-2.1.0/lib/src/delegating_stream_channel.dart",
    "package:stream_channel/src/delegating_stream_channel.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/stream_channel-2.1.0/lib/src/stream_channel_transformer.dart",
    "package:stream_channel/src/stream_channel_transformer.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/stream_channel-2.1.0/lib/src/close_guarantee_channel.dart",
    "package:stream_channel/src/close_guarantee_channel.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/stream_channel-2.1.0/lib/src/guarantee_channel.dart",
    "package:stream_channel/src/guarantee_channel.dart"
  ];
  var __StreamChannelController__local = dart.privateName(stream_channel_controller, "_#StreamChannelController#_local");
  var __StreamChannelController__local_isSet = dart.privateName(stream_channel_controller, "_#StreamChannelController#_local#isSet");
  var __StreamChannelController__foreign = dart.privateName(stream_channel_controller, "_#StreamChannelController#_foreign");
  var __StreamChannelController__foreign_isSet = dart.privateName(stream_channel_controller, "_#StreamChannelController#_foreign#isSet");
  var _local = dart.privateName(stream_channel_controller, "_local");
  var _foreign = dart.privateName(stream_channel_controller, "_foreign");
  const _is_StreamChannelController_default = Symbol('_is_StreamChannelController_default');
  stream_channel_controller.StreamChannelController$ = dart.generic(T => {
    var StreamControllerOfT = () => (StreamControllerOfT = dart.constFn(async.StreamController$(T)))();
    var StreamChannelOfT = () => (StreamChannelOfT = dart.constFn(stream_channel.StreamChannel$(T)))();
    class StreamChannelController extends core.Object {
      get local() {
        return this[_local];
      }
      get [_local]() {
        let t0;
        return dart.test(this[__StreamChannelController__local_isSet]) ? (t0 = this[__StreamChannelController__local], t0) : dart.throw(new _internal.LateError.fieldNI("_local"));
      }
      set [_local](t0) {
        if (t0 == null) dart.nullFailed(I[0], 36, 31, "null");
        if (dart.test(this[__StreamChannelController__local_isSet]))
          dart.throw(new _internal.LateError.fieldAI("_local"));
        else {
          this[__StreamChannelController__local_isSet] = true;
          this[__StreamChannelController__local] = t0;
        }
      }
      get foreign() {
        return this[_foreign];
      }
      get [_foreign]() {
        let t1;
        return dart.test(this[__StreamChannelController__foreign_isSet]) ? (t1 = this[__StreamChannelController__foreign], t1) : dart.throw(new _internal.LateError.fieldNI("_foreign"));
      }
      set [_foreign](t1) {
        if (t1 == null) dart.nullFailed(I[0], 43, 31, "null");
        if (dart.test(this[__StreamChannelController__foreign_isSet]))
          dart.throw(new _internal.LateError.fieldAI("_foreign"));
        else {
          this[__StreamChannelController__foreign_isSet] = true;
          this[__StreamChannelController__foreign] = t1;
        }
      }
    }
    (StreamChannelController.new = function(opts) {
      let allowForeignErrors = opts && 'allowForeignErrors' in opts ? opts.allowForeignErrors : true;
      if (allowForeignErrors == null) dart.nullFailed(I[0], 55, 33, "allowForeignErrors");
      let sync = opts && 'sync' in opts ? opts.sync : false;
      if (sync == null) dart.nullFailed(I[0], 55, 65, "sync");
      this[__StreamChannelController__local] = null;
      this[__StreamChannelController__local_isSet] = false;
      this[__StreamChannelController__foreign] = null;
      this[__StreamChannelController__foreign_isSet] = false;
      let localToForeignController = StreamControllerOfT().new({sync: sync});
      let foreignToLocalController = StreamControllerOfT().new({sync: sync});
      this[_local] = StreamChannelOfT().withGuarantees(foreignToLocalController.stream, localToForeignController.sink);
      this[_foreign] = StreamChannelOfT().withGuarantees(localToForeignController.stream, foreignToLocalController.sink, {allowSinkErrors: allowForeignErrors});
    }).prototype = StreamChannelController.prototype;
    dart.addTypeTests(StreamChannelController);
    StreamChannelController.prototype[_is_StreamChannelController_default] = true;
    dart.addTypeCaches(StreamChannelController);
    dart.setGetterSignature(StreamChannelController, () => ({
      __proto__: dart.getGetters(StreamChannelController.__proto__),
      local: stream_channel.StreamChannel$(T),
      [_local]: stream_channel.StreamChannel$(T),
      foreign: stream_channel.StreamChannel$(T),
      [_foreign]: stream_channel.StreamChannel$(T)
    }));
    dart.setSetterSignature(StreamChannelController, () => ({
      __proto__: dart.getSetters(StreamChannelController.__proto__),
      [_local]: stream_channel.StreamChannel$(T),
      [_foreign]: stream_channel.StreamChannel$(T)
    }));
    dart.setLibraryUri(StreamChannelController, I[1]);
    dart.setFieldSignature(StreamChannelController, () => ({
      __proto__: dart.getFields(StreamChannelController.__proto__),
      [__StreamChannelController__local]: dart.fieldType(dart.nullable(stream_channel.StreamChannel$(T))),
      [__StreamChannelController__local_isSet]: dart.fieldType(core.bool),
      [__StreamChannelController__foreign]: dart.fieldType(dart.nullable(stream_channel.StreamChannel$(T))),
      [__StreamChannelController__foreign_isSet]: dart.fieldType(core.bool)
    }));
    return StreamChannelController;
  });
  stream_channel_controller.StreamChannelController = stream_channel_controller.StreamChannelController$();
  dart.addTypeTests(stream_channel_controller.StreamChannelController, _is_StreamChannelController_default);
  var _streamCompleter = dart.privateName(stream_channel_completer, "_streamCompleter");
  var _sinkCompleter = dart.privateName(stream_channel_completer, "_sinkCompleter");
  var __StreamChannelCompleter__channel = dart.privateName(stream_channel_completer, "_#StreamChannelCompleter#_channel");
  var __StreamChannelCompleter__channel_isSet = dart.privateName(stream_channel_completer, "_#StreamChannelCompleter#_channel#isSet");
  var _set = dart.privateName(stream_channel_completer, "_set");
  var _channel = dart.privateName(stream_channel_completer, "_channel");
  const _is_StreamChannelCompleter_default = Symbol('_is_StreamChannelCompleter_default');
  stream_channel_completer.StreamChannelCompleter$ = dart.generic(T => {
    var StreamCompleterOfT = () => (StreamCompleterOfT = dart.constFn(stream_completer.StreamCompleter$(T)))();
    var StreamSinkCompleterOfT = () => (StreamSinkCompleterOfT = dart.constFn(stream_sink_completer.StreamSinkCompleter$(T)))();
    var StreamChannelOfT = () => (StreamChannelOfT = dart.constFn(stream_channel.StreamChannel$(T)))();
    var NullStreamSinkOfT = () => (NullStreamSinkOfT = dart.constFn(null_stream_sink.NullStreamSink$(T)))();
    class StreamChannelCompleter extends core.Object {
      get channel() {
        return this[_channel];
      }
      get [_channel]() {
        let t2;
        return dart.test(this[__StreamChannelCompleter__channel_isSet]) ? (t2 = this[__StreamChannelCompleter__channel], t2) : dart.throw(new _internal.LateError.fieldNI("_channel"));
      }
      set [_channel](t2) {
        if (t2 == null) dart.nullFailed(I[2], 23, 31, "null");
        if (dart.test(this[__StreamChannelCompleter__channel_isSet]))
          dart.throw(new _internal.LateError.fieldAI("_channel"));
        else {
          this[__StreamChannelCompleter__channel_isSet] = true;
          this[__StreamChannelCompleter__channel] = t2;
        }
      }
      static fromFuture(channelFuture) {
        if (channelFuture == null) dart.nullFailed(I[2], 36, 57, "channelFuture");
        let completer = new stream_channel_completer.StreamChannelCompleter.new();
        channelFuture.then(dart.void, dart.bind(completer, 'setChannel'), {onError: dart.bind(completer, 'setError')});
        return completer.channel;
      }
      setChannel(channel) {
        StreamChannelOfT().as(channel);
        if (channel == null) dart.nullFailed(I[2], 52, 36, "channel");
        if (dart.test(this[_set])) dart.throw(new core.StateError.new("The channel has already been set."));
        this[_set] = true;
        this[_streamCompleter].setSourceStream(channel.stream);
        this[_sinkCompleter].setDestinationSink(channel.sink);
      }
      setError(error, stackTrace = null) {
        if (error == null) dart.nullFailed(I[2], 67, 24, "error");
        if (dart.test(this[_set])) dart.throw(new core.StateError.new("The channel has already been set."));
        this[_set] = true;
        this[_streamCompleter].setError(error, stackTrace);
        this[_sinkCompleter].setDestinationSink(new (NullStreamSinkOfT()).new());
      }
    }
    (StreamChannelCompleter.new = function() {
      this[_streamCompleter] = new (StreamCompleterOfT()).new();
      this[_sinkCompleter] = new (StreamSinkCompleterOfT()).new();
      this[__StreamChannelCompleter__channel] = null;
      this[__StreamChannelCompleter__channel_isSet] = false;
      this[_set] = false;
      this[_channel] = StreamChannelOfT().new(this[_streamCompleter].stream, this[_sinkCompleter].sink);
    }).prototype = StreamChannelCompleter.prototype;
    dart.addTypeTests(StreamChannelCompleter);
    StreamChannelCompleter.prototype[_is_StreamChannelCompleter_default] = true;
    dart.addTypeCaches(StreamChannelCompleter);
    dart.setMethodSignature(StreamChannelCompleter, () => ({
      __proto__: dart.getMethods(StreamChannelCompleter.__proto__),
      setChannel: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      setError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)])
    }));
    dart.setGetterSignature(StreamChannelCompleter, () => ({
      __proto__: dart.getGetters(StreamChannelCompleter.__proto__),
      channel: stream_channel.StreamChannel$(T),
      [_channel]: stream_channel.StreamChannel$(T)
    }));
    dart.setSetterSignature(StreamChannelCompleter, () => ({
      __proto__: dart.getSetters(StreamChannelCompleter.__proto__),
      [_channel]: stream_channel.StreamChannel$(T)
    }));
    dart.setLibraryUri(StreamChannelCompleter, I[3]);
    dart.setFieldSignature(StreamChannelCompleter, () => ({
      __proto__: dart.getFields(StreamChannelCompleter.__proto__),
      [_streamCompleter]: dart.finalFieldType(stream_completer.StreamCompleter$(T)),
      [_sinkCompleter]: dart.finalFieldType(stream_sink_completer.StreamSinkCompleter$(T)),
      [__StreamChannelCompleter__channel]: dart.fieldType(dart.nullable(stream_channel.StreamChannel$(T))),
      [__StreamChannelCompleter__channel_isSet]: dart.fieldType(core.bool),
      [_set]: dart.fieldType(core.bool)
    }));
    return StreamChannelCompleter;
  });
  stream_channel_completer.StreamChannelCompleter = stream_channel_completer.StreamChannelCompleter$();
  dart.addTypeTests(stream_channel_completer.StreamChannelCompleter, _is_StreamChannelCompleter_default);
  const _is_MultiChannel_default = Symbol('_is_MultiChannel_default');
  multi_channel.MultiChannel$ = dart.generic(T => {
    class MultiChannel extends core.Object {
      static new(inner) {
        if (inner == null) dart.nullFailed(I[4], 63, 47, "inner");
        return new (multi_channel._MultiChannel$(T)).new(inner);
      }
    }
    (MultiChannel[dart.mixinNew] = function() {
    }).prototype = MultiChannel.prototype;
    dart.addTypeTests(MultiChannel);
    MultiChannel.prototype[_is_MultiChannel_default] = true;
    dart.addTypeCaches(MultiChannel);
    MultiChannel[dart.implements] = () => [stream_channel.StreamChannel$(T)];
    dart.setLibraryUri(MultiChannel, I[5]);
    return MultiChannel;
  });
  multi_channel.MultiChannel = multi_channel.MultiChannel$();
  dart.addTypeTests(multi_channel.MultiChannel, _is_MultiChannel_default);
  var _innerStreamSubscription = dart.privateName(multi_channel, "_innerStreamSubscription");
  var _mainController = dart.privateName(multi_channel, "_mainController");
  var _controllers = dart.privateName(multi_channel, "_controllers");
  var _pendingIds = dart.privateName(multi_channel, "_pendingIds");
  var _closedIds = dart.privateName(multi_channel, "_closedIds");
  var _nextId = dart.privateName(multi_channel, "_nextId");
  var _inner = dart.privateName(multi_channel, "_inner");
  var _closeChannel = dart.privateName(multi_channel, "_closeChannel");
  var _closeInnerChannel = dart.privateName(multi_channel, "_closeInnerChannel");
  const _is_StreamChannelMixin_default = Symbol('_is_StreamChannelMixin_default');
  stream_channel.StreamChannelMixin$ = dart.generic(T => {
    var StreamChannelOfT = () => (StreamChannelOfT = dart.constFn(stream_channel.StreamChannel$(T)))();
    var StreamTransformerOfT$T = () => (StreamTransformerOfT$T = dart.constFn(async.StreamTransformer$(T, T)))();
    var StreamSinkTransformerOfT$T = () => (StreamSinkTransformerOfT$T = dart.constFn(stream_sink_transformer.StreamSinkTransformer$(T, T)))();
    var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
    var StreamOfTToStreamOfT = () => (StreamOfTToStreamOfT = dart.constFn(dart.fnType(StreamOfT(), [StreamOfT()])))();
    var StreamSinkOfT = () => (StreamSinkOfT = dart.constFn(async.StreamSink$(T)))();
    var StreamSinkOfTToStreamSinkOfT = () => (StreamSinkOfTToStreamSinkOfT = dart.constFn(dart.fnType(StreamSinkOfT(), [StreamSinkOfT()])))();
    class StreamChannelMixin extends core.Object {
      pipe(other) {
        StreamChannelOfT().as(other);
        if (other == null) dart.nullFailed(I[6], 153, 30, "other");
        this.stream.pipe(other.sink);
        other.stream.pipe(this.sink);
      }
      transform(S, transformer) {
        stream_channel_transformer.StreamChannelTransformer$(S, T).as(transformer);
        if (transformer == null) dart.nullFailed(I[6], 159, 64, "transformer");
        return transformer.bind(this);
      }
      transformStream(transformer) {
        StreamTransformerOfT$T().as(transformer);
        if (transformer == null) dart.nullFailed(I[6], 163, 60, "transformer");
        return this.changeStream(dart.bind(transformer, 'bind'));
      }
      transformSink(transformer) {
        StreamSinkTransformerOfT$T().as(transformer);
        if (transformer == null) dart.nullFailed(I[6], 167, 62, "transformer");
        return this.changeSink(dart.bind(transformer, 'bind'));
      }
      changeStream(change) {
        StreamOfTToStreamOfT().as(change);
        if (change == null) dart.nullFailed(I[6], 171, 63, "change");
        return StreamChannelOfT().withCloseGuarantee(change(this.stream), this.sink);
      }
      changeSink(change) {
        StreamSinkOfTToStreamSinkOfT().as(change);
        if (change == null) dart.nullFailed(I[6], 175, 69, "change");
        return StreamChannelOfT().withCloseGuarantee(this.stream, change(this.sink));
      }
      cast(S) {
        let t8;
        return stream_channel.StreamChannel$(S).new(this.stream.cast(S), (t8 = async.StreamController$(S).new({sync: true}), (() => {
          t8.stream.cast(T).pipe(this.sink);
          return t8;
        })()));
      }
    }
    (StreamChannelMixin.new = function() {
      ;
    }).prototype = StreamChannelMixin.prototype;
    dart.addTypeTests(StreamChannelMixin);
    StreamChannelMixin.prototype[_is_StreamChannelMixin_default] = true;
    dart.addTypeCaches(StreamChannelMixin);
    StreamChannelMixin[dart.implements] = () => [stream_channel.StreamChannel$(T)];
    dart.setMethodSignature(StreamChannelMixin, () => ({
      __proto__: dart.getMethods(StreamChannelMixin.__proto__),
      pipe: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      transform: dart.gFnType(S => [stream_channel.StreamChannel$(S), [dart.nullable(core.Object)]], S => [dart.nullable(core.Object)]),
      transformStream: dart.fnType(stream_channel.StreamChannel$(T), [dart.nullable(core.Object)]),
      transformSink: dart.fnType(stream_channel.StreamChannel$(T), [dart.nullable(core.Object)]),
      changeStream: dart.fnType(stream_channel.StreamChannel$(T), [dart.nullable(core.Object)]),
      changeSink: dart.fnType(stream_channel.StreamChannel$(T), [dart.nullable(core.Object)]),
      cast: dart.gFnType(S => [stream_channel.StreamChannel$(S), []], S => [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(StreamChannelMixin, I[7]);
    return StreamChannelMixin;
  });
  stream_channel.StreamChannelMixin = stream_channel.StreamChannelMixin$();
  dart.addTypeTests(stream_channel.StreamChannelMixin, _is_StreamChannelMixin_default);
  const _is__MultiChannel_default = Symbol('_is__MultiChannel_default');
  multi_channel._MultiChannel$ = dart.generic(T => {
    var StreamChannelControllerOfT = () => (StreamChannelControllerOfT = dart.constFn(stream_channel_controller.StreamChannelController$(T)))();
    var IdentityMapOfint$StreamChannelControllerOfT = () => (IdentityMapOfint$StreamChannelControllerOfT = dart.constFn(_js_helper.IdentityMap$(core.int, StreamChannelControllerOfT())))();
    var TTovoid = () => (TTovoid = dart.constFn(dart.fnType(dart.void, [T])))();
    var VoidToStreamChannelControllerOfT = () => (VoidToStreamChannelControllerOfT = dart.constFn(dart.fnType(StreamChannelControllerOfT(), [])))();
    var VirtualChannelOfT = () => (VirtualChannelOfT = dart.constFn(multi_channel.VirtualChannel$(T)))();
    var _EmptyStreamOfT = () => (_EmptyStreamOfT = dart.constFn(async._EmptyStream$(T)))();
    var NullStreamSinkOfT = () => (NullStreamSinkOfT = dart.constFn(null_stream_sink.NullStreamSink$(T)))();
    var StreamChannelControllerOfTTodynamic = () => (StreamChannelControllerOfTTodynamic = dart.constFn(dart.fnType(dart.dynamic, [StreamChannelControllerOfT()])))();
    class _MultiChannel extends stream_channel.StreamChannelMixin$(T) {
      get stream() {
        return this[_mainController].foreign.stream;
      }
      get sink() {
        return this[_mainController].foreign.sink;
      }
      virtualChannel(id = null) {
        let inputId = null;
        let outputId = null;
        if (id != null) {
          inputId = id;
          outputId = dart.notNull(id) + 1;
        } else {
          inputId = dart.notNull(this[_nextId]) + 1;
          outputId = this[_nextId];
          this[_nextId] = dart.notNull(this[_nextId]) + 2;
        }
        if (this[_inner] == null) {
          return new (VirtualChannelOfT()).__(this, inputId, new (_EmptyStreamOfT()).new(), new (NullStreamSinkOfT()).new());
        }
        let controller = null;
        let controller$35isSet = false;
        function controller$35get() {
          return controller$35isSet ? controller : dart.throw(new _internal.LateError.localNI("controller"));
        }
        dart.fn(controller$35get, VoidToStreamChannelControllerOfT());
        function controller$35set(t6) {
          if (t6 == null) dart.nullFailed(I[4], 197, 37, "null");
          controller$35isSet = true;
          return controller = t6;
        }
        dart.fn(controller$35set, StreamChannelControllerOfTTodynamic());
        if (dart.test(this[_pendingIds].remove(inputId))) {
          controller$35set(dart.nullCheck(this[_controllers][$_get](inputId)));
        } else if (dart.test(this[_controllers][$containsKey](inputId)) || dart.test(this[_closedIds].contains(inputId))) {
          dart.throw(new core.ArgumentError.new("A virtual channel with id " + dart.str(id) + " already exists."));
        } else {
          controller$35set(new (StreamChannelControllerOfT()).new({sync: true}));
          this[_controllers][$_set](inputId, controller$35get());
        }
        controller$35get().local.stream.listen(dart.fn(message => dart.nullCheck(this[_inner]).sink.add(T$.JSArrayOfObjectN().of([outputId, message])), TTovoid()), {onDone: dart.fn(() => this[_closeChannel](inputId, outputId), T$.VoidTovoid())});
        return new (VirtualChannelOfT()).__(this, outputId, controller$35get().foreign.stream, controller$35get().foreign.sink);
      }
      [_closeChannel](inputId, outputId) {
        if (inputId == null) dart.nullFailed(I[4], 219, 26, "inputId");
        if (outputId == null) dart.nullFailed(I[4], 219, 39, "outputId");
        this[_closedIds].add(inputId);
        let controller = dart.nullCheck(this[_controllers][$remove](inputId));
        controller.local.sink.close();
        if (this[_inner] == null) return;
        dart.nullCheck(this[_inner]).sink.add(T$.JSArrayOfint().of([outputId]));
        if (dart.test(this[_controllers][$isEmpty])) this[_closeInnerChannel]();
      }
      [_closeInnerChannel]() {
        dart.nullCheck(this[_inner]).sink.close();
        dart.nullCheck(this[_innerStreamSubscription]).cancel();
        this[_inner] = null;
        for (let controller of core.List.from(this[_controllers][$values])) {
          dart.dsend(dart.dload(dart.dload(controller, 'local'), 'sink'), 'close', []);
        }
        this[_controllers][$clear]();
      }
    }
    (_MultiChannel.new = function(inner) {
      if (inner == null) dart.nullFailed(I[4], 135, 40, "inner");
      this[_innerStreamSubscription] = null;
      this[_mainController] = new (StreamChannelControllerOfT()).new({sync: true});
      this[_controllers] = new (IdentityMapOfint$StreamChannelControllerOfT()).new();
      this[_pendingIds] = T$.LinkedHashSetOfint().new();
      this[_closedIds] = T$.LinkedHashSetOfint().new();
      this[_nextId] = 1;
      this[_inner] = inner;
      this[_controllers][$_set](0, this[_mainController]);
      this[_mainController].local.stream.listen(dart.fn(message => dart.nullCheck(this[_inner]).sink.add(T$.JSArrayOfObjectN().of([0, message])), TTovoid()), {onDone: dart.fn(() => this[_closeChannel](0, 0), T$.VoidTovoid())});
      this[_innerStreamSubscription] = dart.nullCheck(this[_inner]).stream.cast(core.List).listen(dart.fn(message => {
        if (message == null) dart.nullFailed(I[4], 143, 68, "message");
        let id = core.int.as(message[$_get](0));
        if (dart.test(this[_closedIds].contains(id))) return;
        let controller = this[_controllers][$putIfAbsent](id, dart.fn(() => {
          this[_pendingIds].add(id);
          return new (StreamChannelControllerOfT()).new({sync: true});
        }, VoidToStreamChannelControllerOfT()));
        if (dart.notNull(message[$length]) > 1) {
          controller.local.sink.add(T.as(message[$_get](1)));
        } else {
          controller.local.sink.close();
        }
      }, T$.ListTovoid()), {onDone: dart.bind(this, _closeInnerChannel), onError: dart.bind(this[_mainController].local.sink, 'addError')});
    }).prototype = _MultiChannel.prototype;
    dart.addTypeTests(_MultiChannel);
    _MultiChannel.prototype[_is__MultiChannel_default] = true;
    dart.addTypeCaches(_MultiChannel);
    _MultiChannel[dart.implements] = () => [multi_channel.MultiChannel$(T)];
    dart.setMethodSignature(_MultiChannel, () => ({
      __proto__: dart.getMethods(_MultiChannel.__proto__),
      virtualChannel: dart.fnType(multi_channel.VirtualChannel$(T), [], [dart.nullable(core.int)]),
      [_closeChannel]: dart.fnType(dart.void, [core.int, core.int]),
      [_closeInnerChannel]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(_MultiChannel, () => ({
      __proto__: dart.getGetters(_MultiChannel.__proto__),
      stream: async.Stream$(T),
      sink: async.StreamSink$(T)
    }));
    dart.setLibraryUri(_MultiChannel, I[5]);
    dart.setFieldSignature(_MultiChannel, () => ({
      __proto__: dart.getFields(_MultiChannel.__proto__),
      [_inner]: dart.fieldType(dart.nullable(stream_channel.StreamChannel)),
      [_innerStreamSubscription]: dart.fieldType(dart.nullable(async.StreamSubscription)),
      [_mainController]: dart.finalFieldType(stream_channel_controller.StreamChannelController$(T)),
      [_controllers]: dart.finalFieldType(core.Map$(core.int, stream_channel_controller.StreamChannelController$(T))),
      [_pendingIds]: dart.finalFieldType(core.Set$(core.int)),
      [_closedIds]: dart.finalFieldType(core.Set$(core.int)),
      [_nextId]: dart.fieldType(core.int)
    }));
    return _MultiChannel;
  });
  multi_channel._MultiChannel = multi_channel._MultiChannel$();
  dart.addTypeTests(multi_channel._MultiChannel, _is__MultiChannel_default);
  var id$ = dart.privateName(multi_channel, "VirtualChannel.id");
  var stream$ = dart.privateName(multi_channel, "VirtualChannel.stream");
  var sink$ = dart.privateName(multi_channel, "VirtualChannel.sink");
  var _parent$ = dart.privateName(multi_channel, "_parent");
  const _is_VirtualChannel_default = Symbol('_is_VirtualChannel_default');
  multi_channel.VirtualChannel$ = dart.generic(T => {
    class VirtualChannel extends stream_channel.StreamChannelMixin$(T) {
      get id() {
        return this[id$];
      }
      set id(value) {
        super.id = value;
      }
      get stream() {
        return this[stream$];
      }
      set stream(value) {
        super.stream = value;
      }
      get sink() {
        return this[sink$];
      }
      set sink(value) {
        super.sink = value;
      }
      virtualChannel(id = null) {
        return this[_parent$].virtualChannel(id);
      }
    }
    (VirtualChannel.__ = function(_parent, id, stream, sink) {
      if (_parent == null) dart.nullFailed(I[4], 269, 25, "_parent");
      if (id == null) dart.nullFailed(I[4], 269, 39, "id");
      if (stream == null) dart.nullFailed(I[4], 269, 48, "stream");
      if (sink == null) dart.nullFailed(I[4], 269, 61, "sink");
      this[_parent$] = _parent;
      this[id$] = id;
      this[stream$] = stream;
      this[sink$] = sink;
      ;
    }).prototype = VirtualChannel.prototype;
    dart.addTypeTests(VirtualChannel);
    VirtualChannel.prototype[_is_VirtualChannel_default] = true;
    dart.addTypeCaches(VirtualChannel);
    VirtualChannel[dart.implements] = () => [multi_channel.MultiChannel$(T)];
    dart.setMethodSignature(VirtualChannel, () => ({
      __proto__: dart.getMethods(VirtualChannel.__proto__),
      virtualChannel: dart.fnType(multi_channel.VirtualChannel$(T), [], [dart.nullable(core.int)])
    }));
    dart.setLibraryUri(VirtualChannel, I[5]);
    dart.setFieldSignature(VirtualChannel, () => ({
      __proto__: dart.getFields(VirtualChannel.__proto__),
      [_parent$]: dart.finalFieldType(multi_channel.MultiChannel$(T)),
      id: dart.finalFieldType(core.int),
      stream: dart.finalFieldType(async.Stream$(T)),
      sink: dart.finalFieldType(async.StreamSink$(T))
    }));
    return VirtualChannel;
  });
  multi_channel.VirtualChannel = multi_channel.VirtualChannel$();
  dart.addTypeTests(multi_channel.VirtualChannel, _is_VirtualChannel_default);
  var _sinkTransformer = dart.privateName(json_document_transformer, "_sinkTransformer");
  var _sinkTransformer$ = dart.privateName(stream_channel_transformer, "_sinkTransformer");
  var _streamTransformer = dart.privateName(json_document_transformer, "_streamTransformer");
  var _streamTransformer$ = dart.privateName(stream_channel_transformer, "_streamTransformer");
  json_document_transformer._JsonDocument = class _JsonDocument extends core.Object {
    bind(channel) {
      T$.StreamChannelOfString().as(channel);
      if (channel == null) dart.nullFailed(I[8], 28, 53, "channel");
      let stream = channel.stream.map(dart.dynamic, C[0] || CT.C0);
      let sink = T$.StreamSinkTransformerOfObject$String().fromHandlers({handleData: dart.fn((data, sink) => {
          if (data == null) dart.nullFailed(I[8], 31, 22, "data");
          if (sink == null) dart.nullFailed(I[8], 31, 28, "sink");
          sink.add(convert.jsonEncode(data));
        }, T$.ObjectAndEventSinkOfStringTovoid())}).bind(channel.sink);
      return T$.StreamChannelOfObjectN().withCloseGuarantee(stream, sink);
    }
    get [_sinkTransformer$]() {
      return T$.StreamSinkTransformerOfObjectN$String().as(this[$noSuchMethod](new core._Invocation.getter(C[1] || CT.C1)));
    }
    get [_streamTransformer$]() {
      return T$.StreamTransformerOfString$ObjectN().as(this[$noSuchMethod](new core._Invocation.getter(C[2] || CT.C2)));
    }
  };
  (json_document_transformer._JsonDocument.new = function() {
    ;
  }).prototype = json_document_transformer._JsonDocument.prototype;
  dart.addTypeTests(json_document_transformer._JsonDocument);
  dart.addTypeCaches(json_document_transformer._JsonDocument);
  json_document_transformer._JsonDocument[dart.implements] = () => [stream_channel_transformer.StreamChannelTransformer$(dart.nullable(core.Object), core.String)];
  dart.setMethodSignature(json_document_transformer._JsonDocument, () => ({
    __proto__: dart.getMethods(json_document_transformer._JsonDocument.__proto__),
    bind: dart.fnType(stream_channel.StreamChannel$(dart.nullable(core.Object)), [dart.nullable(core.Object)])
  }));
  dart.setGetterSignature(json_document_transformer._JsonDocument, () => ({
    __proto__: dart.getGetters(json_document_transformer._JsonDocument.__proto__),
    [_sinkTransformer$]: stream_sink_transformer.StreamSinkTransformer$(dart.nullable(core.Object), core.String),
    [_streamTransformer$]: async.StreamTransformer$(core.String, dart.nullable(core.Object))
  }));
  dart.setLibraryUri(json_document_transformer._JsonDocument, I[9]);
  dart.defineLazy(json_document_transformer, {
    /*json_document_transformer.jsonDocument*/get jsonDocument() {
      return C[3] || CT.C3;
    }
  }, false);
  var _sinks = dart.privateName(disconnector, "_sinks");
  var _disconnectMemo = dart.privateName(disconnector, "_disconnectMemo");
  var _disconnect = dart.privateName(disconnector, "_disconnect");
  var _sinkTransformer$0 = dart.privateName(disconnector, "_sinkTransformer");
  var _streamTransformer$0 = dart.privateName(disconnector, "_streamTransformer");
  const _is_Disconnector_default = Symbol('_is_Disconnector_default');
  disconnector.Disconnector$ = dart.generic(T => {
    var _DisconnectorSinkOfT = () => (_DisconnectorSinkOfT = dart.constFn(disconnector._DisconnectorSink$(T)))();
    var JSArrayOf_DisconnectorSinkOfT = () => (JSArrayOf_DisconnectorSinkOfT = dart.constFn(_interceptors.JSArray$(_DisconnectorSinkOfT())))();
    var _DisconnectorSinkOfTToFutureOfvoid = () => (_DisconnectorSinkOfTToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [_DisconnectorSinkOfT()])))();
    var StreamChannelOfT = () => (StreamChannelOfT = dart.constFn(stream_channel.StreamChannel$(T)))();
    var StreamSinkOfT = () => (StreamSinkOfT = dart.constFn(async.StreamSink$(T)))();
    var StreamSinkOfTTo_DisconnectorSinkOfT = () => (StreamSinkOfTTo_DisconnectorSinkOfT = dart.constFn(dart.fnType(_DisconnectorSinkOfT(), [StreamSinkOfT()])))();
    var StreamSinkTransformerOfT$T = () => (StreamSinkTransformerOfT$T = dart.constFn(stream_sink_transformer.StreamSinkTransformer$(T, T)))();
    var StreamTransformerOfT$T = () => (StreamTransformerOfT$T = dart.constFn(async.StreamTransformer$(T, T)))();
    class Disconnector extends core.Object {
      get isDisconnected() {
        return this[_disconnectMemo].hasRun;
      }
      disconnect() {
        return this[_disconnectMemo].runOnce(dart.fn(() => {
          let futures = this[_sinks][$map](T$.FutureOfvoid(), dart.fn(sink => {
            if (sink == null) dart.nullFailed(I[10], 37, 35, "sink");
            return sink[_disconnect]();
          }, _DisconnectorSinkOfTToFutureOfvoid()))[$toList]();
          this[_sinks][$clear]();
          return async.Future.wait(dart.void, futures, {eagerError: true});
        }, T$.VoidToFutureOfListOfvoid()));
      }
      bind(channel) {
        StreamChannelOfT().as(channel);
        if (channel == null) dart.nullFailed(I[10], 44, 42, "channel");
        return channel.changeSink(dart.fn(innerSink => {
          if (innerSink == null) dart.nullFailed(I[10], 45, 32, "innerSink");
          let sink = new (_DisconnectorSinkOfT()).new(innerSink);
          if (dart.test(this.isDisconnected)) {
            sink[_disconnect]().catchError(dart.fn(_ => {
            }, T$.dynamicToNull()));
          } else {
            this[_sinks][$add](sink);
          }
          return sink;
        }, StreamSinkOfTTo_DisconnectorSinkOfT()));
      }
      get [_sinkTransformer$]() {
        return StreamSinkTransformerOfT$T().as(this[$noSuchMethod](new core._Invocation.getter(C[4] || CT.C4)));
      }
      get [_streamTransformer$]() {
        return StreamTransformerOfT$T().as(this[$noSuchMethod](new core._Invocation.getter(C[5] || CT.C5)));
      }
    }
    (Disconnector.new = function() {
      this[_sinks] = JSArrayOf_DisconnectorSinkOfT().of([]);
      this[_disconnectMemo] = new async_memoizer.AsyncMemoizer.new();
      ;
    }).prototype = Disconnector.prototype;
    dart.addTypeTests(Disconnector);
    Disconnector.prototype[_is_Disconnector_default] = true;
    dart.addTypeCaches(Disconnector);
    Disconnector[dart.implements] = () => [stream_channel_transformer.StreamChannelTransformer$(T, T)];
    dart.setMethodSignature(Disconnector, () => ({
      __proto__: dart.getMethods(Disconnector.__proto__),
      disconnect: dart.fnType(async.Future$(dart.void), []),
      bind: dart.fnType(stream_channel.StreamChannel$(T), [dart.nullable(core.Object)])
    }));
    dart.setGetterSignature(Disconnector, () => ({
      __proto__: dart.getGetters(Disconnector.__proto__),
      isDisconnected: core.bool,
      [_sinkTransformer$]: stream_sink_transformer.StreamSinkTransformer$(T, T),
      [_streamTransformer$]: async.StreamTransformer$(T, T)
    }));
    dart.setLibraryUri(Disconnector, I[11]);
    dart.setFieldSignature(Disconnector, () => ({
      __proto__: dart.getFields(Disconnector.__proto__),
      [_sinks]: dart.finalFieldType(core.List$(disconnector._DisconnectorSink$(T))),
      [_disconnectMemo]: dart.finalFieldType(async_memoizer.AsyncMemoizer)
    }));
    return Disconnector;
  });
  disconnector.Disconnector = disconnector.Disconnector$();
  dart.addTypeTests(disconnector.Disconnector, _is_Disconnector_default);
  var _isDisconnected = dart.privateName(disconnector, "_isDisconnected");
  var _closed = dart.privateName(disconnector, "_closed");
  var _addStreamSubscription = dart.privateName(disconnector, "_addStreamSubscription");
  var _addStreamCompleter = dart.privateName(disconnector, "_addStreamCompleter");
  var _inner$ = dart.privateName(disconnector, "_inner");
  var _inAddStream = dart.privateName(disconnector, "_inAddStream");
  const _is__DisconnectorSink_default = Symbol('_is__DisconnectorSink_default');
  disconnector._DisconnectorSink$ = dart.generic(T => {
    var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
    class _DisconnectorSink extends core.Object {
      get done() {
        return this[_inner$].done;
      }
      get [_inAddStream]() {
        return this[_addStreamSubscription] != null;
      }
      add(data) {
        T.as(data);
        if (dart.test(this[_closed])) dart.throw(new core.StateError.new("Cannot add event after closing."));
        if (dart.test(this[_inAddStream])) {
          dart.throw(new core.StateError.new("Cannot add event while adding stream."));
        }
        if (dart.test(this[_isDisconnected])) return;
        this[_inner$].add(data);
      }
      addError(error, stackTrace = null) {
        if (error == null) dart.nullFailed(I[10], 100, 17, "error");
        if (dart.test(this[_closed])) dart.throw(new core.StateError.new("Cannot add event after closing."));
        if (dart.test(this[_inAddStream])) {
          dart.throw(new core.StateError.new("Cannot add event while adding stream."));
        }
        if (dart.test(this[_isDisconnected])) return;
        this[_inner$].addError(error, stackTrace);
      }
      addStream(stream) {
        StreamOfT().as(stream);
        if (stream == null) dart.nullFailed(I[10], 111, 36, "stream");
        if (dart.test(this[_closed])) dart.throw(new core.StateError.new("Cannot add stream after closing."));
        if (dart.test(this[_inAddStream])) {
          dart.throw(new core.StateError.new("Cannot add stream while adding stream."));
        }
        if (dart.test(this[_isDisconnected])) return T$.FutureOfvoid().value();
        this[_addStreamCompleter] = async.Completer.sync();
        this[_addStreamSubscription] = stream.listen(dart.bind(this[_inner$], 'add'), {onError: dart.bind(this[_inner$], 'addError'), onDone: dart.bind(dart.nullCheck(this[_addStreamCompleter]), 'complete')});
        return dart.nullCheck(this[_addStreamCompleter]).future.then(dart.void, dart.fn(_ => {
          this[_addStreamCompleter] = null;
          this[_addStreamSubscription] = null;
        }, T$.dynamicToNull()));
      }
      close() {
        if (dart.test(this[_inAddStream])) {
          dart.throw(new core.StateError.new("Cannot close sink while adding stream."));
        }
        this[_closed] = true;
        return this[_inner$].close();
      }
      [_disconnect]() {
        this[_isDisconnected] = true;
        let future = this[_inner$].close();
        if (dart.test(this[_inAddStream])) {
          dart.nullCheck(this[_addStreamCompleter]).complete(dart.nullCheck(this[_addStreamSubscription]).cancel());
          this[_addStreamCompleter] = null;
          this[_addStreamSubscription] = null;
        }
        return future;
      }
    }
    (_DisconnectorSink.new = function(_inner) {
      if (_inner == null) dart.nullFailed(I[10], 86, 26, "_inner");
      this[_isDisconnected] = false;
      this[_closed] = false;
      this[_addStreamSubscription] = null;
      this[_addStreamCompleter] = null;
      this[_inner$] = _inner;
      ;
    }).prototype = _DisconnectorSink.prototype;
    dart.addTypeTests(_DisconnectorSink);
    _DisconnectorSink.prototype[_is__DisconnectorSink_default] = true;
    dart.addTypeCaches(_DisconnectorSink);
    _DisconnectorSink[dart.implements] = () => [async.StreamSink$(T)];
    dart.setMethodSignature(_DisconnectorSink, () => ({
      __proto__: dart.getMethods(_DisconnectorSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      addStream: dart.fnType(async.Future$(dart.void), [dart.nullable(core.Object)]),
      close: dart.fnType(async.Future$(dart.void), []),
      [_disconnect]: dart.fnType(async.Future$(dart.void), [])
    }));
    dart.setGetterSignature(_DisconnectorSink, () => ({
      __proto__: dart.getGetters(_DisconnectorSink.__proto__),
      done: async.Future$(dart.void),
      [_inAddStream]: core.bool
    }));
    dart.setLibraryUri(_DisconnectorSink, I[11]);
    dart.setFieldSignature(_DisconnectorSink, () => ({
      __proto__: dart.getFields(_DisconnectorSink.__proto__),
      [_inner$]: dart.finalFieldType(async.StreamSink$(T)),
      [_isDisconnected]: dart.fieldType(core.bool),
      [_closed]: dart.fieldType(core.bool),
      [_addStreamSubscription]: dart.fieldType(dart.nullable(async.StreamSubscription$(T))),
      [_addStreamCompleter]: dart.fieldType(dart.nullable(async.Completer))
    }));
    return _DisconnectorSink;
  });
  disconnector._DisconnectorSink = disconnector._DisconnectorSink$();
  dart.addTypeTests(disconnector._DisconnectorSink, _is__DisconnectorSink_default);
  var _inner$0 = dart.privateName(delegating_stream_channel, "_inner");
  const _is_DelegatingStreamChannel_default = Symbol('_is_DelegatingStreamChannel_default');
  delegating_stream_channel.DelegatingStreamChannel$ = dart.generic(T => {
    class DelegatingStreamChannel extends stream_channel.StreamChannelMixin$(T) {
      get stream() {
        return this[_inner$0].stream;
      }
      get sink() {
        return this[_inner$0].sink;
      }
    }
    (DelegatingStreamChannel.new = function(_inner) {
      if (_inner == null) dart.nullFailed(I[12], 22, 32, "_inner");
      this[_inner$0] = _inner;
      ;
    }).prototype = DelegatingStreamChannel.prototype;
    dart.addTypeTests(DelegatingStreamChannel);
    DelegatingStreamChannel.prototype[_is_DelegatingStreamChannel_default] = true;
    dart.addTypeCaches(DelegatingStreamChannel);
    dart.setGetterSignature(DelegatingStreamChannel, () => ({
      __proto__: dart.getGetters(DelegatingStreamChannel.__proto__),
      stream: async.Stream$(T),
      sink: async.StreamSink$(T)
    }));
    dart.setLibraryUri(DelegatingStreamChannel, I[13]);
    dart.setFieldSignature(DelegatingStreamChannel, () => ({
      __proto__: dart.getFields(DelegatingStreamChannel.__proto__),
      [_inner$0]: dart.finalFieldType(stream_channel.StreamChannel$(T))
    }));
    return DelegatingStreamChannel;
  });
  delegating_stream_channel.DelegatingStreamChannel = delegating_stream_channel.DelegatingStreamChannel$();
  dart.addTypeTests(delegating_stream_channel.DelegatingStreamChannel, _is_DelegatingStreamChannel_default);
  var _streamTransformer$1 = dart.privateName(stream_channel_transformer, "StreamChannelTransformer._streamTransformer");
  var _sinkTransformer$1 = dart.privateName(stream_channel_transformer, "StreamChannelTransformer._sinkTransformer");
  const _is_StreamChannelTransformer_default = Symbol('_is_StreamChannelTransformer_default');
  stream_channel_transformer.StreamChannelTransformer$ = dart.generic((S, T) => {
    var StreamTransformerWrapperOfS$T = () => (StreamTransformerWrapperOfS$T = dart.constFn(stream_transformer_wrapper.StreamTransformerWrapper$(S, T)))();
    var StreamChannelOfS = () => (StreamChannelOfS = dart.constFn(stream_channel.StreamChannel$(S)))();
    var StreamChannelOfT = () => (StreamChannelOfT = dart.constFn(stream_channel.StreamChannel$(T)))();
    class StreamChannelTransformer extends core.Object {
      get [_streamTransformer$]() {
        return this[_streamTransformer$1];
      }
      set [_streamTransformer$](value) {
        super[_streamTransformer$] = value;
      }
      get [_sinkTransformer$]() {
        return this[_sinkTransformer$1];
      }
      set [_sinkTransformer$](value) {
        super[_sinkTransformer$] = value;
      }
      bind(channel) {
        StreamChannelOfT().as(channel);
        if (channel == null) dart.nullFailed(I[14], 54, 42, "channel");
        return StreamChannelOfS().withCloseGuarantee(channel.stream.transform(S, this[_streamTransformer$]), this[_sinkTransformer$].bind(channel.sink));
      }
    }
    (StreamChannelTransformer.new = function(_streamTransformer, _sinkTransformer) {
      if (_streamTransformer == null) dart.nullFailed(I[14], 37, 12, "_streamTransformer");
      if (_sinkTransformer == null) dart.nullFailed(I[14], 37, 37, "_sinkTransformer");
      this[_streamTransformer$1] = _streamTransformer;
      this[_sinkTransformer$1] = _sinkTransformer;
      ;
    }).prototype = StreamChannelTransformer.prototype;
    (StreamChannelTransformer.fromCodec = function(codec) {
      if (codec == null) dart.nullFailed(I[14], 43, 50, "codec");
      StreamChannelTransformer.new.call(this, codec.decoder, new (StreamTransformerWrapperOfS$T()).new(codec.encoder));
    }).prototype = StreamChannelTransformer.prototype;
    dart.addTypeTests(StreamChannelTransformer);
    StreamChannelTransformer.prototype[_is_StreamChannelTransformer_default] = true;
    dart.addTypeCaches(StreamChannelTransformer);
    dart.setMethodSignature(StreamChannelTransformer, () => ({
      __proto__: dart.getMethods(StreamChannelTransformer.__proto__),
      bind: dart.fnType(stream_channel.StreamChannel$(S), [dart.nullable(core.Object)])
    }));
    dart.setLibraryUri(StreamChannelTransformer, I[15]);
    dart.setFieldSignature(StreamChannelTransformer, () => ({
      __proto__: dart.getFields(StreamChannelTransformer.__proto__),
      [_streamTransformer$]: dart.finalFieldType(async.StreamTransformer$(T, S)),
      [_sinkTransformer$]: dart.finalFieldType(stream_sink_transformer.StreamSinkTransformer$(S, T))
    }));
    return StreamChannelTransformer;
  });
  stream_channel_transformer.StreamChannelTransformer = stream_channel_transformer.StreamChannelTransformer$();
  dart.addTypeTests(stream_channel_transformer.StreamChannelTransformer, _is_StreamChannelTransformer_default);
  var _subscription = dart.privateName(close_guarantee_channel, "CloseGuaranteeChannel._subscription");
  var __CloseGuaranteeChannel__stream = dart.privateName(close_guarantee_channel, "_#CloseGuaranteeChannel#_stream");
  var __CloseGuaranteeChannel__stream_isSet = dart.privateName(close_guarantee_channel, "_#CloseGuaranteeChannel#_stream#isSet");
  var __CloseGuaranteeChannel__sink = dart.privateName(close_guarantee_channel, "_#CloseGuaranteeChannel#_sink");
  var __CloseGuaranteeChannel__sink_isSet = dart.privateName(close_guarantee_channel, "_#CloseGuaranteeChannel#_sink#isSet");
  var _disconnected = dart.privateName(close_guarantee_channel, "_disconnected");
  var _sink = dart.privateName(close_guarantee_channel, "_sink");
  var _stream = dart.privateName(close_guarantee_channel, "_stream");
  var _subscription$ = dart.privateName(close_guarantee_channel, "_subscription");
  const _is_CloseGuaranteeChannel_default = Symbol('_is_CloseGuaranteeChannel_default');
  close_guarantee_channel.CloseGuaranteeChannel$ = dart.generic(T => {
    var _CloseGuaranteeSinkOfT = () => (_CloseGuaranteeSinkOfT = dart.constFn(close_guarantee_channel._CloseGuaranteeSink$(T)))();
    var _CloseGuaranteeStreamOfT = () => (_CloseGuaranteeStreamOfT = dart.constFn(close_guarantee_channel._CloseGuaranteeStream$(T)))();
    var StreamSubscriptionOfT = () => (StreamSubscriptionOfT = dart.constFn(async.StreamSubscription$(T)))();
    var StreamSubscriptionNOfT = () => (StreamSubscriptionNOfT = dart.constFn(dart.nullable(StreamSubscriptionOfT())))();
    class CloseGuaranteeChannel extends stream_channel.StreamChannelMixin$(T) {
      get [_subscription$]() {
        return this[_subscription];
      }
      set [_subscription$](value) {
        this[_subscription] = StreamSubscriptionNOfT().as(value);
      }
      get stream() {
        return this[_stream];
      }
      get [_stream]() {
        let t8;
        return dart.test(this[__CloseGuaranteeChannel__stream_isSet]) ? (t8 = this[__CloseGuaranteeChannel__stream], t8) : dart.throw(new _internal.LateError.fieldNI("_stream"));
      }
      set [_stream](t8) {
        if (t8 == null) dart.nullFailed(I[16], 19, 39, "null");
        if (dart.test(this[__CloseGuaranteeChannel__stream_isSet]))
          dart.throw(new _internal.LateError.fieldAI("_stream"));
        else {
          this[__CloseGuaranteeChannel__stream_isSet] = true;
          this[__CloseGuaranteeChannel__stream] = t8;
        }
      }
      get sink() {
        return this[_sink];
      }
      get [_sink]() {
        let t9;
        return dart.test(this[__CloseGuaranteeChannel__sink_isSet]) ? (t9 = this[__CloseGuaranteeChannel__sink], t9) : dart.throw(new _internal.LateError.fieldNI("_sink"));
      }
      set [_sink](t9) {
        if (t9 == null) dart.nullFailed(I[16], 23, 37, "null");
        if (dart.test(this[__CloseGuaranteeChannel__sink_isSet]))
          dart.throw(new _internal.LateError.fieldAI("_sink"));
        else {
          this[__CloseGuaranteeChannel__sink_isSet] = true;
          this[__CloseGuaranteeChannel__sink] = t9;
        }
      }
    }
    (CloseGuaranteeChannel.new = function(innerStream, innerSink) {
      if (innerStream == null) dart.nullFailed(I[16], 31, 35, "innerStream");
      if (innerSink == null) dart.nullFailed(I[16], 31, 62, "innerSink");
      this[__CloseGuaranteeChannel__stream] = null;
      this[__CloseGuaranteeChannel__stream_isSet] = false;
      this[__CloseGuaranteeChannel__sink] = null;
      this[__CloseGuaranteeChannel__sink_isSet] = false;
      this[_subscription] = null;
      this[_disconnected] = false;
      this[_sink] = new (_CloseGuaranteeSinkOfT()).new(innerSink, this);
      this[_stream] = new (_CloseGuaranteeStreamOfT()).new(innerStream, this);
    }).prototype = CloseGuaranteeChannel.prototype;
    dart.addTypeTests(CloseGuaranteeChannel);
    CloseGuaranteeChannel.prototype[_is_CloseGuaranteeChannel_default] = true;
    dart.addTypeCaches(CloseGuaranteeChannel);
    dart.setGetterSignature(CloseGuaranteeChannel, () => ({
      __proto__: dart.getGetters(CloseGuaranteeChannel.__proto__),
      stream: async.Stream$(T),
      [_stream]: close_guarantee_channel._CloseGuaranteeStream$(T),
      sink: async.StreamSink$(T),
      [_sink]: close_guarantee_channel._CloseGuaranteeSink$(T)
    }));
    dart.setSetterSignature(CloseGuaranteeChannel, () => ({
      __proto__: dart.getSetters(CloseGuaranteeChannel.__proto__),
      [_stream]: close_guarantee_channel._CloseGuaranteeStream$(T),
      [_sink]: close_guarantee_channel._CloseGuaranteeSink$(T)
    }));
    dart.setLibraryUri(CloseGuaranteeChannel, I[17]);
    dart.setFieldSignature(CloseGuaranteeChannel, () => ({
      __proto__: dart.getFields(CloseGuaranteeChannel.__proto__),
      [__CloseGuaranteeChannel__stream]: dart.fieldType(dart.nullable(close_guarantee_channel._CloseGuaranteeStream$(T))),
      [__CloseGuaranteeChannel__stream_isSet]: dart.fieldType(core.bool),
      [__CloseGuaranteeChannel__sink]: dart.fieldType(dart.nullable(close_guarantee_channel._CloseGuaranteeSink$(T))),
      [__CloseGuaranteeChannel__sink_isSet]: dart.fieldType(core.bool),
      [_subscription$]: dart.fieldType(dart.nullable(async.StreamSubscription$(T))),
      [_disconnected]: dart.fieldType(core.bool)
    }));
    return CloseGuaranteeChannel;
  });
  close_guarantee_channel.CloseGuaranteeChannel = close_guarantee_channel.CloseGuaranteeChannel$();
  dart.addTypeTests(close_guarantee_channel.CloseGuaranteeChannel, _is_CloseGuaranteeChannel_default);
  var _inner$1 = dart.privateName(close_guarantee_channel, "_inner");
  var _channel$ = dart.privateName(close_guarantee_channel, "_channel");
  const _is__CloseGuaranteeStream_default = Symbol('_is__CloseGuaranteeStream_default');
  close_guarantee_channel._CloseGuaranteeStream$ = dart.generic(T => {
    class _CloseGuaranteeStream extends async.Stream$(T) {
      listen(onData, opts) {
        let onError = opts && 'onError' in opts ? opts.onError : null;
        let onDone = opts && 'onDone' in opts ? opts.onDone : null;
        let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
        if (dart.test(this[_channel$][_disconnected])) {
          onData = null;
          onError = null;
        }
        let subscription = this[_inner$1].listen(onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
        if (!dart.test(this[_channel$][_disconnected])) {
          this[_channel$][_subscription$] = subscription;
        }
        return subscription;
      }
    }
    (_CloseGuaranteeStream.new = function(_inner, _channel) {
      if (_inner == null) dart.nullFailed(I[16], 48, 30, "_inner");
      if (_channel == null) dart.nullFailed(I[16], 48, 43, "_channel");
      this[_inner$1] = _inner;
      this[_channel$] = _channel;
      _CloseGuaranteeStream.__proto__.new.call(this);
      ;
    }).prototype = _CloseGuaranteeStream.prototype;
    dart.addTypeTests(_CloseGuaranteeStream);
    _CloseGuaranteeStream.prototype[_is__CloseGuaranteeStream_default] = true;
    dart.addTypeCaches(_CloseGuaranteeStream);
    dart.setMethodSignature(_CloseGuaranteeStream, () => ({
      __proto__: dart.getMethods(_CloseGuaranteeStream.__proto__),
      listen: dart.fnType(async.StreamSubscription$(T), [dart.nullable(dart.fnType(dart.void, [T]))], {cancelOnError: dart.nullable(core.bool), onDone: dart.nullable(dart.fnType(dart.void, [])), onError: dart.nullable(core.Function)}, {})
    }));
    dart.setLibraryUri(_CloseGuaranteeStream, I[17]);
    dart.setFieldSignature(_CloseGuaranteeStream, () => ({
      __proto__: dart.getFields(_CloseGuaranteeStream.__proto__),
      [_inner$1]: dart.finalFieldType(async.Stream$(T)),
      [_channel$]: dart.finalFieldType(close_guarantee_channel.CloseGuaranteeChannel$(T))
    }));
    return _CloseGuaranteeStream;
  });
  close_guarantee_channel._CloseGuaranteeStream = close_guarantee_channel._CloseGuaranteeStream$();
  dart.addTypeTests(close_guarantee_channel._CloseGuaranteeStream, _is__CloseGuaranteeStream_default);
  const _is__CloseGuaranteeSink_default = Symbol('_is__CloseGuaranteeSink_default');
  close_guarantee_channel._CloseGuaranteeSink$ = dart.generic(T => {
    class _CloseGuaranteeSink extends stream_sink.DelegatingStreamSink$(T) {
      close() {
        let done = super.close();
        this[_channel$][_disconnected] = true;
        let subscription = this[_channel$][_subscription$];
        if (subscription != null) {
          subscription.onData(null);
          subscription.onError(null);
        }
        return done;
      }
    }
    (_CloseGuaranteeSink.new = function(inner, _channel) {
      if (inner == null) dart.nullFailed(I[16], 77, 37, "inner");
      if (_channel == null) dart.nullFailed(I[16], 77, 49, "_channel");
      this[_channel$] = _channel;
      _CloseGuaranteeSink.__proto__.new.call(this, inner);
      ;
    }).prototype = _CloseGuaranteeSink.prototype;
    dart.addTypeTests(_CloseGuaranteeSink);
    _CloseGuaranteeSink.prototype[_is__CloseGuaranteeSink_default] = true;
    dart.addTypeCaches(_CloseGuaranteeSink);
    dart.setMethodSignature(_CloseGuaranteeSink, () => ({
      __proto__: dart.getMethods(_CloseGuaranteeSink.__proto__),
      close: dart.fnType(async.Future$(dart.void), [])
    }));
    dart.setLibraryUri(_CloseGuaranteeSink, I[17]);
    dart.setFieldSignature(_CloseGuaranteeSink, () => ({
      __proto__: dart.getFields(_CloseGuaranteeSink.__proto__),
      [_channel$]: dart.finalFieldType(close_guarantee_channel.CloseGuaranteeChannel$(T))
    }));
    return _CloseGuaranteeSink;
  });
  close_guarantee_channel._CloseGuaranteeSink = close_guarantee_channel._CloseGuaranteeSink$();
  dart.addTypeTests(close_guarantee_channel._CloseGuaranteeSink, _is__CloseGuaranteeSink_default);
  var __GuaranteeChannel__sink = dart.privateName(guarantee_channel, "_#GuaranteeChannel#_sink");
  var __GuaranteeChannel__sink_isSet = dart.privateName(guarantee_channel, "_#GuaranteeChannel#_sink#isSet");
  var __GuaranteeChannel__streamController = dart.privateName(guarantee_channel, "_#GuaranteeChannel#_streamController");
  var __GuaranteeChannel__streamController_isSet = dart.privateName(guarantee_channel, "_#GuaranteeChannel#_streamController#isSet");
  var _subscription$0 = dart.privateName(guarantee_channel, "_subscription");
  var _disconnected$ = dart.privateName(guarantee_channel, "_disconnected");
  var _sink$ = dart.privateName(guarantee_channel, "_sink");
  var _streamController = dart.privateName(guarantee_channel, "_streamController");
  var _onStreamDisconnected = dart.privateName(guarantee_channel, "_onStreamDisconnected");
  var _onSinkDisconnected = dart.privateName(guarantee_channel, "_onSinkDisconnected");
  const _is_GuaranteeChannel_default = Symbol('_is_GuaranteeChannel_default');
  guarantee_channel.GuaranteeChannel$ = dart.generic(T => {
    var _GuaranteeSinkOfT = () => (_GuaranteeSinkOfT = dart.constFn(guarantee_channel._GuaranteeSink$(T)))();
    var SingleSubscriptionTransformerOfT$T = () => (SingleSubscriptionTransformerOfT$T = dart.constFn(single_subscription_transformer.SingleSubscriptionTransformer$(T, T)))();
    var StreamControllerOfT = () => (StreamControllerOfT = dart.constFn(async.StreamController$(T)))();
    class GuaranteeChannel extends stream_channel.StreamChannelMixin$(T) {
      get stream() {
        return this[_streamController].stream;
      }
      get sink() {
        return this[_sink$];
      }
      get [_sink$]() {
        let t10;
        return dart.test(this[__GuaranteeChannel__sink_isSet]) ? (t10 = this[__GuaranteeChannel__sink], t10) : dart.throw(new _internal.LateError.fieldNI("_sink"));
      }
      set [_sink$](t10) {
        if (t10 == null) dart.nullFailed(I[18], 20, 32, "null");
        if (dart.test(this[__GuaranteeChannel__sink_isSet]))
          dart.throw(new _internal.LateError.fieldAI("_sink"));
        else {
          this[__GuaranteeChannel__sink_isSet] = true;
          this[__GuaranteeChannel__sink] = t10;
        }
      }
      get [_streamController]() {
        let t11;
        return dart.test(this[__GuaranteeChannel__streamController_isSet]) ? (t11 = this[__GuaranteeChannel__streamController], t11) : dart.throw(new _internal.LateError.fieldNI("_streamController"));
      }
      set [_streamController](t11) {
        if (t11 == null) dart.nullFailed(I[18], 27, 34, "null");
        if (dart.test(this[__GuaranteeChannel__streamController_isSet]))
          dart.throw(new _internal.LateError.fieldAI("_streamController"));
        else {
          this[__GuaranteeChannel__streamController_isSet] = true;
          this[__GuaranteeChannel__streamController] = t11;
        }
      }
      [_onSinkDisconnected]() {
        this[_disconnected$] = true;
        let subscription = this[_subscription$0];
        if (subscription != null) subscription.cancel();
        this[_streamController].close();
      }
    }
    (GuaranteeChannel.new = function(innerStream, innerSink, opts) {
      if (innerStream == null) dart.nullFailed(I[18], 35, 30, "innerStream");
      if (innerSink == null) dart.nullFailed(I[18], 35, 57, "innerSink");
      let allowSinkErrors = opts && 'allowSinkErrors' in opts ? opts.allowSinkErrors : true;
      if (allowSinkErrors == null) dart.nullFailed(I[18], 36, 13, "allowSinkErrors");
      this[__GuaranteeChannel__sink] = null;
      this[__GuaranteeChannel__sink_isSet] = false;
      this[__GuaranteeChannel__streamController] = null;
      this[__GuaranteeChannel__streamController_isSet] = false;
      this[_subscription$0] = null;
      this[_disconnected$] = false;
      this[_sink$] = new (_GuaranteeSinkOfT()).new(innerSink, this, {allowErrors: allowSinkErrors});
      if (dart.test(innerStream.isBroadcast)) {
        innerStream = innerStream.transform(T, new (SingleSubscriptionTransformerOfT$T()).new());
      }
      this[_streamController] = StreamControllerOfT().new({onListen: dart.fn(() => {
          if (dart.test(this[_disconnected$])) return;
          this[_subscription$0] = innerStream.listen(dart.bind(this[_streamController], 'add'), {onError: dart.bind(this[_streamController], 'addError'), onDone: dart.fn(() => {
              this[_sink$][_onStreamDisconnected]();
              this[_streamController].close();
            }, T$.VoidTovoid())});
        }, T$.VoidTovoid()), sync: true});
    }).prototype = GuaranteeChannel.prototype;
    dart.addTypeTests(GuaranteeChannel);
    GuaranteeChannel.prototype[_is_GuaranteeChannel_default] = true;
    dart.addTypeCaches(GuaranteeChannel);
    dart.setMethodSignature(GuaranteeChannel, () => ({
      __proto__: dart.getMethods(GuaranteeChannel.__proto__),
      [_onSinkDisconnected]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(GuaranteeChannel, () => ({
      __proto__: dart.getGetters(GuaranteeChannel.__proto__),
      stream: async.Stream$(T),
      sink: async.StreamSink$(T),
      [_sink$]: guarantee_channel._GuaranteeSink$(T),
      [_streamController]: async.StreamController$(T)
    }));
    dart.setSetterSignature(GuaranteeChannel, () => ({
      __proto__: dart.getSetters(GuaranteeChannel.__proto__),
      [_sink$]: guarantee_channel._GuaranteeSink$(T),
      [_streamController]: async.StreamController$(T)
    }));
    dart.setLibraryUri(GuaranteeChannel, I[19]);
    dart.setFieldSignature(GuaranteeChannel, () => ({
      __proto__: dart.getFields(GuaranteeChannel.__proto__),
      [__GuaranteeChannel__sink]: dart.fieldType(dart.nullable(guarantee_channel._GuaranteeSink$(T))),
      [__GuaranteeChannel__sink_isSet]: dart.fieldType(core.bool),
      [__GuaranteeChannel__streamController]: dart.fieldType(dart.nullable(async.StreamController$(T))),
      [__GuaranteeChannel__streamController_isSet]: dart.fieldType(core.bool),
      [_subscription$0]: dart.fieldType(dart.nullable(async.StreamSubscription$(T))),
      [_disconnected$]: dart.fieldType(core.bool)
    }));
    return GuaranteeChannel;
  });
  guarantee_channel.GuaranteeChannel = guarantee_channel.GuaranteeChannel$();
  dart.addTypeTests(guarantee_channel.GuaranteeChannel, _is_GuaranteeChannel_default);
  var _doneCompleter = dart.privateName(guarantee_channel, "_doneCompleter");
  var _closed$ = dart.privateName(guarantee_channel, "_closed");
  var _addStreamSubscription$ = dart.privateName(guarantee_channel, "_addStreamSubscription");
  var _addStreamCompleter$ = dart.privateName(guarantee_channel, "_addStreamCompleter");
  var _inner$2 = dart.privateName(guarantee_channel, "_inner");
  var _channel$0 = dart.privateName(guarantee_channel, "_channel");
  var _allowErrors = dart.privateName(guarantee_channel, "_allowErrors");
  var _inAddStream$ = dart.privateName(guarantee_channel, "_inAddStream");
  var _addError = dart.privateName(guarantee_channel, "_addError");
  const _is__GuaranteeSink_default = Symbol('_is__GuaranteeSink_default');
  guarantee_channel._GuaranteeSink$ = dart.generic(T => {
    var StreamOfT = () => (StreamOfT = dart.constFn(async.Stream$(T)))();
    class _GuaranteeSink extends core.Object {
      get done() {
        return this[_doneCompleter].future;
      }
      get [_inAddStream$]() {
        return this[_addStreamSubscription$] != null;
      }
      add(data) {
        T.as(data);
        if (dart.test(this[_closed$])) dart.throw(new core.StateError.new("Cannot add event after closing."));
        if (dart.test(this[_inAddStream$])) {
          dart.throw(new core.StateError.new("Cannot add event while adding stream."));
        }
        if (dart.test(this[_disconnected$])) return;
        this[_inner$2].add(data);
      }
      addError(error, stackTrace = null) {
        if (error == null) dart.nullFailed(I[18], 129, 17, "error");
        if (dart.test(this[_closed$])) dart.throw(new core.StateError.new("Cannot add event after closing."));
        if (dart.test(this[_inAddStream$])) {
          dart.throw(new core.StateError.new("Cannot add event while adding stream."));
        }
        if (dart.test(this[_disconnected$])) return;
        this[_addError](error, stackTrace);
      }
      [_addError](error, stackTrace = null) {
        if (error == null) dart.nullFailed(I[18], 143, 25, "error");
        if (dart.test(this[_allowErrors])) {
          this[_inner$2].addError(error, stackTrace);
          return;
        }
        this[_doneCompleter].completeError(error, stackTrace);
        this[_onStreamDisconnected]();
        this[_channel$0][_onSinkDisconnected]();
        this[_inner$2].close().catchError(dart.fn(_ => {
        }, T$.dynamicToNull()));
      }
      addStream(stream) {
        StreamOfT().as(stream);
        if (stream == null) dart.nullFailed(I[18], 161, 36, "stream");
        if (dart.test(this[_closed$])) dart.throw(new core.StateError.new("Cannot add stream after closing."));
        if (dart.test(this[_inAddStream$])) {
          dart.throw(new core.StateError.new("Cannot add stream while adding stream."));
        }
        if (dart.test(this[_disconnected$])) return T$.FutureOfvoid().value();
        this[_addStreamCompleter$] = async.Completer.sync();
        this[_addStreamSubscription$] = stream.listen(dart.bind(this[_inner$2], 'add'), {onError: dart.bind(this, _addError), onDone: dart.bind(dart.nullCheck(this[_addStreamCompleter$]), 'complete')});
        return dart.nullCheck(this[_addStreamCompleter$]).future.then(dart.void, dart.fn(_ => {
          this[_addStreamCompleter$] = null;
          this[_addStreamSubscription$] = null;
        }, T$.dynamicToNull()));
      }
      close() {
        if (dart.test(this[_inAddStream$])) {
          dart.throw(new core.StateError.new("Cannot close sink while adding stream."));
        }
        if (dart.test(this[_closed$])) return this.done;
        this[_closed$] = true;
        if (!dart.test(this[_disconnected$])) {
          this[_channel$0][_onSinkDisconnected]();
          this[_doneCompleter].complete(this[_inner$2].close());
        }
        return this.done;
      }
      [_onStreamDisconnected]() {
        this[_disconnected$] = true;
        if (!dart.test(this[_doneCompleter].isCompleted)) this[_doneCompleter].complete();
        if (!dart.test(this[_inAddStream$])) return;
        dart.nullCheck(this[_addStreamCompleter$]).complete(dart.nullCheck(this[_addStreamSubscription$]).cancel());
        this[_addStreamCompleter$] = null;
        this[_addStreamSubscription$] = null;
      }
    }
    (_GuaranteeSink.new = function(_inner, _channel, opts) {
      if (_inner == null) dart.nullFailed(I[18], 114, 23, "_inner");
      if (_channel == null) dart.nullFailed(I[18], 114, 36, "_channel");
      let allowErrors = opts && 'allowErrors' in opts ? opts.allowErrors : true;
      if (allowErrors == null) dart.nullFailed(I[18], 114, 52, "allowErrors");
      this[_doneCompleter] = async.Completer.new();
      this[_disconnected$] = false;
      this[_closed$] = false;
      this[_addStreamSubscription$] = null;
      this[_addStreamCompleter$] = null;
      this[_inner$2] = _inner;
      this[_channel$0] = _channel;
      this[_allowErrors] = allowErrors;
      ;
    }).prototype = _GuaranteeSink.prototype;
    dart.addTypeTests(_GuaranteeSink);
    _GuaranteeSink.prototype[_is__GuaranteeSink_default] = true;
    dart.addTypeCaches(_GuaranteeSink);
    _GuaranteeSink[dart.implements] = () => [async.StreamSink$(T)];
    dart.setMethodSignature(_GuaranteeSink, () => ({
      __proto__: dart.getMethods(_GuaranteeSink.__proto__),
      add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
      addError: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      [_addError]: dart.fnType(dart.void, [core.Object], [dart.nullable(core.StackTrace)]),
      addStream: dart.fnType(async.Future$(dart.void), [dart.nullable(core.Object)]),
      close: dart.fnType(async.Future$(dart.void), []),
      [_onStreamDisconnected]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(_GuaranteeSink, () => ({
      __proto__: dart.getGetters(_GuaranteeSink.__proto__),
      done: async.Future$(dart.void),
      [_inAddStream$]: core.bool
    }));
    dart.setLibraryUri(_GuaranteeSink, I[19]);
    dart.setFieldSignature(_GuaranteeSink, () => ({
      __proto__: dart.getFields(_GuaranteeSink.__proto__),
      [_inner$2]: dart.finalFieldType(async.StreamSink$(T)),
      [_channel$0]: dart.finalFieldType(guarantee_channel.GuaranteeChannel$(T)),
      [_doneCompleter]: dart.finalFieldType(async.Completer),
      [_disconnected$]: dart.fieldType(core.bool),
      [_closed$]: dart.fieldType(core.bool),
      [_addStreamSubscription$]: dart.fieldType(dart.nullable(async.StreamSubscription$(T))),
      [_addStreamCompleter$]: dart.fieldType(dart.nullable(async.Completer)),
      [_allowErrors]: dart.finalFieldType(core.bool)
    }));
    return _GuaranteeSink;
  });
  guarantee_channel._GuaranteeSink = guarantee_channel._GuaranteeSink$();
  dart.addTypeTests(guarantee_channel._GuaranteeSink, _is__GuaranteeSink_default);
  const _is_StreamChannel_default = Symbol('_is_StreamChannel_default');
  stream_channel.StreamChannel$ = dart.generic(T => {
    class StreamChannel extends core.Object {
      static new(stream, sink) {
        if (stream == null) dart.nullFailed(I[6], 73, 35, "stream");
        if (sink == null) dart.nullFailed(I[6], 73, 57, "sink");
        return new (stream_channel._StreamChannel$(T)).new(stream, sink);
      }
      static withGuarantees(stream, sink, opts) {
        if (stream == null) dart.nullFailed(I[6], 86, 50, "stream");
        if (sink == null) dart.nullFailed(I[6], 86, 72, "sink");
        let allowSinkErrors = opts && 'allowSinkErrors' in opts ? opts.allowSinkErrors : true;
        if (allowSinkErrors == null) dart.nullFailed(I[6], 87, 17, "allowSinkErrors");
        return new (guarantee_channel.GuaranteeChannel$(T)).new(stream, sink, {allowSinkErrors: allowSinkErrors});
      }
      static withCloseGuarantee(stream, sink) {
        if (stream == null) dart.nullFailed(I[6], 100, 21, "stream");
        if (sink == null) dart.nullFailed(I[6], 100, 43, "sink");
        return new (close_guarantee_channel.CloseGuaranteeChannel$(T)).new(stream, sink);
      }
    }
    (StreamChannel[dart.mixinNew] = function() {
    }).prototype = StreamChannel.prototype;
    dart.addTypeTests(StreamChannel);
    StreamChannel.prototype[_is_StreamChannel_default] = true;
    dart.addTypeCaches(StreamChannel);
    dart.setLibraryUri(StreamChannel, I[7]);
    return StreamChannel;
  });
  stream_channel.StreamChannel = stream_channel.StreamChannel$();
  dart.addTypeTests(stream_channel.StreamChannel, _is_StreamChannel_default);
  const _is__StreamChannel_default = Symbol('_is__StreamChannel_default');
  stream_channel._StreamChannel$ = dart.generic(T => {
    class _StreamChannel extends stream_channel.StreamChannelMixin$(T) {}
    (_StreamChannel.new = function(stream, sink) {
      if (stream == null) dart.nullFailed(I[6], 146, 23, "stream");
      if (sink == null) dart.nullFailed(I[6], 146, 36, "sink");
      this.stream = stream;
      this.sink = sink;
      ;
    }).prototype = _StreamChannel.prototype;
    dart.addTypeTests(_StreamChannel);
    _StreamChannel.prototype[_is__StreamChannel_default] = true;
    dart.addTypeCaches(_StreamChannel);
    dart.setLibraryUri(_StreamChannel, I[7]);
    dart.setFieldSignature(_StreamChannel, () => ({
      __proto__: dart.getFields(_StreamChannel.__proto__),
      stream: dart.finalFieldType(async.Stream$(T)),
      sink: dart.finalFieldType(async.StreamSink$(T))
    }));
    return _StreamChannel;
  });
  stream_channel._StreamChannel = stream_channel._StreamChannel$();
  dart.addTypeTests(stream_channel._StreamChannel, _is__StreamChannel_default);
  dart.trackLibraries("packages/stream_channel/src/stream_channel_controller.dart", {
    "package:stream_channel/src/stream_channel_controller.dart": stream_channel_controller,
    "package:stream_channel/src/stream_channel_completer.dart": stream_channel_completer,
    "package:stream_channel/src/multi_channel.dart": multi_channel,
    "package:stream_channel/src/json_document_transformer.dart": json_document_transformer,
    "package:stream_channel/src/disconnector.dart": disconnector,
    "package:stream_channel/src/delegating_stream_channel.dart": delegating_stream_channel,
    "package:stream_channel/src/stream_channel_transformer.dart": stream_channel_transformer,
    "package:stream_channel/src/close_guarantee_channel.dart": close_guarantee_channel,
    "package:stream_channel/src/guarantee_channel.dart": guarantee_channel,
    "package:stream_channel/stream_channel.dart": stream_channel
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["stream_channel_controller.dart","stream_channel_completer.dart","multi_channel.dart","../stream_channel.dart","json_document_transformer.dart","disconnector.dart","delegating_stream_channel.dart","stream_channel_transformer.dart","close_guarantee_channel.dart","guarantee_channel.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../packages/stream_channel/src/stream_channel_controller.dart.lib.js"}');
  // Exports:
  return {
    src__stream_channel_controller: stream_channel_controller,
    src__stream_channel_completer: stream_channel_completer,
    src__multi_channel: multi_channel,
    src__json_document_transformer: json_document_transformer,
    src__disconnector: disconnector,
    src__delegating_stream_channel: delegating_stream_channel,
    src__stream_channel_transformer: stream_channel_transformer,
    src__close_guarantee_channel: close_guarantee_channel,
    src__guarantee_channel: guarantee_channel,
    stream_channel: stream_channel
  };
}));

//# sourceMappingURL=stream_channel_controller.dart.lib.js.map
