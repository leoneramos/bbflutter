define(['dart_sdk', 'packages/sembast/src/type_adapter_impl.dart', 'packages/sembast/src/api/client.dart', 'packages/sembast/src/api/exception.dart', 'packages/sembast/src/sort.dart', 'packages/sembast/src/cooperator.dart', 'packages/sembast/src/api/log_level.dart', 'packages/sembast/src/api/database_mode.dart', 'packages/synchronized/src/reentrant_lock.dart', 'packages/sembast/src/api/v2/transaction.dart', 'packages/sembast/src/key_utils.dart', 'packages/sembast/src/timestamp_impl.dart', 'packages/sembast/src/blob_impl.dart'], (function load__packages__sembast__src__sembast_codec_dart(dart_sdk, packages__sembast__src__type_adapter_impl$46dart, packages__sembast__src__api__client$46dart, packages__sembast__src__api__exception$46dart, packages__sembast__src__sort$46dart, packages__sembast__src__cooperator$46dart, packages__sembast__src__api__log_level$46dart, packages__sembast__src__api__database_mode$46dart, packages__synchronized__src__reentrant_lock$46dart, packages__sembast__src__api__v2__transaction$46dart, packages__sembast__src__key_utils$46dart, packages__sembast__src__timestamp_impl$46dart, packages__sembast__src__blob_impl$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const async = dart_sdk.async;
  const convert = dart_sdk.convert;
  const _js_helper = dart_sdk._js_helper;
  const collection = dart_sdk.collection;
  const math = dart_sdk.math;
  const typed_data = dart_sdk.typed_data;
  const _native_typed_data = dart_sdk._native_typed_data;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const type_adapter_impl = packages__sembast__src__type_adapter_impl$46dart.src__type_adapter_impl;
  const client = packages__sembast__src__api__client$46dart.src__api__client;
  const exception = packages__sembast__src__api__exception$46dart.src__api__exception;
  const sort$ = packages__sembast__src__sort$46dart.src__sort;
  const cooperator = packages__sembast__src__cooperator$46dart.src__cooperator;
  const log_level = packages__sembast__src__api__log_level$46dart.src__api__log_level;
  const database_mode = packages__sembast__src__api__database_mode$46dart.src__api__database_mode;
  const synchronized = packages__synchronized__src__reentrant_lock$46dart.synchronized;
  const transaction = packages__sembast__src__api__v2__transaction$46dart.src__api__v2__transaction;
  const key_utils = packages__sembast__src__key_utils$46dart.src__key_utils;
  const timestamp_impl = packages__sembast__src__timestamp_impl$46dart.src__timestamp_impl;
  const blob_impl = packages__sembast__src__blob_impl$46dart.src__blob_impl;
  var sembast_codec = Object.create(dart.library);
  var database = Object.create(dart.library);
  var codec = Object.create(dart.library);
  var records_ref_impl = Object.create(dart.library);
  var record_ref_impl = Object.create(dart.library);
  var sembast_codec_impl = Object.create(dart.library);
  var database_content = Object.create(dart.library);
  var query_ref_impl = Object.create(dart.library);
  var query_ref = Object.create(dart.library);
  var listener = Object.create(dart.library);
  var meta$ = Object.create(dart.library);
  var storage = Object.create(dart.library);
  var sembast_jdb = Object.create(dart.library);
  var json_encodable_codec = Object.create(dart.library);
  var jdb = Object.create(dart.library);
  var field$ = Object.create(dart.library);
  var database$ = Object.create(dart.library);
  var sembast = Object.create(dart.library);
  var factory = Object.create(dart.library);
  var factory$ = Object.create(dart.library);
  var database_factory_mixin = Object.create(dart.library);
  var jdb$ = Object.create(dart.library);
  var database_impl = Object.create(dart.library);
  var database_client_impl = Object.create(dart.library);
  var transaction_impl = Object.create(dart.library);
  var store_impl = Object.create(dart.library);
  var finder_impl = Object.create(dart.library);
  var sort_order_impl = Object.create(dart.library);
  var sort_order = Object.create(dart.library);
  var utils = Object.create(dart.library);
  var record_snapshot_impl = Object.create(dart.library);
  var filter_impl = Object.create(dart.library);
  var filter = Object.create(dart.library);
  var finder = Object.create(dart.library);
  var store_ref_impl = Object.create(dart.library);
  var sembast_impl = Object.create(dart.library);
  var record_snapshot = Object.create(dart.library);
  var records_ref = Object.create(dart.library);
  var store_ref = Object.create(dart.library);
  var record_ref = Object.create(dart.library);
  var record_impl = Object.create(dart.library);
  var boundary_impl = Object.create(dart.library);
  var boundary = Object.create(dart.library);
  var sembast$ = Object.create(dart.library);
  var sembast$0 = Object.create(dart.library);
  var $_get = dartx._get;
  var $length = dartx.length;
  var $cast = dartx.cast;
  var $map = dartx.map;
  var $toList = dartx.toList;
  var $toString = dartx.toString;
  var $hashCode = dartx.hashCode;
  var $_equals = dartx._equals;
  var $isEmpty = dartx.isEmpty;
  var $first = dartx.first;
  var $keys = dartx.keys;
  var $values = dartx.values;
  var $_set = dartx._set;
  var $isNotEmpty = dartx.isNotEmpty;
  var $remove = dartx.remove;
  var $clear = dartx.clear;
  var $add = dartx.add;
  var $addAll = dartx.addAll;
  var $removeWhere = dartx.removeWhere;
  var $insert = dartx.insert;
  var $containsKey = dartx.containsKey;
  var $forEach = dartx.forEach;
  var $startsWith = dartx.startsWith;
  var $invalidValue = dartx.invalidValue;
  var $runtimeType = dartx.runtimeType;
  var $substring = dartx.substring;
  var $where = dartx.where;
  var $contains = dartx.contains;
  var $sort = dartx.sort;
  var $sublist = dartx.sublist;
  var $entries = dartx.entries;
  var $last = dartx.last;
  var $codeUnitAt = dartx.codeUnitAt;
  var $split = dartx.split;
  var $join = dartx.join;
  dart._checkModuleNullSafetyMode(false);
  var T$ = {
    SembastTypeAdapterL: () => (T$.SembastTypeAdapterL = dart.constFn(dart.legacy(type_adapter_impl.SembastTypeAdapter)))(),
    JSArrayOfSembastTypeAdapterL: () => (T$.JSArrayOfSembastTypeAdapterL = dart.constFn(_interceptors.JSArray$(T$.SembastTypeAdapterL())))(),
    ListL: () => (T$.ListL = dart.constFn(dart.legacy(core.List)))(),
    FutureOfListL: () => (T$.FutureOfListL = dart.constFn(async.Future$(T$.ListL())))(),
    FutureLOfListL: () => (T$.FutureLOfListL = dart.constFn(dart.legacy(T$.FutureOfListL())))(),
    SembastTransactionL: () => (T$.SembastTransactionL = dart.constFn(dart.legacy(transaction_impl.SembastTransaction)))(),
    SembastTransactionLToFutureLOfListL: () => (T$.SembastTransactionLToFutureLOfListL = dart.constFn(dart.fnType(T$.FutureLOfListL(), [T$.SembastTransactionL()])))(),
    RecordRefL: () => (T$.RecordRefL = dart.constFn(dart.legacy(record_ref.RecordRef)))(),
    DatabaseClientL: () => (T$.DatabaseClientL = dart.constFn(dart.legacy(client.DatabaseClient)))(),
    FutureL: () => (T$.FutureL = dart.constFn(dart.legacy(async.Future)))(),
    SembastTransactionLToFutureL: () => (T$.SembastTransactionLToFutureL = dart.constFn(dart.fnType(T$.FutureL(), [T$.SembastTransactionL()])))(),
    boolL: () => (T$.boolL = dart.constFn(dart.legacy(core.bool)))(),
    FutureOfNull: () => (T$.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    FutureLOfNull: () => (T$.FutureLOfNull = dart.constFn(dart.legacy(T$.FutureOfNull())))(),
    VoidToFutureLOfNull: () => (T$.VoidToFutureLOfNull = dart.constFn(dart.fnType(T$.FutureLOfNull(), [])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    DatabaseL: () => (T$.DatabaseL = dart.constFn(dart.legacy(database$.Database)))(),
    FutureOfboolL: () => (T$.FutureOfboolL = dart.constFn(async.Future$(T$.boolL())))(),
    FutureLOfboolL: () => (T$.FutureLOfboolL = dart.constFn(dart.legacy(T$.FutureOfboolL())))(),
    DatabaseClientLToFutureLOfboolL: () => (T$.DatabaseClientLToFutureLOfboolL = dart.constFn(dart.fnType(T$.FutureLOfboolL(), [T$.DatabaseClientL()])))(),
    DatabaseClientLToFutureL: () => (T$.DatabaseClientLToFutureL = dart.constFn(dart.fnType(T$.FutureL(), [T$.DatabaseClientL()])))(),
    StringL: () => (T$.StringL = dart.constFn(dart.legacy(core.String)))(),
    IdentityMapOfStringL$dynamic: () => (T$.IdentityMapOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(T$.StringL(), dart.dynamic)))(),
    MapL: () => (T$.MapL = dart.constFn(dart.legacy(core.Map)))(),
    ImmutableSembastRecordL: () => (T$.ImmutableSembastRecordL = dart.constFn(dart.legacy(record_impl.ImmutableSembastRecord)))(),
    LinkedMapOfdynamic$ImmutableSembastRecordL: () => (T$.LinkedMapOfdynamic$ImmutableSembastRecordL = dart.constFn(_js_helper.LinkedMap$(dart.dynamic, T$.ImmutableSembastRecordL())))(),
    StoreRefL: () => (T$.StoreRefL = dart.constFn(dart.legacy(store_ref.StoreRef)))(),
    StoreContentL: () => (T$.StoreContentL = dart.constFn(dart.legacy(database_content.StoreContent)))(),
    LinkedMapOfStoreRefL$StoreContentL: () => (T$.LinkedMapOfStoreRefL$StoreContentL = dart.constFn(_js_helper.LinkedMap$(T$.StoreRefL(), T$.StoreContentL())))(),
    TxnRecordL: () => (T$.TxnRecordL = dart.constFn(dart.legacy(record_impl.TxnRecord)))(),
    JSArrayOfTxnRecordL: () => (T$.JSArrayOfTxnRecordL = dart.constFn(_interceptors.JSArray$(T$.TxnRecordL())))(),
    TxnRecordLToImmutableSembastRecordL: () => (T$.TxnRecordLToImmutableSembastRecordL = dart.constFn(dart.fnType(T$.ImmutableSembastRecordL(), [T$.TxnRecordL()])))(),
    SembastFinderL: () => (T$.SembastFinderL = dart.constFn(dart.legacy(finder_impl.SembastFinder)))(),
    SembastFilterBaseL: () => (T$.SembastFilterBaseL = dart.constFn(dart.legacy(filter_impl.SembastFilterBase)))(),
    ListOfImmutableSembastRecordL: () => (T$.ListOfImmutableSembastRecordL = dart.constFn(core.List$(T$.ImmutableSembastRecordL())))(),
    ImmutableSembastRecordLTodynamic: () => (T$.ImmutableSembastRecordLTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.ImmutableSembastRecordL()])))(),
    dynamicToboolL: () => (T$.dynamicToboolL = dart.constFn(dart.fnType(T$.boolL(), [dart.dynamic])))(),
    intL: () => (T$.intL = dart.constFn(dart.legacy(core.int)))(),
    ImmutableSembastRecordLAndImmutableSembastRecordLTointL: () => (T$.ImmutableSembastRecordLAndImmutableSembastRecordLTointL = dart.constFn(dart.fnType(T$.intL(), [T$.ImmutableSembastRecordL(), T$.ImmutableSembastRecordL()])))(),
    RecordListenerControllerL: () => (T$.RecordListenerControllerL = dart.constFn(dart.legacy(listener.RecordListenerController)))(),
    ListOfRecordListenerControllerL: () => (T$.ListOfRecordListenerControllerL = dart.constFn(core.List$(T$.RecordListenerControllerL())))(),
    ListLOfRecordListenerControllerL: () => (T$.ListLOfRecordListenerControllerL = dart.constFn(dart.legacy(T$.ListOfRecordListenerControllerL())))(),
    LinkedMapOfdynamic$ListLOfRecordListenerControllerL: () => (T$.LinkedMapOfdynamic$ListLOfRecordListenerControllerL = dart.constFn(_js_helper.LinkedMap$(dart.dynamic, T$.ListLOfRecordListenerControllerL())))(),
    QueryListenerControllerL: () => (T$.QueryListenerControllerL = dart.constFn(dart.legacy(listener.QueryListenerController)))(),
    JSArrayOfQueryListenerControllerL: () => (T$.JSArrayOfQueryListenerControllerL = dart.constFn(_interceptors.JSArray$(T$.QueryListenerControllerL())))(),
    JSArrayOfRecordListenerControllerL: () => (T$.JSArrayOfRecordListenerControllerL = dart.constFn(_interceptors.JSArray$(T$.RecordListenerControllerL())))(),
    StoreListenerL: () => (T$.StoreListenerL = dart.constFn(dart.legacy(listener.StoreListener)))(),
    LinkedMapOfStoreRefL$StoreListenerL: () => (T$.LinkedMapOfStoreRefL$StoreListenerL = dart.constFn(_js_helper.LinkedMap$(T$.StoreRefL(), T$.StoreListenerL())))(),
    QueryListenerControllerLToNull: () => (T$.QueryListenerControllerLToNull = dart.constFn(dart.fnType(core.Null, [T$.QueryListenerControllerL()])))(),
    RecordListenerControllerLTovoid: () => (T$.RecordListenerControllerLTovoid = dart.constFn(dart.fnType(dart.void, [T$.RecordListenerControllerL()])))(),
    ListLOfRecordListenerControllerLToNull: () => (T$.ListLOfRecordListenerControllerLToNull = dart.constFn(dart.fnType(core.Null, [T$.ListLOfRecordListenerControllerL()])))(),
    StoreListenerLToNull: () => (T$.StoreListenerLToNull = dart.constFn(dart.fnType(core.Null, [T$.StoreListenerL()])))(),
    JSArrayOfStringL: () => (T$.JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(T$.StringL())))(),
    MapOfStringL$dynamic: () => (T$.MapOfStringL$dynamic = dart.constFn(core.Map$(T$.StringL(), dart.dynamic)))(),
    MapLOfStringL$dynamic: () => (T$.MapLOfStringL$dynamic = dart.constFn(dart.legacy(T$.MapOfStringL$dynamic())))(),
    JdbEntryL: () => (T$.JdbEntryL = dart.constFn(dart.legacy(jdb.JdbEntry)))(),
    ListOfJdbEntryL: () => (T$.ListOfJdbEntryL = dart.constFn(core.List$(T$.JdbEntryL())))(),
    ListLOfJdbEntryL: () => (T$.ListLOfJdbEntryL = dart.constFn(dart.legacy(T$.ListOfJdbEntryL())))(),
    DatabaseOpenHelperL: () => (T$.DatabaseOpenHelperL = dart.constFn(dart.legacy(database_factory_mixin.DatabaseOpenHelper)))(),
    IdentityMapOfStringL$DatabaseOpenHelperL: () => (T$.IdentityMapOfStringL$DatabaseOpenHelperL = dart.constFn(_js_helper.IdentityMap$(T$.StringL(), T$.DatabaseOpenHelperL())))(),
    VoidToFutureL: () => (T$.VoidToFutureL = dart.constFn(dart.fnType(T$.FutureL(), [])))(),
    ListOfDatabaseOpenHelperL: () => (T$.ListOfDatabaseOpenHelperL = dart.constFn(core.List$(T$.DatabaseOpenHelperL())))(),
    IdentityMapOfStringL$SembastTypeAdapterL: () => (T$.IdentityMapOfStringL$SembastTypeAdapterL = dart.constFn(_js_helper.IdentityMap$(T$.StringL(), T$.SembastTypeAdapterL())))(),
    LinkedHashMapOfStringL$dynamic: () => (T$.LinkedHashMapOfStringL$dynamic = dart.constFn(collection.LinkedHashMap$(T$.StringL(), dart.dynamic)))(),
    dynamicAnddynamicToNull: () => (T$.dynamicAnddynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic, dart.dynamic])))(),
    ArgumentErrorL: () => (T$.ArgumentErrorL = dart.constFn(dart.legacy(core.ArgumentError)))(),
    SembastDatabaseL: () => (T$.SembastDatabaseL = dart.constFn(dart.legacy(database_impl.SembastDatabase)))(),
    FutureOfSembastDatabaseL: () => (T$.FutureOfSembastDatabaseL = dart.constFn(async.Future$(T$.SembastDatabaseL())))(),
    FutureLOfSembastDatabaseL: () => (T$.FutureLOfSembastDatabaseL = dart.constFn(dart.legacy(T$.FutureOfSembastDatabaseL())))(),
    VoidToFutureLOfSembastDatabaseL: () => (T$.VoidToFutureLOfSembastDatabaseL = dart.constFn(dart.fnType(T$.FutureLOfSembastDatabaseL(), [])))(),
    SembastStoreL: () => (T$.SembastStoreL = dart.constFn(dart.legacy(store_impl.SembastStore)))(),
    IdentityMapOfStringL$SembastStoreL: () => (T$.IdentityMapOfStringL$SembastStoreL = dart.constFn(_js_helper.IdentityMap$(T$.StringL(), T$.SembastStoreL())))(),
    IdentityMapOfStringL$intL: () => (T$.IdentityMapOfStringL$intL = dart.constFn(_js_helper.IdentityMap$(T$.StringL(), T$.intL())))(),
    VoidToLFutureL: () => (T$.VoidToLFutureL = dart.constFn(dart.legacy(T$.VoidToFutureL())))(),
    JSArrayOfVoidToLFutureL: () => (T$.JSArrayOfVoidToLFutureL = dart.constFn(_interceptors.JSArray$(T$.VoidToLFutureL())))(),
    DatabaseStorageL: () => (T$.DatabaseStorageL = dart.constFn(dart.legacy(storage.DatabaseStorage)))(),
    StorageJdbL: () => (T$.StorageJdbL = dart.constFn(dart.legacy(storage.StorageJdb)))(),
    SembastStoreLToStringL: () => (T$.SembastStoreLToStringL = dart.constFn(dart.fnType(T$.StringL(), [T$.SembastStoreL()])))(),
    SembastStoreLToboolL: () => (T$.SembastStoreLToboolL = dart.constFn(dart.fnType(T$.boolL(), [T$.SembastStoreL()])))(),
    ImmutableSembastRecordJdbL: () => (T$.ImmutableSembastRecordJdbL = dart.constFn(dart.legacy(record_impl.ImmutableSembastRecordJdb)))(),
    ListOfSembastStoreL: () => (T$.ListOfSembastStoreL = dart.constFn(core.List$(T$.SembastStoreL())))(),
    StringLToFutureL: () => (T$.StringLToFutureL = dart.constFn(dart.fnType(T$.FutureL(), [T$.StringL()])))(),
    MapLOfStringL$dynamicToFutureL: () => (T$.MapLOfStringL$dynamicToFutureL = dart.constFn(dart.fnType(T$.FutureL(), [T$.MapLOfStringL$dynamic()])))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListLOfImmutableSembastRecordL: () => (T$.ListLOfImmutableSembastRecordL = dart.constFn(dart.legacy(T$.ListOfImmutableSembastRecordL())))(),
    TransactionL: () => (T$.TransactionL = dart.constFn(dart.legacy(transaction.Transaction)))(),
    TransactionLToFutureL: () => (T$.TransactionLToFutureL = dart.constFn(dart.fnType(T$.FutureL(), [T$.TransactionL()])))(),
    intLAndintLToFutureL: () => (T$.intLAndintLToFutureL = dart.constFn(dart.fnType(T$.FutureL(), [T$.intL(), T$.intL()])))(),
    ExceptionL: () => (T$.ExceptionL = dart.constFn(dart.legacy(core.Exception)))(),
    StreamOfStringL: () => (T$.StreamOfStringL = dart.constFn(async.Stream$(T$.StringL())))(),
    StreamLOfStringL: () => (T$.StreamLOfStringL = dart.constFn(dart.legacy(T$.StreamOfStringL())))(),
    StreamLOfStringL__ToFutureL: () => (T$.StreamLOfStringL__ToFutureL = dart.constFn(dart.fnType(T$.FutureL(), [T$.StreamLOfStringL()], {safeMode: T$.boolL()}, {})))(),
    intLToNull: () => (T$.intLToNull = dart.constFn(dart.fnType(core.Null, [T$.intL()])))(),
    JdbImportResultL: () => (T$.JdbImportResultL = dart.constFn(dart.legacy(database_impl.JdbImportResult)))(),
    FutureOfJdbImportResultL: () => (T$.FutureOfJdbImportResultL = dart.constFn(async.Future$(T$.JdbImportResultL())))(),
    FutureLOfJdbImportResultL: () => (T$.FutureLOfJdbImportResultL = dart.constFn(dart.legacy(T$.FutureOfJdbImportResultL())))(),
    TransactionLToFutureLOfJdbImportResultL: () => (T$.TransactionLToFutureLOfJdbImportResultL = dart.constFn(dart.fnType(T$.FutureLOfJdbImportResultL(), [T$.TransactionL()])))(),
    JSArrayOfImmutableSembastRecordJdbL: () => (T$.JSArrayOfImmutableSembastRecordJdbL = dart.constFn(_interceptors.JSArray$(T$.ImmutableSembastRecordJdbL())))(),
    JSArrayOfMapLOfStringL$dynamic: () => (T$.JSArrayOfMapLOfStringL$dynamic = dart.constFn(_interceptors.JSArray$(T$.MapLOfStringL$dynamic())))(),
    JdbWriteEntryL: () => (T$.JdbWriteEntryL = dart.constFn(dart.legacy(jdb.JdbWriteEntry)))(),
    JSArrayOfJdbWriteEntryL: () => (T$.JSArrayOfJdbWriteEntryL = dart.constFn(_interceptors.JSArray$(T$.JdbWriteEntryL())))(),
    JdbInfoEntryL: () => (T$.JdbInfoEntryL = dart.constFn(dart.legacy(jdb.JdbInfoEntry)))(),
    JSArrayOfJdbInfoEntryL: () => (T$.JSArrayOfJdbInfoEntryL = dart.constFn(_interceptors.JSArray$(T$.JdbInfoEntryL())))(),
    StringLAndintLToNull: () => (T$.StringLAndintLToNull = dart.constFn(dart.fnType(core.Null, [T$.StringL(), T$.intL()])))(),
    ListOfQueryListenerControllerL: () => (T$.ListOfQueryListenerControllerL = dart.constFn(core.List$(T$.QueryListenerControllerL())))(),
    numL: () => (T$.numL = dart.constFn(dart.legacy(core.num)))(),
    FieldValueL: () => (T$.FieldValueL = dart.constFn(dart.legacy(field$.FieldValue)))(),
    SembastDatabaseClientL: () => (T$.SembastDatabaseClientL = dart.constFn(dart.legacy(database_client_impl.SembastDatabaseClient)))(),
    SplayTreeMapOfdynamic$ImmutableSembastRecordL: () => (T$.SplayTreeMapOfdynamic$ImmutableSembastRecordL = dart.constFn(collection.SplayTreeMap$(dart.dynamic, T$.ImmutableSembastRecordL())))(),
    dynamicAnddynamicTointL: () => (T$.dynamicAnddynamicTointL = dart.constFn(dart.fnType(T$.intL(), [dart.dynamic, dart.dynamic])))(),
    ImmutableSembastRecordLToboolL: () => (T$.ImmutableSembastRecordLToboolL = dart.constFn(dart.fnType(T$.boolL(), [T$.ImmutableSembastRecordL()])))(),
    ListOfTxnRecordL: () => (T$.ListOfTxnRecordL = dart.constFn(core.List$(T$.TxnRecordL())))(),
    FinderL: () => (T$.FinderL = dart.constFn(dart.legacy(finder.Finder)))(),
    FinderLAndImmutableSembastRecordLToboolL: () => (T$.FinderLAndImmutableSembastRecordLToboolL = dart.constFn(dart.fnType(T$.boolL(), [T$.FinderL(), T$.ImmutableSembastRecordL()])))(),
    JSArrayOfImmutableSembastRecordL: () => (T$.JSArrayOfImmutableSembastRecordL = dart.constFn(_interceptors.JSArray$(T$.ImmutableSembastRecordL())))(),
    SembastRecordL: () => (T$.SembastRecordL = dart.constFn(dart.legacy(record_impl.SembastRecord)))(),
    SembastRecordLAndSembastRecordLTointL: () => (T$.SembastRecordLAndSembastRecordLTointL = dart.constFn(dart.fnType(T$.intL(), [T$.SembastRecordL(), T$.SembastRecordL()])))(),
    SembastRecordLTodynamic: () => (T$.SembastRecordLTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.SembastRecordL()])))(),
    LinkedMapOfdynamic$TxnRecordL: () => (T$.LinkedMapOfdynamic$TxnRecordL = dart.constFn(_js_helper.LinkedMap$(dart.dynamic, T$.TxnRecordL())))(),
    dynamicAndTxnRecordLToNull: () => (T$.dynamicAndTxnRecordLToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic, T$.TxnRecordL()])))(),
    SortOrderL: () => (T$.SortOrderL = dart.constFn(dart.legacy(sort_order.SortOrder)))(),
    JSArrayOfSortOrderL: () => (T$.JSArrayOfSortOrderL = dart.constFn(_interceptors.JSArray$(T$.SortOrderL())))(),
    SembastSortOrderL: () => (T$.SembastSortOrderL = dart.constFn(dart.legacy(sort_order_impl.SembastSortOrder)))(),
    SembastBoundaryL: () => (T$.SembastBoundaryL = dart.constFn(dart.legacy(boundary_impl.SembastBoundary)))(),
    ObjectL: () => (T$.ObjectL = dart.constFn(dart.legacy(core.Object)))(),
    IdentityMapOfStringL$ObjectL: () => (T$.IdentityMapOfStringL$ObjectL = dart.constFn(_js_helper.IdentityMap$(T$.StringL(), T$.ObjectL())))(),
    ComparableL: () => (T$.ComparableL = dart.constFn(dart.legacy(core.Comparable)))(),
    TimestampL: () => (T$.TimestampL = dart.constFn(dart.legacy(timestamp_impl.Timestamp)))(),
    BlobL: () => (T$.BlobL = dart.constFn(dart.legacy(blob_impl.Blob)))(),
    IterableL: () => (T$.IterableL = dart.constFn(dart.legacy(core.Iterable)))(),
    MapEntryOfStringL$dynamic: () => (T$.MapEntryOfStringL$dynamic = dart.constFn(core.MapEntry$(T$.StringL(), dart.dynamic)))(),
    MapEntryLOfStringL$dynamic: () => (T$.MapEntryLOfStringL$dynamic = dart.constFn(dart.legacy(T$.MapEntryOfStringL$dynamic())))(),
    dynamicAnddynamicToMapEntryLOfStringL$dynamic: () => (T$.dynamicAnddynamicToMapEntryLOfStringL$dynamic = dart.constFn(dart.fnType(T$.MapEntryLOfStringL$dynamic(), [dart.dynamic, dart.dynamic])))(),
    dynamicTodynamic: () => (T$.dynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic])))(),
    ImmutableMapOfStringL$dynamic: () => (T$.ImmutableMapOfStringL$dynamic = dart.constFn(utils.ImmutableMap$(T$.StringL(), dart.dynamic)))(),
    ImmutableMapL: () => (T$.ImmutableMapL = dart.constFn(dart.legacy(utils.ImmutableMap)))(),
    dynamicAnddynamicTovoid: () => (T$.dynamicAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, dart.dynamic])))(),
    Uint8ListL: () => (T$.Uint8ListL = dart.constFn(dart.legacy(typed_data.Uint8List)))(),
    StreamOfUint8ListL: () => (T$.StreamOfUint8ListL = dart.constFn(async.Stream$(T$.Uint8ListL())))(),
    StreamLOfUint8ListL: () => (T$.StreamLOfUint8ListL = dart.constFn(dart.legacy(T$.StreamOfUint8ListL())))(),
    ListOfintL: () => (T$.ListOfintL = dart.constFn(core.List$(T$.intL())))(),
    ListLOfintL: () => (T$.ListLOfintL = dart.constFn(dart.legacy(T$.ListOfintL())))(),
    StreamOfListLOfintL: () => (T$.StreamOfListLOfintL = dart.constFn(async.Stream$(T$.ListLOfintL())))(),
    StreamLOfListLOfintL: () => (T$.StreamLOfListLOfintL = dart.constFn(dart.legacy(T$.StreamOfListLOfintL())))(),
    _StreamHandlerTransformerOfListLOfintL$Uint8ListL: () => (T$._StreamHandlerTransformerOfListLOfintL$Uint8ListL = dart.constFn(async._StreamHandlerTransformer$(T$.ListLOfintL(), T$.Uint8ListL())))(),
    EventSinkOfUint8ListL: () => (T$.EventSinkOfUint8ListL = dart.constFn(async.EventSink$(T$.Uint8ListL())))(),
    EventSinkLOfUint8ListL: () => (T$.EventSinkLOfUint8ListL = dart.constFn(dart.legacy(T$.EventSinkOfUint8ListL())))(),
    ListLOfintLAndEventSinkLOfUint8ListLToNull: () => (T$.ListLOfintLAndEventSinkLOfUint8ListLToNull = dart.constFn(dart.fnType(core.Null, [T$.ListLOfintL(), T$.EventSinkLOfUint8ListL()])))(),
    dynamicAnddynamicToboolL: () => (T$.dynamicAnddynamicToboolL = dart.constFn(dart.fnType(T$.boolL(), [dart.dynamic, dart.dynamic])))(),
    FilterL: () => (T$.FilterL = dart.constFn(dart.legacy(filter.Filter)))(),
    JSArrayOfFilterL: () => (T$.JSArrayOfFilterL = dart.constFn(_interceptors.JSArray$(T$.FilterL())))(),
    FutureOfListLOfImmutableSembastRecordL: () => (T$.FutureOfListLOfImmutableSembastRecordL = dart.constFn(async.Future$(T$.ListLOfImmutableSembastRecordL())))(),
    FutureLOfListLOfImmutableSembastRecordL: () => (T$.FutureLOfListLOfImmutableSembastRecordL = dart.constFn(dart.legacy(T$.FutureOfListLOfImmutableSembastRecordL())))(),
    DatabaseClientL__ToFutureLOfListLOfImmutableSembastRecordL: () => (T$.DatabaseClientL__ToFutureLOfListLOfImmutableSembastRecordL = dart.constFn(dart.fnType(T$.FutureLOfListLOfImmutableSembastRecordL(), [T$.DatabaseClientL()], {finder: T$.FinderL()}, {})))(),
    FutureOfintL: () => (T$.FutureOfintL = dart.constFn(async.Future$(T$.intL())))(),
    FutureLOfintL: () => (T$.FutureLOfintL = dart.constFn(dart.legacy(T$.FutureOfintL())))(),
    DatabaseClientL__ToFutureLOfintL: () => (T$.DatabaseClientL__ToFutureLOfintL = dart.constFn(dart.fnType(T$.FutureLOfintL(), [T$.DatabaseClientL()], {filter: T$.FilterL()}, {})))(),
    SembastTransactionLToFutureLOfNull: () => (T$.SembastTransactionLToFutureLOfNull = dart.constFn(dart.fnType(T$.FutureLOfNull(), [T$.SembastTransactionL()])))(),
    SembastTransactionLToFutureLOfintL: () => (T$.SembastTransactionLToFutureLOfintL = dart.constFn(dart.fnType(T$.FutureLOfintL(), [T$.SembastTransactionL()])))(),
    DatabaseClientL__ToFutureLOfintL$1: () => (T$.DatabaseClientL__ToFutureLOfintL$1 = dart.constFn(dart.fnType(T$.FutureLOfintL(), [T$.DatabaseClientL()], {finder: T$.FinderL()}, {})))(),
    StoreFactoryBaseOfintL$MapLOfStringL$dynamic: () => (T$.StoreFactoryBaseOfintL$MapLOfStringL$dynamic = dart.constFn(store_ref_impl.StoreFactoryBase$(T$.intL(), T$.MapLOfStringL$dynamic())))(),
    StoreFactoryBaseOfStringL$MapLOfStringL$dynamic: () => (T$.StoreFactoryBaseOfStringL$MapLOfStringL$dynamic = dart.constFn(store_ref_impl.StoreFactoryBase$(T$.StringL(), T$.MapLOfStringL$dynamic())))(),
    SembastRecordSnapshotL: () => (T$.SembastRecordSnapshotL = dart.constFn(dart.legacy(record_snapshot_impl.SembastRecordSnapshot)))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(utils.compareRecordKey, T$.ImmutableSembastRecordLAndImmutableSembastRecordLTointL());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: field$.FieldValue.prototype,
        [_label$]: "delete"
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: core.FormatException.prototype,
        [FormatException_offset]: null,
        [FormatException_source]: null,
        [FormatException_message]: "Invalid database format"
      });
    },
    get C3() {
      return C[3] = dart.fn(utils.compareKey, T$.dynamicAnddynamicTointL());
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: filter_impl.FilterOperation.prototype,
        [FilterOperation_value]: 2
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: filter_impl.FilterOperation.prototype,
        [FilterOperation_value]: 3
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: filter_impl.FilterOperation.prototype,
        [FilterOperation_value]: 4
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: filter_impl.FilterOperation.prototype,
        [FilterOperation_value]: 5
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: filter_impl.FilterOperation.prototype,
        [FilterOperation_value]: 6
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: filter_impl.FilterOperation.prototype,
        [FilterOperation_value]: 7
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: filter_impl.FilterOperation.prototype,
        [FilterOperation_value]: 1
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: filter_impl.FilterOperation.prototype,
        [FilterOperation_value]: 8
      });
    }
  }, false);
  var C = Array(12).fill(void 0);
  var I = [
    "package:sembast/src/api/codec.dart",
    "package:sembast/src/records_ref_impl.dart",
    "package:sembast/src/record_ref_impl.dart",
    "package:sembast/src/sembast_codec_impl.dart",
    "package:sembast/src/database_content.dart",
    "package:sembast/src/query_ref_impl.dart",
    "package:sembast/src/api/query_ref.dart",
    "package:sembast/src/listener.dart",
    "package:sembast/src/meta.dart",
    "package:sembast/src/storage.dart",
    "package:sembast/src/sembast_jdb.dart",
    "package:sembast/src/database_factory_mixin.dart",
    "package:sembast/src/json_encodable_codec.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-2.4.10+4/lib/src/json_encodable_codec.dart",
    "package:sembast/src/jdb.dart",
    "package:sembast/src/api/field.dart",
    "package:sembast/src/api/v2/database.dart",
    "package:sembast/src/api/v2/factory.dart",
    "package:sembast/src/database_impl.dart",
    "file:///C:/Users/Leone/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/sembast-2.4.10+4/lib/src/database_impl.dart",
    "package:sembast/src/database_client_impl.dart",
    "package:sembast/src/transaction_impl.dart",
    "package:sembast/src/store_impl.dart",
    "package:sembast/src/finder_impl.dart",
    "package:sembast/src/sort_order_impl.dart",
    "package:sembast/src/api/sort_order.dart",
    "package:sembast/src/utils.dart",
    "package:sembast/src/record_snapshot_impl.dart",
    "package:sembast/src/filter_impl.dart",
    "package:sembast/src/api/filter.dart",
    "package:sembast/src/api/finder.dart",
    "package:sembast/src/store_ref_impl.dart",
    "package:sembast/src/api/record_snapshot.dart",
    "package:sembast/src/api/records_ref.dart",
    "package:sembast/src/api/store_ref.dart",
    "package:sembast/src/api/record_ref.dart",
    "package:sembast/src/record_impl.dart",
    "package:sembast/src/boundary_impl.dart",
    "package:sembast/src/api/boundary.dart"
  ];
  sembast_codec.sembastCodecWithAdapters = function sembastCodecWithAdapters(adapters) {
    let sembastCodec = codec.SembastCodec.new({codec: null, signature: null, jsonEncodableCodec: new json_encodable_codec.JsonEncodableCodec.new({adapters: adapters})});
    return sembastCodec;
  };
  dart.defineLazy(sembast_codec, {
    /*sembast_codec.sembastCodecDefault*/get sembastCodecDefault() {
      return sembast_codec.sembastCodecWithAdapters(T$.JSArrayOfSembastTypeAdapterL().of([type_adapter_impl.sembastBlobAdapter, type_adapter_impl.sembastTimestampAdapter]));
    },
    set sembastCodecDefault(_) {}
  }, true);
  codec.SembastCodec = class SembastCodec extends core.Object {
    static new(opts) {
      let signature = opts && 'signature' in opts ? opts.signature : null;
      let codec = opts && 'codec' in opts ? opts.codec : null;
      let jsonEncodableCodec = opts && 'jsonEncodableCodec' in opts ? opts.jsonEncodableCodec : null;
      return new sembast_codec_impl.SembastCodecImpl.new({signature: signature, codec: codec, jsonEncodableCodec: jsonEncodableCodec});
    }
  };
  (codec.SembastCodec[dart.mixinNew] = function() {
  }).prototype = codec.SembastCodec.prototype;
  dart.addTypeTests(codec.SembastCodec);
  dart.addTypeCaches(codec.SembastCodec);
  dart.setLibraryUri(codec.SembastCodec, I[0]);
  var store = dart.privateName(records_ref_impl, "RecordsRefMixin.store");
  var keys = dart.privateName(records_ref_impl, "RecordsRefMixin.keys");
  const _is_RecordsRefMixin_default = Symbol('_is_RecordsRefMixin_default');
  records_ref_impl.RecordsRefMixin$ = dart.generic((K, V) => {
    var KL = () => (KL = dart.constFn(dart.legacy(K)))();
    var StoreRefOfKL$VL = () => (StoreRefOfKL$VL = dart.constFn(store_ref.StoreRef$(KL(), VL())))();
    var StoreRefLOfKL$VL = () => (StoreRefLOfKL$VL = dart.constFn(dart.legacy(StoreRefOfKL$VL())))();
    var ListOfKL = () => (ListOfKL = dart.constFn(core.List$(KL())))();
    var ListLOfKL = () => (ListLOfKL = dart.constFn(dart.legacy(ListOfKL())))();
    var RecordSnapshotOfKL$VL = () => (RecordSnapshotOfKL$VL = dart.constFn(record_snapshot.RecordSnapshot$(KL(), VL())))();
    var RecordSnapshotLOfKL$VL = () => (RecordSnapshotLOfKL$VL = dart.constFn(dart.legacy(RecordSnapshotOfKL$VL())))();
    var ListOfRecordSnapshotLOfKL$VL = () => (ListOfRecordSnapshotLOfKL$VL = dart.constFn(core.List$(RecordSnapshotLOfKL$VL())))();
    var ListLOfRecordSnapshotLOfKL$VL = () => (ListLOfRecordSnapshotLOfKL$VL = dart.constFn(dart.legacy(ListOfRecordSnapshotLOfKL$VL())))();
    var FutureOfListLOfKL = () => (FutureOfListLOfKL = dart.constFn(async.Future$(ListLOfKL())))();
    var FutureLOfListLOfKL = () => (FutureLOfListLOfKL = dart.constFn(dart.legacy(FutureOfListLOfKL())))();
    var SembastTransactionLToFutureLOfListLOfKL = () => (SembastTransactionLToFutureLOfListLOfKL = dart.constFn(dart.fnType(FutureLOfListLOfKL(), [T$.SembastTransactionL()])))();
    var RecordSnapshotLOfKL$VLToVL = () => (RecordSnapshotLOfKL$VLToVL = dart.constFn(dart.fnType(VL(), [RecordSnapshotLOfKL$VL()])))();
    var VL = () => (VL = dart.constFn(dart.legacy(V)))();
    var ListOfVL = () => (ListOfVL = dart.constFn(core.List$(VL())))();
    var ListLOfVL = () => (ListLOfVL = dart.constFn(dart.legacy(ListOfVL())))();
    var FutureOfListLOfVL = () => (FutureOfListLOfVL = dart.constFn(async.Future$(ListLOfVL())))();
    var FutureLOfListLOfVL = () => (FutureLOfListLOfVL = dart.constFn(dart.legacy(FutureOfListLOfVL())))();
    var SembastTransactionLToFutureLOfListLOfVL = () => (SembastTransactionLToFutureLOfListLOfVL = dart.constFn(dart.fnType(FutureLOfListLOfVL(), [T$.SembastTransactionL()])))();
    class RecordsRefMixin extends core.Object {}
    RecordsRefMixin[dart.mixinOn] = Object => {
      class RecordsRefMixin extends Object {
        get store() {
          return this[store];
        }
        set store(value) {
          this[store] = StoreRefLOfKL$VL().as(value);
        }
        get keys() {
          return this[keys];
        }
        set keys(value) {
          this[keys] = ListLOfKL().as(value);
        }
        _get(index) {
          return this.store.record(this.keys[$_get](index));
        }
        delete(databaseClient) {
          let client = database_client_impl.getClient(databaseClient);
          return client.inTransaction(dart.dynamic, dart.fn(txn => {
            let sembastStore = client.getSembastStore(this.store);
            return sembastStore.txnDeleteAll(txn, this.keys);
          }, T$.SembastTransactionLToFutureLOfListL()));
        }
        getSnapshots(databaseClient) {
          return async.async(ListLOfRecordSnapshotLOfKL$VL(), (function* getSnapshots() {
            let client = database_client_impl.getClient(databaseClient);
            return client.getSembastStore(this.store).txnGetRecordSnapshots(KL(), VL(), client.sembastTransaction, this);
          }).bind(this));
        }
        add(databaseClient, values) {
          ListLOfVL().as(values);
          if (values[$length] != this.keys[$length]) {
            dart.throw(new core.ArgumentError.new("the list of values must match the list of keys"));
          }
          let client = database_client_impl.getClient(databaseClient);
          return client.inTransaction(ListLOfKL(), dart.fn(txn => async.async(ListLOfKL(), (function*() {
            let t0;
            t0 = (yield client.getSembastStore(this.store).txnAddAll(txn, values, this.keys));
            return t0 == null ? null : t0[$cast](KL());
          }).bind(this)), SembastTransactionLToFutureLOfListLOfKL()));
        }
        put(databaseClient, values, opts) {
          ListLOfVL().as(values);
          let merge = opts && 'merge' in opts ? opts.merge : null;
          if (values[$length] != this.keys[$length]) {
            dart.throw(new core.ArgumentError.new("the list of values must match the list of keys"));
          }
          let client = database_client_impl.getClient(databaseClient);
          return client.inTransaction(ListLOfVL(), dart.fn(txn => async.async(ListLOfVL(), (function*() {
            let t0;
            t0 = (yield client.getSembastStore(this.store).txnPutAll(txn, values, this.keys, {merge: merge}));
            return t0 == null ? null : t0[$cast](VL());
          }).bind(this)), SembastTransactionLToFutureLOfListLOfVL()));
        }
        update(databaseClient, values) {
          ListLOfVL().as(values);
          if (values[$length] != this.keys[$length]) {
            dart.throw(new core.ArgumentError.new("the list of values must match the list of keys"));
          }
          let client = database_client_impl.getClient(databaseClient);
          return client.inTransaction(ListLOfVL(), dart.fn(txn => async.async(ListLOfVL(), (function*() {
            let t0;
            t0 = (yield client.getSembastStore(this.store).txnUpdateAll(txn, values, this.keys));
            return t0 == null ? null : t0[$cast](VL());
          }).bind(this)), SembastTransactionLToFutureLOfListLOfVL()));
        }
        get(client) {
          return async.async(ListLOfVL(), (function* get() {
            return (yield this.getSnapshots(client))[$map](VL(), dart.fn(snapshot => {
              let t0;
              t0 = snapshot;
              return t0 == null ? null : t0.value;
            }, RecordSnapshotLOfKL$VLToVL()))[$toList]({growable: false});
          }).bind(this));
        }
        toString() {
          let t0;
          return "Records(" + dart.str((t0 = this.store, t0 == null ? null : t0.name)) + ", " + dart.str(this.keys) + ")";
        }
        cast(RK, RV) {
          let t0;
          if (dart.legacy(records_ref.RecordsRef$(dart.legacy(RK), dart.legacy(RV))).is(this)) {
            return dart.legacy(records_ref.RecordsRef$(dart.legacy(RK), dart.legacy(RV))).as(this);
          }
          return this.store.cast(dart.legacy(RK), dart.legacy(RV)).records((t0 = this.keys, t0 == null ? null : t0[$cast](dart.legacy(RK))));
        }
      }
      dart.defineExtensionMethods(RecordsRefMixin, ['toString']);
      return RecordsRefMixin;
    };
    (RecordsRefMixin[dart.mixinNew] = function() {
      this[store] = null;
      this[keys] = null;
    }).prototype = RecordsRefMixin.prototype;
    dart.addTypeTests(RecordsRefMixin);
    RecordsRefMixin.prototype[_is_RecordsRefMixin_default] = true;
    dart.addTypeCaches(RecordsRefMixin);
    RecordsRefMixin[dart.implements] = () => [records_ref.RecordsRef$(dart.legacy(K), dart.legacy(V)), core.Object];
    dart.setMethodSignature(RecordsRefMixin, () => ({
      __proto__: dart.getMethods(RecordsRefMixin.__proto__),
      _get: dart.fnType(dart.legacy(record_ref.RecordRef$(dart.legacy(K), dart.legacy(V))), [dart.legacy(core.int)]),
      delete: dart.fnType(dart.legacy(async.Future), [dart.legacy(client.DatabaseClient)]),
      getSnapshots: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V))))))), [dart.legacy(client.DatabaseClient)]),
      add: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(K))))), [dart.legacy(client.DatabaseClient), dart.legacy(core.Object)]),
      put: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(V))))), [dart.legacy(client.DatabaseClient), dart.legacy(core.Object)], {merge: dart.legacy(core.bool)}, {}),
      update: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(V))))), [dart.legacy(client.DatabaseClient), dart.legacy(core.Object)]),
      get: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(V))))), [dart.legacy(client.DatabaseClient)]),
      toString: dart.fnType(dart.legacy(core.String), []),
      [$toString]: dart.fnType(dart.legacy(core.String), []),
      cast: dart.gFnType((RK, RV) => [dart.legacy(records_ref.RecordsRef$(dart.legacy(RK), dart.legacy(RV))), []])
    }));
    dart.setLibraryUri(RecordsRefMixin, I[1]);
    dart.setFieldSignature(RecordsRefMixin, () => ({
      __proto__: dart.getFields(RecordsRefMixin.__proto__),
      store: dart.fieldType(dart.legacy(store_ref.StoreRef$(dart.legacy(K), dart.legacy(V)))),
      keys: dart.fieldType(dart.legacy(core.List$(dart.legacy(K))))
    }));
    return RecordsRefMixin;
  });
  records_ref_impl.RecordsRefMixin = records_ref_impl.RecordsRefMixin$();
  dart.addTypeTests(records_ref_impl.RecordsRefMixin, _is_RecordsRefMixin_default);
  const _is_SembastRecordsRef_default = Symbol('_is_SembastRecordsRef_default');
  records_ref_impl.SembastRecordsRef$ = dart.generic((K, V) => {
    const Object_RecordsRefMixin$36 = class Object_RecordsRefMixin extends core.Object {};
    (Object_RecordsRefMixin$36.new = function() {
      records_ref_impl.RecordsRefMixin$(dart.legacy(K), dart.legacy(V))[dart.mixinNew].call(this);
    }).prototype = Object_RecordsRefMixin$36.prototype;
    dart.applyMixin(Object_RecordsRefMixin$36, records_ref_impl.RecordsRefMixin$(dart.legacy(K), dart.legacy(V)));
    class SembastRecordsRef extends Object_RecordsRefMixin$36 {}
    (SembastRecordsRef.new = function(store, keys) {
      SembastRecordsRef.__proto__.new.call(this);
      if (keys == null) {
        dart.throw(new core.ArgumentError.new("record keys cannot be null"));
      }
      this.store = store;
      this.keys = keys[$toList]({growable: false});
    }).prototype = SembastRecordsRef.prototype;
    dart.addTypeTests(SembastRecordsRef);
    SembastRecordsRef.prototype[_is_SembastRecordsRef_default] = true;
    dart.addTypeCaches(SembastRecordsRef);
    dart.setLibraryUri(SembastRecordsRef, I[1]);
    return SembastRecordsRef;
  });
  records_ref_impl.SembastRecordsRef = records_ref_impl.SembastRecordsRef$();
  dart.addTypeTests(records_ref_impl.SembastRecordsRef, _is_SembastRecordsRef_default);
  var store$ = dart.privateName(record_ref_impl, "RecordRefMixin.store");
  var key = dart.privateName(record_ref_impl, "RecordRefMixin.key");
  const _is_RecordRefMixin_default = Symbol('_is_RecordRefMixin_default');
  record_ref_impl.RecordRefMixin$ = dart.generic((K, V) => {
    var KL = () => (KL = dart.constFn(dart.legacy(K)))();
    var StoreRefOfKL$VL = () => (StoreRefOfKL$VL = dart.constFn(store_ref.StoreRef$(KL(), VL())))();
    var StoreRefLOfKL$VL = () => (StoreRefLOfKL$VL = dart.constFn(dart.legacy(StoreRefOfKL$VL())))();
    var VL = () => (VL = dart.constFn(dart.legacy(V)))();
    class RecordRefMixin extends core.Object {}
    RecordRefMixin[dart.mixinOn] = Object => {
      class RecordRefMixin extends Object {
        get store() {
          return this[store$];
        }
        set store(value) {
          this[store$] = StoreRefLOfKL$VL().as(value);
        }
        get key() {
          return this[key];
        }
        set key(value) {
          this[key] = KL().as(value);
        }
        toString() {
          let t0;
          return "Record(" + dart.str((t0 = this.store, t0 == null ? null : t0.name)) + ", " + dart.str(this.key) + ")";
        }
        cast(RK, RV) {
          if (dart.legacy(record_ref.RecordRef$(dart.legacy(RK), dart.legacy(RV))).is(this)) {
            return dart.legacy(record_ref.RecordRef$(dart.legacy(RK), dart.legacy(RV))).as(this);
          }
          return this.store.cast(dart.legacy(RK), dart.legacy(RV)).record(dart.legacy(RK).as(this.key));
        }
        get hashCode() {
          return dart.hashCode(this.key);
        }
        _equals(other) {
          if (other == null) return false;
          if (T$.RecordRefL().is(other)) {
            return dart.equals(other.store, this.store) && dart.equals(other.key, this.key);
          }
          return false;
        }
      }
      dart.defineExtensionMethods(RecordRefMixin, ['toString', '_equals']);
      dart.defineExtensionAccessors(RecordRefMixin, ['hashCode']);
      return RecordRefMixin;
    };
    (RecordRefMixin[dart.mixinNew] = function() {
      this[store$] = null;
      this[key] = null;
    }).prototype = RecordRefMixin.prototype;
    dart.addTypeTests(RecordRefMixin);
    RecordRefMixin.prototype[_is_RecordRefMixin_default] = true;
    dart.addTypeCaches(RecordRefMixin);
    RecordRefMixin[dart.implements] = () => [record_ref.RecordRef$(dart.legacy(K), dart.legacy(V)), core.Object];
    dart.setMethodSignature(RecordRefMixin, () => ({
      __proto__: dart.getMethods(RecordRefMixin.__proto__),
      toString: dart.fnType(dart.legacy(core.String), []),
      [$toString]: dart.fnType(dart.legacy(core.String), []),
      cast: dart.gFnType((RK, RV) => [dart.legacy(record_ref.RecordRef$(dart.legacy(RK), dart.legacy(RV))), []]),
      _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
      [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
    }));
    dart.setGetterSignature(RecordRefMixin, () => ({
      __proto__: dart.getGetters(RecordRefMixin.__proto__),
      hashCode: dart.legacy(core.int),
      [$hashCode]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(RecordRefMixin, I[2]);
    dart.setFieldSignature(RecordRefMixin, () => ({
      __proto__: dart.getFields(RecordRefMixin.__proto__),
      store: dart.fieldType(dart.legacy(store_ref.StoreRef$(dart.legacy(K), dart.legacy(V)))),
      key: dart.fieldType(dart.legacy(K))
    }));
    return RecordRefMixin;
  });
  record_ref_impl.RecordRefMixin = record_ref_impl.RecordRefMixin$();
  dart.addTypeTests(record_ref_impl.RecordRefMixin, _is_RecordRefMixin_default);
  const _is_SembastRecordRef_default = Symbol('_is_SembastRecordRef_default');
  record_ref_impl.SembastRecordRef$ = dart.generic((K, V) => {
    const Object_RecordRefMixin$36 = class Object_RecordRefMixin extends core.Object {};
    (Object_RecordRefMixin$36.new = function() {
      record_ref_impl.RecordRefMixin$(dart.legacy(K), dart.legacy(V))[dart.mixinNew].call(this);
    }).prototype = Object_RecordRefMixin$36.prototype;
    dart.applyMixin(Object_RecordRefMixin$36, record_ref_impl.RecordRefMixin$(dart.legacy(K), dart.legacy(V)));
    class SembastRecordRef extends Object_RecordRefMixin$36 {}
    (SembastRecordRef.new = function(store, key) {
      SembastRecordRef.__proto__.new.call(this);
      this.store = store;
      this.key = key;
    }).prototype = SembastRecordRef.prototype;
    dart.addTypeTests(SembastRecordRef);
    SembastRecordRef.prototype[_is_SembastRecordRef_default] = true;
    dart.addTypeCaches(SembastRecordRef);
    dart.setLibraryUri(SembastRecordRef, I[2]);
    return SembastRecordRef;
  });
  record_ref_impl.SembastRecordRef = record_ref_impl.SembastRecordRef$();
  dart.addTypeTests(record_ref_impl.SembastRecordRef, _is_SembastRecordRef_default);
  record_ref_impl['SembastRecordRefExtension|snapshot'] = function SembastRecordRefExtension$124snapshot(K, V, $this, value) {
    return new (record_snapshot_impl.SembastRecordSnapshot$(dart.legacy(K), dart.legacy(V))).new($this, value);
  };
  record_ref_impl['SembastRecordRefExtension|get#snapshot'] = function SembastRecordRefExtension$124get$35snapshot(K, V, $this) {
    return dart.fn(value => record_ref_impl['SembastRecordRefExtension|snapshot'](dart.legacy(K), dart.legacy(V), $this, value), dart.fnType(dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V))), [dart.legacy(V)]));
  };
  record_ref_impl['SembastRecordRefExtension|add'] = function SembastRecordRefExtension$124add(K, V, $this, databaseClient, value) {
    return async.async(dart.legacy(K), function* SembastRecordRefExtension$124add() {
      let client = database_client_impl.getClient(databaseClient);
      value = client.sembastDatabase.sanitizeInputValue(dart.legacy(V), value);
      return yield client.inTransaction(dart.legacy(K), dart.fn(txn => client.getSembastStore($this.store).txnAdd(dart.legacy(K), dart.dynamic, txn, value, $this.key), dart.fnType(dart.legacy(async.Future$(dart.legacy(K))), [T$.SembastTransactionL()])));
    });
  };
  record_ref_impl['SembastRecordRefExtension|get#add'] = function SembastRecordRefExtension$124get$35add(K, V, $this) {
    return dart.fn((databaseClient, value) => record_ref_impl['SembastRecordRefExtension|add'](dart.legacy(K), dart.legacy(V), $this, databaseClient, value), dart.fnType(dart.legacy(async.Future$(dart.legacy(K))), [T$.DatabaseClientL(), dart.legacy(V)]));
  };
  record_ref_impl['SembastRecordRefExtension|put'] = function SembastRecordRefExtension$124put(K, V, $this, databaseClient, value, opts) {
    let merge = opts && 'merge' in opts ? opts.merge : null;
    return async.async(dart.legacy(V), function* SembastRecordRefExtension$124put() {
      let client = database_client_impl.getClient(databaseClient);
      value = client.sembastDatabase.sanitizeInputValue(dart.legacy(V), value, {update: merge});
      return dart.legacy(V).as(yield client.inTransaction(dart.dynamic, dart.fn(txn => client.getSembastStore($this.store).txnPut(txn, value, $this.key, {merge: merge}), T$.SembastTransactionLToFutureL())));
    });
  };
  record_ref_impl['SembastRecordRefExtension|get#put'] = function SembastRecordRefExtension$124get$35put(K, V, $this) {
    return dart.fn((databaseClient, value, opts) => {
      let merge = opts && 'merge' in opts ? opts.merge : null;
      return record_ref_impl['SembastRecordRefExtension|put'](dart.legacy(K), dart.legacy(V), $this, databaseClient, value, {merge: merge});
    }, dart.fnType(dart.legacy(async.Future$(dart.legacy(V))), [T$.DatabaseClientL(), dart.legacy(V)], {merge: T$.boolL()}, {}));
  };
  record_ref_impl['SembastRecordRefExtension|update'] = function SembastRecordRefExtension$124update(K, V, $this, databaseClient, value) {
    return async.async(dart.legacy(V), function* SembastRecordRefExtension$124update() {
      let client = database_client_impl.getClient(databaseClient);
      value = client.sembastDatabase.sanitizeInputValue(dart.legacy(V), value, {update: true});
      return dart.legacy(V).as(yield client.inTransaction(dart.dynamic, dart.fn(txn => client.getSembastStore($this.store).txnUpdate(txn, value, $this.key), T$.SembastTransactionLToFutureL())));
    });
  };
  record_ref_impl['SembastRecordRefExtension|get#update'] = function SembastRecordRefExtension$124get$35update(K, V, $this) {
    return dart.fn((databaseClient, value) => record_ref_impl['SembastRecordRefExtension|update'](dart.legacy(K), dart.legacy(V), $this, databaseClient, value), dart.fnType(dart.legacy(async.Future$(dart.legacy(V))), [T$.DatabaseClientL(), dart.legacy(V)]));
  };
  record_ref_impl['SembastRecordRefExtension|get'] = function SembastRecordRefExtension$124get(K, V, $this, databaseClient) {
    return async.async(dart.legacy(V), function* SembastRecordRefExtension$124get() {
      let t9;
      t9 = (yield record_ref_impl['SembastRecordRefExtension|getSnapshot'](dart.legacy(K), dart.legacy(V), $this, databaseClient));
      return t9 == null ? null : t9.value;
    });
  };
  record_ref_impl['SembastRecordRefExtension|get#get'] = function SembastRecordRefExtension$124get$35get(K, V, $this) {
    return dart.fn(databaseClient => record_ref_impl['SembastRecordRefExtension|get'](dart.legacy(K), dart.legacy(V), $this, databaseClient), dart.fnType(dart.legacy(async.Future$(dart.legacy(V))), [T$.DatabaseClientL()]));
  };
  record_ref_impl['SembastRecordRefExtension|getSnapshot'] = function SembastRecordRefExtension$124getSnapshot(K, V, $this, databaseClient) {
    return async.async(dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V))), function* SembastRecordRefExtension$124getSnapshot() {
      let t11;
      let client = database_client_impl.getClient(databaseClient);
      let record = (yield client.getSembastStore($this.store).txnGetRecord(client.sembastTransaction, $this.key));
      t11 = record;
      return t11 == null ? null : t11.cast(dart.legacy(K), dart.legacy(V));
    });
  };
  record_ref_impl['SembastRecordRefExtension|get#getSnapshot'] = function SembastRecordRefExtension$124get$35getSnapshot(K, V, $this) {
    return dart.fn(databaseClient => record_ref_impl['SembastRecordRefExtension|getSnapshot'](dart.legacy(K), dart.legacy(V), $this, databaseClient), dart.fnType(dart.legacy(async.Future$(dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V))))), [T$.DatabaseClientL()]));
  };
  record_ref_impl['SembastRecordRefExtension|onSnapshot'] = function SembastRecordRefExtension$124onSnapshot(K, V, $this, database) {
    let db = database_impl.getDatabase(database);
    let ctlr = null;
    ctlr = db.listener.addRecord(dart.legacy(K), dart.legacy(V), $this, {onListen: dart.fn(() => {
        dart.fn(() => async.async(core.Null, function*() {
          yield db.notificationLock.synchronized(core.Null, dart.fn(() => async.async(core.Null, function*() {
            try {
              let snapshot = (yield record_ref_impl['SembastRecordRefExtension|getSnapshot'](dart.legacy(K), dart.legacy(V), $this, database));
              if (false) {
                core.print("matching " + dart.str(ctlr) + ": " + dart.str(snapshot) + " on " + dart.str($this));
              }
              ctlr.add(snapshot);
            } catch (e) {
              let error = dart.getThrown(e);
              let stackTrace = dart.stackTrace(e);
              ctlr.addError(error, stackTrace);
            }
          }), T$.VoidToFutureLOfNull()));
        }), T$.VoidToFutureLOfNull())();
      }, T$.VoidToNull())});
    return ctlr.stream;
  };
  record_ref_impl['SembastRecordRefExtension|get#onSnapshot'] = function SembastRecordRefExtension$124get$35onSnapshot(K, V, $this) {
    return dart.fn(database => record_ref_impl['SembastRecordRefExtension|onSnapshot'](dart.legacy(K), dart.legacy(V), $this, database), dart.fnType(dart.legacy(async.Stream$(dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V))))), [T$.DatabaseL()]));
  };
  record_ref_impl['SembastRecordRefExtension|exists'] = function SembastRecordRefExtension$124exists(K, V, $this, databaseClient) {
    let client = database_client_impl.getClient(databaseClient);
    return client.getSembastStore($this.store).txnRecordExists(client.sembastTransaction, $this.key);
  };
  record_ref_impl['SembastRecordRefExtension|get#exists'] = function SembastRecordRefExtension$124get$35exists(K, V, $this) {
    return dart.fn(databaseClient => record_ref_impl['SembastRecordRefExtension|exists'](dart.legacy(K), dart.legacy(V), $this, databaseClient), T$.DatabaseClientLToFutureLOfboolL());
  };
  record_ref_impl['SembastRecordRefExtension|delete'] = function SembastRecordRefExtension$124delete(K, V, $this, databaseClient) {
    let client = database_client_impl.getClient(databaseClient);
    return client.inTransaction(dart.dynamic, dart.fn(txn => client.getSembastStore($this.store).txnDelete(txn, $this.key), T$.SembastTransactionLToFutureL()));
  };
  record_ref_impl['SembastRecordRefExtension|get#delete'] = function SembastRecordRefExtension$124get$35delete(K, V, $this) {
    return dart.fn(databaseClient => record_ref_impl['SembastRecordRefExtension|delete'](dart.legacy(K), dart.legacy(V), $this, databaseClient), T$.DatabaseClientLToFutureL());
  };
  var signature$ = dart.privateName(sembast_codec_impl, "SembastCodecImpl.signature");
  var codec$ = dart.privateName(sembast_codec_impl, "SembastCodecImpl.codec");
  var jsonEncodableCodec$ = dart.privateName(sembast_codec_impl, "SembastCodecImpl.jsonEncodableCodec");
  sembast_codec_impl.SembastCodecImpl = class SembastCodecImpl extends core.Object {
    get signature() {
      return this[signature$];
    }
    set signature(value) {
      super.signature = value;
    }
    get codec() {
      return this[codec$];
    }
    set codec(value) {
      super.codec = value;
    }
    get jsonEncodableCodec() {
      return this[jsonEncodableCodec$];
    }
    set jsonEncodableCodec(value) {
      this[jsonEncodableCodec$] = value;
    }
    toString() {
      return "SembastCodec(" + dart.str(this.signature) + ")";
    }
  };
  (sembast_codec_impl.SembastCodecImpl.new = function(opts) {
    let t19;
    let signature = opts && 'signature' in opts ? opts.signature : null;
    let codec = opts && 'codec' in opts ? opts.codec : null;
    let jsonEncodableCodec = opts && 'jsonEncodableCodec' in opts ? opts.jsonEncodableCodec : null;
    this[signature$] = signature;
    this[codec$] = codec;
    this[jsonEncodableCodec$] = (t19 = jsonEncodableCodec, t19 == null ? json_encodable_codec.sembastDefaultJsonEncodableCodec : t19);
    ;
  }).prototype = sembast_codec_impl.SembastCodecImpl.prototype;
  dart.addTypeTests(sembast_codec_impl.SembastCodecImpl);
  dart.addTypeCaches(sembast_codec_impl.SembastCodecImpl);
  sembast_codec_impl.SembastCodecImpl[dart.implements] = () => [codec.SembastCodec];
  dart.setMethodSignature(sembast_codec_impl.SembastCodecImpl, () => ({
    __proto__: dart.getMethods(sembast_codec_impl.SembastCodecImpl.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(sembast_codec_impl.SembastCodecImpl, I[3]);
  dart.setFieldSignature(sembast_codec_impl.SembastCodecImpl, () => ({
    __proto__: dart.getFields(sembast_codec_impl.SembastCodecImpl.__proto__),
    signature: dart.finalFieldType(dart.legacy(core.String)),
    codec: dart.finalFieldType(dart.legacy(convert.Codec$(dart.dynamic, dart.legacy(core.String)))),
    jsonEncodableCodec: dart.fieldType(dart.legacy(json_encodable_codec.JsonEncodableCodec))
  }));
  dart.defineExtensionMethods(sembast_codec_impl.SembastCodecImpl, ['toString']);
  sembast_codec_impl.getRawSignatureMap = function getRawSignatureMap(codec) {
    if (codec != null) {
      return new (T$.IdentityMapOfStringL$dynamic()).from(["signature", codec.signature]);
    }
    return null;
  };
  sembast_codec_impl.getCodecEncodedSignature = function getCodecEncodedSignature(codec) {
    let t19, t19$;
    if ((t19 = codec, t19 == null ? null : t19.signature) != null) {
      t19$ = codec.codec;
      return t19$ == null ? null : t19$.encode(sembast_codec_impl.getRawSignatureMap(codec));
    }
    return null;
  };
  sembast_codec_impl.getCodecDecodedSignature = function getCodecDecodedSignature(codec, encodedSignature) {
    let t19;
    if (codec != null && encodedSignature != null) {
      try {
        let result = (t19 = codec.codec, t19 == null ? null : t19.decode(encodedSignature));
        if (T$.MapL().is(result)) {
          return result[$cast](T$.StringL(), dart.dynamic);
        }
      } catch (e) {
        let _ = dart.getThrown(e);
      }
    }
    return null;
  };
  sembast_codec_impl.checkCodecEncodedSignature = function checkCodecEncodedSignature(codec, encodedSignature) {
    let t20;
    if ((t20 = codec, t20 == null ? null : t20.signature) == null && encodedSignature == null) {
      return null;
    }
    let rawSignatureMap = sembast_codec_impl.getRawSignatureMap(codec);
    let decodedSignature = sembast_codec_impl.getCodecDecodedSignature(codec, encodedSignature);
    let matches = true;
    if (rawSignatureMap == null) {
      if (encodedSignature != null) {
        matches = false;
      }
    } else if (decodedSignature == null) {
      matches = false;
    } else {
      if (rawSignatureMap[$length] != decodedSignature[$length] || dart.test(decodedSignature[$isEmpty])) {
        matches = false;
      } else {
        if (decodedSignature[$keys][$first] != rawSignatureMap[$keys][$first]) {
          matches = false;
        } else if (!dart.equals(decodedSignature[$values][$first], rawSignatureMap[$values][$first])) {
          matches = false;
        }
      }
    }
    if (!matches) {
      dart.throw(new exception.DatabaseException.invalidCodec("Invalid codec signature"));
    }
  };
  var store$0 = dart.privateName(database_content, "StoreContent.store");
  var _map = dart.privateName(database_content, "_map");
  database_content.StoreContent = class StoreContent extends core.Object {
    get store() {
      return this[store$0];
    }
    set store(value) {
      super.store = value;
    }
    get records() {
      return this[_map][$values];
    }
    addAll(records) {
      for (let record of records) {
        this.add(record);
      }
    }
    add(record) {
      this[_map][$_set](record.key, record);
    }
    record(key) {
      return this[_map][$_get](key);
    }
    toString() {
      return dart.str(this.store.name) + " " + dart.str(this.records[$length]);
    }
  };
  (database_content.StoreContent.new = function(store) {
    this[_map] = new (T$.LinkedMapOfdynamic$ImmutableSembastRecordL()).new();
    this[store$0] = store;
    ;
  }).prototype = database_content.StoreContent.prototype;
  dart.addTypeTests(database_content.StoreContent);
  dart.addTypeCaches(database_content.StoreContent);
  dart.setMethodSignature(database_content.StoreContent, () => ({
    __proto__: dart.getMethods(database_content.StoreContent.__proto__),
    addAll: dart.fnType(dart.void, [dart.legacy(core.Iterable$(dart.legacy(record_impl.ImmutableSembastRecord)))]),
    add: dart.fnType(dart.void, [dart.legacy(record_impl.ImmutableSembastRecord)]),
    record: dart.fnType(dart.legacy(record_impl.ImmutableSembastRecord), [dart.dynamic]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(database_content.StoreContent, () => ({
    __proto__: dart.getGetters(database_content.StoreContent.__proto__),
    records: dart.legacy(core.Iterable$(dart.legacy(record_impl.ImmutableSembastRecord)))
  }));
  dart.setLibraryUri(database_content.StoreContent, I[4]);
  dart.setFieldSignature(database_content.StoreContent, () => ({
    __proto__: dart.getFields(database_content.StoreContent.__proto__),
    store: dart.finalFieldType(dart.legacy(store_ref.StoreRef)),
    [_map]: dart.finalFieldType(dart.legacy(core.Map$(dart.dynamic, dart.legacy(record_impl.ImmutableSembastRecord))))
  }));
  dart.defineExtensionMethods(database_content.StoreContent, ['toString']);
  database_content.DatabaseContent = class DatabaseContent extends core.Object {
    get isNotEmpty() {
      return this[_map][$isNotEmpty];
    }
    get stores() {
      return this[_map][$values];
    }
    addAll(records) {
      for (let record of records) {
        this.addRecord(record);
      }
    }
    addRecord(record) {
      let store = record.ref.store;
      let content = this.addStore(store);
      content.add(record);
    }
    addStore(store) {
      let t23, t22, t21, t20;
      let content = (t20 = this[_map], t21 = store, t22 = t20[$_get](t21), t22 == null ? (t23 = new database_content.StoreContent.new(store), t20[$_set](t21, t23), t23) : t22);
      return content;
    }
    store(store) {
      return this[_map][$_get](store);
    }
    toString() {
      return dart.str(this.stores);
    }
  };
  (database_content.DatabaseContent.new = function() {
    this[_map] = new (T$.LinkedMapOfStoreRefL$StoreContentL()).new();
    ;
  }).prototype = database_content.DatabaseContent.prototype;
  dart.addTypeTests(database_content.DatabaseContent);
  dart.addTypeCaches(database_content.DatabaseContent);
  dart.setMethodSignature(database_content.DatabaseContent, () => ({
    __proto__: dart.getMethods(database_content.DatabaseContent.__proto__),
    addAll: dart.fnType(dart.void, [dart.legacy(core.Iterable$(dart.legacy(record_impl.ImmutableSembastRecord)))]),
    addRecord: dart.fnType(dart.void, [dart.legacy(record_impl.ImmutableSembastRecord)]),
    addStore: dart.fnType(dart.legacy(database_content.StoreContent), [dart.legacy(store_ref.StoreRef)]),
    store: dart.fnType(dart.legacy(database_content.StoreContent), [dart.legacy(store_ref.StoreRef)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(database_content.DatabaseContent, () => ({
    __proto__: dart.getGetters(database_content.DatabaseContent.__proto__),
    isNotEmpty: dart.legacy(core.bool),
    stores: dart.legacy(core.Iterable$(dart.legacy(database_content.StoreContent)))
  }));
  dart.setLibraryUri(database_content.DatabaseContent, I[4]);
  dart.setFieldSignature(database_content.DatabaseContent, () => ({
    __proto__: dart.getFields(database_content.DatabaseContent.__proto__),
    [_map]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(store_ref.StoreRef), dart.legacy(database_content.StoreContent))))
  }));
  dart.defineExtensionMethods(database_content.DatabaseContent, ['toString']);
  database_content.DatabaseListenerContent = class DatabaseListenerContent extends database_content.DatabaseContent {
    removeStore(store) {
      this[_map][$remove](store);
    }
    clear() {
      this[_map][$clear]();
    }
    getAndRemoveFirstStore() {
      if (dart.test(this.isNotEmpty)) {
        let storeContent = this[_map][$values][$first];
        this[_map][$remove](storeContent.store);
        return storeContent;
      }
      return null;
    }
  };
  (database_content.DatabaseListenerContent.new = function() {
    database_content.DatabaseListenerContent.__proto__.new.call(this);
    ;
  }).prototype = database_content.DatabaseListenerContent.prototype;
  dart.addTypeTests(database_content.DatabaseListenerContent);
  dart.addTypeCaches(database_content.DatabaseListenerContent);
  dart.setMethodSignature(database_content.DatabaseListenerContent, () => ({
    __proto__: dart.getMethods(database_content.DatabaseListenerContent.__proto__),
    removeStore: dart.fnType(dart.void, [dart.legacy(store_ref.StoreRef)]),
    clear: dart.fnType(dart.void, []),
    getAndRemoveFirstStore: dart.fnType(dart.legacy(database_content.StoreContent), [])
  }));
  dart.setLibraryUri(database_content.DatabaseListenerContent, I[4]);
  var _records = dart.privateName(database_content, "_records");
  database_content.TxnDatabaseContent = class TxnDatabaseContent extends database_content.DatabaseContent {
    get txnRecords() {
      return this[_records];
    }
    addTxnRecord(record) {
      this[_records][$add](record);
      this.addRecord(record.record);
    }
    addTxnStoreRecords(store, records) {
      this.addStore(store).addAll(records[$map](T$.ImmutableSembastRecordL(), dart.fn(record => record.record, T$.TxnRecordLToImmutableSembastRecordL())));
      this[_records][$addAll](records);
    }
  };
  (database_content.TxnDatabaseContent.new = function() {
    this[_records] = T$.JSArrayOfTxnRecordL().of([]);
    database_content.TxnDatabaseContent.__proto__.new.call(this);
    ;
  }).prototype = database_content.TxnDatabaseContent.prototype;
  dart.addTypeTests(database_content.TxnDatabaseContent);
  dart.addTypeCaches(database_content.TxnDatabaseContent);
  dart.setMethodSignature(database_content.TxnDatabaseContent, () => ({
    __proto__: dart.getMethods(database_content.TxnDatabaseContent.__proto__),
    addTxnRecord: dart.fnType(dart.void, [dart.legacy(record_impl.TxnRecord)]),
    addTxnStoreRecords: dart.fnType(dart.void, [dart.legacy(store_ref.StoreRef), dart.legacy(core.Iterable$(dart.legacy(record_impl.TxnRecord)))])
  }));
  dart.setGetterSignature(database_content.TxnDatabaseContent, () => ({
    __proto__: dart.getGetters(database_content.TxnDatabaseContent.__proto__),
    txnRecords: dart.legacy(core.List$(dart.legacy(record_impl.TxnRecord)))
  }));
  dart.setLibraryUri(database_content.TxnDatabaseContent, I[4]);
  dart.setFieldSignature(database_content.TxnDatabaseContent, () => ({
    __proto__: dart.getFields(database_content.TxnDatabaseContent.__proto__),
    [_records]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(record_impl.TxnRecord))))
  }));
  var store$1 = dart.privateName(query_ref_impl, "SembastQueryRef.store");
  var finder$ = dart.privateName(query_ref_impl, "SembastQueryRef.finder");
  const _is_SembastQueryRef_default = Symbol('_is_SembastQueryRef_default');
  query_ref_impl.SembastQueryRef$ = dart.generic((K, V) => {
    var KL = () => (KL = dart.constFn(dart.legacy(K)))();
    var SembastStoreRefOfKL$VL = () => (SembastStoreRefOfKL$VL = dart.constFn(store_ref_impl.SembastStoreRef$(KL(), VL())))();
    var SembastStoreRefLOfKL$VL = () => (SembastStoreRefLOfKL$VL = dart.constFn(dart.legacy(SembastStoreRefOfKL$VL())))();
    var SembastQueryRefOfKL$VL = () => (SembastQueryRefOfKL$VL = dart.constFn(query_ref_impl.SembastQueryRef$(KL(), VL())))();
    var RecordSnapshotOfKL$VL = () => (RecordSnapshotOfKL$VL = dart.constFn(record_snapshot.RecordSnapshot$(KL(), VL())))();
    var RecordSnapshotLOfKL$VL = () => (RecordSnapshotLOfKL$VL = dart.constFn(dart.legacy(RecordSnapshotOfKL$VL())))();
    var ListOfRecordSnapshotLOfKL$VL = () => (ListOfRecordSnapshotLOfKL$VL = dart.constFn(core.List$(RecordSnapshotLOfKL$VL())))();
    var ListLOfRecordSnapshotLOfKL$VL = () => (ListLOfRecordSnapshotLOfKL$VL = dart.constFn(dart.legacy(ListOfRecordSnapshotLOfKL$VL())))();
    var ListLOfRecordSnapshotLOfKL$VLToRecordSnapshotLOfKL$VL = () => (ListLOfRecordSnapshotLOfKL$VLToRecordSnapshotLOfKL$VL = dart.constFn(dart.fnType(RecordSnapshotLOfKL$VL(), [ListLOfRecordSnapshotLOfKL$VL()])))();
    var VL = () => (VL = dart.constFn(dart.legacy(V)))();
    class SembastQueryRef extends core.Object {
      get store() {
        return this[store$1];
      }
      set store(value) {
        super.store = value;
      }
      get finder() {
        return this[finder$];
      }
      set finder(value) {
        super.finder = value;
      }
      toString() {
        return dart.str(this.store) + " " + dart.str(this.finder) + ")";
      }
      onSnapshots(database) {
        let db = database_impl.getDatabase(database);
        let ctlr = null;
        ctlr = db.listener.addQuery(KL(), VL(), this, {onListen: dart.fn(() => async.async(core.Null, (function*() {
            try {
              yield db.notificationLock.synchronized(core.Null, dart.fn(() => async.async(core.Null, (function*() {
                let t20;
                let allMatching = (yield store_ref_impl['SembastStoreRefExtensionImpl|findImmutableRecords'](KL(), VL(), SembastStoreRefLOfKL$VL().as(this.store), database, {finder: (t20 = this.finder, t20 == null ? null : t20.cloneWithoutLimits())}));
                if (false) {
                  core.print("matching " + dart.str(ctlr) + ": " + dart.str(allMatching[$length]) + " on " + dart.str(this));
                }
                yield ctlr.add(allMatching, db.cooperator);
              }).bind(this)), T$.VoidToFutureLOfNull()));
            } catch (e) {
              let error = dart.getThrown(e);
              let stackTrace = dart.stackTrace(e);
              ctlr.addError(error, stackTrace);
            }
          }).bind(this)), T$.VoidToFutureLOfNull())});
        return ctlr.stream;
      }
      getSnapshots(client) {
        return store_ref_impl['SembastStoreRefExtension|find'](KL(), VL(), this.store, client, {finder: this.finder});
      }
      getSnapshot(client) {
        return store_ref_impl['SembastStoreRefExtension|findFirst'](KL(), VL(), this.store, client, {finder: this.finder});
      }
      onSnapshot(database) {
        let t21;
        if ((t21 = this.finder, t21 == null ? null : t21.limit) !== 1) {
          return new (SembastQueryRefOfKL$VL()).new(this.store, finder_impl.cloneFinderFindFirst(this.finder)).onSnapshot(database);
        }
        return this.onSnapshots(database).map(RecordSnapshotLOfKL$VL(), dart.fn(list => dart.test(list[$isNotEmpty]) ? list[$first] : null, ListLOfRecordSnapshotLOfKL$VLToRecordSnapshotLOfKL$VL()));
      }
    }
    (SembastQueryRef.new = function(store, finder) {
      let t20;
      this[store$1] = store;
      this[finder$] = T$.SembastFinderL().as((t20 = finder, t20 == null ? null : t20.clone()));
      ;
    }).prototype = SembastQueryRef.prototype;
    dart.addTypeTests(SembastQueryRef);
    SembastQueryRef.prototype[_is_SembastQueryRef_default] = true;
    dart.addTypeCaches(SembastQueryRef);
    SembastQueryRef[dart.implements] = () => [query_ref.QueryRef$(dart.legacy(K), dart.legacy(V))];
    dart.setMethodSignature(SembastQueryRef, () => ({
      __proto__: dart.getMethods(SembastQueryRef.__proto__),
      toString: dart.fnType(dart.legacy(core.String), []),
      [$toString]: dart.fnType(dart.legacy(core.String), []),
      onSnapshots: dart.fnType(dart.legacy(async.Stream$(dart.legacy(core.List$(dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V))))))), [dart.legacy(database$.Database)]),
      getSnapshots: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V))))))), [dart.legacy(client.DatabaseClient)]),
      getSnapshot: dart.fnType(dart.legacy(async.Future$(dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V))))), [dart.legacy(client.DatabaseClient)]),
      onSnapshot: dart.fnType(dart.legacy(async.Stream$(dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V))))), [dart.legacy(database$.Database)])
    }));
    dart.setLibraryUri(SembastQueryRef, I[5]);
    dart.setFieldSignature(SembastQueryRef, () => ({
      __proto__: dart.getFields(SembastQueryRef.__proto__),
      store: dart.finalFieldType(dart.legacy(store_ref.StoreRef$(dart.legacy(K), dart.legacy(V)))),
      finder: dart.finalFieldType(dart.legacy(finder_impl.SembastFinder))
    }));
    dart.defineExtensionMethods(SembastQueryRef, ['toString']);
    return SembastQueryRef;
  });
  query_ref_impl.SembastQueryRef = query_ref_impl.SembastQueryRef$();
  dart.addTypeTests(query_ref_impl.SembastQueryRef, _is_SembastQueryRef_default);
  const _is_QueryRef_default = Symbol('_is_QueryRef_default');
  query_ref.QueryRef$ = dart.generic((K, V) => {
    class QueryRef extends core.Object {}
    (QueryRef.new = function() {
      ;
    }).prototype = QueryRef.prototype;
    dart.addTypeTests(QueryRef);
    QueryRef.prototype[_is_QueryRef_default] = true;
    dart.addTypeCaches(QueryRef);
    dart.setLibraryUri(QueryRef, I[6]);
    return QueryRef;
  });
  query_ref.QueryRef = query_ref.QueryRef$();
  dart.addTypeTests(query_ref.QueryRef, _is_QueryRef_default);
  var _id = dart.privateName(listener, "_id");
  listener._ControllerBase = class _ControllerBase extends core.Object {};
  (listener._ControllerBase.new = function() {
    this[_id] = null;
    this[_id] = listener._ControllerBase._lastId = dart.notNull(listener._ControllerBase._lastId) + 1;
  }).prototype = listener._ControllerBase.prototype;
  dart.addTypeTests(listener._ControllerBase);
  dart.addTypeCaches(listener._ControllerBase);
  dart.setLibraryUri(listener._ControllerBase, I[7]);
  dart.setFieldSignature(listener._ControllerBase, () => ({
    __proto__: dart.getFields(listener._ControllerBase.__proto__),
    [_id]: dart.fieldType(dart.legacy(core.int))
  }));
  dart.defineLazy(listener._ControllerBase, {
    /*listener._ControllerBase._lastId*/get _lastId() {
      return 0;
    },
    set _lastId(_) {}
  }, true);
  var onListen$ = dart.privateName(listener, "QueryListenerController.onListen");
  var queryRef$ = dart.privateName(listener, "QueryListenerController.queryRef");
  var list = dart.privateName(listener, "QueryListenerController.list");
  var _streamController = dart.privateName(listener, "_streamController");
  var _allMatching = dart.privateName(listener, "_allMatching");
  var _shouldAdd = dart.privateName(listener, "_shouldAdd");
  const _is_QueryListenerController_default = Symbol('_is_QueryListenerController_default');
  listener.QueryListenerController$ = dart.generic((K, V) => {
    var KL = () => (KL = dart.constFn(dart.legacy(K)))();
    var RecordSnapshotOfKL$VL = () => (RecordSnapshotOfKL$VL = dart.constFn(record_snapshot.RecordSnapshot$(KL(), VL())))();
    var RecordSnapshotLOfKL$VL = () => (RecordSnapshotLOfKL$VL = dart.constFn(dart.legacy(RecordSnapshotOfKL$VL())))();
    var ListOfRecordSnapshotLOfKL$VL = () => (ListOfRecordSnapshotLOfKL$VL = dart.constFn(core.List$(RecordSnapshotLOfKL$VL())))();
    var ListLOfRecordSnapshotLOfKL$VL = () => (ListLOfRecordSnapshotLOfKL$VL = dart.constFn(dart.legacy(ListOfRecordSnapshotLOfKL$VL())))();
    var StreamControllerOfListLOfRecordSnapshotLOfKL$VL = () => (StreamControllerOfListLOfRecordSnapshotLOfKL$VL = dart.constFn(async.StreamController$(ListLOfRecordSnapshotLOfKL$VL())))();
    var VL = () => (VL = dart.constFn(dart.legacy(V)))();
    class QueryListenerController extends listener._ControllerBase {
      get onListen() {
        return this[onListen$];
      }
      set onListen(value) {
        this[onListen$] = value;
      }
      get queryRef() {
        return this[queryRef$];
      }
      set queryRef(value) {
        super.queryRef = value;
      }
      get list() {
        return this[list];
      }
      set list(value) {
        this[list] = ListLOfRecordSnapshotLOfKL$VL().as(value);
      }
      get hasInitialData() {
        return this[_allMatching] != null;
      }
      get isClosed() {
        return this[_streamController].isClosed;
      }
      get finder() {
        return this.queryRef.finder;
      }
      get filter() {
        let t21;
        return T$.SembastFilterBaseL().as((t21 = this.finder, t21 == null ? null : t21.filter));
      }
      close() {
        let t21;
        t21 = this[_streamController];
        t21 == null ? null : t21.close();
      }
      get stream() {
        return this[_streamController].stream;
      }
      get [_shouldAdd]() {
        return !dart.test(this.isClosed) && dart.test(this[_streamController].hasListener);
      }
      add(allMatching, cooperator) {
        return async.async(dart.dynamic, (function* add() {
          let t21;
          if (!dart.test(this[_shouldAdd])) {
            return;
          }
          this[_allMatching] = allMatching;
          let list = finder_impl.recordsLimit(this[_allMatching], this.finder);
          if (!dart.test(this[_shouldAdd])) {
            return;
          }
          t21 = this[_streamController];
          t21 == null ? null : t21.add(record_impl.immutableListToSnapshots(KL(), VL(), list));
        }).bind(this));
      }
      addError(error, stackTrace) {
        if (!dart.test(this[_shouldAdd])) {
          return;
        }
        this[_streamController].addError(error, stackTrace);
      }
      update(records, cooperator) {
        return async.async(dart.dynamic, (function* update() {
          let t21, t21$, t21$0, t21$1;
          if (!dart.test(this[_shouldAdd])) {
            return;
          }
          let hasChanges = false;
          let allMatching = T$.ListOfImmutableSembastRecordL().from(this[_allMatching]);
          let keys = collection.LinkedHashSet.from(records[$map](dart.dynamic, dart.fn(record => record.key, T$.ImmutableSembastRecordLTodynamic())));
          function _where(snapshot) {
            if (dart.test(keys.contains(dart.dload(snapshot, 'key')))) {
              hasChanges = true;
              return true;
            }
            return false;
          }
          dart.fn(_where, T$.dynamicToboolL());
          allMatching[$removeWhere](_where);
          for (let txnRecord of records) {
            if (!dart.test(this[_shouldAdd])) {
              return;
            }
            let matches = !dart.test(txnRecord.deleted) && dart.test(finder_impl.finderMatchesFilterAndBoundaries(this.finder, txnRecord));
            if (matches) {
              hasChanges = true;
              allMatching[$insert](sort$.findSortedIndex(T$.ImmutableSembastRecordL(), allMatching, txnRecord, (t21$ = (t21 = this.finder, t21 == null ? null : dart.bind(t21, 'compareThenKey')), t21$ == null ? C[0] || CT.C0 : t21$)), txnRecord);
            }
            if (dart.test((t21$1 = (t21$0 = cooperator, t21$0 == null ? null : t21$0.needCooperate), t21$1 == null ? false : t21$1))) {
              yield cooperator.cooperate();
            }
          }
          if (dart.test(this.isClosed)) {
            return;
          }
          if (hasChanges) {
            yield this.add(allMatching, cooperator);
          }
        }).bind(this));
      }
      toString() {
        return "QueryListenerCtlr(" + dart.str(this[_id]) + ")";
      }
      restart() {
        if (dart.test(this[_shouldAdd])) {
          if (false) {
            core.print("restarting listener " + dart.str(this));
          }
          this.onListen();
        }
      }
    }
    (QueryListenerController.new = function(listener, queryRef, opts) {
      let onListen = opts && 'onListen' in opts ? opts.onListen : null;
      this[_streamController] = null;
      this[list] = null;
      this[_allMatching] = null;
      this[queryRef$] = queryRef;
      this[onListen$] = onListen;
      QueryListenerController.__proto__.new.call(this);
      this[_streamController] = StreamControllerOfListLOfRecordSnapshotLOfKL$VL().new({onCancel: dart.fn(() => {
          if (false) {
            core.print("onCancel " + dart.str(this));
          }
          listener.removeQuery(this);
          this.close();
        }, T$.VoidToNull()), onListen: dart.fn(() => {
          if (false) {
            core.print("onListen " + dart.str(this));
          }
          this.onListen();
        }, T$.VoidToNull())});
    }).prototype = QueryListenerController.prototype;
    dart.addTypeTests(QueryListenerController);
    QueryListenerController.prototype[_is_QueryListenerController_default] = true;
    dart.addTypeCaches(QueryListenerController);
    dart.setMethodSignature(QueryListenerController, () => ({
      __proto__: dart.getMethods(QueryListenerController.__proto__),
      close: dart.fnType(dart.void, []),
      add: dart.fnType(dart.legacy(async.Future), [dart.legacy(core.List$(dart.legacy(record_impl.ImmutableSembastRecord))), dart.legacy(cooperator.Cooperator)]),
      addError: dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.StackTrace)]),
      update: dart.fnType(dart.legacy(async.Future), [dart.legacy(core.Iterable$(dart.legacy(record_impl.ImmutableSembastRecord))), dart.legacy(cooperator.Cooperator)]),
      toString: dart.fnType(dart.legacy(core.String), []),
      [$toString]: dart.fnType(dart.legacy(core.String), []),
      restart: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(QueryListenerController, () => ({
      __proto__: dart.getGetters(QueryListenerController.__proto__),
      hasInitialData: dart.legacy(core.bool),
      isClosed: dart.legacy(core.bool),
      finder: dart.legacy(finder_impl.SembastFinder),
      filter: dart.legacy(filter_impl.SembastFilterBase),
      stream: dart.legacy(async.Stream$(dart.legacy(core.List$(dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V))))))),
      [_shouldAdd]: dart.legacy(core.bool)
    }));
    dart.setLibraryUri(QueryListenerController, I[7]);
    dart.setFieldSignature(QueryListenerController, () => ({
      __proto__: dart.getFields(QueryListenerController.__proto__),
      onListen: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
      queryRef: dart.finalFieldType(dart.legacy(query_ref_impl.SembastQueryRef$(dart.legacy(K), dart.legacy(V)))),
      [_streamController]: dart.fieldType(dart.legacy(async.StreamController$(dart.legacy(core.List$(dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V)))))))),
      list: dart.fieldType(dart.legacy(core.List$(dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V)))))),
      [_allMatching]: dart.fieldType(dart.legacy(core.List$(dart.legacy(record_impl.ImmutableSembastRecord))))
    }));
    dart.defineExtensionMethods(QueryListenerController, ['toString']);
    return QueryListenerController;
  });
  listener.QueryListenerController = listener.QueryListenerController$();
  dart.addTypeTests(listener.QueryListenerController, _is_QueryListenerController_default);
  var recordRef$ = dart.privateName(listener, "RecordListenerController.recordRef");
  var onListen$0 = dart.privateName(listener, "RecordListenerController.onListen");
  var hasInitialData = dart.privateName(listener, "RecordListenerController.hasInitialData");
  const _is_RecordListenerController_default = Symbol('_is_RecordListenerController_default');
  listener.RecordListenerController$ = dart.generic((K, V) => {
    var KL = () => (KL = dart.constFn(dart.legacy(K)))();
    var RecordSnapshotOfKL$VL = () => (RecordSnapshotOfKL$VL = dart.constFn(record_snapshot.RecordSnapshot$(KL(), VL())))();
    var RecordSnapshotLOfKL$VL = () => (RecordSnapshotLOfKL$VL = dart.constFn(dart.legacy(RecordSnapshotOfKL$VL())))();
    var StreamControllerOfRecordSnapshotLOfKL$VL = () => (StreamControllerOfRecordSnapshotLOfKL$VL = dart.constFn(async.StreamController$(RecordSnapshotLOfKL$VL())))();
    var VL = () => (VL = dart.constFn(dart.legacy(V)))();
    class RecordListenerController extends listener._ControllerBase {
      get recordRef() {
        return this[recordRef$];
      }
      set recordRef(value) {
        super.recordRef = value;
      }
      get onListen() {
        return this[onListen$0];
      }
      set onListen(value) {
        this[onListen$0] = value;
      }
      get hasInitialData() {
        return this[hasInitialData];
      }
      set hasInitialData(value) {
        this[hasInitialData] = value;
      }
      close() {
        this[_streamController].close();
      }
      get isClosed() {
        return this[_streamController].isClosed;
      }
      get stream() {
        return this[_streamController].stream;
      }
      get [_shouldAdd]() {
        return !dart.test(this.isClosed) && dart.test(this[_streamController].hasListener);
      }
      add(snapshot) {
        let t21;
        if (!dart.test(this[_shouldAdd])) {
          return;
        }
        this.hasInitialData = true;
        this[_streamController].add((t21 = snapshot, t21 == null ? null : t21.cast(KL(), VL())));
      }
      addError(error, stackTrace) {
        if (!dart.test(this[_shouldAdd])) {
          return;
        }
        this[_streamController].addError(error, stackTrace);
      }
      toString() {
        return "RecordListenerController(" + dart.str(this[_id]) + ")";
      }
      restart() {
        if (dart.test(this[_shouldAdd])) {
          if (false) {
            core.print("restarting listener " + dart.str(this));
          }
          this.onListen();
        }
      }
    }
    (RecordListenerController.new = function(listener, recordRef, opts) {
      let onListen = opts && 'onListen' in opts ? opts.onListen : null;
      this[hasInitialData] = false;
      this[_streamController] = null;
      this[recordRef$] = recordRef;
      this[onListen$0] = onListen;
      RecordListenerController.__proto__.new.call(this);
      this[_streamController] = StreamControllerOfRecordSnapshotLOfKL$VL().new({onCancel: dart.fn(() => {
          if (false) {
            core.print("onCancel " + dart.str(this));
          }
          listener.removeRecord(this);
          this.close();
        }, T$.VoidToNull()), onListen: dart.fn(() => {
          if (false) {
            core.print("onListen " + dart.str(this));
          }
          this.onListen();
        }, T$.VoidToNull())});
    }).prototype = RecordListenerController.prototype;
    dart.addTypeTests(RecordListenerController);
    RecordListenerController.prototype[_is_RecordListenerController_default] = true;
    dart.addTypeCaches(RecordListenerController);
    dart.setMethodSignature(RecordListenerController, () => ({
      __proto__: dart.getMethods(RecordListenerController.__proto__),
      close: dart.fnType(dart.void, []),
      add: dart.fnType(dart.void, [dart.legacy(record_snapshot.RecordSnapshot)]),
      addError: dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.StackTrace)]),
      toString: dart.fnType(dart.legacy(core.String), []),
      [$toString]: dart.fnType(dart.legacy(core.String), []),
      restart: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(RecordListenerController, () => ({
      __proto__: dart.getGetters(RecordListenerController.__proto__),
      isClosed: dart.legacy(core.bool),
      stream: dart.legacy(async.Stream$(dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V))))),
      [_shouldAdd]: dart.legacy(core.bool)
    }));
    dart.setLibraryUri(RecordListenerController, I[7]);
    dart.setFieldSignature(RecordListenerController, () => ({
      __proto__: dart.getFields(RecordListenerController.__proto__),
      recordRef: dart.finalFieldType(dart.legacy(record_ref.RecordRef$(dart.legacy(K), dart.legacy(V)))),
      onListen: dart.fieldType(dart.legacy(dart.fnType(dart.void, []))),
      hasInitialData: dart.fieldType(dart.legacy(core.bool)),
      [_streamController]: dart.fieldType(dart.legacy(async.StreamController$(dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V))))))
    }));
    dart.defineExtensionMethods(RecordListenerController, ['toString']);
    return RecordListenerController;
  });
  listener.RecordListenerController = listener.RecordListenerController$();
  dart.addTypeTests(listener.RecordListenerController, _is_RecordListenerController_default);
  var store$2 = dart.privateName(listener, "StoreListener.store");
  var _records$ = dart.privateName(listener, "_records");
  var _queries = dart.privateName(listener, "_queries");
  listener.StoreListener = class StoreListener extends core.Object {
    get store() {
      return this[store$2];
    }
    set store(value) {
      super.store = value;
    }
    addRecord(K, V, recordRef, ctlr) {
      let key = recordRef.key;
      let list = this[_records$][$_get](key);
      if (list == null) {
        list = T$.JSArrayOfRecordListenerControllerL().of([]);
        this[_records$][$_set](key, list);
      }
      list[$add](ctlr);
      return ctlr;
    }
    addQuery(K, V, ctlr) {
      this[_queries][$add](ctlr);
      return ctlr;
    }
    removeQuery(ctlr) {
      ctlr.close();
      this[_queries][$remove](ctlr);
    }
    removeRecord(ctlr) {
      ctlr.close();
      let key = ctlr.recordRef.key;
      let list = this[_records$][$_get](key);
      if (list != null) {
        list[$remove](ctlr);
        if (dart.test(list[$isEmpty])) {
          this[_records$][$remove](key);
        }
      }
    }
    get recordKeys() {
      return this[_records$][$keys];
    }
    getRecordControllers(K, V, recordRef) {
      let t21;
      t21 = this[_records$][$_get](recordRef.key);
      return t21 == null ? null : t21[$cast](dart.legacy(listener.RecordListenerController$(dart.legacy(K), dart.legacy(V))));
    }
    keyHasRecordListener(key) {
      return this[_records$][$containsKey](key);
    }
    keyHasAnyListener(key) {
      return dart.test(this.hasQueryListener) || dart.test(this.keyHasRecordListener(key));
    }
    get hasQueryListener() {
      return this[_queries][$isNotEmpty];
    }
    getQueryListenerControllers(K, V) {
      return this[_queries][$cast](dart.legacy(listener.QueryListenerController$(dart.legacy(K), dart.legacy(V))));
    }
    get isEmpty() {
      return dart.test(this[_records$][$isEmpty]) && dart.test(this[_queries][$isEmpty]);
    }
    restart() {
      for (let list of this[_records$][$values]) {
        for (let recordController of list) {
          recordController.restart();
        }
      }
      for (let queryController of this[_queries]) {
        queryController.restart();
      }
    }
  };
  (listener.StoreListener.new = function(store) {
    this[_records$] = new (T$.LinkedMapOfdynamic$ListLOfRecordListenerControllerL()).new();
    this[_queries] = T$.JSArrayOfQueryListenerControllerL().of([]);
    this[store$2] = store;
    ;
  }).prototype = listener.StoreListener.prototype;
  dart.addTypeTests(listener.StoreListener);
  dart.addTypeCaches(listener.StoreListener);
  dart.setMethodSignature(listener.StoreListener, () => ({
    __proto__: dart.getMethods(listener.StoreListener.__proto__),
    addRecord: dart.gFnType((K, V) => [dart.legacy(listener.RecordListenerController$(dart.legacy(K), dart.legacy(V))), [dart.legacy(record_ref.RecordRef$(dart.legacy(K), dart.legacy(V))), dart.legacy(listener.RecordListenerController$(dart.legacy(K), dart.legacy(V)))]]),
    addQuery: dart.gFnType((K, V) => [dart.legacy(listener.QueryListenerController$(dart.legacy(K), dart.legacy(V))), [dart.legacy(listener.QueryListenerController$(dart.legacy(K), dart.legacy(V)))]]),
    removeQuery: dart.fnType(dart.void, [dart.legacy(listener.QueryListenerController)]),
    removeRecord: dart.fnType(dart.void, [dart.legacy(listener.RecordListenerController)]),
    getRecordControllers: dart.gFnType((K, V) => [dart.legacy(core.List$(dart.legacy(listener.RecordListenerController$(dart.legacy(K), dart.legacy(V))))), [dart.legacy(record_ref.RecordRef$(dart.legacy(K), dart.legacy(V)))]]),
    keyHasRecordListener: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    keyHasAnyListener: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    getQueryListenerControllers: dart.gFnType((K, V) => [dart.legacy(core.List$(dart.legacy(listener.QueryListenerController$(dart.legacy(K), dart.legacy(V))))), []]),
    restart: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(listener.StoreListener, () => ({
    __proto__: dart.getGetters(listener.StoreListener.__proto__),
    recordKeys: dart.legacy(core.Iterable),
    hasQueryListener: dart.legacy(core.bool),
    isEmpty: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(listener.StoreListener, I[7]);
  dart.setFieldSignature(listener.StoreListener, () => ({
    __proto__: dart.getFields(listener.StoreListener.__proto__),
    store: dart.finalFieldType(dart.legacy(store_ref.StoreRef)),
    [_records$]: dart.finalFieldType(dart.legacy(core.Map$(dart.dynamic, dart.legacy(core.List$(dart.legacy(listener.RecordListenerController)))))),
    [_queries]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(listener.QueryListenerController))))
  }));
  var _stores = dart.privateName(listener, "_stores");
  listener.DatabaseListener = class DatabaseListener extends core.Object {
    get isNotEmpty() {
      return this[_stores][$isNotEmpty];
    }
    get isEmpty() {
      return this[_stores][$isEmpty];
    }
    addRecord(K, V, recordRef, opts) {
      let onListen = opts && 'onListen' in opts ? opts.onListen : null;
      let ctlr = new (listener.RecordListenerController$(dart.legacy(K), dart.legacy(V))).new(this, recordRef, {onListen: onListen});
      let storeRef = recordRef.store;
      let store = this[_stores][$_get](storeRef);
      if (store == null) {
        store = new listener.StoreListener.new(storeRef);
        this[_stores][$_set](storeRef, store);
      }
      return store.addRecord(dart.legacy(K), dart.legacy(V), recordRef, ctlr);
    }
    addQuery(K, V, queryRef, opts) {
      let onListen = opts && 'onListen' in opts ? opts.onListen : null;
      let ctlr = this.newQuery(dart.legacy(K), dart.legacy(V), queryRef, {onListen: onListen});
      this.addQueryController(dart.legacy(K), dart.legacy(V), ctlr);
      return ctlr;
    }
    newQuery(K, V, queryRef, opts) {
      let onListen = opts && 'onListen' in opts ? opts.onListen : null;
      let ref = dart.legacy(query_ref_impl.SembastQueryRef$(dart.legacy(K), dart.legacy(V))).as(queryRef);
      let ctlr = new (listener.QueryListenerController$(dart.legacy(K), dart.legacy(V))).new(this, ref, {onListen: onListen});
      return ctlr;
    }
    addQueryController(K, V, ctlr) {
      let storeRef = ctlr.queryRef.store;
      let store = this[_stores][$_get](storeRef);
      if (store == null) {
        store = new listener.StoreListener.new(storeRef);
        this[_stores][$_set](storeRef, store);
      }
      store.addQuery(dart.legacy(K), dart.legacy(V), ctlr);
    }
    removeRecord(ctlr) {
      ctlr.close();
      let recordRef = ctlr.recordRef;
      let storeRef = recordRef.store;
      let store = this[_stores][$_get](storeRef);
      if (store != null) {
        store.removeRecord(ctlr);
        if (dart.test(store.isEmpty)) {
          this[_stores][$remove](storeRef);
        }
      }
    }
    removeQuery(ctlr) {
      ctlr.close();
      let storeRef = ctlr.queryRef.store;
      let store = this[_stores][$_get](storeRef);
      if (store != null) {
        store.removeQuery(ctlr);
        if (dart.test(store.isEmpty)) {
          this[_stores][$remove](storeRef);
        }
      }
    }
    getRecord(K, V, recordRef) {
      let t21;
      t21 = this[_stores][$_get](recordRef).getRecordControllers(dart.legacy(K), dart.legacy(V), recordRef);
      return t21 == null ? null : t21[$cast](dart.legacy(listener.RecordListenerController$(dart.legacy(K), dart.legacy(V))));
    }
    getStore(ref) {
      return this[_stores][$_get](ref);
    }
    get stores() {
      return this[_stores][$keys];
    }
    close() {
      this[_stores][$values][$forEach](dart.fn(storeListener => {
        storeListener[_queries][$forEach](dart.fn(queryListener => {
          queryListener.close();
        }, T$.QueryListenerControllerLToNull()));
        storeListener[_records$][$values][$forEach](dart.fn(recordListeners => {
          recordListeners[$forEach](dart.fn(recordListener => recordListener.close(), T$.RecordListenerControllerLTovoid()));
        }, T$.ListLOfRecordListenerControllerLToNull()));
      }, T$.StoreListenerLToNull()));
      this[_stores][$clear]();
    }
    recordHasAnyListener(record) {
      let t21, t21$;
      t21$ = (t21 = this.getStore(record.store), t21 == null ? null : t21.keyHasAnyListener(record.key));
      return t21$ == null ? false : t21$;
    }
  };
  (listener.DatabaseListener.new = function() {
    this[_stores] = new (T$.LinkedMapOfStoreRefL$StoreListenerL()).new();
    ;
  }).prototype = listener.DatabaseListener.prototype;
  dart.addTypeTests(listener.DatabaseListener);
  dart.addTypeCaches(listener.DatabaseListener);
  dart.setMethodSignature(listener.DatabaseListener, () => ({
    __proto__: dart.getMethods(listener.DatabaseListener.__proto__),
    addRecord: dart.gFnType((K, V) => [dart.legacy(listener.RecordListenerController$(dart.legacy(K), dart.legacy(V))), [dart.legacy(record_ref.RecordRef$(dart.legacy(K), dart.legacy(V)))], {onListen: dart.legacy(dart.fnType(dart.void, []))}, {}]),
    addQuery: dart.gFnType((K, V) => [dart.legacy(listener.QueryListenerController$(dart.legacy(K), dart.legacy(V))), [dart.legacy(query_ref.QueryRef$(dart.legacy(K), dart.legacy(V)))], {onListen: dart.legacy(dart.fnType(dart.void, []))}, {}]),
    newQuery: dart.gFnType((K, V) => [dart.legacy(listener.QueryListenerController$(dart.legacy(K), dart.legacy(V))), [dart.legacy(query_ref.QueryRef$(dart.legacy(K), dart.legacy(V)))], {onListen: dart.legacy(dart.fnType(dart.void, []))}, {}]),
    addQueryController: dart.gFnType((K, V) => [dart.void, [dart.legacy(listener.QueryListenerController$(dart.legacy(K), dart.legacy(V)))]]),
    removeRecord: dart.fnType(dart.void, [dart.legacy(listener.RecordListenerController)]),
    removeQuery: dart.fnType(dart.void, [dart.legacy(listener.QueryListenerController)]),
    getRecord: dart.gFnType((K, V) => [dart.legacy(core.List$(dart.legacy(listener.RecordListenerController$(dart.legacy(K), dart.legacy(V))))), [dart.legacy(record_ref.RecordRef$(dart.legacy(K), dart.legacy(V)))]]),
    getStore: dart.fnType(dart.legacy(listener.StoreListener), [dart.legacy(store_ref.StoreRef)]),
    close: dart.fnType(dart.void, []),
    recordHasAnyListener: dart.fnType(dart.legacy(core.bool), [dart.legacy(record_ref.RecordRef)])
  }));
  dart.setGetterSignature(listener.DatabaseListener, () => ({
    __proto__: dart.getGetters(listener.DatabaseListener.__proto__),
    isNotEmpty: dart.legacy(core.bool),
    isEmpty: dart.legacy(core.bool),
    stores: dart.legacy(core.Iterable$(dart.legacy(store_ref.StoreRef)))
  }));
  dart.setLibraryUri(listener.DatabaseListener, I[7]);
  dart.setFieldSignature(listener.DatabaseListener, () => ({
    __proto__: dart.getFields(listener.DatabaseListener.__proto__),
    [_stores]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(store_ref.StoreRef), dart.legacy(listener.StoreListener))))
  }));
  var version$ = dart.privateName(meta$, "Meta.version");
  var sembastVersion = dart.privateName(meta$, "Meta.sembastVersion");
  var codecSignature$ = dart.privateName(meta$, "Meta.codecSignature");
  meta$.Meta = class Meta extends core.Object {
    get version() {
      return this[version$];
    }
    set version(value) {
      this[version$] = value;
    }
    get sembastVersion() {
      return this[sembastVersion];
    }
    set sembastVersion(value) {
      this[sembastVersion] = value;
    }
    get codecSignature() {
      return this[codecSignature$];
    }
    set codecSignature(value) {
      this[codecSignature$] = value;
    }
    static isMapMeta(map) {
      return map != null && map[$_get]("version") != null;
    }
    toMap() {
      let map = new (T$.IdentityMapOfStringL$dynamic()).from(["version", this.version, "sembast", this.sembastVersion]);
      if (this.codecSignature != null) {
        map[$_set]("codec", this.codecSignature);
      }
      return map;
    }
    toString() {
      return dart.toString(this.toMap());
    }
  };
  (meta$.Meta.fromMap = function(map) {
    this[sembastVersion] = 1;
    this[codecSignature$] = null;
    this[version$] = null;
    this.version = T$.intL().as(map[$_get]("version"));
    this.sembastVersion = T$.intL().as(map[$_get]("sembast"));
    this.codecSignature = T$.StringL().as(map[$_get]("codec"));
  }).prototype = meta$.Meta.prototype;
  (meta$.Meta.new = function(opts) {
    let version = opts && 'version' in opts ? opts.version : null;
    let codecSignature = opts && 'codecSignature' in opts ? opts.codecSignature : null;
    this[sembastVersion] = 1;
    this[version$] = version;
    this[codecSignature$] = codecSignature;
    ;
  }).prototype = meta$.Meta.prototype;
  dart.addTypeTests(meta$.Meta);
  dart.addTypeCaches(meta$.Meta);
  dart.setMethodSignature(meta$.Meta, () => ({
    __proto__: dart.getMethods(meta$.Meta.__proto__),
    toMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(meta$.Meta, I[8]);
  dart.setFieldSignature(meta$.Meta, () => ({
    __proto__: dart.getFields(meta$.Meta.__proto__),
    version: dart.fieldType(dart.legacy(core.int)),
    sembastVersion: dart.fieldType(dart.legacy(core.int)),
    codecSignature: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(meta$.Meta, ['toString']);
  storage.StorageBase = class StorageBase extends core.Object {};
  (storage.StorageBase.new = function() {
    ;
  }).prototype = storage.StorageBase.prototype;
  dart.addTypeTests(storage.StorageBase);
  dart.addTypeCaches(storage.StorageBase);
  dart.setLibraryUri(storage.StorageBase, I[9]);
  storage.DatabaseStorage = class DatabaseStorage extends storage.StorageBase {
    appendLine(line) {
      return this.appendLines(T$.JSArrayOfStringL().of([line]));
    }
  };
  (storage.DatabaseStorage.new = function() {
    ;
  }).prototype = storage.DatabaseStorage.prototype;
  dart.addTypeTests(storage.DatabaseStorage);
  dart.addTypeCaches(storage.DatabaseStorage);
  dart.setMethodSignature(storage.DatabaseStorage, () => ({
    __proto__: dart.getMethods(storage.DatabaseStorage.__proto__),
    appendLine: dart.fnType(dart.legacy(async.Future), [dart.legacy(core.String)])
  }));
  dart.setLibraryUri(storage.DatabaseStorage, I[9]);
  var revision$ = dart.privateName(storage, "StorageJdbStateUpdate.revision");
  var minDeltaImportRevision$ = dart.privateName(storage, "StorageJdbStateUpdate.minDeltaImportRevision");
  storage.StorageJdbStateUpdate = class StorageJdbStateUpdate extends core.Object {
    get revision() {
      return this[revision$];
    }
    set revision(value) {
      super.revision = value;
    }
    get minDeltaImportRevision() {
      return this[minDeltaImportRevision$];
    }
    set minDeltaImportRevision(value) {
      super.minDeltaImportRevision = value;
    }
  };
  (storage.StorageJdbStateUpdate.new = function(revision, minDeltaImportRevision) {
    this[revision$] = revision;
    this[minDeltaImportRevision$] = minDeltaImportRevision;
    ;
  }).prototype = storage.StorageJdbStateUpdate.prototype;
  dart.addTypeTests(storage.StorageJdbStateUpdate);
  dart.addTypeCaches(storage.StorageJdbStateUpdate);
  dart.setLibraryUri(storage.StorageJdbStateUpdate, I[9]);
  dart.setFieldSignature(storage.StorageJdbStateUpdate, () => ({
    __proto__: dart.getFields(storage.StorageJdbStateUpdate.__proto__),
    revision: dart.finalFieldType(dart.legacy(core.int)),
    minDeltaImportRevision: dart.finalFieldType(dart.legacy(core.int))
  }));
  var originalRevision$ = dart.privateName(storage, "StorageJdbIncrementRevisionStatus.originalRevision");
  var readRevision$ = dart.privateName(storage, "StorageJdbIncrementRevisionStatus.readRevision");
  var success$ = dart.privateName(storage, "StorageJdbIncrementRevisionStatus.success");
  storage.StorageJdbIncrementRevisionStatus = class StorageJdbIncrementRevisionStatus extends core.Object {
    get originalRevision() {
      return this[originalRevision$];
    }
    set originalRevision(value) {
      super.originalRevision = value;
    }
    get readRevision() {
      return this[readRevision$];
    }
    set readRevision(value) {
      super.readRevision = value;
    }
    get success() {
      return this[success$];
    }
    set success(value) {
      super.success = value;
    }
    toString() {
      return "original " + dart.str(this.originalRevision) + " read " + dart.str(this.readRevision) + " success " + dart.str(this.success);
    }
  };
  (storage.StorageJdbIncrementRevisionStatus.new = function(originalRevision, readRevision, success) {
    this[originalRevision$] = originalRevision;
    this[readRevision$] = readRevision;
    this[success$] = success;
    ;
  }).prototype = storage.StorageJdbIncrementRevisionStatus.prototype;
  dart.addTypeTests(storage.StorageJdbIncrementRevisionStatus);
  dart.addTypeCaches(storage.StorageJdbIncrementRevisionStatus);
  dart.setMethodSignature(storage.StorageJdbIncrementRevisionStatus, () => ({
    __proto__: dart.getMethods(storage.StorageJdbIncrementRevisionStatus.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(storage.StorageJdbIncrementRevisionStatus, I[9]);
  dart.setFieldSignature(storage.StorageJdbIncrementRevisionStatus, () => ({
    __proto__: dart.getFields(storage.StorageJdbIncrementRevisionStatus.__proto__),
    originalRevision: dart.finalFieldType(dart.legacy(core.int)),
    readRevision: dart.finalFieldType(dart.legacy(core.int)),
    success: dart.finalFieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(storage.StorageJdbIncrementRevisionStatus, ['toString']);
  storage.StorageJdb = class StorageJdb extends storage.StorageBase {};
  (storage.StorageJdb.new = function() {
    ;
  }).prototype = storage.StorageJdb.prototype;
  dart.addTypeTests(storage.StorageJdb);
  dart.addTypeCaches(storage.StorageJdb);
  dart.setLibraryUri(storage.StorageJdb, I[9]);
  storage.jdbStoreLastIdKey = function jdbStoreLastIdKey(store) {
    return dart.str(store) + "_store_last_id";
  };
  storage.getStoreLastIntKeyInfoEntry = function getStoreLastIntKeyInfoEntry(store, lastIntKey) {
    let t21;
    t21 = new jdb.JdbInfoEntry.new();
    return (() => {
      t21.id = storage.jdbStoreLastIdKey(store);
      t21.value = lastIntKey;
      return t21;
    })();
  };
  storage.getMetaInfoEntry = function getMetaInfoEntry(meta) {
    let t21;
    t21 = new jdb.JdbInfoEntry.new();
    return (() => {
      t21.id = "meta";
      t21.value = meta.toMap();
      return t21;
    })();
  };
  var jdbFactory$ = dart.privateName(sembast_jdb, "SembastStorageJdb.jdbFactory");
  var jdbDatabase = dart.privateName(sembast_jdb, "SembastStorageJdb.jdbDatabase");
  var options$ = dart.privateName(sembast_jdb, "SembastStorageJdb.options");
  var path$ = dart.privateName(sembast_jdb, "SembastStorageJdb.path");
  var _logV = dart.privateName(sembast_jdb, "_logV");
  sembast_jdb.SembastStorageJdb = class SembastStorageJdb extends storage.StorageBase {
    get jdbFactory() {
      return this[jdbFactory$];
    }
    set jdbFactory(value) {
      super.jdbFactory = value;
    }
    get jdbDatabase() {
      return this[jdbDatabase];
    }
    set jdbDatabase(value) {
      this[jdbDatabase] = value;
    }
    get options() {
      return this[options$];
    }
    set options(value) {
      this[options$] = value;
    }
    get path() {
      return this[path$];
    }
    set path(value) {
      super.path = value;
    }
    get supported() {
      return true;
    }
    delete() {
      return async.async(dart.dynamic, (function* $delete() {
        try {
          yield this.jdbFactory.delete(this.path);
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (dart.test(this[_logV])) {
            core.print("delete failed " + dart.str(this.path) + " " + dart.str(e));
          }
        }
      }).bind(this));
    }
    toString() {
      let map = new (T$.IdentityMapOfStringL$dynamic()).from(["path", this.path, "jdb", dart.toString(this.jdbFactory)]);
      return map[$toString]();
    }
    find() {
      return async.async(T$.boolL(), (function* find() {
        try {
          if (this.jdbDatabase == null) {
            if (!dart.test(yield this.jdbFactory.exists(this.path))) {
              return false;
            }
            this.jdbDatabase = (yield this.jdbFactory.open(this.path, {options: this.options}));
          }
          return true;
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (dart.test(this[_logV])) {
            core.print("find failed " + dart.str(this.path) + " " + dart.str(e));
          }
          return false;
        }
      }).bind(this));
    }
    findOrCreate() {
      return async.async(dart.dynamic, (function* findOrCreate() {
        this.jdbDatabase == null ? this.jdbDatabase = (yield this.jdbFactory.open(this.path, {options: this.options})) : null;
      }).bind(this));
    }
    readMeta() {
      return async.async(T$.MapLOfStringL$dynamic(), (function* readMeta() {
        let t23, t23$;
        let value = (t23 = (yield this.jdbDatabase.getInfoEntry("meta")), t23 == null ? null : t23.value);
        if (T$.MapL().is(value)) {
          t23$ = value;
          return t23$ == null ? null : t23$[$cast](T$.StringL(), dart.dynamic);
        }
        return null;
      }).bind(this));
    }
    close() {
      let t23;
      try {
        t23 = this.jdbDatabase;
        t23 == null ? null : t23.close();
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (dart.test(this[_logV])) {
          core.print("close failed " + dart.str(this.path) + " " + dart.str(e));
        }
      }
    }
    get entries() {
      return this.jdbDatabase.entries;
    }
    addEntries(entries) {
      return async.async(dart.dynamic, (function* addEntries() {
        yield this.jdbDatabase.addEntries(entries);
      }).bind(this));
    }
    generateUniqueIntKey(store) {
      return async.async(T$.intL(), (function* generateUniqueIntKey() {
        return (yield this.jdbDatabase.generateUniqueIntKeys(store, 1))[$first];
      }).bind(this));
    }
    generateUniqueStringKey(store) {
      return async.async(T$.StringL(), (function* generateUniqueStringKey() {
        return (yield this.jdbDatabase.generateUniqueStringKeys(store, 1))[$first];
      }).bind(this));
    }
    getEntriesAfter(revision) {
      return async.async(T$.ListLOfJdbEntryL(), (function* getEntriesAfter() {
        return yield this.jdbDatabase.entriesAfterRevision(revision).toList();
      }).bind(this));
    }
    get updates() {
      return null;
    }
    get revisionUpdate() {
      return this.jdbDatabase.revisionUpdate;
    }
    getRevision() {
      return this.jdbDatabase.getRevision();
    }
    writeIfRevision(query) {
      return this.jdbDatabase.writeIfRevision(query);
    }
    toDebugMap() {
      return null;
    }
    compact() {
      return this.jdbDatabase.compact();
    }
    getDeltaMinRevision() {
      return this.jdbDatabase.getDeltaMinRevision();
    }
  };
  (sembast_jdb.SembastStorageJdb.new = function(jdbFactory, path, options) {
    this[jdbDatabase] = null;
    this[_logV] = log_level.databaseStorageLogLevel == log_level.SembastLogLevel.verbose;
    this[jdbFactory$] = jdbFactory;
    this[path$] = path;
    this[options$] = options;
    ;
  }).prototype = sembast_jdb.SembastStorageJdb.prototype;
  dart.addTypeTests(sembast_jdb.SembastStorageJdb);
  dart.addTypeCaches(sembast_jdb.SembastStorageJdb);
  sembast_jdb.SembastStorageJdb[dart.implements] = () => [storage.StorageJdb];
  dart.setMethodSignature(sembast_jdb.SembastStorageJdb, () => ({
    __proto__: dart.getMethods(sembast_jdb.SembastStorageJdb.__proto__),
    delete: dart.fnType(dart.legacy(async.Future), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    find: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), []),
    findOrCreate: dart.fnType(dart.legacy(async.Future), []),
    readMeta: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), []),
    close: dart.fnType(dart.void, []),
    addEntries: dart.fnType(dart.legacy(async.Future), [dart.legacy(core.List$(dart.legacy(jdb.JdbWriteEntry)))]),
    generateUniqueIntKey: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(core.String)]),
    generateUniqueStringKey: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), [dart.legacy(core.String)]),
    getEntriesAfter: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(jdb.JdbEntry))))), [dart.legacy(core.int)]),
    getRevision: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), []),
    writeIfRevision: dart.fnType(dart.legacy(async.Future$(dart.legacy(sembast_jdb.StorageJdbWriteResult))), [dart.legacy(sembast_jdb.StorageJdbWriteQuery)]),
    toDebugMap: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))), []),
    compact: dart.fnType(dart.legacy(async.Future), []),
    getDeltaMinRevision: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [])
  }));
  dart.setGetterSignature(sembast_jdb.SembastStorageJdb, () => ({
    __proto__: dart.getGetters(sembast_jdb.SembastStorageJdb.__proto__),
    supported: dart.legacy(core.bool),
    entries: dart.legacy(async.Stream$(dart.legacy(jdb.JdbEntry))),
    updates: dart.legacy(async.Stream$(dart.legacy(storage.StorageJdbStateUpdate))),
    revisionUpdate: dart.legacy(async.Stream$(dart.legacy(core.int)))
  }));
  dart.setLibraryUri(sembast_jdb.SembastStorageJdb, I[10]);
  dart.setFieldSignature(sembast_jdb.SembastStorageJdb, () => ({
    __proto__: dart.getFields(sembast_jdb.SembastStorageJdb.__proto__),
    jdbFactory: dart.finalFieldType(dart.legacy(jdb.JdbFactory)),
    jdbDatabase: dart.fieldType(dart.legacy(jdb.JdbDatabase)),
    options: dart.fieldType(dart.legacy(database_factory_mixin.DatabaseOpenOptions)),
    path: dart.finalFieldType(dart.legacy(core.String)),
    [_logV]: dart.finalFieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(sembast_jdb.SembastStorageJdb, ['toString']);
  var jdbFactory$0 = dart.privateName(sembast_jdb, "DatabaseFactoryJdb.jdbFactory");
  database_factory_mixin.SembastDatabaseFactory = class SembastDatabaseFactory extends core.Object {};
  (database_factory_mixin.SembastDatabaseFactory.new = function() {
    ;
  }).prototype = database_factory_mixin.SembastDatabaseFactory.prototype;
  dart.addTypeTests(database_factory_mixin.SembastDatabaseFactory);
  dart.addTypeCaches(database_factory_mixin.SembastDatabaseFactory);
  database_factory_mixin.SembastDatabaseFactory[dart.implements] = () => [factory.DatabaseFactory];
  dart.setLibraryUri(database_factory_mixin.SembastDatabaseFactory, I[11]);
  var _databaseOpenHelpers = dart.privateName(database_factory_mixin, "_databaseOpenHelpers");
  database_factory_mixin.DatabaseFactoryMixin = class DatabaseFactoryMixin extends core.Object {};
  database_factory_mixin.DatabaseFactoryMixin[dart.mixinOn] = Object => class DatabaseFactoryMixin extends Object {
    openDatabaseWithOptions(path, options) {
      let helper = this.getDatabaseOpenHelper(path, options);
      return helper.openDatabase();
    }
    openDatabase(path, opts) {
      let version = opts && 'version' in opts ? opts.version : null;
      let onVersionChanged = opts && 'onVersionChanged' in opts ? opts.onVersionChanged : null;
      let mode = opts && 'mode' in opts ? opts.mode : null;
      let codec = opts && 'codec' in opts ? opts.codec : null;
      return this.openDatabaseWithOptions(path, new database_factory_mixin.DatabaseOpenOptions.new({version: version, onVersionChanged: onVersionChanged, mode: mode, codec: codec}));
    }
    getDatabaseOpenHelper(path, options) {
      let helper = this.getExistingDatabaseOpenHelper(path);
      if (helper == null) {
        helper = new database_factory_mixin.DatabaseOpenHelper.new(this, path, options);
        this.setDatabaseOpenHelper(path, helper);
      }
      return helper;
    }
    getExistingDatabaseOpenHelper(path) {
      if (path != null) {
        return this[_databaseOpenHelpers][$_get](path);
      } else {
        return null;
      }
    }
    removeDatabaseOpenHelper(path) {
      if (path != null) {
        this[_databaseOpenHelpers][$remove](path);
      }
    }
    setDatabaseOpenHelper(path, helper) {
      if (path != null) {
        if (helper == null) {
          this[_databaseOpenHelpers][$remove](path);
        } else {
          this[_databaseOpenHelpers][$_set](path, helper);
        }
      }
    }
    deleteDatabase(path) {
      return async.async(dart.dynamic, (function* deleteDatabase() {
        let helper = this.getExistingDatabaseOpenHelper(path);
        if (helper != null && helper.database != null) {
          yield helper.lock.synchronized(dart.dynamic, dart.fn(() => helper.lockedCloseDatabase(), T$.VoidToFutureL()));
        }
        return this.doDeleteDatabase(path);
      }).bind(this));
    }
    flush() {
      return async.async(dart.dynamic, (function* flush() {
        let t24;
        let helpers = T$.ListOfDatabaseOpenHelperL().from(this[_databaseOpenHelpers][$values], {growable: false});
        for (let helper of helpers) {
          yield (t24 = helper.database, t24 == null ? null : t24.flush());
        }
      }).bind(this));
    }
  };
  (database_factory_mixin.DatabaseFactoryMixin[dart.mixinNew] = function() {
    this[_databaseOpenHelpers] = new (T$.IdentityMapOfStringL$DatabaseOpenHelperL()).new();
  }).prototype = database_factory_mixin.DatabaseFactoryMixin.prototype;
  dart.addTypeTests(database_factory_mixin.DatabaseFactoryMixin);
  dart.addTypeCaches(database_factory_mixin.DatabaseFactoryMixin);
  database_factory_mixin.DatabaseFactoryMixin[dart.implements] = () => [database_factory_mixin.SembastDatabaseFactory, core.Object];
  dart.setMethodSignature(database_factory_mixin.DatabaseFactoryMixin, () => ({
    __proto__: dart.getMethods(database_factory_mixin.DatabaseFactoryMixin.__proto__),
    openDatabaseWithOptions: dart.fnType(dart.legacy(async.Future$(dart.legacy(database$.Database))), [dart.legacy(core.String), dart.legacy(database_factory_mixin.DatabaseOpenOptions)]),
    openDatabase: dart.fnType(dart.legacy(async.Future$(dart.legacy(database$.Database))), [dart.legacy(core.String)], {codec: dart.legacy(codec.SembastCodec), mode: dart.legacy(database_mode.DatabaseMode), onVersionChanged: dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(database$.Database), dart.legacy(core.int), dart.legacy(core.int)])), version: dart.legacy(core.int)}, {}),
    getDatabaseOpenHelper: dart.fnType(dart.legacy(database_factory_mixin.DatabaseOpenHelper), [dart.legacy(core.String), dart.legacy(database_factory_mixin.DatabaseOpenOptions)]),
    getExistingDatabaseOpenHelper: dart.fnType(dart.legacy(database_factory_mixin.DatabaseOpenHelper), [dart.legacy(core.String)]),
    removeDatabaseOpenHelper: dart.fnType(dart.void, [dart.legacy(core.String)]),
    setDatabaseOpenHelper: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(database_factory_mixin.DatabaseOpenHelper)]),
    deleteDatabase: dart.fnType(dart.legacy(async.Future), [dart.legacy(core.String)]),
    flush: dart.fnType(dart.legacy(async.Future), [])
  }));
  dart.setLibraryUri(database_factory_mixin.DatabaseFactoryMixin, I[11]);
  dart.setFieldSignature(database_factory_mixin.DatabaseFactoryMixin, () => ({
    __proto__: dart.getFields(database_factory_mixin.DatabaseFactoryMixin.__proto__),
    [_databaseOpenHelpers]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(database_factory_mixin.DatabaseOpenHelper))))
  }));
  const SembastDatabaseFactory_DatabaseFactoryMixin$36 = class SembastDatabaseFactory_DatabaseFactoryMixin extends database_factory_mixin.SembastDatabaseFactory {};
  (SembastDatabaseFactory_DatabaseFactoryMixin$36.new = function() {
    database_factory_mixin.DatabaseFactoryMixin[dart.mixinNew].call(this);
  }).prototype = SembastDatabaseFactory_DatabaseFactoryMixin$36.prototype;
  dart.applyMixin(SembastDatabaseFactory_DatabaseFactoryMixin$36, database_factory_mixin.DatabaseFactoryMixin);
  sembast_jdb.DatabaseFactoryJdb = class DatabaseFactoryJdb extends SembastDatabaseFactory_DatabaseFactoryMixin$36 {
    get jdbFactory() {
      return this[jdbFactory$0];
    }
    set jdbFactory(value) {
      super.jdbFactory = value;
    }
    newDatabase(openHelper) {
      return new database_impl.SembastDatabase.new(openHelper, new sembast_jdb.SembastStorageJdb.new(this.jdbFactory, openHelper.path, openHelper.options));
    }
    doDeleteDatabase(path) {
      return async.async(dart.dynamic, (function* doDeleteDatabase() {
        return new sembast_jdb.SembastStorageJdb.new(this.jdbFactory, path, null).delete();
      }).bind(this));
    }
    get hasStorage() {
      return true;
    }
  };
  (sembast_jdb.DatabaseFactoryJdb.new = function(jdbFactory) {
    this[jdbFactory$0] = jdbFactory;
    sembast_jdb.DatabaseFactoryJdb.__proto__.new.call(this);
    ;
  }).prototype = sembast_jdb.DatabaseFactoryJdb.prototype;
  dart.addTypeTests(sembast_jdb.DatabaseFactoryJdb);
  dart.addTypeCaches(sembast_jdb.DatabaseFactoryJdb);
  sembast_jdb.DatabaseFactoryJdb[dart.implements] = () => [factory.DatabaseFactory];
  dart.setMethodSignature(sembast_jdb.DatabaseFactoryJdb, () => ({
    __proto__: dart.getMethods(sembast_jdb.DatabaseFactoryJdb.__proto__),
    newDatabase: dart.fnType(dart.legacy(database_impl.SembastDatabase), [dart.legacy(database_factory_mixin.DatabaseOpenHelper)]),
    doDeleteDatabase: dart.fnType(dart.legacy(async.Future), [dart.legacy(core.String)])
  }));
  dart.setGetterSignature(sembast_jdb.DatabaseFactoryJdb, () => ({
    __proto__: dart.getGetters(sembast_jdb.DatabaseFactoryJdb.__proto__),
    hasStorage: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(sembast_jdb.DatabaseFactoryJdb, I[10]);
  dart.setFieldSignature(sembast_jdb.DatabaseFactoryJdb, () => ({
    __proto__: dart.getFields(sembast_jdb.DatabaseFactoryJdb.__proto__),
    jdbFactory: dart.finalFieldType(dart.legacy(jdb.JdbFactory))
  }));
  var infoEntries$ = dart.privateName(sembast_jdb, "StorageJdbWriteQuery.infoEntries");
  var entries$ = dart.privateName(sembast_jdb, "StorageJdbWriteQuery.entries");
  var revision$0 = dart.privateName(sembast_jdb, "StorageJdbWriteQuery.revision");
  sembast_jdb.StorageJdbWriteQuery = class StorageJdbWriteQuery extends core.Object {
    get infoEntries() {
      return this[infoEntries$];
    }
    set infoEntries(value) {
      super.infoEntries = value;
    }
    get entries() {
      return this[entries$];
    }
    set entries(value) {
      super.entries = value;
    }
    get revision() {
      return this[revision$0];
    }
    set revision(value) {
      super.revision = value;
    }
  };
  (sembast_jdb.StorageJdbWriteQuery.new = function(opts) {
    let revision = opts && 'revision' in opts ? opts.revision : null;
    let infoEntries = opts && 'infoEntries' in opts ? opts.infoEntries : null;
    let entries = opts && 'entries' in opts ? opts.entries : null;
    this[revision$0] = revision;
    this[infoEntries$] = infoEntries;
    this[entries$] = entries;
    ;
  }).prototype = sembast_jdb.StorageJdbWriteQuery.prototype;
  dart.addTypeTests(sembast_jdb.StorageJdbWriteQuery);
  dart.addTypeCaches(sembast_jdb.StorageJdbWriteQuery);
  dart.setLibraryUri(sembast_jdb.StorageJdbWriteQuery, I[10]);
  dart.setFieldSignature(sembast_jdb.StorageJdbWriteQuery, () => ({
    __proto__: dart.getFields(sembast_jdb.StorageJdbWriteQuery.__proto__),
    infoEntries: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(jdb.JdbInfoEntry)))),
    entries: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(jdb.JdbWriteEntry)))),
    revision: dart.finalFieldType(dart.legacy(core.int))
  }));
  var query$ = dart.privateName(sembast_jdb, "StorageJdbWriteResult.query");
  var revision$1 = dart.privateName(sembast_jdb, "StorageJdbWriteResult.revision");
  var success$0 = dart.privateName(sembast_jdb, "StorageJdbWriteResult.success");
  sembast_jdb.StorageJdbWriteResult = class StorageJdbWriteResult extends core.Object {
    get query() {
      return this[query$];
    }
    set query(value) {
      super.query = value;
    }
    get revision() {
      return this[revision$1];
    }
    set revision(value) {
      super.revision = value;
    }
    get success() {
      return this[success$0];
    }
    set success(value) {
      super.success = value;
    }
    toString() {
      return "original " + dart.str(this.query.revision) + " read " + dart.str(this.revision) + " success " + dart.str(this.success);
    }
  };
  (sembast_jdb.StorageJdbWriteResult.new = function(opts) {
    let query = opts && 'query' in opts ? opts.query : null;
    let revision = opts && 'revision' in opts ? opts.revision : null;
    let success = opts && 'success' in opts ? opts.success : null;
    this[query$] = query;
    this[revision$1] = revision;
    this[success$0] = success;
    ;
  }).prototype = sembast_jdb.StorageJdbWriteResult.prototype;
  dart.addTypeTests(sembast_jdb.StorageJdbWriteResult);
  dart.addTypeCaches(sembast_jdb.StorageJdbWriteResult);
  dart.setMethodSignature(sembast_jdb.StorageJdbWriteResult, () => ({
    __proto__: dart.getMethods(sembast_jdb.StorageJdbWriteResult.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(sembast_jdb.StorageJdbWriteResult, I[10]);
  dart.setFieldSignature(sembast_jdb.StorageJdbWriteResult, () => ({
    __proto__: dart.getFields(sembast_jdb.StorageJdbWriteResult.__proto__),
    query: dart.finalFieldType(dart.legacy(sembast_jdb.StorageJdbWriteQuery)),
    revision: dart.finalFieldType(dart.legacy(core.int)),
    success: dart.finalFieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(sembast_jdb.StorageJdbWriteResult, ['toString']);
  dart.defineLazy(sembast_jdb, {
    /*sembast_jdb.metaKey*/get metaKey() {
      return "meta";
    }
  }, true);
  var _adapters = dart.privateName(json_encodable_codec, "_adapters");
  json_encodable_codec._Encoder = class _Encoder extends convert.Converter {
    convert(value) {
      return json_encodable_codec.toJsonEncodable(value, this.codec[_adapters][$values]);
    }
  };
  (json_encodable_codec._Encoder.new = function(codec) {
    this.codec = codec;
    json_encodable_codec._Encoder.__proto__.new.call(this);
    ;
  }).prototype = json_encodable_codec._Encoder.prototype;
  dart.addTypeTests(json_encodable_codec._Encoder);
  dart.addTypeCaches(json_encodable_codec._Encoder);
  dart.setMethodSignature(json_encodable_codec._Encoder, () => ({
    __proto__: dart.getMethods(json_encodable_codec._Encoder.__proto__),
    convert: dart.fnType(dart.dynamic, [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(json_encodable_codec._Encoder, I[12]);
  dart.setFieldSignature(json_encodable_codec._Encoder, () => ({
    __proto__: dart.getFields(json_encodable_codec._Encoder.__proto__),
    codec: dart.finalFieldType(dart.legacy(json_encodable_codec.JsonEncodableCodec))
  }));
  json_encodable_codec._Decoder = class _Decoder extends convert.Converter {
    convert(value) {
      return json_encodable_codec.fromJsonEncodable(value, this.codec[_adapters]);
    }
  };
  (json_encodable_codec._Decoder.new = function(codec) {
    this.codec = codec;
    json_encodable_codec._Decoder.__proto__.new.call(this);
    ;
  }).prototype = json_encodable_codec._Decoder.prototype;
  dart.addTypeTests(json_encodable_codec._Decoder);
  dart.addTypeCaches(json_encodable_codec._Decoder);
  dart.setMethodSignature(json_encodable_codec._Decoder, () => ({
    __proto__: dart.getMethods(json_encodable_codec._Decoder.__proto__),
    convert: dart.fnType(dart.dynamic, [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(json_encodable_codec._Decoder, I[12]);
  dart.setFieldSignature(json_encodable_codec._Decoder, () => ({
    __proto__: dart.getFields(json_encodable_codec._Decoder.__proto__),
    codec: dart.finalFieldType(dart.legacy(json_encodable_codec.JsonEncodableCodec))
  }));
  var _decoder = dart.privateName(json_encodable_codec, "_decoder");
  var _encoder = dart.privateName(json_encodable_codec, "_encoder");
  json_encodable_codec.JsonEncodableCodec = class JsonEncodableCodec extends convert.Codec {
    get decoder() {
      return this[_decoder];
    }
    get encoder() {
      return this[_encoder];
    }
    supportsType(value) {
      if (this[_adapters] != null) {
        for (let adapter of this[_adapters][$values]) {
          if (dart.test(adapter.isType(value))) {
            return true;
          }
        }
      }
      return false;
    }
  };
  (json_encodable_codec.JsonEncodableCodec.new = function(opts) {
    let adapters = opts && 'adapters' in opts ? opts.adapters : null;
    this[_adapters] = null;
    this[_decoder] = null;
    this[_encoder] = null;
    json_encodable_codec.JsonEncodableCodec.__proto__.new.call(this);
    this[_adapters] = json_encodable_codec.sembastTypeAdaptersToMap(adapters);
    this[_decoder] = new json_encodable_codec._Decoder.new(this);
    this[_encoder] = new json_encodable_codec._Encoder.new(this);
  }).prototype = json_encodable_codec.JsonEncodableCodec.prototype;
  dart.addTypeTests(json_encodable_codec.JsonEncodableCodec);
  dart.addTypeCaches(json_encodable_codec.JsonEncodableCodec);
  dart.setMethodSignature(json_encodable_codec.JsonEncodableCodec, () => ({
    __proto__: dart.getMethods(json_encodable_codec.JsonEncodableCodec.__proto__),
    supportsType: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(json_encodable_codec.JsonEncodableCodec, () => ({
    __proto__: dart.getGetters(json_encodable_codec.JsonEncodableCodec.__proto__),
    decoder: dart.legacy(json_encodable_codec._Decoder),
    encoder: dart.legacy(json_encodable_codec._Encoder)
  }));
  dart.setLibraryUri(json_encodable_codec.JsonEncodableCodec, I[12]);
  dart.setFieldSignature(json_encodable_codec.JsonEncodableCodec, () => ({
    __proto__: dart.getFields(json_encodable_codec.JsonEncodableCodec.__proto__),
    [_adapters]: dart.fieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(type_adapter_impl.SembastTypeAdapter)))),
    [_decoder]: dart.fieldType(dart.legacy(json_encodable_codec._Decoder)),
    [_encoder]: dart.fieldType(dart.legacy(json_encodable_codec._Encoder))
  }));
  json_encodable_codec.sembastTypeAdaptersToMap = function sembastTypeAdaptersToMap(adapters) {
    let _adapters = new (T$.IdentityMapOfStringL$SembastTypeAdapterL()).new();
    if (adapters != null) {
      for (let adapter of adapters) {
        if (!(_adapters[$_get](adapter.name) == null)) dart.assertFailed("Adapter already exists for " + dart.str(adapter.name), I[13], 31, 14, "_adapters[adapter.name] == null");
        _adapters[$_set](adapter.name, adapter);
      }
    }
    return _adapters;
  };
  json_encodable_codec._looksLikeCustomType = function _looksLikeCustomType(map) {
    if (map[$length] === 1) {
      let key = map[$keys][$first];
      if (T$.StringL().is(key)) {
        return key[$startsWith]("@");
      }
      dart.throw(new core.ArgumentError.value(key));
    }
    return false;
  };
  json_encodable_codec._toJsonEncodable = function _toJsonEncodable(value, adapters) {
    let t24, t24$;
    if (dart.test(utils.isBasicTypeOrNull(value))) {
      return value;
    }
    for (let adapter of adapters) {
      if (dart.test(adapter.isType(value))) {
        return new (T$.IdentityMapOfStringL$dynamic()).from(["@" + dart.str(adapter.name), adapter.encode(value)]);
      }
    }
    if (T$.MapL().is(value)) {
      let map = value;
      if (dart.test(json_encodable_codec._looksLikeCustomType(map))) {
        return new (T$.IdentityMapOfStringL$dynamic()).from(["@", map]);
      }
      let clone = null;
      map[$forEach](dart.fn((key, item) => {
        if (!T$.StringL().is(key)) {
          dart.throw(new core.ArgumentError.value(key));
        }
        let converted = json_encodable_codec._toJsonEncodable(item, adapters);
        if (!core.identical(converted, item)) {
          clone == null ? clone = T$.LinkedHashMapOfStringL$dynamic().from(map) : null;
          dart.dsend(clone, '_set', [key, converted]);
        }
      }, T$.dynamicAnddynamicToNull()));
      t24 = clone;
      return t24 == null ? map : t24;
    } else if (T$.ListL().is(value)) {
      let list = value;
      let clone = null;
      for (let i = 0; i < dart.notNull(list[$length]); i = i + 1) {
        let item = list[$_get](i);
        let converted = json_encodable_codec._toJsonEncodable(item, adapters);
        if (!core.identical(converted, item)) {
          clone == null ? clone = core.List.from(list) : null;
          dart.dsend(clone, '_set', [i, converted]);
        }
      }
      t24$ = clone;
      return t24$ == null ? list : t24$;
    } else {
      dart.throw(new core.ArgumentError.value(value));
    }
  };
  json_encodable_codec.toJsonEncodable = function toJsonEncodable(value, adapters) {
    let converted = null;
    try {
      converted = json_encodable_codec._toJsonEncodable(value, adapters);
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (T$.ArgumentErrorL().is(e)) {
        dart.throw(new core.ArgumentError.value(e[$invalidValue], dart.str(dart.runtimeType(e[$invalidValue])) + " in " + dart.str(value), "not supported"));
      } else
        throw e$;
    }
    if (T$.MapL().is(converted) && !T$.MapLOfStringL$dynamic().is(converted)) {
      converted = dart.dgsend(converted, [T$.StringL(), dart.dynamic], 'cast', []);
    }
    return converted;
  };
  json_encodable_codec._fromEncodable = function _fromEncodable(value, adapters) {
    let t26, t26$;
    if (dart.test(utils.isBasicTypeOrNull(value))) {
      return value;
    } else if (T$.MapL().is(value)) {
      let map = value;
      if (dart.test(json_encodable_codec._looksLikeCustomType(map))) {
        let type = T$.StringL().as(map[$keys][$first])[$substring](1);
        if (type === "") {
          return map[$values][$first];
        }
        let adapter = adapters[$_get](type);
        if (adapter != null) {
          let encodedValue = value[$values][$first];
          try {
            return adapter.decode(encodedValue);
          } catch (e$) {
            let e = dart.getThrown(e$);
            core.print(dart.str(e) + " - ignoring " + dart.str(encodedValue) + " " + dart.str(dart.runtimeType(encodedValue)));
          }
        }
      }
      let clone = null;
      map[$forEach](dart.fn((key, item) => {
        let converted = json_encodable_codec._fromEncodable(item, adapters);
        if (!core.identical(converted, item)) {
          clone == null ? clone = T$.LinkedHashMapOfStringL$dynamic().from(map) : null;
          dart.dsend(clone, '_set', [key, converted]);
        }
      }, T$.dynamicAnddynamicToNull()));
      t26 = clone;
      return t26 == null ? map : t26;
    } else if (T$.ListL().is(value)) {
      let list = value;
      let clone = null;
      for (let i = 0; i < dart.notNull(list[$length]); i = i + 1) {
        let item = list[$_get](i);
        let converted = json_encodable_codec._fromEncodable(item, adapters);
        if (!core.identical(converted, item)) {
          clone == null ? clone = core.List.from(list) : null;
          dart.dsend(clone, '_set', [i, converted]);
        }
      }
      t26$ = clone;
      return t26$ == null ? list : t26$;
    } else {
      dart.throw(new core.ArgumentError.value(value));
    }
  };
  json_encodable_codec.fromJsonEncodable = function fromJsonEncodable(value, adapters) {
    let converted = null;
    try {
      converted = json_encodable_codec._fromEncodable(value, adapters);
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (T$.ArgumentErrorL().is(e)) {
        dart.throw(new core.ArgumentError.value(e[$invalidValue], dart.str(dart.runtimeType(e[$invalidValue])) + " in " + dart.str(value), "not supported"));
      } else
        throw e$;
    }
    if (T$.MapL().is(converted) && !T$.MapLOfStringL$dynamic().is(converted)) {
      converted = dart.dgsend(converted, [T$.StringL(), dart.dynamic], 'cast', []);
    }
    return converted;
  };
  dart.defineLazy(json_encodable_codec, {
    /*json_encodable_codec.sembastDefaultJsonEncodableCodec*/get sembastDefaultJsonEncodableCodec() {
      return new json_encodable_codec.JsonEncodableCodec.new({adapters: type_adapter_impl.sembastDefaultTypeAdapters});
    }
  }, true);
  jdb.JdbException = class JdbException extends core.Object {};
  (jdb.JdbException.new = function() {
    ;
  }).prototype = jdb.JdbException.prototype;
  dart.addTypeTests(jdb.JdbException);
  dart.addTypeCaches(jdb.JdbException);
  dart.setLibraryUri(jdb.JdbException, I[14]);
  var id = dart.privateName(jdb, "JdbInfoEntry.id");
  var value$ = dart.privateName(jdb, "JdbInfoEntry.value");
  jdb.JdbInfoEntry = class JdbInfoEntry extends core.Object {
    get id() {
      return this[id];
    }
    set id(value) {
      this[id] = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      this[value$] = value;
    }
    toString() {
      return "[" + dart.str(this.id) + "] " + dart.str(this.value);
    }
    exportToMap() {
      let map = new (T$.IdentityMapOfStringL$dynamic()).from(["id", this.id, "value", this.value]);
      return map;
    }
  };
  (jdb.JdbInfoEntry.new = function() {
    this[id] = null;
    this[value$] = null;
    ;
  }).prototype = jdb.JdbInfoEntry.prototype;
  dart.addTypeTests(jdb.JdbInfoEntry);
  dart.addTypeCaches(jdb.JdbInfoEntry);
  dart.setMethodSignature(jdb.JdbInfoEntry, () => ({
    __proto__: dart.getMethods(jdb.JdbInfoEntry.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    exportToMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), [])
  }));
  dart.setLibraryUri(jdb.JdbInfoEntry, I[14]);
  dart.setFieldSignature(jdb.JdbInfoEntry, () => ({
    __proto__: dart.getFields(jdb.JdbInfoEntry.__proto__),
    id: dart.fieldType(dart.legacy(core.String)),
    value: dart.fieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(jdb.JdbInfoEntry, ['toString']);
  jdb.JdbEntry = class JdbEntry extends core.Object {
    toString() {
      let t27;
      return "[" + dart.str(this.id) + "] " + dart.str(this.record) + " " + dart.str(this.value) + (dart.test((t27 = this.deleted, t27 == null ? false : t27)) ? " (deleted)" : "");
    }
  };
  (jdb.JdbEntry.new = function() {
    ;
  }).prototype = jdb.JdbEntry.prototype;
  dart.addTypeTests(jdb.JdbEntry);
  dart.addTypeCaches(jdb.JdbEntry);
  dart.setMethodSignature(jdb.JdbEntry, () => ({
    __proto__: dart.getMethods(jdb.JdbEntry.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(jdb.JdbEntry, I[14]);
  dart.defineExtensionMethods(jdb.JdbEntry, ['toString']);
  var id$ = dart.privateName(jdb, "JdbReadEntry.id");
  var record = dart.privateName(jdb, "JdbReadEntry.record");
  var value$0 = dart.privateName(jdb, "JdbReadEntry.value");
  var deleted = dart.privateName(jdb, "JdbReadEntry.deleted");
  jdb.JdbReadEntry = class JdbReadEntry extends jdb.JdbEntry {
    get id() {
      return this[id$];
    }
    set id(value) {
      this[id$] = value;
    }
    get record() {
      return this[record];
    }
    set record(value) {
      this[record] = value;
    }
    get value() {
      return this[value$0];
    }
    set value(value) {
      this[value$0] = value;
    }
    get deleted() {
      return this[deleted];
    }
    set deleted(value) {
      this[deleted] = value;
    }
  };
  (jdb.JdbReadEntry.new = function() {
    this[id$] = null;
    this[record] = null;
    this[value$0] = null;
    this[deleted] = null;
    ;
  }).prototype = jdb.JdbReadEntry.prototype;
  dart.addTypeTests(jdb.JdbReadEntry);
  dart.addTypeCaches(jdb.JdbReadEntry);
  dart.setLibraryUri(jdb.JdbReadEntry, I[14]);
  dart.setFieldSignature(jdb.JdbReadEntry, () => ({
    __proto__: dart.getFields(jdb.JdbReadEntry.__proto__),
    id: dart.fieldType(dart.legacy(core.int)),
    record: dart.fieldType(dart.legacy(record_ref.RecordRef)),
    value: dart.fieldType(dart.dynamic),
    deleted: dart.fieldType(dart.legacy(core.bool))
  }));
  var id$0 = dart.privateName(jdb, "JdbWriteEntry.id");
  var txnRecord = dart.privateName(jdb, "JdbWriteEntry.txnRecord");
  var _value = dart.privateName(jdb, "_value");
  jdb.JdbWriteEntry = class JdbWriteEntry extends jdb.JdbEntry {
    get id() {
      return this[id$0];
    }
    set id(value) {
      this[id$0] = value;
    }
    get txnRecord() {
      return this[txnRecord];
    }
    set txnRecord(value) {
      this[txnRecord] = value;
    }
    get record() {
      return this.txnRecord.ref;
    }
    get value() {
      let t27;
      t27 = this[_value];
      return t27 == null ? this[_value] = this.txnRecord.record.value : t27;
    }
    toString() {
      return "[" + dart.str(this.id) + "] " + dart.str(this.record) + " " + dart.str(this.value);
    }
    get deleted() {
      return this.txnRecord.deleted;
    }
  };
  (jdb.JdbWriteEntry.new = function() {
    this[id$0] = null;
    this[txnRecord] = null;
    this[_value] = null;
    ;
  }).prototype = jdb.JdbWriteEntry.prototype;
  dart.addTypeTests(jdb.JdbWriteEntry);
  dart.addTypeCaches(jdb.JdbWriteEntry);
  dart.setGetterSignature(jdb.JdbWriteEntry, () => ({
    __proto__: dart.getGetters(jdb.JdbWriteEntry.__proto__),
    record: dart.legacy(record_ref.RecordRef),
    value: dart.dynamic,
    deleted: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(jdb.JdbWriteEntry, I[14]);
  dart.setFieldSignature(jdb.JdbWriteEntry, () => ({
    __proto__: dart.getFields(jdb.JdbWriteEntry.__proto__),
    id: dart.fieldType(dart.legacy(core.int)),
    txnRecord: dart.fieldType(dart.legacy(record_impl.TxnRecord)),
    [_value]: dart.fieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(jdb.JdbWriteEntry, ['toString']);
  var value$1 = dart.privateName(jdb, "JdbRawWriteEntry.value");
  var deleted$ = dart.privateName(jdb, "JdbRawWriteEntry.deleted");
  var record$ = dart.privateName(jdb, "JdbRawWriteEntry.record");
  jdb.JdbRawWriteEntry = class JdbRawWriteEntry extends jdb.JdbWriteEntry {
    get value() {
      return this[value$1];
    }
    set value(value) {
      super.value = value;
    }
    get deleted() {
      return this[deleted$];
    }
    set deleted(value) {
      super.deleted = value;
    }
    get record() {
      return this[record$];
    }
    set record(value) {
      super.record = value;
    }
  };
  (jdb.JdbRawWriteEntry.new = function(opts) {
    let value = opts && 'value' in opts ? opts.value : null;
    let deleted = opts && 'deleted' in opts ? opts.deleted : null;
    let record = opts && 'record' in opts ? opts.record : null;
    this[value$1] = value;
    this[deleted$] = deleted;
    this[record$] = record;
    jdb.JdbRawWriteEntry.__proto__.new.call(this);
    ;
  }).prototype = jdb.JdbRawWriteEntry.prototype;
  dart.addTypeTests(jdb.JdbRawWriteEntry);
  dart.addTypeCaches(jdb.JdbRawWriteEntry);
  dart.setLibraryUri(jdb.JdbRawWriteEntry, I[14]);
  dart.setFieldSignature(jdb.JdbRawWriteEntry, () => ({
    __proto__: dart.getFields(jdb.JdbRawWriteEntry.__proto__),
    value: dart.finalFieldType(dart.dynamic),
    deleted: dart.finalFieldType(dart.legacy(core.bool)),
    record: dart.finalFieldType(dart.legacy(record_ref.RecordRef))
  }));
  jdb.JdbDatabase = class JdbDatabase extends core.Object {};
  (jdb.JdbDatabase.new = function() {
    ;
  }).prototype = jdb.JdbDatabase.prototype;
  dart.addTypeTests(jdb.JdbDatabase);
  dart.addTypeCaches(jdb.JdbDatabase);
  dart.setLibraryUri(jdb.JdbDatabase, I[14]);
  jdb.JdbFactory = class JdbFactory extends core.Object {};
  (jdb.JdbFactory.new = function() {
    ;
  }).prototype = jdb.JdbFactory.prototype;
  dart.addTypeTests(jdb.JdbFactory);
  dart.addTypeCaches(jdb.JdbFactory);
  dart.setLibraryUri(jdb.JdbFactory, I[14]);
  field$.Field = class Field extends core.Object {};
  (field$.Field.new = function() {
    ;
  }).prototype = field$.Field.prototype;
  dart.addTypeTests(field$.Field);
  dart.addTypeCaches(field$.Field);
  dart.setLibraryUri(field$.Field, I[15]);
  dart.defineLazy(field$.Field, {
    /*field$.Field.value*/get value() {
      return "_value";
    },
    set value(_) {},
    /*field$.Field.key*/get key() {
      return "_key";
    },
    set key(_) {}
  }, true);
  var _label$ = dart.privateName(field$, "FieldValue._label");
  var _label = dart.privateName(field$, "_label");
  field$.FieldValue = class FieldValue extends core.Object {
    get [_label]() {
      return this[_label$];
    }
    set [_label](value) {
      super[_label] = value;
    }
    toString() {
      return "FieldValue." + dart.str(this[_label]);
    }
  };
  (field$.FieldValue.__ = function(_label) {
    this[_label$] = _label;
    ;
  }).prototype = field$.FieldValue.prototype;
  dart.addTypeTests(field$.FieldValue);
  dart.addTypeCaches(field$.FieldValue);
  dart.setMethodSignature(field$.FieldValue, () => ({
    __proto__: dart.getMethods(field$.FieldValue.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(field$.FieldValue, I[15]);
  dart.setFieldSignature(field$.FieldValue, () => ({
    __proto__: dart.getFields(field$.FieldValue.__proto__),
    [_label]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(field$.FieldValue, ['toString']);
  dart.defineLazy(field$.FieldValue, {
    /*field$.FieldValue.delete*/get delete() {
      return C[1] || CT.C1;
    },
    set delete(_) {}
  }, true);
  field$.FieldKey = class FieldKey extends core.Object {
    static escape(field) {
      return utils.escapeKey(field);
    }
  };
  (field$.FieldKey.__ = function() {
    ;
  }).prototype = field$.FieldKey.prototype;
  dart.addTypeTests(field$.FieldKey);
  dart.addTypeCaches(field$.FieldKey);
  dart.setLibraryUri(field$.FieldKey, I[15]);
  database$.Database = class Database extends core.Object {};
  (database$.Database.new = function() {
    ;
  }).prototype = database$.Database.prototype;
  dart.addTypeTests(database$.Database);
  dart.addTypeCaches(database$.Database);
  database$.Database[dart.implements] = () => [client.DatabaseClient];
  dart.setLibraryUri(database$.Database, I[16]);
  factory.DatabaseFactory = class DatabaseFactory extends core.Object {};
  (factory.DatabaseFactory.new = function() {
    ;
  }).prototype = factory.DatabaseFactory.prototype;
  dart.addTypeTests(factory.DatabaseFactory);
  dart.addTypeCaches(factory.DatabaseFactory);
  dart.setLibraryUri(factory.DatabaseFactory, I[17]);
  var version$0 = dart.privateName(database_factory_mixin, "DatabaseOpenOptions.version");
  var onVersionChanged$ = dart.privateName(database_factory_mixin, "DatabaseOpenOptions.onVersionChanged");
  var mode$ = dart.privateName(database_factory_mixin, "DatabaseOpenOptions.mode");
  var codec$0 = dart.privateName(database_factory_mixin, "DatabaseOpenOptions.codec");
  database_factory_mixin.DatabaseOpenOptions = class DatabaseOpenOptions extends core.Object {
    get version() {
      return this[version$0];
    }
    set version(value) {
      super.version = value;
    }
    get onVersionChanged() {
      return this[onVersionChanged$];
    }
    set onVersionChanged(value) {
      super.onVersionChanged = value;
    }
    get mode() {
      return this[mode$];
    }
    set mode(value) {
      super.mode = value;
    }
    get codec() {
      return this[codec$0];
    }
    set codec(value) {
      super.codec = value;
    }
    toString() {
      let map = new (T$.IdentityMapOfStringL$dynamic()).new();
      if (this.version != null) {
        map[$_set]("version", this.version);
      }
      if (this.mode != null) {
        map[$_set]("mode", this.mode);
      }
      if (this.codec != null) {
        map[$_set]("codec", this.codec);
      }
      return map[$toString]();
    }
  };
  (database_factory_mixin.DatabaseOpenOptions.new = function(opts) {
    let version = opts && 'version' in opts ? opts.version : null;
    let onVersionChanged = opts && 'onVersionChanged' in opts ? opts.onVersionChanged : null;
    let mode = opts && 'mode' in opts ? opts.mode : null;
    let codec = opts && 'codec' in opts ? opts.codec : null;
    this[version$0] = version;
    this[onVersionChanged$] = onVersionChanged;
    this[mode$] = mode;
    this[codec$0] = codec;
    ;
  }).prototype = database_factory_mixin.DatabaseOpenOptions.prototype;
  dart.addTypeTests(database_factory_mixin.DatabaseOpenOptions);
  dart.addTypeCaches(database_factory_mixin.DatabaseOpenOptions);
  dart.setMethodSignature(database_factory_mixin.DatabaseOpenOptions, () => ({
    __proto__: dart.getMethods(database_factory_mixin.DatabaseOpenOptions.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(database_factory_mixin.DatabaseOpenOptions, I[11]);
  dart.setFieldSignature(database_factory_mixin.DatabaseOpenOptions, () => ({
    __proto__: dart.getFields(database_factory_mixin.DatabaseOpenOptions.__proto__),
    version: dart.finalFieldType(dart.legacy(core.int)),
    onVersionChanged: dart.finalFieldType(dart.legacy(dart.fnType(dart.dynamic, [dart.legacy(database$.Database), dart.legacy(core.int), dart.legacy(core.int)]))),
    mode: dart.finalFieldType(dart.legacy(database_mode.DatabaseMode)),
    codec: dart.finalFieldType(dart.legacy(codec.SembastCodec))
  }));
  dart.defineExtensionMethods(database_factory_mixin.DatabaseOpenOptions, ['toString']);
  var factory$0 = dart.privateName(database_factory_mixin, "DatabaseOpenHelper.factory");
  var path$0 = dart.privateName(database_factory_mixin, "DatabaseOpenHelper.path");
  var openMode = dart.privateName(database_factory_mixin, "DatabaseOpenHelper.openMode");
  var options$0 = dart.privateName(database_factory_mixin, "DatabaseOpenHelper.options");
  var lock = dart.privateName(database_factory_mixin, "DatabaseOpenHelper.lock");
  var database$0 = dart.privateName(database_factory_mixin, "DatabaseOpenHelper.database");
  database_factory_mixin.DatabaseOpenHelper = class DatabaseOpenHelper extends core.Object {
    get factory() {
      return this[factory$0];
    }
    set factory(value) {
      super.factory = value;
    }
    get path() {
      return this[path$0];
    }
    set path(value) {
      super.path = value;
    }
    get openMode() {
      return this[openMode];
    }
    set openMode(value) {
      this[openMode] = value;
    }
    get options() {
      return this[options$0];
    }
    set options(value) {
      super.options = value;
    }
    get lock() {
      return this[lock];
    }
    set lock(value) {
      super.lock = value;
    }
    get database() {
      return this[database$0];
    }
    set database(value) {
      this[database$0] = value;
    }
    newDatabase(path) {
      return this.factory.newDatabase(this);
    }
    openDatabase() {
      return this.lock.synchronized(T$.DatabaseL(), dart.fn(() => async.async(T$.SembastDatabaseL(), (function*() {
        if (this.database == null) {
          let database = this.newDatabase(this.path);
          this.database = database;
        }
        this.database.openHelper = this;
        yield this.database.open(this.options);
        this.factory.setDatabaseOpenHelper(this.path, this);
        return this.database;
      }).bind(this)), T$.VoidToFutureLOfSembastDatabaseL()));
    }
    lockedCloseDatabase() {
      return async.async(dart.dynamic, (function* lockedCloseDatabase() {
        if (this.database != null) {
          this.factory.removeDatabaseOpenHelper(this.path);
        }
        return this.database;
      }).bind(this));
    }
    toString() {
      return "DatabaseOpenHelper(" + dart.str(this.path) + ", " + dart.str(this.options) + ")";
    }
  };
  (database_factory_mixin.DatabaseOpenHelper.new = function(factory, path, options) {
    let t27, t27$;
    this[openMode] = null;
    this[lock] = synchronized.Lock.new();
    this[database$0] = null;
    this[factory$0] = factory;
    this[path$0] = path;
    this[options$0] = options;
    this.openMode == null ? this.openMode = (t27$ = (t27 = this.options, t27 == null ? null : t27.mode), t27$ == null ? database_mode.DatabaseMode.defaultMode : t27$) : null;
  }).prototype = database_factory_mixin.DatabaseOpenHelper.prototype;
  dart.addTypeTests(database_factory_mixin.DatabaseOpenHelper);
  dart.addTypeCaches(database_factory_mixin.DatabaseOpenHelper);
  dart.setMethodSignature(database_factory_mixin.DatabaseOpenHelper, () => ({
    __proto__: dart.getMethods(database_factory_mixin.DatabaseOpenHelper.__proto__),
    newDatabase: dart.fnType(dart.legacy(database_impl.SembastDatabase), [dart.legacy(core.String)]),
    openDatabase: dart.fnType(dart.legacy(async.Future$(dart.legacy(database$.Database))), []),
    lockedCloseDatabase: dart.fnType(dart.legacy(async.Future), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(database_factory_mixin.DatabaseOpenHelper, I[11]);
  dart.setFieldSignature(database_factory_mixin.DatabaseOpenHelper, () => ({
    __proto__: dart.getFields(database_factory_mixin.DatabaseOpenHelper.__proto__),
    factory: dart.finalFieldType(dart.legacy(database_factory_mixin.SembastDatabaseFactory)),
    path: dart.finalFieldType(dart.legacy(core.String)),
    openMode: dart.fieldType(dart.legacy(database_mode.DatabaseMode)),
    options: dart.finalFieldType(dart.legacy(database_factory_mixin.DatabaseOpenOptions)),
    lock: dart.finalFieldType(dart.legacy(synchronized.Lock)),
    database: dart.fieldType(dart.legacy(database_impl.SembastDatabase))
  }));
  dart.defineExtensionMethods(database_factory_mixin.DatabaseOpenHelper, ['toString']);
  var revision = dart.privateName(database_impl, "CommitEntries.revision");
  var txnRecords = dart.privateName(database_impl, "CommitEntries.txnRecords");
  var upgrading = dart.privateName(database_impl, "CommitEntries.upgrading");
  var upgradingMeta = dart.privateName(database_impl, "CommitEntries.upgradingMeta");
  database_impl.CommitEntries = class CommitEntries extends core.Object {
    get revision() {
      return this[revision];
    }
    set revision(value) {
      this[revision] = value;
    }
    get txnRecords() {
      return this[txnRecords];
    }
    set txnRecords(value) {
      this[txnRecords] = value;
    }
    get upgrading() {
      return this[upgrading];
    }
    set upgrading(value) {
      this[upgrading] = value;
    }
    get upgradingMeta() {
      return this[upgradingMeta];
    }
    set upgradingMeta(value) {
      this[upgradingMeta] = value;
    }
    get hasWriteData() {
      let t27, t27$;
      t27$ = (t27 = this.txnRecords, t27 == null ? null : t27[$isNotEmpty]);
      return t27$ == null ? false : t27$;
    }
  };
  (database_impl.CommitEntries.new = function() {
    this[revision] = null;
    this[txnRecords] = null;
    this[upgrading] = null;
    this[upgradingMeta] = null;
    ;
  }).prototype = database_impl.CommitEntries.prototype;
  dart.addTypeTests(database_impl.CommitEntries);
  dart.addTypeCaches(database_impl.CommitEntries);
  dart.setGetterSignature(database_impl.CommitEntries, () => ({
    __proto__: dart.getGetters(database_impl.CommitEntries.__proto__),
    hasWriteData: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(database_impl.CommitEntries, I[18]);
  dart.setFieldSignature(database_impl.CommitEntries, () => ({
    __proto__: dart.getFields(database_impl.CommitEntries.__proto__),
    revision: dart.fieldType(dart.legacy(core.int)),
    txnRecords: dart.fieldType(dart.legacy(core.List$(dart.legacy(record_impl.TxnRecord)))),
    upgrading: dart.fieldType(dart.legacy(core.bool)),
    upgradingMeta: dart.fieldType(dart.legacy(meta$.Meta))
  }));
  database_impl.CommitData = class CommitData extends database_impl.CommitEntries {};
  (database_impl.CommitData.new = function() {
    database_impl.CommitData.__proto__.new.call(this);
    ;
  }).prototype = database_impl.CommitData.prototype;
  dart.addTypeTests(database_impl.CommitData);
  dart.addTypeCaches(database_impl.CommitData);
  dart.setLibraryUri(database_impl.CommitData, I[18]);
  var openHelper$ = dart.privateName(database_impl, "SembastDatabase.openHelper");
  var logV = dart.privateName(database_impl, "SembastDatabase.logV");
  var databaseLock = dart.privateName(database_impl, "SembastDatabase.databaseLock");
  var transactionLock = dart.privateName(database_impl, "SembastDatabase.transactionLock");
  var notificationLock = dart.privateName(database_impl, "SembastDatabase.notificationLock");
  var listener$ = dart.privateName(database_impl, "SembastDatabase.listener");
  var lazyStorageOperations = dart.privateName(database_impl, "SembastDatabase.lazyStorageOperations");
  var cooperator$ = dart.privateName(database_impl, "SembastDatabase.cooperator");
  var _storageFs = dart.privateName(database_impl, "_storageFs");
  var _storageJdb = dart.privateName(database_impl, "_storageJdb");
  var _storageJdbRevisionUpdateSubscription = dart.privateName(database_impl, "_storageJdbRevisionUpdateSubscription");
  var _jdbRevision = dart.privateName(database_impl, "_jdbRevision");
  var _txnId = dart.privateName(database_impl, "_txnId");
  var _meta = dart.privateName(database_impl, "_meta");
  var _upgrading = dart.privateName(database_impl, "_upgrading");
  var _upgradingMeta = dart.privateName(database_impl, "_upgradingMeta");
  var _opened = dart.privateName(database_impl, "_opened");
  var _closed = dart.privateName(database_impl, "_closed");
  var _openTransaction = dart.privateName(database_impl, "_openTransaction");
  var _mainStore = dart.privateName(database_impl, "_mainStore");
  var _stores$ = dart.privateName(database_impl, "_stores");
  var _txnDroppedStores = dart.privateName(database_impl, "_txnDroppedStores");
  var _txnStoreLastIntKeys = dart.privateName(database_impl, "_txnStoreLastIntKeys");
  var _transaction = dart.privateName(database_impl, "_transaction");
  var _pendingListenerContent = dart.privateName(database_impl, "_pendingListenerContent");
  var _exportStat = dart.privateName(database_impl, "_exportStat");
  var _storageBase$ = dart.privateName(database_impl, "_storageBase");
  var _clearTxnData = dart.privateName(database_impl, "_clearTxnData");
  var _recordStore = dart.privateName(database_impl, "_recordStore");
  var _jsonCodec = dart.privateName(database_impl, "_jsonCodec");
  var _jsonEncodableCodec = dart.privateName(database_impl, "_jsonEncodableCodec");
  var _txnBuildCommitEntries = dart.privateName(database_impl, "_txnBuildCommitEntries");
  var _getTxnDatabaseContent = dart.privateName(database_impl, "_getTxnDatabaseContent");
  var _noTxnHasRecord = dart.privateName(database_impl, "_noTxnHasRecord");
  var _addStore = dart.privateName(database_impl, "_addStore");
  var _checkMainStore = dart.privateName(database_impl, "_checkMainStore");
  var _checkOpen = dart.privateName(database_impl, "_checkOpen");
  var FormatException_offset = dart.privateName(core, "FormatException.offset");
  var FormatException_source = dart.privateName(core, "FormatException.source");
  var FormatException_message = dart.privateName(core, "FormatException.message");
  var _needCompact = dart.privateName(database_impl, "_needCompact");
  var _restartListeners = dart.privateName(database_impl, "_restartListeners");
  var _notifyLazilyJdbImportResult = dart.privateName(database_impl, "_notifyLazilyJdbImportResult");
  var _addRecordToPendingListenerContent = dart.privateName(database_impl, "_addRecordToPendingListenerContent");
  var _check = dart.privateName(database_impl, "_check");
  database_impl.SembastDatabase = class SembastDatabase extends core.Object {
    get openHelper() {
      return this[openHelper$];
    }
    set openHelper(value) {
      this[openHelper$] = value;
    }
    get logV() {
      return this[logV];
    }
    set logV(value) {
      super.logV = value;
    }
    get databaseLock() {
      return this[databaseLock];
    }
    set databaseLock(value) {
      super.databaseLock = value;
    }
    get transactionLock() {
      return this[transactionLock];
    }
    set transactionLock(value) {
      super.transactionLock = value;
    }
    get notificationLock() {
      return this[notificationLock];
    }
    set notificationLock(value) {
      super.notificationLock = value;
    }
    get listener() {
      return this[listener$];
    }
    set listener(value) {
      super.listener = value;
    }
    get lazyStorageOperations() {
      return this[lazyStorageOperations];
    }
    set lazyStorageOperations(value) {
      super.lazyStorageOperations = value;
    }
    get cooperator() {
      return this[cooperator$];
    }
    set cooperator(value) {
      this[cooperator$] = value;
    }
    get storageJdb() {
      return this[_storageJdb];
    }
    get path() {
      return this[_storageBase$].path;
    }
    get version() {
      return this[_meta].version;
    }
    get openOptions() {
      let t27;
      t27 = this.openHelper;
      return t27 == null ? null : t27.options;
    }
    get mainStore() {
      return this[_mainStore];
    }
    get stores() {
      return this[_stores$][$values];
    }
    get storeNames() {
      return this[_stores$][$values][$map](T$.StringL(), dart.fn(store => store.name, T$.SembastStoreLToStringL()));
    }
    get nonEmptyStoreNames() {
      return this[_stores$][$values][$where](dart.fn(store => store.recordMap[$isNotEmpty], T$.SembastStoreLToboolL()))[$map](T$.StringL(), dart.fn(store => store.name, T$.SembastStoreLToStringL()));
    }
    [_clearTxnData]() {
      this[_txnDroppedStores][$clear]();
      this[_txnStoreLastIntKeys][$clear]();
      for (let store of this.stores) {
        store.rollback();
      }
    }
    txnRollback(txn) {
      if (txn == null) {
        dart.throw(core.Exception.new("not in transaction"));
      }
      this[_clearTxnData]();
    }
    get currentTransaction() {
      return this[_transaction];
    }
    [_recordStore](record) {
      return this.getSembastStore(record.ref.store);
    }
    setRecordInMemory(record) {
      let t27;
      return this[_recordStore](record).setRecordInMemory((t27 = record, t27 == null ? null : t27.record));
    }
    jdbDeltaLoadRecord(record) {
      let t27;
      let store = this[_recordStore](record);
      let existing = store.txnGetImmutableRecordSync(null, record.key);
      if (T$.ImmutableSembastRecordJdbL().is(existing)) {
        if (existing != null) {
          if (existing.revision != null) {
            if (dart.notNull((t27 = record.revision, t27 == null ? 0 : t27)) > dart.notNull(existing.revision)) {
              this.loadRecord(record);
              return true;
            }
          }
          return false;
        }
      }
      this.loadRecord(record);
      return true;
    }
    loadRecord(record) {
      this[_recordStore](record).loadRecord(record);
    }
    compact() {
      return async.async(dart.dynamic, (function* compact() {
        yield this.databaseOperation(dart.fn(() => this.txnCompact(), T$.VoidToFutureL()));
      }).bind(this));
    }
    encodeRecordMap(map) {
      return this[_jsonCodec].encode(this.toJsonEncodable(map));
    }
    decodeRecordLineString(text) {
      let t27;
      let result = this[_jsonEncodableCodec].decode(this[_jsonCodec].decode(text));
      if (T$.MapLOfStringL$dynamic().is(result)) {
        return result;
      }
      if (T$.MapL().is(result)) {
        t27 = result;
        return t27 == null ? null : t27[$cast](T$.StringL(), dart.dynamic);
      }
      return null;
    }
    getCurrentStores() {
      return T$.ListOfSembastStoreL().from(this.stores);
    }
    getCurrentRecords(store) {
      return store.currentRecords;
    }
    generateUniqueIntKey(store) {
      return async.async(T$.intL(), (function* generateUniqueIntKey() {
        if (this[_storageJdb] != null) {
          let lastIntKey = this[_txnStoreLastIntKeys][$_get](store);
          if (lastIntKey == null) {
            lastIntKey = (yield this[_storageJdb].generateUniqueIntKey(store));
          } else {
            lastIntKey = dart.notNull(lastIntKey) + 1;
          }
          this[_txnStoreLastIntKeys][$_set](store, lastIntKey);
          return lastIntKey;
        }
        return null;
      }).bind(this));
    }
    generateUniqueStringKey(store) {
      if (this[_storageJdb] != null) {
        return this[_storageJdb].generateUniqueStringKey(store);
      }
      return null;
    }
    txnCompact() {
      return async.async(dart.dynamic, (function* txnCompact() {
        let t27, t27$, t27$0, t28, t28$;
        if (!dart.test(this.databaseLock.inLock)) dart.assertFailed(null, I[19], 272, 12, "databaseLock.inLock");
        if (dart.test((t27$ = (t27 = this[_storageFs], t27 == null ? null : t27.supported), t27$ == null ? false : t27$))) {
          let tmpStorage = this[_storageFs].tmpStorage;
          let exportStat = (t27$0 = new database_impl.DatabaseExportStat.new(), (() => {
            t27$0.compactCount = dart.notNull(this[_exportStat].compactCount) + 1;
            return t27$0;
          })());
          yield tmpStorage.delete();
          yield tmpStorage.findOrCreate();
          let lines = T$.JSArrayOfStringL().of([]);
          const _addStringLine = line => {
            return async.async(dart.dynamic, (function* _addStringLine() {
              yield this.cooperate();
              exportStat.lineCount = dart.notNull(exportStat.lineCount) + 1;
              if (dart.test(database_impl._debugStorage)) {
                core.print("tmp: " + dart.str(line));
              }
              lines[$add](line);
            }).bind(this));
          };
          dart.fn(_addStringLine, T$.StringLToFutureL());
          const _addLine = map => {
            return async.async(dart.dynamic, (function* _addLine() {
              let encoded = null;
              try {
                encoded = this.encodeRecordMap(map);
                yield _addStringLine(encoded);
              } catch (e$) {
                let e = dart.getThrown(e$);
                let st = dart.stackTrace(e$);
                core.print(map);
                core.print(e);
                core.print(st);
                dart.rethrow(e$);
              }
            }).bind(this));
          };
          dart.fn(_addLine, T$.MapLOfStringL$dynamicToFutureL());
          yield _addStringLine(convert.json.encode(this[_meta].toMap()));
          let stores = this.getCurrentStores();
          for (let store of stores) {
            let records = this.getCurrentRecords(store);
            for (let record of records) {
              yield _addLine(record.toDatabaseRowMap());
            }
          }
          yield tmpStorage.appendLines(lines);
          yield this[_storageFs].tmpRecover();
          this[_exportStat] = exportStat;
        } else if (dart.test((t28$ = (t28 = this[_storageJdb], t28 == null ? null : t28.supported), t28$ == null ? false : t28$))) {
          yield this[_storageJdb].compact();
        }
      }).bind(this));
    }
    [_txnBuildCommitEntries]() {
      let t28, t28$, t28$0;
      let txnRecords = T$.JSArrayOfTxnRecordL().of([]);
      let stores = this.getCurrentStores();
      for (let store of stores) {
        let records = store.currentTxnRecords;
        if (dart.test((t28$ = (t28 = records, t28 == null ? null : t28[$isNotEmpty]), t28$ == null ? false : t28$))) {
          txnRecords[$addAll](records);
        }
      }
      let commitEntries = (t28$0 = new database_impl.CommitEntries.new(), (() => {
        t28$0.txnRecords = txnRecords;
        t28$0.upgrading = this[_upgrading];
        t28$0.upgradingMeta = this[_upgradingMeta];
        t28$0.revision = this[_jdbRevision];
        return t28$0;
      })());
      return commitEntries;
    }
    [_getTxnDatabaseContent]() {
      let t28, t28$;
      let content = new database_content.TxnDatabaseContent.new();
      for (let store of this.stores) {
        let records = store.currentTxnRecords;
        if (dart.test((t28$ = (t28 = records, t28 == null ? null : t28[$isNotEmpty]), t28$ == null ? false : t28$))) {
          content.addTxnStoreRecords(store.ref, records);
        }
      }
      return content;
    }
    commitInMemory() {
      let t28, t28$;
      let content = this[_getTxnDatabaseContent]();
      let txnRecords = content.txnRecords;
      let commitData = (t28 = new database_impl.CommitData.new(), (() => {
        t28.txnRecords = txnRecords;
        return t28;
      })());
      if (dart.test(txnRecords[$isNotEmpty])) {
        const _saveInMemory = () => {
          let t28, t28$, t28$0, t28$1;
          for (let record of txnRecords) {
            let exists = this.setRecordInMemory(record);
            if (dart.test((t28$ = (t28 = this[_storageFs], t28 == null ? null : t28.supported), t28$ == null ? false : t28$))) {
              if (dart.test(exists)) {
                t28$0 = this[_exportStat];
                t28$0.obsoleteLineCount = dart.notNull(t28$0.obsoleteLineCount) + 1;
              }
              t28$1 = this[_exportStat];
              t28$1.lineCount = dart.notNull(t28$1.lineCount) + 1;
            }
          }
        };
        dart.fn(_saveInMemory, T$.VoidTovoid());
        _saveInMemory();
      }
      if (dart.test(this[_txnDroppedStores][$isNotEmpty])) {
        for (let store of this[_txnDroppedStores]) {
          this[_stores$][$remove](store);
        }
      }
      if (dart.test(this.listener.isNotEmpty)) {
        for (let storeContent of content.stores) {
          let records = storeContent.records;
          let store = storeContent.store;
          if ((t28$ = records, t28$ == null ? null : t28$[$isNotEmpty]) === true) {
            let listener = this.listener.getStore(store);
            if (listener != null) {
              if (dart.test(listener.hasQueryListener)) {
                let storeListenerContent = this[_pendingListenerContent].addStore(store);
                storeListenerContent.addAll(records);
              } else {
                for (let record of records) {
                  if (dart.test(listener.keyHasRecordListener(record.key))) {
                    this[_pendingListenerContent].addRecord(record);
                  }
                }
              }
            }
          }
        }
      }
      return commitData;
    }
    storageCommitRecords(txnRecords) {
      return async.async(dart.dynamic, (function* storageCommitRecords() {
        if (dart.test(txnRecords[$isNotEmpty])) {
          let lines = T$.JSArrayOfStringL().of([]);
          if (this[_storageFs] != null) {
            for (let record of txnRecords) {
              let map = record.record.toDatabaseRowMap();
              let encoded = null;
              try {
                encoded = this.encodeRecordMap(map);
                if (dart.test(database_impl._debugStorage)) {
                  core.print("add: " + dart.str(encoded));
                }
                lines[$add](encoded);
              } catch (e$) {
                let e = dart.getThrown(e$);
                let st = dart.stackTrace(e$);
                core.print(map);
                core.print(e);
                core.print(st);
                dart.rethrow(e$);
              }
            }
            yield this[_storageFs].appendLines(lines);
          }
        }
      }).bind(this));
    }
    txnPutRecords(txn, records) {
      return async.async(T$.ListLOfImmutableSembastRecordL(), (function* txnPutRecords() {
        records = T$.ListOfImmutableSembastRecordL().from(records);
        let recordsResult = T$.ListOfImmutableSembastRecordL().filled(records[$length], null);
        for (let i = 0; i < dart.notNull(records[$length]); i = i + 1) {
          recordsResult[$_set](i, yield this.txnPutRecord(txn, records[$_get](i)));
        }
        return recordsResult;
      }).bind(this));
    }
    txnPutRecord(txn, record) {
      return this[_recordStore](record).txnPutRecord(txn, record);
    }
    [_noTxnHasRecord](record) {
      return this[_recordStore](record).txnContainsKey(null, record.key);
    }
    reOpen(options = null) {
      return async.async(T$.DatabaseL(), (function* reOpen() {
        let t29;
        if ((t29 = options, t29 == null ? null : t29.mode) != null) {
          this.openHelper.openMode = options.mode;
        }
        options == null ? options = this.openOptions : null;
        yield this.close();
        if (this[_storageJdb] != null) {
          return this.openHelper.factory.openDatabase(this.path, {version: options.version, onVersionChanged: options.onVersionChanged, codec: options.codec, mode: options.mode});
        }
        return this.open(options);
      }).bind(this));
    }
    [_checkMainStore]() {
      if (this[_mainStore] == null) {
        this[_addStore](null);
      }
    }
    [_addStore](storeName) {
      if (storeName == null) {
        return this[_mainStore] = this[_addStore]("_main");
      } else {
        let store = new store_impl.SembastStore.new(this, storeName);
        this[_stores$][$_set](storeName, store);
        return store;
      }
    }
    findStore(storeName) {
      let store = null;
      if (storeName == null) {
        store = this[_mainStore];
      } else {
        store = this[_stores$][$_get](storeName);
      }
      return store;
    }
    txnFindStore(txn, storeName) {
      let store = this.findStore(storeName);
      return txn.toExecutor(store);
    }
    [_checkOpen]() {
      if (dart.test(this[_closed])) {
        dart.throw(new exception.DatabaseException.closed());
      }
    }
    getStore(storeName) {
      this[_checkOpen]();
      let store = this.findStore(storeName);
      store == null ? store = this[_addStore](storeName) : null;
      return store;
    }
    getSembastStore(ref) {
      this[_checkOpen]();
      let store = this.findStore(ref.name);
      store == null ? store = this[_addStore](ref.name) : null;
      return store;
    }
    txnGetStore(txn, storeName) {
      let store = this.getSembastStore(store_ref.StoreRef.new(storeName));
      return txn.toExecutor(store);
    }
    deleteStore(storeName) {
      return this.transaction(dart.dynamic, dart.fn(txn => this.txnDeleteStore(T$.SembastTransactionL().as(txn), storeName), T$.TransactionLToFutureL()));
    }
    txnDeleteStore(txn, storeName) {
      return async.async(dart.dynamic, (function* txnDeleteStore() {
        let store = this.txnFindStore(txn, storeName);
        if (store != null) {
          yield store.store.txnClear(txn);
          if (!dart.equals(store.store, this.mainStore)) {
            this[_txnDroppedStores][$add](storeName);
          }
        }
      }).bind(this));
    }
    txnUndeleteStore(txn, storeName) {
      this[_txnDroppedStores][$remove](storeName);
    }
    flush() {
      return async.async(dart.dynamic, (function* flush() {
        yield this.transactionLock.synchronized(core.Null, dart.fn(() => async.async(core.Null, function*() {
          return null;
        }), T$.VoidToFutureLOfNull()));
        yield this.databaseOperation(null);
      }).bind(this));
    }
    open(options) {
      return async.async(T$.DatabaseL(), (function* open() {
        let t29;
        let mode = (t29 = this.openHelper, t29 == null ? null : t29.openMode);
        let version = options.version;
        let _openMode = mode;
        if (dart.test(this[_opened])) {
          return this;
        }
        if (options.codec != null) {
          if (options.codec.signature == null) {
            if (options.codec.codec != null) {
              dart.throw(new exception.DatabaseException.invalidCodec("Codec signature cannot be null"));
            }
          } else {
            if (options.codec.codec == null) {
              dart.throw(new exception.DatabaseException.invalidCodec("Codec implementation cannot be null"));
            }
          }
        }
        yield this.databaseLock.synchronized(dart.dynamic, dart.fn(() => async.async(dart.dynamic, (function*() {
          let t29, t29$, t33, t33$;
          this[_closed] = false;
          try {
            let meta = null;
            const _handleVersionChanged = (oldVersion, newVersion) => {
              return async.async(dart.dynamic, (function* _handleVersionChanged() {
                this[_upgrading] = true;
                try {
                  yield this.transaction(dart.dynamic, dart.fn(txn => async.async(dart.dynamic, (function*() {
                    let t31, t30, t29;
                    let result = null;
                    try {
                      this[_openTransaction] = txn;
                      meta = this[_upgradingMeta] = new meta$.Meta.new({version: newVersion, codecSignature: sembast_codec_impl.getCodecEncodedSignature(options.codec)});
                      if (options.onVersionChanged != null) {
                        result = (yield (t29 = options, t30 = oldVersion, t31 = newVersion, t29.onVersionChanged(this, t30, t31)));
                      }
                    } finally {
                      this[_openTransaction] = null;
                    }
                    return result;
                  }).bind(this)), T$.TransactionLToFutureL()));
                } finally {
                  this[_upgrading] = false;
                }
              }).bind(this));
            };
            dart.fn(_handleVersionChanged, T$.intLAndintLToFutureL());
            const _openDone = () => {
              return async.async(dart.dynamic, (function* _openDone() {
                this[_checkMainStore]();
                meta == null ? meta = new meta$.Meta.new({version: 0, codecSignature: sembast_codec_impl.getCodecEncodedSignature(options.codec)}) : null;
                this[_meta] == null ? this[_meta] = meta : null;
                let needVersionChanged = false;
                let oldVersion = meta.version;
                if (oldVersion === 0) {
                  needVersionChanged = true;
                  version == null ? version = 1 : null;
                  meta = new meta$.Meta.new({version: version, codecSignature: sembast_codec_impl.getCodecEncodedSignature(options.codec)});
                } else {
                  if (version != null && version != oldVersion) {
                    needVersionChanged = true;
                  }
                }
                this[_opened] = true;
                if (needVersionChanged) {
                  yield _handleVersionChanged(oldVersion, version);
                }
                this[_meta] = meta;
              }).bind(this));
            };
            dart.fn(_openDone, T$.VoidToFutureL());
            const _findOrCreate = () => {
              return async.async(dart.dynamic, (function* _findOrCreate() {
                if (dart.equals(mode, database_mode.DatabaseMode.existing)) {
                  let found = (yield this[_storageBase$].find());
                  if (!dart.test(found)) {
                    dart.throw(new exception.DatabaseException.databaseNotFound("Database (open existing only) " + dart.str(this.path) + " not found"));
                  }
                  this.openHelper.openMode = database_mode.DatabaseMode.defaultMode;
                } else {
                  if (dart.equals(mode, database_mode.DatabaseMode.empty)) {
                    yield this[_storageBase$].delete();
                    this.openHelper.openMode = database_mode.DatabaseMode.defaultMode;
                  }
                  yield this[_storageBase$].findOrCreate();
                }
              }).bind(this));
            };
            dart.fn(_findOrCreate, T$.VoidToFutureL());
            yield _findOrCreate();
            if (dart.test(this[_storageBase$].supported)) {
              const _clearBeforeImport = () => {
                this[_exportStat] = new database_impl.DatabaseExportStat.new();
                this[_meta] = null;
                this[_mainStore] = null;
                this[_stores$][$clear]();
                this[_checkMainStore]();
                this.listener.close();
                this[_pendingListenerContent].clear();
              };
              dart.fn(_clearBeforeImport, T$.VoidTovoid());
              if (dart.test((t29$ = (t29 = this[_storageFs], t29 == null ? null : t29.supported), t29$ == null ? false : t29$))) {
                let corrupted = false;
                const $import = (lines, opts) => {
                  let safeMode = opts && 'safeMode' in opts ? opts.safeMode : null;
                  return async.async(dart.dynamic, (function* $import() {
                    let t29, t29$, t30, t31, t32, t32$;
                    _clearBeforeImport();
                    let firstLineRead = false;
                    L1: {
                      let iter = async.StreamIterator.new(lines);
                      try {
                        while (yield iter.moveNext()) {
                          let line = iter.current;
                          L0: {
                            t29 = this[_exportStat];
                            t29.lineCount = dart.notNull(t29.lineCount) + 1;
                            let map = null;
                            if (!firstLineRead) {
                              try {
                                map = (t29$ = T$.MapL().as(convert.json.decode(line)), t29$ == null ? null : t29$[$cast](T$.StringL(), dart.dynamic));
                              } catch (e) {
                                let _ = dart.getThrown(e);
                                if (T$.ExceptionL().is(_)) {
                                } else
                                  throw e;
                              }
                              if (dart.test(meta$.Meta.isMapMeta(map))) {
                                meta = new meta$.Meta.fromMap(map);
                                sembast_codec_impl.checkCodecEncodedSignature(options.codec, meta.codecSignature);
                                firstLineRead = true;
                                break L0;
                              } else {
                                if (dart.equals(_openMode, database_mode.DatabaseMode.neverFails) && (t30 = options.codec, t30 == null ? null : t30.signature) == null) {
                                  corrupted = true;
                                  break L1;
                                } else {
                                  dart.throw(C[2] || CT.C2);
                                }
                              }
                            }
                            try {
                              map = this.decodeRecordLineString(line);
                            } catch (e$) {
                              let _ = dart.getThrown(e$);
                              if (T$.ExceptionL().is(_)) {
                                try {
                                  map = (t31 = T$.MapL().as(convert.json.decode(line)), t31 == null ? null : t31[$cast](T$.StringL(), dart.dynamic));
                                } catch (e$0) {
                                  let _ = dart.getThrown(e$0);
                                  if (T$.ExceptionL().is(_)) {
                                    if (dart.equals(_openMode, database_mode.DatabaseMode.neverFails)) {
                                      corrupted = true;
                                      if (dart.test((t32 = safeMode, t32 == null ? false : t32))) {
                                        break L0;
                                      } else {
                                        dart.rethrow(e$0);
                                      }
                                    } else {
                                      dart.rethrow(e$0);
                                    }
                                  } else
                                    throw e$0;
                                }
                              } else
                                throw e$;
                            }
                            if (dart.test(record_impl.isMapRecord(map))) {
                              let record = new record_impl.ImmutableSembastRecord.fromDatabaseRowMap(this, map);
                              if (dart.test(this[_noTxnHasRecord](record))) {
                                t32$ = this[_exportStat];
                                t32$.obsoleteLineCount = dart.notNull(t32$.obsoleteLineCount) + 1;
                              }
                              this.loadRecord(record);
                            } else if (dart.test(meta$.Meta.isMapMeta(map))) {
                              meta = new meta$.Meta.fromMap(map);
                              sembast_codec_impl.checkCodecEncodedSignature(options.codec, meta.codecSignature);
                            } else {
                              if (dart.equals(_openMode, database_mode.DatabaseMode.neverFails) && options.codec == null) {
                                corrupted = true;
                                break L1;
                              } else {
                                dart.throw(C[2] || CT.C2);
                              }
                            }
                          }
                        }
                      } finally {
                        yield iter.cancel();
                      }
                    }
                  }).bind(this));
                };
                dart.fn($import, T$.StreamLOfStringL__ToFutureL());
                try {
                  yield $import(this[_storageFs].readLines(), {safeMode: true});
                } catch (e$) {
                  let e = dart.getThrown(e$);
                  corrupted = true;
                  yield $import(this[_storageFs].readSafeLines());
                }
                if (corrupted && meta == null) {
                  yield this[_storageFs].delete();
                  yield this[_storageFs].findOrCreate();
                } else {
                  this[_meta] = meta;
                  if (dart.test(this[_needCompact]) || corrupted) {
                    yield this.txnCompact();
                  }
                }
              } else if (dart.test((t33$ = (t33 = this[_storageJdb], t33 == null ? null : t33.supported), t33$ == null ? false : t33$))) {
                _clearBeforeImport();
                let map = (yield this[_storageJdb].readMeta());
                if (dart.test(meta$.Meta.isMapMeta(map))) {
                  meta = new meta$.Meta.fromMap(map);
                }
                yield this.jdbFullImport();
                this[_storageJdbRevisionUpdateSubscription] = this[_storageJdb].revisionUpdate.listen(dart.fn(revision => {
                  this.jdbDeltaImport(revision);
                }, T$.intLToNull()));
                this[_meta] = meta;
              }
              return _openDone();
            } else {
              this[_checkMainStore]();
              meta = this[_meta];
              return _openDone();
            }
          } catch (e$0) {
            let _ = dart.getThrown(e$0);
            yield this.lockedClose();
            dart.rethrow(e$0);
          }
        }).bind(this)), T$.VoidToFutureL()));
        yield this.flush();
        return this;
      }).bind(this));
    }
    jdbFullImport() {
      return async.async(dart.dynamic, (function* jdbFullImport() {
        let t34, t34$, t34$0;
        this[_jdbRevision] = (yield this[_storageJdb].getRevision());
        let iter = async.StreamIterator.new(this[_storageJdb].entries);
        try {
          while (yield iter.moveNext()) {
            let entry = iter.current;
            {
              let record = new record_impl.ImmutableSembastRecordJdb.new(entry.record, entry.value, {deleted: entry.deleted, revision: entry.id});
              t34 = this[_exportStat];
              t34.lineCount = dart.notNull(t34.lineCount) + 1;
              if (dart.test((t34$ = entry.deleted, t34$ == null ? false : t34$))) {
                t34$0 = this[_exportStat];
                t34$0.obsoleteLineCount = dart.notNull(t34$0.obsoleteLineCount) + 1;
              }
              this.loadRecord(record);
            }
          }
        } finally {
          yield iter.cancel();
        }
      }).bind(this));
    }
    [_notifyLazilyJdbImportResult](result) {
      if (!dart.test(result.delta)) {
        this[_restartListeners]();
      } else {
        this.notifyListeners();
      }
    }
    jdbDeltaImport(revision) {
      return async.async(dart.dynamic, (function* jdbDeltaImport() {
        let result = (yield this.transaction(T$.JdbImportResultL(), dart.fn(txn => async.async(T$.JdbImportResultL(), (function*() {
          return yield this.txnJdbDeltaImport(revision);
        }).bind(this)), T$.TransactionLToFutureLOfJdbImportResultL())));
        this[_notifyLazilyJdbImportResult](result);
      }).bind(this));
    }
    [_addRecordToPendingListenerContent](record) {
      if (dart.test(this.listener.recordHasAnyListener(record.ref))) {
        this[_pendingListenerContent].addRecord(record);
      }
    }
    txnJdbDeltaImport(revision) {
      return async.async(T$.JdbImportResultL(), (function* txnJdbDeltaImport() {
        let t34, t34$, t34$0, t34$1, t34$2;
        let delta = null;
        let minRevision = (t34 = this[_jdbRevision], t34 == null ? 0 : t34);
        let deltaMinRevision = (yield this[_storageJdb].getDeltaMinRevision());
        if (dart.notNull(minRevision) >= dart.notNull(deltaMinRevision)) {
          delta = true;
          let entries = (yield this[_storageJdb].getEntriesAfter((t34$ = minRevision, t34$ == null ? 0 : t34$)));
          if (!dart.test(this[_closed])) {
            for (let entry of entries) {
              if (entry.record != null) {
                let record = new record_impl.ImmutableSembastRecordJdb.new(entry.record, entry.value, {deleted: entry.deleted, revision: entry.id});
                if (dart.test(this.jdbDeltaLoadRecord(record))) {
                  this[_addRecordToPendingListenerContent](record);
                }
              }
            }
            this[_jdbRevision] = revision;
          }
        } else {
          delta = false;
          this[_exportStat] = new database_impl.DatabaseExportStat.new();
          let records = T$.JSArrayOfImmutableSembastRecordJdbL().of([]);
          let iter = async.StreamIterator.new(this[_storageJdb].entries);
          try {
            while (yield iter.moveNext()) {
              let entry = iter.current;
              {
                let record = new record_impl.ImmutableSembastRecordJdb.new(entry.record, entry.value, {deleted: entry.deleted, revision: entry.id});
                t34$0 = this[_exportStat];
                t34$0.lineCount = dart.notNull(t34$0.lineCount) + 1;
                if (dart.test((t34$1 = entry.deleted, t34$1 == null ? false : t34$1))) {
                  t34$2 = this[_exportStat];
                  t34$2.obsoleteLineCount = dart.notNull(t34$2.obsoleteLineCount) + 1;
                }
                records[$add](record);
              }
            }
          } finally {
            yield iter.cancel();
          }
          for (let store of this.stores) {
            store.recordMap[$clear]();
          }
          for (let record of records) {
            this.loadRecord(record);
          }
        }
        return new database_impl.JdbImportResult.new({delta: delta});
      }).bind(this));
    }
    lockedClose() {
      return async.async(dart.dynamic, (function* lockedClose() {
        this[_opened] = false;
        this[_closed] = true;
        if (this[_storageJdb] != null) {
          this[_storageJdb].close();
        }
        yield this.openHelper.lockedCloseDatabase();
      }).bind(this));
    }
    close() {
      return async.async(dart.dynamic, (function* close() {
        let t34;
        t34 = this[_storageJdbRevisionUpdateSubscription];
        t34 == null ? null : t34.cancel();
        this[_storageJdbRevisionUpdateSubscription] = null;
        return this.openHelper.lock.synchronized(dart.dynamic, dart.fn(() => async.async(core.Null, (function*() {
          this.listener.close();
          yield this.flush();
          yield this.lockedClose();
        }).bind(this)), T$.VoidToFutureLOfNull()));
      }).bind(this));
    }
    toJson() {
      let map = new (T$.IdentityMapOfStringL$dynamic()).new();
      if (this.path != null) {
        map[$_set]("path", this.path);
      }
      if (this.version != null) {
        map[$_set]("version", this.version);
      }
      if (this[_stores$] != null) {
        let stores = T$.JSArrayOfMapLOfStringL$dynamic().of([]);
        for (let store of this[_stores$][$values]) {
          stores[$add](store.toJson());
        }
        map[$_set]("stores", stores);
      }
      if (this[_exportStat] != null) {
        map[$_set]("exportStat", this[_exportStat].toJson());
      }
      return map;
    }
    get [_needCompact]() {
      return this[_storageFs] != null && dart.notNull(this[_exportStat].obsoleteLineCount) > 5 && dart.notNull(this[_exportStat].obsoleteLineCount) / dart.notNull(this[_exportStat].lineCount) > 0.2;
    }
    toString() {
      return dart.toString(this.toJson());
    }
    databaseOperation(action) {
      return async.async(dart.dynamic, (function* databaseOperation() {
        if (dart.test(this.lazyStorageOperations[$isEmpty]) && action == null) {
          return;
        }
        yield this.databaseLock.synchronized(core.Null, dart.fn(() => async.async(core.Null, (function*() {
          if (dart.test(this.lazyStorageOperations[$isNotEmpty])) {
            let list = core.List.from(this.lazyStorageOperations);
            for (let operation of list) {
              try {
                yield dart.dcall(operation, []);
              } catch (e$) {
                let e = dart.getThrown(e$);
                core.print("lazy storage err " + dart.str(e));
              }
              this.lazyStorageOperations[$remove](operation);
            }
          }
          if (action != null) {
            yield action();
          }
        }).bind(this)), T$.VoidToFutureLOfNull()));
      }).bind(this));
    }
    transaction(T, action) {
      return async.async(dart.legacy(T), (function* transaction() {
        if (this[_openTransaction] != null) {
          return yield action(this[_openTransaction]);
        }
        let commitData = null;
        let upgrading = this[_upgrading];
        let reloadData = false;
        let jdbIncrementRevisionStatus = null;
        let result = null;
        do {
          if (reloadData) {
            yield this.transactionLock.synchronized(core.Null, dart.fn(() => async.async(core.Null, (function*() {
              let result = (yield this.txnJdbDeltaImport(jdbIncrementRevisionStatus.revision));
              this[_notifyLazilyJdbImportResult](result);
            }).bind(this)), T$.VoidToFutureLOfNull()));
            reloadData = false;
          }
          result = (yield this.transactionLock.synchronized(dart.legacy(T), dart.fn(() => async.async(dart.legacy(T), (function*() {
            let t35, t37, t37$, t37$0, t37$1;
            this[_transaction] = new transaction_impl.SembastTransaction.new(this, this[_txnId] = dart.notNull(this[_txnId]) + 1);
            const _transactionCleanUp = () => {
              let t35, t35$;
              upgrading = false;
              this[_clearTxnData]();
              t35$ = (t35 = this[_transaction], t35 == null ? null : t35.completer);
              t35$ == null ? null : t35$.complete();
              this[_transaction] = null;
            };
            dart.fn(_transactionCleanUp, T$.VoidTovoid());
            let actionResult = null;
            try {
              actionResult = (yield async.Future$(dart.legacy(T)).sync(dart.fn(() => action(this[_transaction]), dart.fnType(dart.legacy(async.FutureOr$(dart.legacy(T))), []))));
              if (this.storageJdb != null) {
                let commitEntries = this[_txnBuildCommitEntries]();
                if (dart.test(commitEntries.hasWriteData) || dart.test(commitEntries.upgrading)) {
                  let entries = T$.JSArrayOfJdbWriteEntryL().of([]);
                  for (let record of commitEntries.txnRecords) {
                    let entry = (t35 = new jdb.JdbWriteEntry.new(), (() => {
                      t35.txnRecord = record;
                      return t35;
                    })());
                    entries[$add](entry);
                  }
                  let infoEntries = (() => {
                    let t35 = T$.JSArrayOfJdbInfoEntryL().of([]);
                    if (dart.test(upgrading)) t35[$add](storage.getMetaInfoEntry(commitEntries.upgradingMeta));
                    return t35;
                  })();
                  this[_txnStoreLastIntKeys][$forEach](dart.fn((store, lastId) => {
                    infoEntries[$add](storage.getStoreLastIntKeyInfoEntry(store, lastId));
                  }, T$.StringLAndintLToNull()));
                  let query = new sembast_jdb.StorageJdbWriteQuery.new({revision: commitEntries.revision, entries: entries, infoEntries: infoEntries});
                  let status = (yield this.storageJdb.writeIfRevision(query));
                  if (!dart.test(status.success)) {
                    reloadData = true;
                    jdbIncrementRevisionStatus = status;
                    _transactionCleanUp();
                  } else {
                    this[_jdbRevision] = status.revision;
                  }
                }
              }
              commitData = this.commitInMemory();
            } catch (e$) {
              let e = dart.getThrown(e$);
              _transactionCleanUp();
              dart.rethrow(e$);
            } finally {
              if (dart.test((t37$ = (t37 = this[_storageFs], t37 == null ? null : t37.supported), t37$ == null ? false : t37$))) {
                let hasRecords = (t37$1 = (t37$0 = commitData, t37$0 == null ? null : t37$0.txnRecords), t37$1 == null ? null : t37$1[$isNotEmpty]) === true;
                if (hasRecords || dart.test(upgrading)) {
                  const postTransaction = () => {
                    return async.async(dart.dynamic, (function* postTransaction() {
                      let t37, t37$, t37$0;
                      if (dart.test(upgrading)) {
                        yield this[_storageFs].appendLine(convert.json.encode(this[_upgradingMeta].toMap()));
                        t37 = this[_exportStat];
                        t37.lineCount = dart.notNull(t37.lineCount) + 1;
                      }
                      if ((t37$0 = (t37$ = commitData, t37$ == null ? null : t37$.txnRecords), t37$0 == null ? null : t37$0[$isNotEmpty]) === true) {
                        yield this.storageCommitRecords(commitData.txnRecords);
                      }
                      if (!dart.test(this[_upgrading]) && dart.test(this[_needCompact])) {
                        yield this.txnCompact();
                      }
                    }).bind(this));
                  };
                  dart.fn(postTransaction, T$.VoidToFutureL());
                  if (dart.test(upgrading)) {
                    yield postTransaction();
                  } else {
                    this.lazyStorageOperations[$add](postTransaction);
                  }
                }
              }
            }
            _transactionCleanUp();
            return actionResult;
          }).bind(this)), dart.fnType(dart.legacy(async.Future$(dart.legacy(T))), []))).whenComplete(dart.fn(() => async.async(core.Null, (function*() {
            this.notifyListenersLazily();
            if (!dart.test(upgrading)) {
              yield this.databaseOperation(null);
            }
          }).bind(this)), T$.VoidToFutureLOfNull())));
        } while (reloadData);
        return result;
      }).bind(this));
    }
    notifyListenersLazily() {
      this.notifyListeners();
    }
    get cooperateOn() {
      let t37, t37$;
      t37$ = (t37 = this.cooperator, t37 == null ? null : t37.cooperateOn);
      return t37$ == null ? false : t37$;
    }
    get needCooperate() {
      return cooperator.cooperateNeeded(this.cooperator);
    }
    cooperate() {
      let t37;
      t37 = this.cooperator;
      return t37 == null ? null : t37.cooperate();
    }
    checkTransaction(transaction) {
      if (transaction != null && !dart.equals(transaction, this.currentTransaction)) {
        dart.throw(new core.StateError.new("The transaction is no longer active. Make sure you (a)wait all pending operations in your transaction block"));
      }
    }
    get sembastDatabase() {
      return this;
    }
    inTransaction(T, action) {
      return this.transaction(dart.legacy(T), dart.fn(txn => action(T$.SembastTransactionL().as(txn)), dart.fnType(dart.legacy(async.FutureOr$(dart.legacy(T))), [T$.TransactionL()])));
    }
    get sembastTransaction() {
      return T$.SembastTransactionL().as(this[_openTransaction]);
    }
    [_restartListeners]() {
      for (let store of this.listener.stores) {
        let storeListener = this.listener.getStore(store);
        storeListener.restart();
      }
    }
    notifyListeners() {
      return async.async(dart.dynamic, (function* notifyListeners() {
        while (true) {
          let storeContent = this[_pendingListenerContent].getAndRemoveFirstStore();
          if (storeContent == null) {
            break;
          }
          let storeListener = this.listener.getStore(storeContent.store);
          if (storeListener != null) {
            yield this.notificationLock.synchronized(core.Null, dart.fn(() => async.async(core.Null, (function*() {
              for (let record of storeContent.records) {
                let ctlrs = storeListener.getRecordControllers(dart.dynamic, dart.dynamic, record.ref);
                if (ctlrs != null) {
                  for (let ctlr of ctlrs) {
                    function _updateRecord() {
                      if (false) {
                        core.print("updating " + dart.str(ctlr) + ": with " + dart.str(record));
                      }
                      if (!dart.test(record.deleted)) {
                        ctlr.add(record);
                      } else {
                        ctlr.add(null);
                      }
                    }
                    dart.fn(_updateRecord, T$.VoidTovoid());
                    if (dart.test(ctlr.hasInitialData)) {
                      _updateRecord();
                    } else {
                      this.notificationLock.synchronized(core.Null, dart.fn(() => async.async(core.Null, function*() {
                        _updateRecord();
                      }), T$.VoidToFutureLOfNull()));
                    }
                  }
                }
              }
              for (let query of T$.ListOfQueryListenerControllerL().from(storeListener.getQueryListenerControllers(dart.dynamic, dart.dynamic))) {
                const _updateQuery = () => {
                  return async.async(dart.dynamic, (function* _updateQuery() {
                    if (false) {
                      core.print("updating " + dart.str(query) + ": with " + dart.str(storeContent.records[$length]) + " records ");
                    }
                    yield query.update(storeContent.records, this.cooperator);
                    if (false) {
                      core.print("updated " + dart.str(query) + ": with " + dart.str(storeContent.records[$length]) + " records ");
                    }
                  }).bind(this));
                };
                dart.fn(_updateQuery, T$.VoidToFutureL());
                if (dart.test(query.hasInitialData)) {
                  yield _updateQuery();
                } else {
                  this.notificationLock.synchronized(core.Null, dart.fn(() => async.async(core.Null, function*() {
                    yield _updateQuery();
                  }), T$.VoidToFutureLOfNull()));
                }
              }
            }).bind(this)), T$.VoidToFutureLOfNull()));
          }
        }
      }).bind(this));
    }
    sanitizeValue(value) {
      if (value == null) {
        return null;
      } else if (T$.numL().is(value) || T$.StringL().is(value) || T$.boolL().is(value)) {
        return value;
      } else if (T$.ListL().is(value)) {
        return value;
      } else if (T$.MapL().is(value)) {
        if (!T$.MapLOfStringL$dynamic().is(value)) {
          return value[$cast](T$.StringL(), dart.dynamic);
        }
        return value;
      }
      if (dart.test(this.openOptions.codec.jsonEncodableCodec.supportsType(value))) {
        return value;
      }
      dart.throw(new core.ArgumentError.value(value, null, "type " + dart.str(dart.runtimeType(value)) + " not supported"));
    }
    get [_jsonCodec]() {
      let t37, t37$, t37$0;
      t37$0 = (t37$ = (t37 = this.openOptions, t37 == null ? null : t37.codec), t37$ == null ? null : t37$.codec);
      return t37$0 == null ? convert.json : t37$0;
    }
    get [_jsonEncodableCodec]() {
      let t37, t37$, t37$0;
      t37$0 = (t37$ = (t37 = this.openOptions, t37 == null ? null : t37.codec), t37$ == null ? null : t37$.jsonEncodableCodec);
      return t37$0 == null ? json_encodable_codec.sembastDefaultJsonEncodableCodec : t37$0;
    }
    toJsonEncodable(value) {
      return this[_jsonEncodableCodec].encode(value);
    }
    fromJsonEncodable(value) {
      return this[_jsonEncodableCodec].decode(value);
    }
    [_check](value, update) {
      if (dart.test(update)) {
        if (dart.test(utils.isBasicTypeFieldValueOrNull(value))) {
          return;
        }
      } else if (dart.test(utils.isBasicTypeOrNull(value))) {
        return;
      }
      if (T$.ListL().is(value)) {
        for (let item of value) {
          this[_check](item, update);
        }
        return;
      } else if (T$.MapL().is(value)) {
        for (let item of value[$values]) {
          this[_check](item, update);
        }
        return;
      }
      if (dart.test(this[_jsonEncodableCodec].supportsType(value))) {
        return;
      }
      dart.throw(new core.ArgumentError.value(value, null, "type " + dart.str(dart.runtimeType(value)) + " not supported"));
    }
    sanitizeInputValue(V, value, opts) {
      let update = opts && 'update' in opts ? opts.update : null;
      update == null ? update = false : null;
      if (dart.test(update) && T$.FieldValueL().is(value)) {
        dart.throw(new core.ArgumentError.value(value, dart.str(value) + " not supported at root"));
      }
      this[_check](value, update);
      if (T$.ListL().is(value)) {
        try {
          return dart.legacy(V).as(value[$cast](dart.dynamic));
        } catch (e$) {
          let e = dart.getThrown(e$);
          dart.throw(new core.ArgumentError.value(value, "type " + dart.str(dart.wrapType(dart.legacy(V))) + " not supported", "List must be of type List<dynamic> for type " + dart.str(dart.runtimeType(value)) + " value " + dart.str(value)));
        }
      } else if (T$.MapL().is(value)) {
        try {
          return dart.legacy(V).as(value[$cast](T$.StringL(), dart.dynamic));
        } catch (e$0) {
          let e = dart.getThrown(e$0);
          dart.throw(new core.ArgumentError.value(value, "type " + dart.str(dart.wrapType(dart.legacy(V))) + " not supported", "Map must be of type Map<String, dynamic> for type " + dart.str(dart.runtimeType(value)) + " value " + dart.str(value)));
        }
      }
      return dart.legacy(V).as(value);
    }
  };
  (database_impl.SembastDatabase.new = function(openHelper, _storageBase = null) {
    this[logV] = log_level.sembastLogLevel == log_level.SembastLogLevel.verbose;
    this[_storageFs] = null;
    this[_storageJdb] = null;
    this[_storageJdbRevisionUpdateSubscription] = null;
    this[_jdbRevision] = null;
    this[databaseLock] = synchronized.Lock.new();
    this[transactionLock] = synchronized.Lock.new();
    this[notificationLock] = synchronized.Lock.new();
    this[listener$] = new listener.DatabaseListener.new();
    this[_txnId] = 0;
    this[_meta] = null;
    this[_upgrading] = false;
    this[_upgradingMeta] = null;
    this[_opened] = false;
    this[_closed] = false;
    this[_openTransaction] = null;
    this[_mainStore] = null;
    this[_stores$] = new (T$.IdentityMapOfStringL$SembastStoreL()).new();
    this[_txnDroppedStores] = T$.JSArrayOfStringL().of([]);
    this[_txnStoreLastIntKeys] = new (T$.IdentityMapOfStringL$intL()).new();
    this[_transaction] = null;
    this[_pendingListenerContent] = new database_content.DatabaseListenerContent.new();
    this[lazyStorageOperations] = T$.JSArrayOfVoidToLFutureL().of([]);
    this[_exportStat] = null;
    this[cooperator$] = dart.test(cooperator.cooperatorDisabled) ? null : cooperator.globalCooperator;
    this[openHelper$] = openHelper;
    this[_storageBase$] = _storageBase;
    if (T$.DatabaseStorageL().is(this[_storageBase$])) {
      this[_storageFs] = T$.DatabaseStorageL().as(this[_storageBase$]);
    } else if (T$.StorageJdbL().is(this[_storageBase$])) {
      this[_storageJdb] = T$.StorageJdbL().as(this[_storageBase$]);
    }
  }).prototype = database_impl.SembastDatabase.prototype;
  dart.addTypeTests(database_impl.SembastDatabase);
  dart.addTypeCaches(database_impl.SembastDatabase);
  database_impl.SembastDatabase[dart.implements] = () => [database$.Database, database_client_impl.SembastDatabaseClient];
  dart.setMethodSignature(database_impl.SembastDatabase, () => ({
    __proto__: dart.getMethods(database_impl.SembastDatabase.__proto__),
    [_clearTxnData]: dart.fnType(dart.void, []),
    txnRollback: dart.fnType(dart.void, [dart.legacy(transaction_impl.SembastTransaction)]),
    [_recordStore]: dart.fnType(dart.legacy(store_impl.SembastStore), [dart.legacy(record_impl.SembastRecord)]),
    setRecordInMemory: dart.fnType(dart.legacy(core.bool), [dart.legacy(record_impl.TxnRecord)]),
    jdbDeltaLoadRecord: dart.fnType(dart.legacy(core.bool), [dart.legacy(record_impl.ImmutableSembastRecordJdb)]),
    loadRecord: dart.fnType(dart.void, [dart.legacy(record_impl.ImmutableSembastRecord)]),
    compact: dart.fnType(dart.legacy(async.Future), []),
    encodeRecordMap: dart.fnType(dart.legacy(core.String), [dart.legacy(core.Map)]),
    decodeRecordLineString: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), [dart.legacy(core.String)]),
    getCurrentStores: dart.fnType(dart.legacy(core.List$(dart.legacy(store_impl.SembastStore))), []),
    getCurrentRecords: dart.fnType(dart.legacy(core.List$(dart.legacy(record_impl.ImmutableSembastRecord))), [dart.legacy(store_impl.SembastStore)]),
    generateUniqueIntKey: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(core.String)]),
    generateUniqueStringKey: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), [dart.legacy(core.String)]),
    txnCompact: dart.fnType(dart.legacy(async.Future), []),
    [_txnBuildCommitEntries]: dart.fnType(dart.legacy(database_impl.CommitEntries), []),
    [_getTxnDatabaseContent]: dart.fnType(dart.legacy(database_content.TxnDatabaseContent), []),
    commitInMemory: dart.fnType(dart.legacy(database_impl.CommitData), []),
    storageCommitRecords: dart.fnType(dart.legacy(async.Future), [dart.legacy(core.List$(dart.legacy(record_impl.TxnRecord)))]),
    txnPutRecords: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(record_impl.ImmutableSembastRecord))))), [dart.legacy(transaction_impl.SembastTransaction), dart.legacy(core.List$(dart.legacy(record_impl.ImmutableSembastRecord)))]),
    txnPutRecord: dart.fnType(dart.legacy(async.Future$(dart.legacy(record_impl.ImmutableSembastRecord))), [dart.legacy(transaction_impl.SembastTransaction), dart.legacy(record_impl.ImmutableSembastRecord)]),
    [_noTxnHasRecord]: dart.fnType(dart.legacy(core.bool), [dart.legacy(record_impl.ImmutableSembastRecord)]),
    reOpen: dart.fnType(dart.legacy(async.Future$(dart.legacy(database$.Database))), [], [dart.legacy(database_factory_mixin.DatabaseOpenOptions)]),
    [_checkMainStore]: dart.fnType(dart.void, []),
    [_addStore]: dart.fnType(dart.legacy(store_impl.SembastStore), [dart.legacy(core.String)]),
    findStore: dart.fnType(dart.legacy(store_impl.SembastStore), [dart.legacy(core.String)]),
    txnFindStore: dart.fnType(dart.legacy(transaction_impl.SembastTransactionStore), [dart.legacy(transaction_impl.SembastTransaction), dart.legacy(core.String)]),
    [_checkOpen]: dart.fnType(dart.void, []),
    getStore: dart.fnType(dart.legacy(store_impl.SembastStore), [dart.legacy(core.String)]),
    getSembastStore: dart.fnType(dart.legacy(store_impl.SembastStore), [dart.legacy(store_ref.StoreRef)]),
    txnGetStore: dart.fnType(dart.legacy(transaction_impl.SembastTransactionStore), [dart.legacy(transaction_impl.SembastTransaction), dart.legacy(core.String)]),
    deleteStore: dart.fnType(dart.legacy(async.Future), [dart.legacy(core.String)]),
    txnDeleteStore: dart.fnType(dart.legacy(async.Future), [dart.legacy(transaction_impl.SembastTransaction), dart.legacy(core.String)]),
    txnUndeleteStore: dart.fnType(dart.void, [dart.legacy(transaction_impl.SembastTransaction), dart.legacy(core.String)]),
    flush: dart.fnType(dart.legacy(async.Future), []),
    open: dart.fnType(dart.legacy(async.Future$(dart.legacy(database$.Database))), [dart.legacy(database_factory_mixin.DatabaseOpenOptions)]),
    jdbFullImport: dart.fnType(dart.legacy(async.Future), []),
    [_notifyLazilyJdbImportResult]: dart.fnType(dart.void, [dart.legacy(database_impl.JdbImportResult)]),
    jdbDeltaImport: dart.fnType(dart.legacy(async.Future), [dart.legacy(core.int)]),
    [_addRecordToPendingListenerContent]: dart.fnType(dart.void, [dart.legacy(record_impl.ImmutableSembastRecord)]),
    txnJdbDeltaImport: dart.fnType(dart.legacy(async.Future$(dart.legacy(database_impl.JdbImportResult))), [dart.legacy(core.int)]),
    lockedClose: dart.fnType(dart.legacy(async.Future), []),
    close: dart.fnType(dart.legacy(async.Future), []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    databaseOperation: dart.fnType(dart.legacy(async.Future), [dart.legacy(dart.fnType(dart.legacy(async.Future), []))]),
    transaction: dart.gFnType(T => [dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(async.FutureOr$(dart.legacy(T))), [dart.legacy(transaction.Transaction)]))]]),
    notifyListenersLazily: dart.fnType(dart.void, []),
    cooperate: dart.fnType(dart.dynamic, []),
    checkTransaction: dart.fnType(dart.void, [dart.legacy(transaction_impl.SembastTransaction)]),
    inTransaction: dart.gFnType(T => [dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(async.FutureOr$(dart.legacy(T))), [dart.legacy(transaction_impl.SembastTransaction)]))]]),
    [_restartListeners]: dart.fnType(dart.void, []),
    notifyListeners: dart.fnType(dart.legacy(async.Future), []),
    sanitizeValue: dart.fnType(dart.dynamic, [dart.dynamic]),
    toJsonEncodable: dart.fnType(dart.dynamic, [dart.dynamic]),
    fromJsonEncodable: dart.fnType(dart.dynamic, [dart.dynamic]),
    [_check]: dart.fnType(dart.void, [dart.dynamic, dart.legacy(core.bool)]),
    sanitizeInputValue: dart.gFnType(V => [dart.legacy(V), [dart.dynamic], {update: dart.legacy(core.bool)}, {}])
  }));
  dart.setGetterSignature(database_impl.SembastDatabase, () => ({
    __proto__: dart.getGetters(database_impl.SembastDatabase.__proto__),
    storageJdb: dart.legacy(storage.StorageJdb),
    path: dart.legacy(core.String),
    version: dart.legacy(core.int),
    openOptions: dart.legacy(database_factory_mixin.DatabaseOpenOptions),
    mainStore: dart.legacy(store_impl.SembastStore),
    stores: dart.legacy(core.Iterable$(dart.legacy(store_impl.SembastStore))),
    storeNames: dart.legacy(core.Iterable$(dart.legacy(core.String))),
    nonEmptyStoreNames: dart.legacy(core.Iterable$(dart.legacy(core.String))),
    currentTransaction: dart.legacy(transaction_impl.SembastTransaction),
    [_needCompact]: dart.legacy(core.bool),
    cooperateOn: dart.legacy(core.bool),
    needCooperate: dart.legacy(core.bool),
    sembastDatabase: dart.legacy(database_impl.SembastDatabase),
    sembastTransaction: dart.legacy(transaction_impl.SembastTransaction),
    [_jsonCodec]: dart.legacy(convert.Codec$(dart.dynamic, dart.legacy(core.String))),
    [_jsonEncodableCodec]: dart.legacy(json_encodable_codec.JsonEncodableCodec)
  }));
  dart.setLibraryUri(database_impl.SembastDatabase, I[18]);
  dart.setFieldSignature(database_impl.SembastDatabase, () => ({
    __proto__: dart.getFields(database_impl.SembastDatabase.__proto__),
    openHelper: dart.fieldType(dart.legacy(database_factory_mixin.DatabaseOpenHelper)),
    logV: dart.finalFieldType(dart.legacy(core.bool)),
    [_storageBase$]: dart.finalFieldType(dart.legacy(storage.StorageBase)),
    [_storageFs]: dart.fieldType(dart.legacy(storage.DatabaseStorage)),
    [_storageJdb]: dart.fieldType(dart.legacy(storage.StorageJdb)),
    [_storageJdbRevisionUpdateSubscription]: dart.fieldType(dart.legacy(async.StreamSubscription$(dart.legacy(core.int)))),
    [_jdbRevision]: dart.fieldType(dart.legacy(core.int)),
    databaseLock: dart.finalFieldType(dart.legacy(synchronized.Lock)),
    transactionLock: dart.finalFieldType(dart.legacy(synchronized.Lock)),
    notificationLock: dart.finalFieldType(dart.legacy(synchronized.Lock)),
    listener: dart.finalFieldType(dart.legacy(listener.DatabaseListener)),
    [_txnId]: dart.fieldType(dart.legacy(core.int)),
    [_meta]: dart.fieldType(dart.legacy(meta$.Meta)),
    [_upgrading]: dart.fieldType(dart.legacy(core.bool)),
    [_upgradingMeta]: dart.fieldType(dart.legacy(meta$.Meta)),
    [_opened]: dart.fieldType(dart.legacy(core.bool)),
    [_closed]: dart.fieldType(dart.legacy(core.bool)),
    [_openTransaction]: dart.fieldType(dart.legacy(transaction.Transaction)),
    [_mainStore]: dart.fieldType(dart.legacy(store_impl.SembastStore)),
    [_stores$]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(store_impl.SembastStore)))),
    [_txnDroppedStores]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    [_txnStoreLastIntKeys]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.int)))),
    [_transaction]: dart.fieldType(dart.legacy(transaction_impl.SembastTransaction)),
    [_pendingListenerContent]: dart.finalFieldType(dart.legacy(database_content.DatabaseListenerContent)),
    lazyStorageOperations: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(dart.fnType(dart.legacy(async.Future), []))))),
    [_exportStat]: dart.fieldType(dart.legacy(database_impl.DatabaseExportStat)),
    cooperator: dart.fieldType(dart.legacy(cooperator.Cooperator))
  }));
  dart.defineExtensionMethods(database_impl.SembastDatabase, ['toString']);
  var lineCount = dart.privateName(database_impl, "DatabaseExportStat.lineCount");
  var obsoleteLineCount = dart.privateName(database_impl, "DatabaseExportStat.obsoleteLineCount");
  var compactCount = dart.privateName(database_impl, "DatabaseExportStat.compactCount");
  database_impl.DatabaseExportStat = class DatabaseExportStat extends core.Object {
    get lineCount() {
      return this[lineCount];
    }
    set lineCount(value) {
      this[lineCount] = value;
    }
    get obsoleteLineCount() {
      return this[obsoleteLineCount];
    }
    set obsoleteLineCount(value) {
      this[obsoleteLineCount] = value;
    }
    get compactCount() {
      return this[compactCount];
    }
    set compactCount(value) {
      this[compactCount] = value;
    }
    toJson() {
      let map = new (T$.IdentityMapOfStringL$dynamic()).new();
      if (this.lineCount != null) {
        map[$_set]("lineCount", this.lineCount);
      }
      if (this.obsoleteLineCount != null) {
        map[$_set]("obsoleteLineCount", this.obsoleteLineCount);
      }
      if (this.compactCount != null) {
        map[$_set]("compactCount", this.compactCount);
      }
      return map;
    }
    toString() {
      return dart.toString(this.toJson());
    }
  };
  (database_impl.DatabaseExportStat.new = function() {
    this[lineCount] = 0;
    this[obsoleteLineCount] = 0;
    this[compactCount] = 0;
    ;
  }).prototype = database_impl.DatabaseExportStat.prototype;
  (database_impl.DatabaseExportStat.fromJson = function(map) {
    this[lineCount] = 0;
    this[obsoleteLineCount] = 0;
    this[compactCount] = 0;
    if (map[$_get]("lineCount") != null) {
      this.lineCount = T$.intL().as(map[$_get]("lineCount"));
    }
    if (map[$_get]("compactCount") != null) {
      this.compactCount = T$.intL().as(map[$_get]("compactCount"));
    }
    if (map[$_get]("obsoleteLineCount") != null) {
      this.obsoleteLineCount = T$.intL().as(map[$_get]("obsoleteLineCount"));
    }
  }).prototype = database_impl.DatabaseExportStat.prototype;
  dart.addTypeTests(database_impl.DatabaseExportStat);
  dart.addTypeCaches(database_impl.DatabaseExportStat);
  dart.setMethodSignature(database_impl.DatabaseExportStat, () => ({
    __proto__: dart.getMethods(database_impl.DatabaseExportStat.__proto__),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(database_impl.DatabaseExportStat, I[18]);
  dart.setFieldSignature(database_impl.DatabaseExportStat, () => ({
    __proto__: dart.getFields(database_impl.DatabaseExportStat.__proto__),
    lineCount: dart.fieldType(dart.legacy(core.int)),
    obsoleteLineCount: dart.fieldType(dart.legacy(core.int)),
    compactCount: dart.fieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(database_impl.DatabaseExportStat, ['toString']);
  var delta$ = dart.privateName(database_impl, "JdbImportResult.delta");
  database_impl.JdbImportResult = class JdbImportResult extends core.Object {
    get delta() {
      return this[delta$];
    }
    set delta(value) {
      super.delta = value;
    }
  };
  (database_impl.JdbImportResult.new = function(opts) {
    let delta = opts && 'delta' in opts ? opts.delta : null;
    this[delta$] = delta;
    ;
  }).prototype = database_impl.JdbImportResult.prototype;
  dart.addTypeTests(database_impl.JdbImportResult);
  dart.addTypeCaches(database_impl.JdbImportResult);
  dart.setLibraryUri(database_impl.JdbImportResult, I[18]);
  dart.setFieldSignature(database_impl.JdbImportResult, () => ({
    __proto__: dart.getFields(database_impl.JdbImportResult.__proto__),
    delta: dart.finalFieldType(dart.legacy(core.bool))
  }));
  database_impl.getDatabase = function getDatabase(database) {
    return T$.SembastDatabaseL().as(database);
  };
  dart.defineLazy(database_impl, {
    /*database_impl._debugStorage*/get _debugStorage() {
      return false;
    }
  }, true);
  database_client_impl.SembastDatabaseClient = class SembastDatabaseClient extends core.Object {};
  (database_client_impl.SembastDatabaseClient.new = function() {
    ;
  }).prototype = database_client_impl.SembastDatabaseClient.prototype;
  dart.addTypeTests(database_client_impl.SembastDatabaseClient);
  dart.addTypeCaches(database_client_impl.SembastDatabaseClient);
  dart.setLibraryUri(database_client_impl.SembastDatabaseClient, I[20]);
  database_client_impl.getClient = function getClient(client) {
    return T$.SembastDatabaseClientL().as(client);
  };
  var sembastDatabase$ = dart.privateName(transaction_impl, "SembastTransaction.sembastDatabase");
  var completer = dart.privateName(transaction_impl, "SembastTransaction.completer");
  var _id$ = dart.privateName(transaction_impl, "_id");
  transaction_impl.SembastTransaction = class SembastTransaction extends core.Object {
    get sembastDatabase() {
      return this[sembastDatabase$];
    }
    set sembastDatabase(value) {
      super.sembastDatabase = value;
    }
    get completer() {
      return this[completer];
    }
    set completer(value) {
      this[completer] = value;
    }
    get id() {
      return this[_id$];
    }
    get isCompleted() {
      return this.completer.isCompleted;
    }
    get completed() {
      return this.completer.future;
    }
    toString() {
      return "txn " + dart.str(this[_id$]) + (dart.test(this.completer.isCompleted) ? " completed" : "");
    }
    toExecutor(store) {
      return store != null ? new transaction_impl.SembastTransactionStore.new(this, store) : null;
    }
    deleteStore(storeName) {
      return this.database.txnDeleteStore(this, storeName);
    }
    get database() {
      return this.sembastDatabase;
    }
    inTransaction(T, action) {
      return async.async(dart.legacy(T), (function* inTransaction() {
        return action(this);
      }).bind(this));
    }
    get sembastTransaction() {
      return this;
    }
    getSembastStore(ref) {
      return this.database.txnGetStore(this, ref.name).store;
    }
  };
  (transaction_impl.SembastTransaction.new = function(sembastDatabase, _id) {
    this[completer] = async.Completer.new();
    this[sembastDatabase$] = sembastDatabase;
    this[_id$] = _id;
    ;
  }).prototype = transaction_impl.SembastTransaction.prototype;
  dart.addTypeTests(transaction_impl.SembastTransaction);
  dart.addTypeCaches(transaction_impl.SembastTransaction);
  transaction_impl.SembastTransaction[dart.implements] = () => [transaction.Transaction, database_client_impl.SembastDatabaseClient];
  dart.setMethodSignature(transaction_impl.SembastTransaction, () => ({
    __proto__: dart.getMethods(transaction_impl.SembastTransaction.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    toExecutor: dart.fnType(dart.legacy(transaction_impl.SembastTransactionStore), [dart.legacy(store_impl.SembastStore)]),
    deleteStore: dart.fnType(dart.legacy(async.Future), [dart.legacy(core.String)]),
    inTransaction: dart.gFnType(T => [dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(async.FutureOr$(dart.legacy(T))), [dart.legacy(transaction_impl.SembastTransaction)]))]]),
    getSembastStore: dart.fnType(dart.legacy(store_impl.SembastStore), [dart.legacy(store_ref.StoreRef)])
  }));
  dart.setGetterSignature(transaction_impl.SembastTransaction, () => ({
    __proto__: dart.getGetters(transaction_impl.SembastTransaction.__proto__),
    id: dart.legacy(core.int),
    isCompleted: dart.legacy(core.bool),
    completed: dart.legacy(async.Future),
    database: dart.legacy(database_impl.SembastDatabase),
    sembastTransaction: dart.legacy(transaction_impl.SembastTransaction)
  }));
  dart.setLibraryUri(transaction_impl.SembastTransaction, I[21]);
  dart.setFieldSignature(transaction_impl.SembastTransaction, () => ({
    __proto__: dart.getFields(transaction_impl.SembastTransaction.__proto__),
    sembastDatabase: dart.finalFieldType(dart.legacy(database_impl.SembastDatabase)),
    [_id$]: dart.finalFieldType(dart.legacy(core.int)),
    completer: dart.fieldType(dart.legacy(async.Completer))
  }));
  dart.defineExtensionMethods(transaction_impl.SembastTransaction, ['toString']);
  var sembastTransaction$ = dart.privateName(transaction_impl, "SembastTransactionStore.sembastTransaction");
  var store$3 = dart.privateName(transaction_impl, "SembastTransactionStore.store");
  transaction_impl.SembastTransactionStore = class SembastTransactionStore extends core.Object {
    get sembastTransaction() {
      return this[sembastTransaction$];
    }
    set sembastTransaction(value) {
      super.sembastTransaction = value;
    }
    get store() {
      return this[store$3];
    }
    set store(value) {
      super.store = value;
    }
    toString() {
      return dart.str(this.store);
    }
  };
  (transaction_impl.SembastTransactionStore.new = function(sembastTransaction, store) {
    this[sembastTransaction$] = sembastTransaction;
    this[store$3] = store;
    ;
  }).prototype = transaction_impl.SembastTransactionStore.prototype;
  dart.addTypeTests(transaction_impl.SembastTransactionStore);
  dart.addTypeCaches(transaction_impl.SembastTransactionStore);
  dart.setMethodSignature(transaction_impl.SembastTransactionStore, () => ({
    __proto__: dart.getMethods(transaction_impl.SembastTransactionStore.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(transaction_impl.SembastTransactionStore, I[21]);
  dart.setFieldSignature(transaction_impl.SembastTransactionStore, () => ({
    __proto__: dart.getFields(transaction_impl.SembastTransactionStore.__proto__),
    sembastTransaction: dart.finalFieldType(dart.legacy(transaction_impl.SembastTransaction)),
    store: dart.finalFieldType(dart.legacy(store_impl.SembastStore))
  }));
  dart.defineExtensionMethods(transaction_impl.SembastTransactionStore, ['toString']);
  var database$1 = dart.privateName(store_impl, "SembastStore.database");
  var ref = dart.privateName(store_impl, "SembastStore.ref");
  var lastIntKey = dart.privateName(store_impl, "SembastStore.lastIntKey");
  var recordMap = dart.privateName(store_impl, "SembastStore.recordMap");
  var txnRecords$ = dart.privateName(store_impl, "SembastStore.txnRecords");
  var _hasTransactionRecords = dart.privateName(store_impl, "_hasTransactionRecords");
  store_impl.SembastStore = class SembastStore extends core.Object {
    get database() {
      return this[database$1];
    }
    set database(value) {
      super.database = value;
    }
    get ref() {
      return this[ref];
    }
    set ref(value) {
      super.ref = value;
    }
    get lastIntKey() {
      return this[lastIntKey];
    }
    set lastIntKey(value) {
      this[lastIntKey] = value;
    }
    get recordMap() {
      return this[recordMap];
    }
    set recordMap(value) {
      this[recordMap] = value;
    }
    get txnRecords() {
      return this[txnRecords$];
    }
    set txnRecords(value) {
      this[txnRecords$] = value;
    }
    get name() {
      return this.ref.name;
    }
    checkTransaction(transaction) {
      return this.database.checkTransaction(transaction);
    }
    get currentTransaction() {
      return this.database.currentTransaction;
    }
    transaction(T, action) {
      return this.database.transaction(dart.legacy(T), action);
    }
    txnPut(txn, value, key, opts) {
      let merge = opts && 'merge' in opts ? opts.merge : null;
      return async.async(dart.dynamic, (function* txnPut() {
        yield this.cooperate();
        return this.txnPutSync(txn, value, key, {merge: merge});
      }).bind(this));
    }
    txnGenerateUniqueIntKey(txn) {
      return async.async(T$.intL(), (function* txnGenerateUniqueIntKey() {
        let key = null;
        do {
          key = (yield this.database.generateUniqueIntKey(this.name));
          key == null ? key = this.lastIntKey = dart.notNull(this.lastIntKey) + 1 : null;
        } while (dart.test(yield this.txnRecordExists(txn, key)));
        return key;
      }).bind(this));
    }
    txnGenerateUniqueStringKey(txn) {
      return async.async(T$.StringL(), (function* txnGenerateUniqueStringKey() {
        let key = null;
        do {
          key = (yield this.database.generateUniqueStringKey(this.name));
          key == null ? key = key_utils.generateStringKey() : null;
        } while (dart.test(yield this.txnRecordExists(txn, key)));
        return key;
      }).bind(this));
    }
    txnAdd(K, V, txn, value, key = null) {
      return async.async(dart.legacy(K), (function* txnAdd() {
        yield this.cooperate();
        if (key == null) {
          if (dart.wrapType(dart.legacy(K))._equals(dart.wrapType(core.String))) {
            key = dart.legacy(K).as(yield this.txnGenerateUniqueStringKey(txn));
          } else {
            let intKey = (yield this.txnGenerateUniqueIntKey(txn));
            try {
              key = dart.legacy(K).as(intKey);
            } catch (e$) {
              let e = dart.getThrown(e$);
              dart.throw(new core.ArgumentError.new("Invalid key type " + dart.str(dart.wrapType(dart.legacy(K))) + " for generating a key. You should either use String or int or generate the key yourself."));
            }
          }
        } else if (dart.test(yield this.txnRecordExists(txn, key))) {
          return null;
        }
        yield this.txnPutSync(txn, value, key);
        return key;
      }).bind(this));
    }
    txnPutSync(txn, value, key, opts) {
      let merge = opts && 'merge' in opts ? opts.merge : null;
      return async.async(dart.dynamic, (function* txnPutSync() {
        let t40;
        let record = null;
        if (merge === true) {
          record = this.txnGetRecordSync(txn, key);
          value = utils.mergeValue((t40 = record, t40 == null ? null : t40.value), value, {allowDotsInKeys: true});
        } else {
          value = utils.cloneValue(value);
        }
        record = new record_impl.ImmutableSembastRecord.new(this.ref.record(key), value);
        record = this.txnPutRecordSync(txn, record);
        if (dart.test(this.database.logV)) {
          core.print(dart.str(txn) + " put " + dart.str(record));
        }
        return record.value;
      }).bind(this));
    }
    txnPutAll(txn, values, keys, opts) {
      let merge = opts && 'merge' in opts ? opts.merge : null;
      return async.async(T$.ListL(), (function* txnPutAll() {
        let resultValues = [];
        for (let i = 0; i < dart.notNull(values[$length]); i = i + 1) {
          resultValues[$add](yield this.txnPut(txn, values[$_get](i), keys[$_get](i), {merge: merge}));
        }
        return resultValues;
      }).bind(this));
    }
    txnAddAll(txn, values, keys) {
      return async.async(T$.ListL(), (function* txnAddAll() {
        let resultKeys = [];
        for (let i = 0; i < dart.notNull(values[$length]); i = i + 1) {
          resultKeys[$add](yield this.txnAdd(dart.dynamic, dart.dynamic, txn, values[$_get](i), keys[$_get](i)));
        }
        return resultKeys;
      }).bind(this));
    }
    txnUpdate(txn, value, key) {
      return async.async(dart.dynamic, (function* txnUpdate() {
        yield this.cooperate();
        let existingRecord = this.txnGetRecordSync(txn, key);
        if (existingRecord == null) {
          return null;
        }
        let mergedValue = utils.mergeValue(existingRecord.value, value);
        let record = new record_impl.ImmutableSembastRecord.new(this.ref.record(key), mergedValue);
        this.txnPutRecordSync(txn, record);
        if (dart.test(this.database.logV)) {
          core.print(dart.str(txn) + " update " + dart.str(record));
        }
        return record.value;
      }).bind(this));
    }
    txnGetStream(K, V, transaction, filter) {
      let ctlr = null;
      ctlr = async.StreamController$(dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V)))).new({onListen: dart.fn(() => {
          this.forEachRecords(transaction, finder.Finder.new({filter: filter}), dart.fn(record => {
            if (dart.test(ctlr.isClosed)) {
              return false;
            }
            ctlr.add(record.cast(dart.legacy(K), dart.legacy(V)));
            return true;
          }, T$.ImmutableSembastRecordLToboolL())).whenComplete(dart.fn(() => {
            ctlr.close();
          }, T$.VoidToNull()));
        }, T$.VoidToNull())});
      return ctlr.stream;
    }
    get currentRecords() {
      let t40;
      t40 = this.recordMap[$values];
      return t40 == null ? null : t40[$toList]({growable: false});
    }
    get txnCurrentRecords() {
      let t40, t40$, t40$0;
      t40$0 = (t40$ = (t40 = this.txnRecords, t40 == null ? null : t40[$values]), t40$ == null ? null : t40$[$map](T$.ImmutableSembastRecordL(), dart.fn(txnRecord => txnRecord.record, T$.TxnRecordLToImmutableSembastRecordL())));
      return t40$0 == null ? null : t40$0[$toList]({growable: false});
    }
    get currentTxnRecords() {
      return this.txnRecords == null ? null : T$.ListOfTxnRecordL().from(this.txnRecords[$values], {growable: false});
    }
    forEachRecords(txn, finder, action) {
      return async.async(dart.dynamic, (function* forEachRecords() {
        function _finderMatchesRecord(finder, record) {
          if (dart.test(record.deleted)) {
            return false;
          }
          let sembastFinder = T$.SembastFinderL().as(finder);
          return finder_impl.finderMatchesFilterAndBoundaries(sembastFinder, record);
        }
        dart.fn(_finderMatchesRecord, T$.FinderLAndImmutableSembastRecordLToboolL());
        if (dart.test(this[_hasTransactionRecords](txn))) {
          let records = this.txnCurrentRecords;
          for (let record of records) {
            if (dart.test(this.needCooperate)) {
              yield this.cooperate();
            }
            if (dart.test(_finderMatchesRecord(finder, record))) {
              if (action(record) === false) {
                return;
              }
            }
          }
        }
        let records = this.currentRecords;
        for (let record of records) {
          if (dart.test(this.needCooperate)) {
            yield this.cooperate();
          }
          if (dart.test(this[_hasTransactionRecords](txn))) {
            if (dart.test(this.txnRecords[$keys][$contains](record.key))) {
              continue;
            }
          }
          if (dart.test(_finderMatchesRecord(finder, record))) {
            if (action(record) === false) {
              return;
            }
          }
        }
      }).bind(this));
    }
    txnFindKey(txn, finder) {
      return async.async(dart.dynamic, (function* txnFindKey() {
        let t40;
        t40 = (yield this.txnFindRecord(txn, finder));
        return t40 == null ? null : t40.key;
      }).bind(this));
    }
    txnFindRecord(txn, finder) {
      return async.async(T$.ImmutableSembastRecordL(), (function* txnFindRecord() {
        finder = finder_impl.cloneFinderFindFirst(finder);
        let records = (yield this.txnFindRecords(txn, finder));
        if (dart.test(records[$isNotEmpty])) {
          return records[$first];
        }
        return null;
      }).bind(this));
    }
    txnFindRecords(txn, finder) {
      return async.async(T$.ListLOfImmutableSembastRecordL(), (function* txnFindRecords() {
        let t40, t40$, t40$0;
        let results = null;
        let preOrderedResults = null;
        let sembastFinder = T$.SembastFinderL().as(finder);
        let hasSortOrder = (t40$0 = (t40$ = (t40 = sembastFinder, t40 == null ? null : t40.sortOrders), t40$ == null ? null : t40$[$isNotEmpty]), t40$0 == null ? false : t40$0);
        let usePreordered = !dart.test(hasSortOrder);
        let preorderedCurrentOffset = null;
        if (usePreordered) {
          preOrderedResults = new (T$.SplayTreeMapOfdynamic$ImmutableSembastRecordL()).new(C[3] || CT.C3);
        } else {
          results = T$.JSArrayOfImmutableSembastRecordL().of([]);
        }
        function addRecord(record) {
          let t40, t40$, t40$0;
          if (usePreordered) {
            if ((t40 = sembastFinder, t40 == null ? null : t40.offset) != null) {
              preorderedCurrentOffset == null ? preorderedCurrentOffset = 0 : null;
              if (dart.notNull((t40$ = preorderedCurrentOffset, preorderedCurrentOffset = dart.notNull(t40$) + 1, t40$)) < dart.notNull(sembastFinder.offset)) {
                return true;
              }
            }
            if ((t40$0 = sembastFinder, t40$0 == null ? null : t40$0.limit) != null) {
              if (dart.notNull(preOrderedResults.length) >= dart.notNull(sembastFinder.limit) - 1) {
                preOrderedResults._set(record.key, record);
                return false;
              }
            }
            preOrderedResults._set(record.key, record);
          } else {
            results[$add](record);
          }
          return true;
        }
        dart.fn(addRecord, T$.ImmutableSembastRecordLToboolL());
        yield this.forEachRecords(txn, sembastFinder, addRecord);
        if (usePreordered) {
          results = preOrderedResults.values[$toList]({growable: false});
        }
        if (finder != null) {
          if (dart.test(hasSortOrder)) {
            if (dart.test(this.cooperateOn)) {
              let sort = new sort$.Sort.new(this.database.cooperator);
              yield sort.sort(T$.ImmutableSembastRecordL(), results, dart.fn((record1, record2) => sembastFinder.compareThenKey(record1, record2), T$.SembastRecordLAndSembastRecordLTointL()));
            } else {
              results[$sort](dart.fn((record1, record2) => sembastFinder.compareThenKey(record1, record2), T$.ImmutableSembastRecordLAndImmutableSembastRecordLTointL()));
            }
            results = finder_impl.recordsLimit(results, sembastFinder);
          }
        } else {
        }
        return results;
      }).bind(this));
    }
    txnFindKeys(txn, finder) {
      return async.async(T$.ListL(), (function* txnFindKeys() {
        let records = (yield this.txnFindRecords(txn, finder));
        return records[$map](dart.dynamic, dart.fn(record => record.key, T$.SembastRecordLTodynamic()))[$toList]();
      }).bind(this));
    }
    setRecordInMemory(record) {
      let exists = this.recordMap[$_get](record.key) != null;
      if (dart.test(record.deleted)) {
        this.recordMap[$remove](record.key);
      } else {
        this.recordMap[$_set](record.key, record);
      }
      return exists;
    }
    loadRecord(record) {
      let key = record.key;
      this.setRecordInMemory(record);
      if (T$.intL().is(key)) {
        if (dart.notNull(key) > dart.notNull(this.lastIntKey)) {
          this.lastIntKey = key;
        }
      }
    }
    txnPutRecord(txn, record) {
      return async.async(T$.ImmutableSembastRecordL(), (function* txnPutRecord() {
        yield this.cooperate();
        return this.txnPutRecordSync(txn, record);
      }).bind(this));
    }
    txnPutRecordSync(txn, record) {
      let sembastRecord = null;
      if (this.database.storageJdb != null) {
        sembastRecord = record_impl.makeImmutableRecordJdb(record);
      } else {
        sembastRecord = record;
      }
      if (sembastRecord.key == null) {
        sembastRecord.ref = this.ref.record(this.lastIntKey = dart.notNull(this.lastIntKey) + 1);
      } else {
        let recordKey = sembastRecord.key;
        if (T$.intL().is(recordKey)) {
          let intKey = recordKey;
          if (dart.notNull(intKey) > dart.notNull(this.lastIntKey)) {
            this.lastIntKey = intKey;
          }
        }
      }
      this.checkTransaction(txn);
      this.txnRecords == null ? this.txnRecords = new (T$.LinkedMapOfdynamic$TxnRecordL()).new() : null;
      this.txnRecords[$_set](sembastRecord.key, new record_impl.TxnRecord.new(sembastRecord));
      this.database.txnUndeleteStore(txn, sembastRecord.ref.store.name);
      return sembastRecord;
    }
    txnGetImmutableRecordSync(txn, key) {
      let t40;
      let record = null;
      this.checkTransaction(txn);
      if (dart.test(this[_hasTransactionRecords](txn))) {
        record = (t40 = this.txnRecords[$_get](key), t40 == null ? null : t40.record);
      }
      record == null ? record = this.recordMap[$_get](key) : null;
      if (dart.test(this.database.logV)) {
        core.print(dart.str(this.database.currentTransaction) + " get " + dart.str(record) + " key " + dart.str(key));
      }
      return record;
    }
    txnGetRecord(txn, key) {
      return async.async(T$.ImmutableSembastRecordL(), (function* txnGetRecord() {
        let record = this.txnGetRecordSync(txn, key);
        if (dart.test(this.needCooperate)) {
          yield this.cooperate();
        }
        return record;
      }).bind(this));
    }
    txnRecordExists(txn, key) {
      return async.async(T$.boolL(), (function* txnRecordExists() {
        let t40;
        let record = this.txnGetImmutableRecordSync(txn, key);
        if (dart.test(this.needCooperate)) {
          yield this.cooperate();
        }
        return (t40 = record, t40 == null ? null : t40.deleted) === false;
      }).bind(this));
    }
    txnGetRecordSync(txn, key) {
      let record = this.txnGetImmutableRecordSync(txn, key);
      if (record == null || dart.test(record.deleted)) {
        return null;
      }
      return record;
    }
    txnGetRecordsCompat(txn, keys) {
      return async.async(T$.ListLOfImmutableSembastRecordL(), (function* txnGetRecordsCompat() {
        let records = T$.JSArrayOfImmutableSembastRecordL().of([]);
        for (let key of keys) {
          let record = this.txnGetImmutableRecordSync(txn, key);
          if (record != null) {
            if (!dart.test(record.deleted)) {
              records[$add](record);
            } else {
              records[$add](null);
            }
          } else {
            records[$add](null);
          }
          if (dart.test(this.needCooperate)) {
            yield this.cooperate();
          }
        }
        return records;
      }).bind(this));
    }
    txnGetRecordSnapshots(K, V, txn, refs) {
      return async.async(dart.legacy(core.List$(dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V))))), (function* txnGetRecordSnapshots() {
        let snapshots = _interceptors.JSArray$(dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V)))).of([]);
        for (let key of refs.keys) {
          let immutable = this.txnGetImmutableRecordSync(txn, key);
          if (immutable != null && !dart.test(immutable.deleted)) {
            snapshots[$add](new (record_snapshot_impl.SembastRecordSnapshot$(dart.legacy(K), dart.legacy(V))).fromRecord(immutable));
          } else {
            snapshots[$add](null);
          }
          if (dart.test(this.needCooperate)) {
            yield this.cooperate();
          }
        }
        return snapshots;
      }).bind(this));
    }
    txnGet(txn, key) {
      return async.async(dart.dynamic, (function* txnGet() {
        let t40;
        let record = (yield this.txnGetRecord(txn, key));
        t40 = record;
        return t40 == null ? null : t40.value;
      }).bind(this));
    }
    txnCount(txn, filter) {
      return async.async(T$.intL(), (function* txnCount() {
        let count = 0;
        if (filter == null) {
          count = count + dart.notNull(this.recordMap[$length]);
          if (dart.test(this[_hasTransactionRecords](txn))) {
            this.txnRecords[$forEach](dart.fn((key, value) => {
              let t40;
              let deleted = (t40 = value.deleted, t40 == null ? false : t40);
              if (dart.test(this.recordMap[$containsKey](key))) {
                if (dart.test(deleted)) {
                  count = count - 1;
                }
              } else {
                if (!dart.test(deleted)) {
                  count = count + 1;
                }
              }
            }, T$.dynamicAndTxnRecordLToNull()));
          }
        } else {
          yield this.forEachRecords(txn, finder.Finder.new({filter: filter}), dart.fn(record => {
            count = count + 1;
            return true;
          }, T$.ImmutableSembastRecordLToboolL()));
        }
        return count;
      }).bind(this));
    }
    txnDelete(txn, key) {
      return async.async(dart.dynamic, (function* txnDelete() {
        let record = this.txnGetImmutableRecordSync(txn, key);
        yield this.cooperate();
        if (record == null) {
          return null;
        } else {
          let clone = record.sembastCloneAsDeleted();
          yield this.txnPutRecord(txn, clone);
          return record.key;
        }
      }).bind(this));
    }
    txnDeleteAll(txn, keys) {
      return async.async(T$.ListL(), (function* txnDeleteAll() {
        let updates = T$.JSArrayOfImmutableSembastRecordL().of([]);
        let deletedKeys = [];
        keys = core.List.from(keys, {growable: false});
        for (let key of keys) {
          yield this.cooperate();
          let record = this.txnGetImmutableRecordSync(txn, key);
          if (record != null && !dart.test(record.deleted)) {
            let clone = record.sembastCloneAsDeleted();
            updates[$add](clone);
            deletedKeys[$add](key);
          } else {
            deletedKeys[$add](null);
          }
        }
        if (dart.test(updates[$isNotEmpty])) {
          yield this.database.txnPutRecords(txn, updates);
        }
        return deletedKeys;
      }).bind(this));
    }
    txnUpdateAll(txn, values, keys) {
      return async.async(T$.ListL(), (function* txnUpdateAll() {
        let resultValues = [];
        for (let i = 0; i < dart.notNull(values[$length]); i = i + 1) {
          resultValues[$add](yield this.txnUpdate(txn, values[$_get](i), keys[$_get](i)));
        }
        return resultValues;
      }).bind(this));
    }
    [_hasTransactionRecords](txn) {
      return txn != null && dart.equals(txn, this.currentTransaction) && this.txnRecords != null;
    }
    txnContainsKey(txn, key) {
      if (dart.test(this.recordMap[$containsKey](key))) {
        return true;
      } else if (dart.test(this[_hasTransactionRecords](txn))) {
        return this.txnRecords[$containsKey](key);
      } else {
        return false;
      }
    }
    rollback() {
      this.txnRecords = null;
    }
    toJson() {
      let map = new (T$.IdentityMapOfStringL$dynamic()).new();
      if (this.name != null) {
        map[$_set]("name", this.name);
      }
      if (this.recordMap != null) {
        map[$_set]("count", this.recordMap[$length]);
      }
      return map;
    }
    toString() {
      return dart.str(this.name);
    }
    txnClear(txn, opts) {
      let finder = opts && 'finder' in opts ? opts.finder : null;
      return async.async(T$.ListL(), (function* txnClear() {
        if (finder == null) {
          let deletedKeys = [];
          if (dart.test(this[_hasTransactionRecords](txn))) {
            deletedKeys[$addAll](yield this.txnDeleteAll(txn, core.List.from(this.txnRecords[$keys], {growable: false})));
          }
          let keys = this.recordMap[$keys];
          deletedKeys[$addAll](yield this.txnDeleteAll(txn, core.List.from(keys, {growable: false})));
          return deletedKeys;
        } else {
          let keys = (yield this.txnFindKeys(txn, finder));
          return yield this.txnDeleteAll(txn, core.List.from(keys, {growable: false}));
        }
      }).bind(this));
    }
    txnUpdateWhere(txn, value, opts) {
      let finder = opts && 'finder' in opts ? opts.finder : null;
      return async.async(T$.ListL(), (function* txnUpdateWhere() {
        let keys = (yield this.txnFindKeys(txn, finder));
        for (let key of keys) {
          yield this.txnPut(txn, value, key, {merge: true});
        }
        return keys;
      }).bind(this));
    }
    get needCooperate() {
      return this.database.needCooperate;
    }
    get cooperateOn() {
      return this.database.cooperateOn;
    }
    cooperate() {
      return this.database.cooperate();
    }
  };
  (store_impl.SembastStore.new = function(database, name) {
    this[lastIntKey] = 0;
    this[recordMap] = new (T$.SplayTreeMapOfdynamic$ImmutableSembastRecordL()).new(C[3] || CT.C3);
    this[txnRecords$] = null;
    this[database$1] = database;
    this[ref] = store_ref.StoreRef.new(name);
    ;
  }).prototype = store_impl.SembastStore.prototype;
  dart.addTypeTests(store_impl.SembastStore);
  dart.addTypeCaches(store_impl.SembastStore);
  dart.setMethodSignature(store_impl.SembastStore, () => ({
    __proto__: dart.getMethods(store_impl.SembastStore.__proto__),
    checkTransaction: dart.fnType(dart.void, [dart.legacy(transaction_impl.SembastTransaction)]),
    transaction: dart.gFnType(T => [dart.legacy(async.Future$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(async.FutureOr$(dart.legacy(T))), [dart.legacy(transaction.Transaction)]))]]),
    txnPut: dart.fnType(dart.legacy(async.Future), [dart.legacy(transaction_impl.SembastTransaction), dart.dynamic, dart.dynamic], {merge: dart.legacy(core.bool)}, {}),
    txnGenerateUniqueIntKey: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(transaction_impl.SembastTransaction)]),
    txnGenerateUniqueStringKey: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.String))), [dart.legacy(transaction_impl.SembastTransaction)]),
    txnAdd: dart.gFnType((K, V) => [dart.legacy(async.Future$(dart.legacy(K))), [dart.legacy(transaction_impl.SembastTransaction), dart.dynamic], [dart.legacy(K)]]),
    txnPutSync: dart.fnType(dart.legacy(async.Future), [dart.legacy(transaction_impl.SembastTransaction), dart.dynamic, dart.dynamic], {merge: dart.legacy(core.bool)}, {}),
    txnPutAll: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List))), [dart.legacy(transaction_impl.SembastTransaction), dart.legacy(core.List), dart.legacy(core.List)], {merge: dart.legacy(core.bool)}, {}),
    txnAddAll: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List))), [dart.legacy(transaction_impl.SembastTransaction), dart.legacy(core.List), dart.legacy(core.List)]),
    txnUpdate: dart.fnType(dart.legacy(async.Future), [dart.legacy(transaction_impl.SembastTransaction), dart.dynamic, dart.dynamic]),
    txnGetStream: dart.gFnType((K, V) => [dart.legacy(async.Stream$(dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V))))), [dart.legacy(transaction_impl.SembastTransaction), dart.legacy(filter.Filter)]]),
    forEachRecords: dart.fnType(dart.legacy(async.Future), [dart.legacy(transaction_impl.SembastTransaction), dart.legacy(finder.Finder), dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(record_impl.ImmutableSembastRecord)]))]),
    txnFindKey: dart.fnType(dart.legacy(async.Future), [dart.legacy(transaction_impl.SembastTransaction), dart.legacy(finder.Finder)]),
    txnFindRecord: dart.fnType(dart.legacy(async.Future$(dart.legacy(record_impl.ImmutableSembastRecord))), [dart.legacy(transaction_impl.SembastTransaction), dart.legacy(finder.Finder)]),
    txnFindRecords: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(record_impl.ImmutableSembastRecord))))), [dart.legacy(transaction_impl.SembastTransaction), dart.legacy(finder.Finder)]),
    txnFindKeys: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List))), [dart.legacy(transaction_impl.SembastTransaction), dart.legacy(finder.Finder)]),
    setRecordInMemory: dart.fnType(dart.legacy(core.bool), [dart.legacy(record_impl.ImmutableSembastRecord)]),
    loadRecord: dart.fnType(dart.void, [dart.legacy(record_impl.ImmutableSembastRecord)]),
    txnPutRecord: dart.fnType(dart.legacy(async.Future$(dart.legacy(record_impl.ImmutableSembastRecord))), [dart.legacy(transaction_impl.SembastTransaction), dart.legacy(record_impl.ImmutableSembastRecord)]),
    txnPutRecordSync: dart.fnType(dart.legacy(record_impl.ImmutableSembastRecord), [dart.legacy(transaction_impl.SembastTransaction), dart.legacy(record_impl.ImmutableSembastRecord)]),
    txnGetImmutableRecordSync: dart.fnType(dart.legacy(record_impl.ImmutableSembastRecord), [dart.legacy(transaction_impl.SembastTransaction), dart.dynamic]),
    txnGetRecord: dart.fnType(dart.legacy(async.Future$(dart.legacy(record_impl.ImmutableSembastRecord))), [dart.legacy(transaction_impl.SembastTransaction), dart.dynamic]),
    txnRecordExists: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.bool))), [dart.legacy(transaction_impl.SembastTransaction), dart.dynamic]),
    txnGetRecordSync: dart.fnType(dart.legacy(record_impl.ImmutableSembastRecord), [dart.legacy(transaction_impl.SembastTransaction), dart.dynamic]),
    txnGetRecordsCompat: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(record_impl.ImmutableSembastRecord))))), [dart.legacy(transaction_impl.SembastTransaction), dart.legacy(core.Iterable)]),
    txnGetRecordSnapshots: dart.gFnType((K, V) => [dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V))))))), [dart.legacy(transaction_impl.SembastTransaction), dart.legacy(records_ref.RecordsRef$(dart.legacy(K), dart.legacy(V)))]]),
    txnGet: dart.fnType(dart.legacy(async.Future), [dart.legacy(transaction_impl.SembastTransaction), dart.dynamic]),
    txnCount: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.int))), [dart.legacy(transaction_impl.SembastTransaction), dart.legacy(filter.Filter)]),
    txnDelete: dart.fnType(dart.legacy(async.Future), [dart.legacy(transaction_impl.SembastTransaction), dart.dynamic]),
    txnDeleteAll: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List))), [dart.legacy(transaction_impl.SembastTransaction), dart.legacy(core.Iterable)]),
    txnUpdateAll: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List))), [dart.legacy(transaction_impl.SembastTransaction), dart.legacy(core.List), dart.legacy(core.List)]),
    [_hasTransactionRecords]: dart.fnType(dart.legacy(core.bool), [dart.legacy(transaction_impl.SembastTransaction)]),
    txnContainsKey: dart.fnType(dart.legacy(core.bool), [dart.legacy(transaction_impl.SembastTransaction), dart.dynamic]),
    rollback: dart.fnType(dart.void, []),
    toJson: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    txnClear: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List))), [dart.legacy(transaction_impl.SembastTransaction)], {finder: dart.legacy(finder.Finder)}, {}),
    txnUpdateWhere: dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List))), [dart.legacy(transaction_impl.SembastTransaction), dart.dynamic], {finder: dart.legacy(finder.Finder)}, {}),
    cooperate: dart.fnType(dart.dynamic, [])
  }));
  dart.setGetterSignature(store_impl.SembastStore, () => ({
    __proto__: dart.getGetters(store_impl.SembastStore.__proto__),
    name: dart.legacy(core.String),
    currentTransaction: dart.legacy(transaction_impl.SembastTransaction),
    currentRecords: dart.legacy(core.List$(dart.legacy(record_impl.ImmutableSembastRecord))),
    txnCurrentRecords: dart.legacy(core.List$(dart.legacy(record_impl.ImmutableSembastRecord))),
    currentTxnRecords: dart.legacy(core.List$(dart.legacy(record_impl.TxnRecord))),
    needCooperate: dart.legacy(core.bool),
    cooperateOn: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(store_impl.SembastStore, I[22]);
  dart.setFieldSignature(store_impl.SembastStore, () => ({
    __proto__: dart.getFields(store_impl.SembastStore.__proto__),
    database: dart.finalFieldType(dart.legacy(database_impl.SembastDatabase)),
    ref: dart.finalFieldType(dart.legacy(store_ref.StoreRef)),
    lastIntKey: dart.fieldType(dart.legacy(core.int)),
    recordMap: dart.fieldType(dart.legacy(core.Map$(dart.dynamic, dart.legacy(record_impl.ImmutableSembastRecord)))),
    txnRecords: dart.fieldType(dart.legacy(core.Map$(dart.dynamic, dart.legacy(record_impl.TxnRecord))))
  }));
  dart.defineExtensionMethods(store_impl.SembastStore, ['toString']);
  store_impl.finderRecordMatchBoundaries = function finderRecordMatchBoundaries(finder, result) {
    let t40, t40$;
    if ((t40 = finder, t40 == null ? null : t40.start) != null) {
      if (!dart.test(finder.starts(result, finder.start))) {
        return false;
      }
    }
    if ((t40$ = finder, t40$ == null ? null : t40$.end) != null) {
      if (!dart.test(finder.ends(result, finder.end))) {
        return false;
      }
    }
    return true;
  };
  var filter$ = dart.privateName(finder_impl, "SembastFinder.filter");
  var offset$ = dart.privateName(finder_impl, "SembastFinder.offset");
  var limit$ = dart.privateName(finder_impl, "SembastFinder.limit");
  var start$ = dart.privateName(finder_impl, "SembastFinder.start");
  var end$ = dart.privateName(finder_impl, "SembastFinder.end");
  var sortOrders$ = dart.privateName(finder_impl, "SembastFinder.sortOrders");
  finder_impl.SembastFinder = class SembastFinder extends core.Object {
    get filter() {
      return this[filter$];
    }
    set filter(value) {
      this[filter$] = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      this[offset$] = value;
    }
    get limit() {
      return this[limit$];
    }
    set limit(value) {
      this[limit$] = value;
    }
    get start() {
      return this[start$];
    }
    set start(value) {
      this[start$] = value;
    }
    get end() {
      return this[end$];
    }
    set end(value) {
      this[end$] = value;
    }
    get sortOrders() {
      return this[sortOrders$];
    }
    set sortOrders(value) {
      this[sortOrders$] = value;
    }
    set sortOrder(sortOrder) {
      this.sortOrders = T$.JSArrayOfSortOrderL().of([sortOrder]);
    }
    compare(record1, record2) {
      let result = 0;
      if (this.sortOrders != null) {
        for (let order of this.sortOrders) {
          result = T$.SembastSortOrderL().as(order).compare(record1, record2);
          if (result !== 0) {
            break;
          }
        }
      }
      return result;
    }
    compareThenKey(record1, record2) {
      let result = this.compare(record1, record2);
      if (result === 0) {
        return utils.compareKey(record1.key, record2.key);
      }
      return result;
    }
    compareToBoundary(record, boundary) {
      let t40;
      let result = 0;
      if (this.sortOrders != null) {
        for (let i = 0; i < dart.notNull(this.sortOrders[$length]); i = i + 1) {
          let order = this.sortOrders[$_get](i);
          result = T$.SembastSortOrderL().as(order).compareToBoundary(record, boundary, i);
          if (result !== 0) {
            break;
          }
        }
      }
      if (result === 0) {
        let sembastBoundary = T$.SembastBoundaryL().as(boundary);
        if ((t40 = sembastBoundary.snapshot, t40 == null ? null : t40.key) != null) {
          return utils.compareKey(record.key, sembastBoundary.snapshot.key);
        }
      }
      return result;
    }
    starts(record, boundary) {
      let result = this.compareToBoundary(record, boundary);
      if (result === 0 && dart.test(boundary.include)) {
        return true;
      }
      return dart.notNull(result) > 0;
    }
    ends(record, boundary) {
      let result = this.compareToBoundary(record, boundary);
      if (result === 0 && dart.test(boundary.include)) {
        return true;
      }
      return dart.notNull(result) < 0;
    }
    clone(opts) {
      let t40;
      let limit = opts && 'limit' in opts ? opts.limit : null;
      return finder.Finder.new({filter: this.filter, sortOrders: this.sortOrders, limit: (t40 = limit, t40 == null ? this.limit : t40), offset: this.offset, start: this.start, end: this.end});
    }
    cloneWithoutLimits() {
      return finder.Finder.new({filter: this.filter, sortOrders: this.sortOrders, start: this.start, end: this.end});
    }
    toString() {
      return "Finder(" + dart.str((() => {
        let t40 = new (T$.IdentityMapOfStringL$ObjectL()).new();
        if (this.filter != null) t40[$_set]("filter", this.filter);
        if (this.sortOrders != null) t40[$_set]("sort", this.sortOrders);
        if (this.offset != null) t40[$_set]("offset", this.offset);
        if (this.limit != null) t40[$_set]("limit", this.limit);
        if (this.start != null) t40[$_set]("start", this.start);
        if (this.end != null) t40[$_set]("limit", this.end);
        return t40;
      })()) + ")";
    }
  };
  (finder_impl.SembastFinder.new = function(opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    let sortOrders = opts && 'sortOrders' in opts ? opts.sortOrders : null;
    let limit = opts && 'limit' in opts ? opts.limit : null;
    let offset = opts && 'offset' in opts ? opts.offset : null;
    let start = opts && 'start' in opts ? opts.start : null;
    let end = opts && 'end' in opts ? opts.end : null;
    this[sortOrders$] = T$.JSArrayOfSortOrderL().of([]);
    this[filter$] = filter;
    this[sortOrders$] = sortOrders;
    this[limit$] = limit;
    this[offset$] = offset;
    this[start$] = start;
    this[end$] = end;
    ;
  }).prototype = finder_impl.SembastFinder.prototype;
  dart.addTypeTests(finder_impl.SembastFinder);
  dart.addTypeCaches(finder_impl.SembastFinder);
  finder_impl.SembastFinder[dart.implements] = () => [finder.Finder];
  dart.setMethodSignature(finder_impl.SembastFinder, () => ({
    __proto__: dart.getMethods(finder_impl.SembastFinder.__proto__),
    compare: dart.fnType(dart.legacy(core.int), [dart.legacy(record_impl.SembastRecord), dart.legacy(record_impl.SembastRecord)]),
    compareThenKey: dart.fnType(dart.legacy(core.int), [dart.legacy(record_impl.SembastRecord), dart.legacy(record_impl.SembastRecord)]),
    compareToBoundary: dart.fnType(dart.legacy(core.int), [dart.legacy(record_snapshot.RecordSnapshot), dart.legacy(boundary.Boundary)]),
    starts: dart.fnType(dart.legacy(core.bool), [dart.legacy(record_snapshot.RecordSnapshot), dart.legacy(boundary.Boundary)]),
    ends: dart.fnType(dart.legacy(core.bool), [dart.legacy(record_snapshot.RecordSnapshot), dart.legacy(boundary.Boundary)]),
    clone: dart.fnType(dart.legacy(finder.Finder), [], {limit: dart.legacy(core.int)}, {}),
    cloneWithoutLimits: dart.fnType(dart.legacy(finder.Finder), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setSetterSignature(finder_impl.SembastFinder, () => ({
    __proto__: dart.getSetters(finder_impl.SembastFinder.__proto__),
    sortOrder: dart.legacy(sort_order.SortOrder)
  }));
  dart.setLibraryUri(finder_impl.SembastFinder, I[23]);
  dart.setFieldSignature(finder_impl.SembastFinder, () => ({
    __proto__: dart.getFields(finder_impl.SembastFinder.__proto__),
    filter: dart.fieldType(dart.legacy(filter.Filter)),
    offset: dart.fieldType(dart.legacy(core.int)),
    limit: dart.fieldType(dart.legacy(core.int)),
    start: dart.fieldType(dart.legacy(boundary.Boundary)),
    end: dart.fieldType(dart.legacy(boundary.Boundary)),
    sortOrders: dart.fieldType(dart.legacy(core.List$(dart.legacy(sort_order.SortOrder))))
  }));
  dart.defineExtensionMethods(finder_impl.SembastFinder, ['toString']);
  finder_impl.finderMatchesFilterAndBoundaries = function finderMatchesFilterAndBoundaries(finder, record) {
    if (finder == null) {
      return true;
    }
    if (!dart.test(store_impl.finderRecordMatchBoundaries(finder, record))) {
      return false;
    }
    if (!dart.test(filter_impl.filterMatchesRecord(finder.filter, record))) {
      return false;
    }
    return true;
  };
  finder_impl.recordsLimit = function recordsLimit(results, finder) {
    if (finder != null) {
      if (finder.offset != null) {
        results = results[$sublist](math.min(T$.intL(), finder.offset, results[$length]));
      }
      if (finder.limit != null) {
        results = results[$sublist](0, math.min(T$.intL(), finder.limit, results[$length]));
      }
    }
    return results;
  };
  finder_impl.cloneFinderFindFirst = function cloneFinderFindFirst(finder) {
    if (finder != null) {
      if (T$.SembastFinderL().as(finder).limit !== 1) {
        finder = T$.SembastFinderL().as(finder).clone({limit: 1});
      }
    } else {
      finder = new finder_impl.SembastFinder.new({limit: 1});
    }
    return T$.SembastFinderL().as(finder);
  };
  var ascending$ = dart.privateName(sort_order_impl, "SembastSortOrder.ascending");
  var field$0 = dart.privateName(sort_order_impl, "SembastSortOrder.field");
  var nullLast$ = dart.privateName(sort_order_impl, "SembastSortOrder.nullLast");
  var _toDebugMap = dart.privateName(sort_order_impl, "_toDebugMap");
  sort_order_impl.SembastSortOrder = class SembastSortOrder extends core.Object {
    get ascending() {
      return this[ascending$];
    }
    set ascending(value) {
      super.ascending = value;
    }
    get field() {
      return this[field$0];
    }
    set field(value) {
      super.field = value;
    }
    get nullLast() {
      return this[nullLast$];
    }
    set nullLast(value) {
      super.nullLast = value;
    }
    compare(record1, record2) {
      let result = this.compareAscending(record1, record2);
      return dart.test(this.ascending) ? result : -dart.notNull(result);
    }
    compareToBoundary(record, boundary, index) {
      let result = this.compareToBoundaryAscending(record, boundary, index);
      return dart.test(this.ascending) ? result : -dart.notNull(result);
    }
    compareToSnapshotAscending(record, snapshot) {
      let value1 = record._get(this.field);
      let value2 = snapshot._get(this.field);
      return this.compareValueAscending(value1, value2);
    }
    compareToBoundaryAscending(record, boundary, index) {
      let sembastBoundary = T$.SembastBoundaryL().as(boundary);
      if (sembastBoundary.values != null) {
        let value = sembastBoundary.values[$_get](index);
        return this.compareValueAscending(record._get(this.field), value);
      } else if (sembastBoundary.snapshot != null) {
        return this.compareToSnapshotAscending(record, sembastBoundary.snapshot);
      }
      dart.throw(new core.ArgumentError.new("either record or values must be provided"));
    }
    compareAscending(record1, record2) {
      let value1 = record1._get(this.field);
      let value2 = record2._get(this.field);
      return this.compareValueAscending(value1, value2);
    }
    compareValueAscending(value1, value2) {
      if (value1 == null) {
        if (value2 == null) {
          return 0;
        }
        if (dart.test(this.nullLast)) {
          return 1;
        } else {
          return -1;
        }
      } else if (value2 == null) {
        if (dart.test(this.nullLast)) {
          return -1;
        } else {
          return 1;
        }
      }
      return utils.compareValue(value1, value2);
    }
    [_toDebugMap]() {
      let map = (() => {
        let t41 = new (T$.IdentityMapOfStringL$dynamic()).new();
        t41[$_set](this.field, dart.test(this.ascending) ? "asc" : "desc");
        if (this.nullLast === true) t41[$_set]("nullLast", true);
        return t41;
      })();
      return map;
    }
    toString() {
      return dart.toString(this[_toDebugMap]());
    }
  };
  (sort_order_impl.SembastSortOrder.new = function(field, ascending = null, nullLast = null) {
    this[field$0] = field;
    this[ascending$] = ascending !== false;
    this[nullLast$] = nullLast === true;
    ;
  }).prototype = sort_order_impl.SembastSortOrder.prototype;
  dart.addTypeTests(sort_order_impl.SembastSortOrder);
  dart.addTypeCaches(sort_order_impl.SembastSortOrder);
  sort_order_impl.SembastSortOrder[dart.implements] = () => [sort_order.SortOrder];
  dart.setMethodSignature(sort_order_impl.SembastSortOrder, () => ({
    __proto__: dart.getMethods(sort_order_impl.SembastSortOrder.__proto__),
    compare: dart.fnType(dart.legacy(core.int), [dart.legacy(record_snapshot.RecordSnapshot), dart.legacy(record_snapshot.RecordSnapshot)]),
    compareToBoundary: dart.fnType(dart.legacy(core.int), [dart.legacy(record_snapshot.RecordSnapshot), dart.legacy(boundary.Boundary), dart.legacy(core.int)]),
    compareToSnapshotAscending: dart.fnType(dart.legacy(core.int), [dart.legacy(record_snapshot.RecordSnapshot), dart.legacy(record_snapshot.RecordSnapshot)]),
    compareToBoundaryAscending: dart.fnType(dart.legacy(core.int), [dart.legacy(record_snapshot.RecordSnapshot), dart.legacy(boundary.Boundary), dart.legacy(core.int)]),
    compareAscending: dart.fnType(dart.legacy(core.int), [dart.legacy(record_snapshot.RecordSnapshot), dart.legacy(record_snapshot.RecordSnapshot)]),
    compareValueAscending: dart.fnType(dart.legacy(core.int), [dart.dynamic, dart.dynamic]),
    [_toDebugMap]: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(sort_order_impl.SembastSortOrder, I[24]);
  dart.setFieldSignature(sort_order_impl.SembastSortOrder, () => ({
    __proto__: dart.getFields(sort_order_impl.SembastSortOrder.__proto__),
    ascending: dart.finalFieldType(dart.legacy(core.bool)),
    field: dart.finalFieldType(dart.legacy(core.String)),
    nullLast: dart.finalFieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(sort_order_impl.SembastSortOrder, ['toString']);
  sort_order.SortOrder = class SortOrder extends core.Object {
    static new(field, ascending = true, nullLast = false) {
      return new sort_order_impl.SembastSortOrder.new(field, ascending, nullLast);
    }
  };
  (sort_order.SortOrder[dart.mixinNew] = function() {
  }).prototype = sort_order.SortOrder.prototype;
  dart.addTypeTests(sort_order.SortOrder);
  dart.addTypeCaches(sort_order.SortOrder);
  dart.setLibraryUri(sort_order.SortOrder, I[25]);
  var _list = dart.privateName(utils, "_list");
  const _is_ImmutableList_default = Symbol('_is_ImmutableList_default');
  utils.ImmutableList$ = dart.generic(E => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    class ImmutableList extends collection.ListBase$(dart.legacy(E)) {
      get length() {
        return this[_list][$length];
      }
      _get(index) {
        return EL().as(utils.immutableValue(this[_list][$_get](index)));
      }
      _set(index, value$) {
        let value = value$;
        EL().as(value);
        dart.throw(new core.StateError.new("read only"));
        return value$;
      }
      set length(newLength) {
        return dart.throw(new core.StateError.new("read only"));
      }
    }
    (ImmutableList.new = function(list) {
      this[_list] = list[$toList]({growable: false});
      ;
    }).prototype = ImmutableList.prototype;
    dart.addTypeTests(ImmutableList);
    ImmutableList.prototype[_is_ImmutableList_default] = true;
    dart.addTypeCaches(ImmutableList);
    dart.setMethodSignature(ImmutableList, () => ({
      __proto__: dart.getMethods(ImmutableList.__proto__),
      _get: dart.fnType(dart.legacy(E), [dart.legacy(core.int)]),
      [$_get]: dart.fnType(dart.legacy(E), [dart.legacy(core.int)]),
      _set: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(ImmutableList, () => ({
      __proto__: dart.getGetters(ImmutableList.__proto__),
      length: dart.legacy(core.int),
      [$length]: dart.legacy(core.int)
    }));
    dart.setSetterSignature(ImmutableList, () => ({
      __proto__: dart.getSetters(ImmutableList.__proto__),
      length: dart.legacy(core.int),
      [$length]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(ImmutableList, I[26]);
    dart.setFieldSignature(ImmutableList, () => ({
      __proto__: dart.getFields(ImmutableList.__proto__),
      [_list]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(E))))
    }));
    dart.defineExtensionMethods(ImmutableList, ['_get', '_set']);
    dart.defineExtensionAccessors(ImmutableList, ['length']);
    return ImmutableList;
  });
  utils.ImmutableList = utils.ImmutableList$();
  dart.addTypeTests(utils.ImmutableList, _is_ImmutableList_default);
  var _map$ = dart.privateName(utils, "_map");
  const _is_ImmutableMap_default = Symbol('_is_ImmutableMap_default');
  utils.ImmutableMap$ = dart.generic((K, V) => {
    var KL = () => (KL = dart.constFn(dart.legacy(K)))();
    var VL = () => (VL = dart.constFn(dart.legacy(V)))();
    class ImmutableMap extends collection.MapBase$(dart.legacy(K), dart.legacy(V)) {
      get rawMap() {
        return this[_map$];
      }
      _get(key) {
        return VL().as(utils.immutableValue(this[_map$][$_get](key)));
      }
      _set(key, value$) {
        let value = value$;
        KL().as(key);
        VL().as(value);
        dart.throw(new core.StateError.new("read only"));
        return value$;
      }
      clear() {
        return dart.throw(new core.StateError.new("read only"));
      }
      get keys() {
        return this[_map$][$keys];
      }
      remove(key) {
        return dart.throw(new core.StateError.new("read only"));
      }
    }
    (ImmutableMap.new = function(map) {
      this[_map$] = map[$cast](KL(), VL());
      ;
    }).prototype = ImmutableMap.prototype;
    dart.addTypeTests(ImmutableMap);
    ImmutableMap.prototype[_is_ImmutableMap_default] = true;
    dart.addTypeCaches(ImmutableMap);
    dart.setMethodSignature(ImmutableMap, () => ({
      __proto__: dart.getMethods(ImmutableMap.__proto__),
      _get: dart.fnType(dart.legacy(V), [dart.legacy(core.Object)]),
      [$_get]: dart.fnType(dart.legacy(V), [dart.legacy(core.Object)]),
      _set: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, []),
      remove: dart.fnType(dart.legacy(V), [dart.legacy(core.Object)]),
      [$remove]: dart.fnType(dart.legacy(V), [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(ImmutableMap, () => ({
      __proto__: dart.getGetters(ImmutableMap.__proto__),
      rawMap: dart.legacy(core.Map$(dart.legacy(K), dart.legacy(V))),
      keys: dart.legacy(core.Iterable$(dart.legacy(K))),
      [$keys]: dart.legacy(core.Iterable$(dart.legacy(K)))
    }));
    dart.setLibraryUri(ImmutableMap, I[26]);
    dart.setFieldSignature(ImmutableMap, () => ({
      __proto__: dart.getFields(ImmutableMap.__proto__),
      [_map$]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(K), dart.legacy(V))))
    }));
    dart.defineExtensionMethods(ImmutableMap, ['_get', '_set', 'clear', 'remove']);
    dart.defineExtensionAccessors(ImmutableMap, ['keys']);
    return ImmutableMap;
  });
  utils.ImmutableMap = utils.ImmutableMap$();
  dart.addTypeTests(utils.ImmutableMap, _is_ImmutableMap_default);
  utils.checkMapKey = function checkMapKey(key) {
    if (!T$.StringL().is(key)) {
      return false;
    }
    if (T$.StringL().as(key)[$contains](".")) {
      return false;
    }
    return true;
  };
  utils.checkValue = function checkValue(value) {
    if (value == null) {
      return true;
    } else if (T$.numL().is(value) || T$.StringL().is(value) || T$.boolL().is(value)) {
      return true;
    } else if (T$.ListL().is(value)) {
      for (let item of value) {
        if (!dart.test(utils.checkValue(item))) {
          return false;
        }
      }
      return true;
    } else if (T$.MapL().is(value)) {
      for (let entry of value[$entries]) {
        if (!dart.test(utils.checkMapKey(entry.key))) {
          return false;
        }
        if (!dart.test(utils.checkValue(entry.value))) {
          return false;
        }
      }
      return true;
    } else {
      return false;
    }
  };
  utils.compareKey = function compareKey(key1, key2) {
    return utils.compareValue(key1, key2);
  };
  utils.compareRecordKey = function compareRecordKey(record1, record2) {
    return utils.compareKey(record1.key, record2.key);
  };
  utils.compareValue = function compareValue(value1, value2) {
    let t43, t43$, t43$0;
    try {
      if (T$.ComparableL().is(value1) && T$.ComparableL().is(value2)) {
        return core.Comparable.compare(value1, value2);
      } else if (T$.ListL().is(value1) && T$.ListL().is(value2)) {
        let list1 = value1;
        let list2 = value2;
        for (let i = 0; i < math.min(T$.numL(), value1[$length], value2[$length]); i = i + 1) {
          let cmp = utils.compareValue(list1[$_get](i), list2[$_get](i));
          if (cmp === 0) {
            continue;
          }
          return cmp;
        }
        return utils.compareValue(list1[$length], list2[$length]);
      } else if (T$.boolL().is(value1) && T$.boolL().is(value2)) {
        return utils.compareBool(value1, value2);
      }
    } catch (e) {
      let _ = dart.getThrown(e);
    }
    let cmp = utils.compareValueType(value1, value2);
    if (cmp == null) {
      if (!T$.StringL().is(value1) || !T$.StringL().is(value2)) {
        return utils.compareValue((t43 = value1, t43 == null ? null : dart.toString(t43)), (t43$ = value2, t43$ == null ? null : dart.toString(t43$)));
      }
    }
    t43$0 = cmp;
    return t43$0 == null ? 0 : t43$0;
  };
  utils.compareBool = function compareBool(value1, value2) {
    if (dart.test(value1)) {
      if (dart.test(value2)) {
        return 0;
      }
      return 1;
    }
    return dart.test(value2) ? -1 : 0;
  };
  utils.compareValueType = function compareValueType(value1, value2) {
    if (value1 == null) {
      if (value2 == null) {
        return 0;
      } else {
        return -1;
      }
    } else if (value2 == null) {
      return 1;
    } else if (T$.boolL().is(value1)) {
      if (T$.boolL().is(value2)) {
        return 0;
      } else {
        return -1;
      }
    } else if (T$.boolL().is(value2)) {
      return 1;
    } else if (T$.numL().is(value1)) {
      if (T$.numL().is(value2)) {
        return 0;
      } else {
        return -1;
      }
    } else if (T$.numL().is(value2)) {
      return 1;
    } else if (T$.TimestampL().is(value1)) {
      if (T$.TimestampL().is(value2)) {
        return 0;
      } else {
        return -1;
      }
    } else if (T$.TimestampL().is(value2)) {
      return 1;
    } else if (T$.StringL().is(value1)) {
      if (T$.StringL().is(value2)) {
        return 0;
      } else {
        return -1;
      }
    } else if (T$.StringL().is(value2)) {
      return 1;
    } else if (T$.BlobL().is(value1)) {
      if (T$.BlobL().is(value2)) {
        return 0;
      } else {
        return -1;
      }
    } else if (T$.BlobL().is(value2)) {
      return 1;
    } else if (T$.ListL().is(value1)) {
      if (T$.ListL().is(value2)) {
        return 0;
      } else {
        return -1;
      }
    } else if (T$.ListL().is(value2)) {
      return 1;
    } else if (T$.MapL().is(value1)) {
      if (T$.ListL().is(value2)) {
        return 0;
      } else {
        return -1;
      }
    } else if (T$.MapL().is(value2)) {
      return 1;
    }
    return null;
  };
  utils._fixMap = function _fixMap(map) {
    let fixedMap = new (T$.IdentityMapOfStringL$dynamic()).new();
    map[$forEach](dart.fn((key, value) => {
      if (!dart.equals(value, field$.FieldValue.delete)) {
        fixedMap[$_set](T$.StringL().as(key), utils._fixValue(value));
      }
    }, T$.dynamicAnddynamicToNull()));
    return fixedMap;
  };
  utils._fixValue = function _fixValue(value) {
    if (T$.MapL().is(value)) {
      return utils._fixMap(value);
    }
    return value;
  };
  utils.cloneKey = function cloneKey(K, key) {
    if (T$.StringL().is(key)) {
      return key;
    }
    if (T$.numL().is(key)) {
      return key;
    }
    if (key == null) {
      return key;
    }
    dart.throw(new exception.DatabaseException.badParam("key " + dart.str(key) + " not supported" + (key != null ? " type:" + dart.str(dart.runtimeType(key)) : "")));
  };
  utils.isValueMutable = function isValueMutable(value) {
    return T$.MapL().is(value) || T$.IterableL().is(value);
  };
  utils.cloneValue = function cloneValue(value) {
    if (T$.MapL().is(value)) {
      return value[$map](T$.StringL(), dart.dynamic, dart.fn((key, value) => new (T$.MapEntryOfStringL$dynamic()).__(T$.StringL().as(key), utils.cloneValue(value)), T$.dynamicAnddynamicToMapEntryLOfStringL$dynamic()));
    }
    if (T$.IterableL().is(value)) {
      return value[$map](dart.dynamic, dart.fn(value => utils.cloneValue(value), T$.dynamicTodynamic()))[$toList]();
    }
    return value;
  };
  utils.sanitizeValueIfMap = function sanitizeValueIfMap(value) {
    let t43;
    if (T$.MapL().is(value)) {
      if (!T$.MapLOfStringL$dynamic().is(value)) {
        t43 = value;
        return t43 == null ? null : t43[$cast](T$.StringL(), dart.dynamic);
      }
    }
    return value;
  };
  utils.isBasicTypeOrNull = function isBasicTypeOrNull(value) {
    if (value == null) {
      return true;
    } else if (T$.numL().is(value) || T$.StringL().is(value) || T$.boolL().is(value)) {
      return true;
    }
    return false;
  };
  utils.isBasicTypeFieldValueOrNull = function isBasicTypeFieldValueOrNull(value) {
    if (dart.test(utils.isBasicTypeOrNull(value))) {
      return true;
    } else if (T$.FieldValueL().is(value)) {
      return true;
    }
    return false;
  };
  utils.immutableValue = function immutableValue(value) {
    if (T$.MapL().is(value)) {
      return new (T$.ImmutableMapOfStringL$dynamic()).new(value);
    } else if (T$.IterableL().is(value)) {
      return new utils.ImmutableList.new(value);
    }
    return value;
  };
  utils.getPartsMapValue = function getPartsMapValue(T, map, parts) {
    let value = map;
    for (let part of parts) {
      if (T$.MapL().is(value)) {
        value = dart.dsend(value, '_get', [part]);
      } else {
        return null;
      }
    }
    return dart.legacy(T).as(value);
  };
  utils.getPartsMapRawValue = function getPartsMapRawValue(T, map, parts) {
    if (T$.ImmutableMapL().is(map)) {
      map = T$.ImmutableMapL().as(map).rawMap;
    }
    let value = map;
    for (let part of parts) {
      if (T$.MapL().is(value)) {
        value = dart.dsend(value, '_get', [part]);
      } else {
        return null;
      }
    }
    return dart.legacy(T).as(value);
  };
  utils.setPartsMapValue = function setPartsMapValue(T, map, parts, value) {
    for (let i = 0; i < dart.notNull(parts[$length]) - 1; i = i + 1) {
      let part = parts[$_get](i);
      let sub = map[$_get](part);
      if (!T$.MapL().is(sub)) {
        sub = new (T$.IdentityMapOfStringL$dynamic()).new();
        map[$_set](part, sub);
      }
      map = T$.MapL().as(sub);
    }
    map[$_set](parts[$last], value);
  };
  utils.isBacktickEnclosed = function isBacktickEnclosed(field) {
    let t43, t43$;
    let length = (t43$ = (t43 = field, t43 == null ? null : t43.length), t43$ == null ? 0 : t43$);
    if (dart.notNull(length) < 2) {
      return false;
    }
    return field[$codeUnitAt](0) === utils.backtickChrCode && field[$codeUnitAt](dart.notNull(length) - 1) === utils.backtickChrCode;
  };
  utils._escapeKey = function _escapeKey(field) {
    return "`" + dart.str(field) + "`";
  };
  utils.escapeKey = function escapeKey(field) {
    if (field == null) {
      return null;
    }
    if (dart.test(utils.isBacktickEnclosed(field))) {
      return utils._escapeKey(field);
    } else if (field[$contains](".")) {
      return utils._escapeKey(field);
    }
    return field;
  };
  utils._unescapeKey = function _unescapeKey(field) {
    return field[$substring](1, field.length - 1);
  };
  utils.getFieldParts = function getFieldParts(field) {
    if (dart.test(utils.isBacktickEnclosed(field))) {
      return T$.JSArrayOfStringL().of([utils._unescapeKey(field)]);
    }
    return utils.getRawFieldParts(field);
  };
  utils.getRawFieldParts = function getRawFieldParts(field) {
    return field[$split](".");
  };
  utils.getMapFieldValue = function getMapFieldValue(T, map, field) {
    return utils.getPartsMapValue(dart.legacy(T), map, utils.getFieldParts(field));
  };
  utils.getMapFieldRawValue = function getMapFieldRawValue(T, map, field) {
    return utils.getPartsMapRawValue(dart.legacy(T), map, utils.getFieldParts(field));
  };
  utils.setMapFieldValue = function setMapFieldValue(T, map, field, value) {
    utils.setPartsMapValue(dart.legacy(T), map, utils.getFieldParts(field), value);
  };
  utils.mergeValue = function mergeValue(existingValue, newValue, opts) {
    let allowDotsInKeys = opts && 'allowDotsInKeys' in opts ? opts.allowDotsInKeys : null;
    allowDotsInKeys == null ? allowDotsInKeys = false : null;
    if (newValue == null) {
      return existingValue;
    }
    if (!T$.MapL().is(existingValue)) {
      return utils._fixValue(newValue);
    }
    if (!T$.MapL().is(newValue)) {
      return newValue;
    }
    let mergedMap = T$.MapLOfStringL$dynamic().as(utils.cloneValue(existingValue));
    let currentMap = mergedMap;
    function merge(key, value) {
      let stringKey = T$.StringL().as(key);
      let keyParts = null;
      if (dart.test(allowDotsInKeys)) {
        keyParts = T$.JSArrayOfStringL().of([stringKey]);
      } else {
        keyParts = utils.getFieldParts(stringKey);
      }
      if (keyParts[$length] === 1) {
        stringKey = keyParts[$_get](0);
        if (dart.equals(value, field$.FieldValue.delete)) {
          currentMap[$remove](stringKey);
        } else {
          currentMap[$_set](stringKey, value);
        }
      } else {
        if (dart.equals(value, field$.FieldValue.delete)) {
          let map = currentMap;
          for (let part of keyParts[$sublist](0, dart.notNull(keyParts[$length]) - 1)) {
            let sub = map[$_get](part);
            if (T$.MapL().is(sub)) {
              map = sub;
            } else {
              map = null;
              break;
            }
          }
          if (map != null) {
            map[$remove](keyParts[$last]);
          }
        } else {
          let map = currentMap;
          for (let part of keyParts[$sublist](0, dart.notNull(keyParts[$length]) - 1)) {
            let sub = map[$_get](part);
            if (T$.MapL().is(sub)) {
              map = sub;
            } else {
              sub = new (T$.IdentityMapOfStringL$dynamic()).new();
              map[$_set](part, sub);
              map = T$.MapL().as(sub);
            }
          }
          let previousMap = currentMap;
          currentMap = map;
          merge(keyParts[$last], value);
          currentMap = previousMap;
        }
      }
    }
    dart.fn(merge, T$.dynamicAnddynamicTovoid());
    T$.MapL().as(newValue)[$forEach](merge);
    return mergedMap;
  };
  utils.intListStreamToUint8ListStream = function intListStreamToUint8ListStream(stream) {
    if (T$.StreamLOfUint8ListL().is(stream)) {
      return stream;
    } else if (T$.StreamLOfListLOfintL().is(stream)) {
      return stream.transform(T$.Uint8ListL(), new (T$._StreamHandlerTransformerOfListLOfintL$Uint8ListL()).new({handleData: dart.fn((list, sink) => {
          sink.add(_native_typed_data.NativeUint8List.fromList(list));
        }, T$.ListLOfintLAndEventSinkLOfUint8ListLToNull())}));
    } else {
      dart.throw(new core.ArgumentError.new("Invalid stream type: " + dart.str(dart.runtimeType(stream))));
    }
  };
  dart.defineLazy(utils, {
    /*utils.backtickChrCode*/get backtickChrCode() {
      return "`"[$codeUnitAt](0);
    }
  }, true);
  var revision$2 = dart.privateName(record_snapshot_impl, "RecordSnapshotMixin.revision");
  var ref$ = dart.privateName(record_snapshot_impl, "RecordSnapshotMixin.ref");
  var rawValue = dart.privateName(record_snapshot_impl, "RecordSnapshotMixin.rawValue");
  const _is_RecordSnapshotMixin_default = Symbol('_is_RecordSnapshotMixin_default');
  record_snapshot_impl.RecordSnapshotMixin$ = dart.generic((K, V) => {
    var KL = () => (KL = dart.constFn(dart.legacy(K)))();
    var RecordRefOfKL$VL = () => (RecordRefOfKL$VL = dart.constFn(record_ref.RecordRef$(KL(), VL())))();
    var RecordRefLOfKL$VL = () => (RecordRefLOfKL$VL = dart.constFn(dart.legacy(RecordRefOfKL$VL())))();
    var VL = () => (VL = dart.constFn(dart.legacy(V)))();
    class RecordSnapshotMixin extends core.Object {}
    RecordSnapshotMixin[dart.mixinOn] = Object => {
      class RecordSnapshotMixin extends Object {
        get revision() {
          return this[revision$2];
        }
        set revision(value) {
          this[revision$2] = value;
        }
        get ref() {
          return this[ref$];
        }
        set ref(value) {
          this[ref$] = RecordRefLOfKL$VL().as(value);
        }
        get rawValue() {
          return this[rawValue];
        }
        set rawValue(value) {
          this[rawValue] = VL().as(value);
        }
        get key() {
          return this.ref.key;
        }
        get value() {
          return this.rawValue;
        }
        toString() {
          return dart.str(this.ref) + " " + dart.str(this.rawValue);
        }
        _get(field) {
          return this.getValue(field);
        }
        getValue(field) {
          if (field == field$.Field.value) {
            return this.value;
          } else if (field == field$.Field.key) {
            return this.key;
          } else {
            return utils.getMapFieldValue(dart.dynamic, T$.MapL().as(this.value), field);
          }
        }
        getRawValue(field) {
          if (field == field$.Field.value) {
            return this.value;
          } else if (field == field$.Field.key) {
            return this.key;
          } else {
            return utils.getMapFieldRawValue(dart.dynamic, T$.MapL().as(this.value), field);
          }
        }
        cast(RK, RV) {
          if (dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(RK), dart.legacy(RV))).is(this)) {
            return dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(RK), dart.legacy(RV))).as(this);
          }
          return record_ref_impl['SembastRecordRefExtension|snapshot'](dart.legacy(RK), dart.legacy(RV), this.ref.cast(dart.legacy(RK), dart.legacy(RV)), dart.legacy(RV).as(this.value));
        }
      }
      dart.defineExtensionMethods(RecordSnapshotMixin, ['toString']);
      return RecordSnapshotMixin;
    };
    (RecordSnapshotMixin[dart.mixinNew] = function() {
      this[revision$2] = null;
      this[ref$] = null;
      this[rawValue] = null;
    }).prototype = RecordSnapshotMixin.prototype;
    dart.addTypeTests(RecordSnapshotMixin);
    RecordSnapshotMixin.prototype[_is_RecordSnapshotMixin_default] = true;
    dart.addTypeCaches(RecordSnapshotMixin);
    RecordSnapshotMixin[dart.implements] = () => [record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V)), record_impl.SembastRecordValue$(dart.legacy(V)), core.Object];
    dart.setMethodSignature(RecordSnapshotMixin, () => ({
      __proto__: dart.getMethods(RecordSnapshotMixin.__proto__),
      toString: dart.fnType(dart.legacy(core.String), []),
      [$toString]: dart.fnType(dart.legacy(core.String), []),
      _get: dart.fnType(dart.dynamic, [dart.legacy(core.String)]),
      getValue: dart.fnType(dart.dynamic, [dart.legacy(core.String)]),
      getRawValue: dart.fnType(dart.dynamic, [dart.legacy(core.String)]),
      cast: dart.gFnType((RK, RV) => [dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(RK), dart.legacy(RV))), []])
    }));
    dart.setGetterSignature(RecordSnapshotMixin, () => ({
      __proto__: dart.getGetters(RecordSnapshotMixin.__proto__),
      key: dart.legacy(K),
      value: dart.legacy(V)
    }));
    dart.setLibraryUri(RecordSnapshotMixin, I[27]);
    dart.setFieldSignature(RecordSnapshotMixin, () => ({
      __proto__: dart.getFields(RecordSnapshotMixin.__proto__),
      revision: dart.fieldType(dart.legacy(core.int)),
      ref: dart.fieldType(dart.legacy(record_ref.RecordRef$(dart.legacy(K), dart.legacy(V)))),
      rawValue: dart.fieldType(dart.legacy(V))
    }));
    return RecordSnapshotMixin;
  });
  record_snapshot_impl.RecordSnapshotMixin = record_snapshot_impl.RecordSnapshotMixin$();
  dart.addTypeTests(record_snapshot_impl.RecordSnapshotMixin, _is_RecordSnapshotMixin_default);
  const _is_SembastRecordSnapshot_default = Symbol('_is_SembastRecordSnapshot_default');
  record_snapshot_impl.SembastRecordSnapshot$ = dart.generic((K, V) => {
    var KL = () => (KL = dart.constFn(dart.legacy(K)))();
    var VL = () => (VL = dart.constFn(dart.legacy(V)))();
    const Object_RecordSnapshotMixin$36 = class Object_RecordSnapshotMixin extends core.Object {};
    (Object_RecordSnapshotMixin$36.new = function() {
      record_snapshot_impl.RecordSnapshotMixin$(dart.legacy(K), dart.legacy(V))[dart.mixinNew].call(this);
    }).prototype = Object_RecordSnapshotMixin$36.prototype;
    dart.applyMixin(Object_RecordSnapshotMixin$36, record_snapshot_impl.RecordSnapshotMixin$(dart.legacy(K), dart.legacy(V)));
    class SembastRecordSnapshot extends Object_RecordSnapshotMixin$36 {}
    (SembastRecordSnapshot.fromRecord = function(record) {
      let t43;
      SembastRecordSnapshot.__proto__.new.call(this);
      this.ref = (t43 = record.ref, t43 == null ? null : t43.cast(KL(), VL()));
      this.rawValue = VL().as(record.value);
    }).prototype = SembastRecordSnapshot.prototype;
    (SembastRecordSnapshot.new = function(ref, value) {
      SembastRecordSnapshot.__proto__.new.call(this);
      this.ref = ref;
      this.rawValue = value;
    }).prototype = SembastRecordSnapshot.prototype;
    dart.addTypeTests(SembastRecordSnapshot);
    SembastRecordSnapshot.prototype[_is_SembastRecordSnapshot_default] = true;
    dart.addTypeCaches(SembastRecordSnapshot);
    dart.setLibraryUri(SembastRecordSnapshot, I[27]);
    return SembastRecordSnapshot;
  });
  record_snapshot_impl.SembastRecordSnapshot = record_snapshot_impl.SembastRecordSnapshot$();
  dart.addTypeTests(record_snapshot_impl.SembastRecordSnapshot, _is_SembastRecordSnapshot_default);
  var snapshot$ = dart.privateName(record_snapshot_impl, "SembastRecordRawSnapshot.snapshot");
  const _is_SembastRecordRawSnapshot_default = Symbol('_is_SembastRecordRawSnapshot_default');
  record_snapshot_impl.SembastRecordRawSnapshot$ = dart.generic((K, V) => {
    var KL = () => (KL = dart.constFn(dart.legacy(K)))();
    var RecordSnapshotMixinOfKL$VL = () => (RecordSnapshotMixinOfKL$VL = dart.constFn(record_snapshot_impl.RecordSnapshotMixin$(KL(), VL())))();
    var RecordSnapshotMixinLOfKL$VL = () => (RecordSnapshotMixinLOfKL$VL = dart.constFn(dart.legacy(RecordSnapshotMixinOfKL$VL())))();
    var VL = () => (VL = dart.constFn(dart.legacy(V)))();
    class SembastRecordRawSnapshot extends core.Object {
      get snapshot() {
        return this[snapshot$];
      }
      set snapshot(value) {
        super.snapshot = value;
      }
      _get(field) {
        return this.snapshot.getRawValue(field);
      }
      get value() {
        return this.snapshot.rawValue;
      }
      cast(RK, RV) {
        return new (record_snapshot_impl.SembastRecordRawSnapshot$(dart.legacy(RK), dart.legacy(RV))).new(this.snapshot.cast(dart.legacy(RK), dart.legacy(RV)));
      }
      get key() {
        return this.snapshot.key;
      }
      get ref() {
        return this.snapshot.ref;
      }
    }
    (SembastRecordRawSnapshot.new = function(snapshot) {
      this[snapshot$] = RecordSnapshotMixinLOfKL$VL().as(snapshot);
      ;
    }).prototype = SembastRecordRawSnapshot.prototype;
    dart.addTypeTests(SembastRecordRawSnapshot);
    SembastRecordRawSnapshot.prototype[_is_SembastRecordRawSnapshot_default] = true;
    dart.addTypeCaches(SembastRecordRawSnapshot);
    SembastRecordRawSnapshot[dart.implements] = () => [record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V))];
    dart.setMethodSignature(SembastRecordRawSnapshot, () => ({
      __proto__: dart.getMethods(SembastRecordRawSnapshot.__proto__),
      _get: dart.fnType(dart.dynamic, [dart.legacy(core.String)]),
      cast: dart.gFnType((RK, RV) => [dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(RK), dart.legacy(RV))), []])
    }));
    dart.setGetterSignature(SembastRecordRawSnapshot, () => ({
      __proto__: dart.getGetters(SembastRecordRawSnapshot.__proto__),
      value: dart.legacy(V),
      key: dart.legacy(K),
      ref: dart.legacy(record_ref.RecordRef$(dart.legacy(K), dart.legacy(V)))
    }));
    dart.setLibraryUri(SembastRecordRawSnapshot, I[27]);
    dart.setFieldSignature(SembastRecordRawSnapshot, () => ({
      __proto__: dart.getFields(SembastRecordRawSnapshot.__proto__),
      snapshot: dart.finalFieldType(dart.legacy(record_snapshot_impl.RecordSnapshotMixin$(dart.legacy(K), dart.legacy(V))))
    }));
    return SembastRecordRawSnapshot;
  });
  record_snapshot_impl.SembastRecordRawSnapshot = record_snapshot_impl.SembastRecordRawSnapshot$();
  dart.addTypeTests(record_snapshot_impl.SembastRecordRawSnapshot, _is_SembastRecordRawSnapshot_default);
  filter_impl.SembastFilterBase = class SembastFilterBase extends core.Object {};
  (filter_impl.SembastFilterBase.new = function() {
    ;
  }).prototype = filter_impl.SembastFilterBase.prototype;
  dart.addTypeTests(filter_impl.SembastFilterBase);
  dart.addTypeCaches(filter_impl.SembastFilterBase);
  filter_impl.SembastFilterBase[dart.implements] = () => [filter.Filter];
  dart.setLibraryUri(filter_impl.SembastFilterBase, I[28]);
  var matches$ = dart.privateName(filter_impl, "SembastCustomFilter.matches");
  filter_impl.SembastCustomFilter = class SembastCustomFilter extends filter_impl.SembastFilterBase {
    get matches() {
      return this[matches$];
    }
    set matches(value) {
      super.matches = value;
    }
    matchesRecord(record) {
      let t43;
      try {
        t43 = record;
        return this.matches(t43);
      } catch (e) {
        let _ = dart.getThrown(e);
        return false;
      }
    }
  };
  (filter_impl.SembastCustomFilter.new = function(matches) {
    this[matches$] = matches;
    ;
  }).prototype = filter_impl.SembastCustomFilter.prototype;
  dart.addTypeTests(filter_impl.SembastCustomFilter);
  dart.addTypeCaches(filter_impl.SembastCustomFilter);
  dart.setMethodSignature(filter_impl.SembastCustomFilter, () => ({
    __proto__: dart.getMethods(filter_impl.SembastCustomFilter.__proto__),
    matchesRecord: dart.fnType(dart.legacy(core.bool), [dart.legacy(record_snapshot.RecordSnapshot)])
  }));
  dart.setLibraryUri(filter_impl.SembastCustomFilter, I[28]);
  dart.setFieldSignature(filter_impl.SembastCustomFilter, () => ({
    __proto__: dart.getFields(filter_impl.SembastCustomFilter.__proto__),
    matches: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(record_snapshot.RecordSnapshot)])))
  }));
  var anyInList = dart.privateName(filter_impl, "FilterAnyInListMixin.anyInList");
  filter_impl.FilterAnyInListMixin = class FilterAnyInListMixin extends core.Object {};
  filter_impl.FilterAnyInListMixin[dart.mixinOn] = Object => class FilterAnyInListMixin extends Object {
    get anyInList() {
      return this[anyInList];
    }
    set anyInList(value) {
      this[anyInList] = value;
    }
  };
  (filter_impl.FilterAnyInListMixin[dart.mixinNew] = function() {
    this[anyInList] = null;
  }).prototype = filter_impl.FilterAnyInListMixin.prototype;
  dart.addTypeTests(filter_impl.FilterAnyInListMixin);
  dart.addTypeCaches(filter_impl.FilterAnyInListMixin);
  filter_impl.FilterAnyInListMixin[dart.implements] = () => [filter_impl.SembastFilterBase, core.Object];
  dart.setLibraryUri(filter_impl.FilterAnyInListMixin, I[28]);
  dart.setFieldSignature(filter_impl.FilterAnyInListMixin, () => ({
    __proto__: dart.getFields(filter_impl.FilterAnyInListMixin.__proto__),
    anyInList: dart.fieldType(dart.legacy(core.bool))
  }));
  var value$2 = dart.privateName(filter_impl, "FilterValueMixin.value");
  filter_impl.FilterValueMixin = class FilterValueMixin extends core.Object {};
  filter_impl.FilterValueMixin[dart.mixinOn] = Object => class FilterValueMixin extends Object {
    get value() {
      return this[value$2];
    }
    set value(value) {
      this[value$2] = value;
    }
  };
  (filter_impl.FilterValueMixin[dart.mixinNew] = function() {
    this[value$2] = null;
  }).prototype = filter_impl.FilterValueMixin.prototype;
  dart.addTypeTests(filter_impl.FilterValueMixin);
  dart.addTypeCaches(filter_impl.FilterValueMixin);
  filter_impl.FilterValueMixin[dart.implements] = () => [filter_impl.SembastFilterBase, core.Object];
  dart.setLibraryUri(filter_impl.FilterValueMixin, I[28]);
  dart.setFieldSignature(filter_impl.FilterValueMixin, () => ({
    __proto__: dart.getFields(filter_impl.FilterValueMixin.__proto__),
    value: dart.fieldType(dart.dynamic)
  }));
  var field = dart.privateName(filter_impl, "FilterFieldMixin.field");
  filter_impl.FilterFieldMixin = class FilterFieldMixin extends core.Object {};
  filter_impl.FilterFieldMixin[dart.mixinOn] = Object => class FilterFieldMixin extends Object {
    get field() {
      return this[field];
    }
    set field(value) {
      this[field] = value;
    }
  };
  (filter_impl.FilterFieldMixin[dart.mixinNew] = function() {
    this[field] = null;
  }).prototype = filter_impl.FilterFieldMixin.prototype;
  dart.addTypeTests(filter_impl.FilterFieldMixin);
  dart.addTypeCaches(filter_impl.FilterFieldMixin);
  filter_impl.FilterFieldMixin[dart.implements] = () => [filter_impl.SembastFilterBase, core.Object];
  dart.setLibraryUri(filter_impl.FilterFieldMixin, I[28]);
  dart.setFieldSignature(filter_impl.FilterFieldMixin, () => ({
    __proto__: dart.getFields(filter_impl.FilterFieldMixin.__proto__),
    field: dart.fieldType(dart.legacy(core.String))
  }));
  const SembastFilterBase_FilterAnyInListMixin$36 = class SembastFilterBase_FilterAnyInListMixin extends filter_impl.SembastFilterBase {};
  (SembastFilterBase_FilterAnyInListMixin$36.new = function() {
    filter_impl.FilterAnyInListMixin[dart.mixinNew].call(this);
  }).prototype = SembastFilterBase_FilterAnyInListMixin$36.prototype;
  dart.applyMixin(SembastFilterBase_FilterAnyInListMixin$36, filter_impl.FilterAnyInListMixin);
  const SembastFilterBase_FilterValueMixin$36 = class SembastFilterBase_FilterValueMixin extends SembastFilterBase_FilterAnyInListMixin$36 {};
  (SembastFilterBase_FilterValueMixin$36.new = function() {
    filter_impl.FilterValueMixin[dart.mixinNew].call(this);
    SembastFilterBase_FilterValueMixin$36.__proto__.new.call(this);
  }).prototype = SembastFilterBase_FilterValueMixin$36.prototype;
  dart.applyMixin(SembastFilterBase_FilterValueMixin$36, filter_impl.FilterValueMixin);
  const SembastFilterBase_FilterFieldMixin$36 = class SembastFilterBase_FilterFieldMixin extends SembastFilterBase_FilterValueMixin$36 {};
  (SembastFilterBase_FilterFieldMixin$36.new = function() {
    filter_impl.FilterFieldMixin[dart.mixinNew].call(this);
    SembastFilterBase_FilterFieldMixin$36.__proto__.new.call(this);
  }).prototype = SembastFilterBase_FilterFieldMixin$36.prototype;
  dart.applyMixin(SembastFilterBase_FilterFieldMixin$36, filter_impl.FilterFieldMixin);
  filter_impl.SembastEqualsFilter = class SembastEqualsFilter extends SembastFilterBase_FilterFieldMixin$36 {
    matchesRecord(record) {
      if (!dart.test(filter_impl.canMatch(this.field, record.value))) {
        return false;
      }
      let fieldValue = record._get(this.field);
      if (this.anyInList === true) {
        if (T$.IterableL().is(fieldValue)) {
          for (let itemValue of fieldValue) {
            if (dart.equals(itemValue, this.value)) {
              return true;
            }
          }
        }
        return false;
      } else {
        return dart.equals(fieldValue, this.value);
      }
    }
    toString() {
      return dart.str(this.field) + " == " + dart.str(this.value);
    }
  };
  (filter_impl.SembastEqualsFilter.new = function(field, value, anyInList) {
    filter_impl.SembastEqualsFilter.__proto__.new.call(this);
    this.field = field;
    this.value = value;
    this.anyInList = anyInList;
  }).prototype = filter_impl.SembastEqualsFilter.prototype;
  dart.addTypeTests(filter_impl.SembastEqualsFilter);
  dart.addTypeCaches(filter_impl.SembastEqualsFilter);
  dart.setMethodSignature(filter_impl.SembastEqualsFilter, () => ({
    __proto__: dart.getMethods(filter_impl.SembastEqualsFilter.__proto__),
    matchesRecord: dart.fnType(dart.legacy(core.bool), [dart.legacy(record_snapshot.RecordSnapshot)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(filter_impl.SembastEqualsFilter, I[28]);
  dart.defineExtensionMethods(filter_impl.SembastEqualsFilter, ['toString']);
  var regExp$ = dart.privateName(filter_impl, "SembastMatchesFilter.regExp");
  const SembastFilterBase_FilterAnyInListMixin$36$ = class SembastFilterBase_FilterAnyInListMixin extends filter_impl.SembastFilterBase {};
  (SembastFilterBase_FilterAnyInListMixin$36$.new = function() {
    filter_impl.FilterAnyInListMixin[dart.mixinNew].call(this);
  }).prototype = SembastFilterBase_FilterAnyInListMixin$36$.prototype;
  dart.applyMixin(SembastFilterBase_FilterAnyInListMixin$36$, filter_impl.FilterAnyInListMixin);
  const SembastFilterBase_FilterFieldMixin$36$ = class SembastFilterBase_FilterFieldMixin extends SembastFilterBase_FilterAnyInListMixin$36$ {};
  (SembastFilterBase_FilterFieldMixin$36$.new = function() {
    filter_impl.FilterFieldMixin[dart.mixinNew].call(this);
    SembastFilterBase_FilterFieldMixin$36$.__proto__.new.call(this);
  }).prototype = SembastFilterBase_FilterFieldMixin$36$.prototype;
  dart.applyMixin(SembastFilterBase_FilterFieldMixin$36$, filter_impl.FilterFieldMixin);
  filter_impl.SembastMatchesFilter = class SembastMatchesFilter extends SembastFilterBase_FilterFieldMixin$36$ {
    get regExp() {
      return this[regExp$];
    }
    set regExp(value) {
      super.regExp = value;
    }
    matchesRecord(record) {
      if (!dart.test(filter_impl.canMatch(this.field, record.value))) {
        return false;
      }
      let fieldValue = record._get(this.field);
      const _matches = value => {
        if (T$.StringL().is(value)) {
          return this.regExp.hasMatch(value);
        }
        return false;
      };
      dart.fn(_matches, T$.dynamicToboolL());
      if (this.anyInList === true) {
        if (T$.IterableL().is(fieldValue)) {
          for (let itemValue of fieldValue) {
            if (dart.test(_matches(itemValue))) {
              return true;
            }
          }
        }
        return false;
      } else {
        return _matches(fieldValue);
      }
    }
    toString() {
      return dart.str(this.field) + " MATCHES " + dart.str(this.regExp);
    }
  };
  (filter_impl.SembastMatchesFilter.new = function(field, regExp, anyInList) {
    this[regExp$] = regExp;
    filter_impl.SembastMatchesFilter.__proto__.new.call(this);
    this.field = field;
    this.anyInList = anyInList;
  }).prototype = filter_impl.SembastMatchesFilter.prototype;
  dart.addTypeTests(filter_impl.SembastMatchesFilter);
  dart.addTypeCaches(filter_impl.SembastMatchesFilter);
  dart.setMethodSignature(filter_impl.SembastMatchesFilter, () => ({
    __proto__: dart.getMethods(filter_impl.SembastMatchesFilter.__proto__),
    matchesRecord: dart.fnType(dart.legacy(core.bool), [dart.legacy(record_snapshot.RecordSnapshot)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(filter_impl.SembastMatchesFilter, I[28]);
  dart.setFieldSignature(filter_impl.SembastMatchesFilter, () => ({
    __proto__: dart.getFields(filter_impl.SembastMatchesFilter.__proto__),
    regExp: dart.finalFieldType(dart.legacy(core.RegExp))
  }));
  dart.defineExtensionMethods(filter_impl.SembastMatchesFilter, ['toString']);
  var isAnd = dart.privateName(filter_impl, "SembastCompositeFilter.isAnd");
  var filters$ = dart.privateName(filter_impl, "SembastCompositeFilter.filters");
  filter_impl.SembastCompositeFilter = class SembastCompositeFilter extends filter_impl.SembastFilterBase {
    get isAnd() {
      return this[isAnd];
    }
    set isAnd(value) {
      this[isAnd] = value;
    }
    get filters() {
      return this[filters$];
    }
    set filters(value) {
      this[filters$] = value;
    }
    get isOr() {
      return !dart.test(this.isAnd);
    }
    matchesRecord(record) {
      for (let filter of this.filters) {
        if (dart.test(T$.SembastFilterBaseL().as(filter).matchesRecord(record))) {
          if (dart.test(this.isOr)) {
            return true;
          }
        } else {
          if (dart.test(this.isAnd)) {
            return false;
          }
        }
      }
      return this.isAnd;
    }
    toString() {
      return this.filters[$join](" " + (dart.test(this.isAnd) ? "AND" : "OR") + " ");
    }
  };
  (filter_impl.SembastCompositeFilter.or = function(filters) {
    this[filters$] = filters;
    this[isAnd] = false;
    ;
  }).prototype = filter_impl.SembastCompositeFilter.prototype;
  (filter_impl.SembastCompositeFilter.and = function(filters) {
    this[filters$] = filters;
    this[isAnd] = true;
    ;
  }).prototype = filter_impl.SembastCompositeFilter.prototype;
  dart.addTypeTests(filter_impl.SembastCompositeFilter);
  dart.addTypeCaches(filter_impl.SembastCompositeFilter);
  dart.setMethodSignature(filter_impl.SembastCompositeFilter, () => ({
    __proto__: dart.getMethods(filter_impl.SembastCompositeFilter.__proto__),
    matchesRecord: dart.fnType(dart.legacy(core.bool), [dart.legacy(record_snapshot.RecordSnapshot)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setGetterSignature(filter_impl.SembastCompositeFilter, () => ({
    __proto__: dart.getGetters(filter_impl.SembastCompositeFilter.__proto__),
    isOr: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(filter_impl.SembastCompositeFilter, I[28]);
  dart.setFieldSignature(filter_impl.SembastCompositeFilter, () => ({
    __proto__: dart.getFields(filter_impl.SembastCompositeFilter.__proto__),
    isAnd: dart.fieldType(dart.legacy(core.bool)),
    filters: dart.fieldType(dart.legacy(core.List$(dart.legacy(filter.Filter))))
  }));
  dart.defineExtensionMethods(filter_impl.SembastCompositeFilter, ['toString']);
  var operation$ = dart.privateName(filter_impl, "SembastFilterPredicate.operation");
  var FilterOperation_value = dart.privateName(filter_impl, "FilterOperation.value");
  const SembastFilterBase_FilterValueMixin$36$ = class SembastFilterBase_FilterValueMixin extends filter_impl.SembastFilterBase {};
  (SembastFilterBase_FilterValueMixin$36$.new = function() {
    filter_impl.FilterValueMixin[dart.mixinNew].call(this);
  }).prototype = SembastFilterBase_FilterValueMixin$36$.prototype;
  dart.applyMixin(SembastFilterBase_FilterValueMixin$36$, filter_impl.FilterValueMixin);
  const SembastFilterBase_FilterFieldMixin$36$0 = class SembastFilterBase_FilterFieldMixin extends SembastFilterBase_FilterValueMixin$36$ {};
  (SembastFilterBase_FilterFieldMixin$36$0.new = function() {
    filter_impl.FilterFieldMixin[dart.mixinNew].call(this);
    SembastFilterBase_FilterFieldMixin$36$0.__proto__.new.call(this);
  }).prototype = SembastFilterBase_FilterFieldMixin$36$0.prototype;
  dart.applyMixin(SembastFilterBase_FilterFieldMixin$36$0, filter_impl.FilterFieldMixin);
  filter_impl.SembastFilterPredicate = class SembastFilterPredicate extends SembastFilterBase_FilterFieldMixin$36$0 {
    get operation() {
      return this[operation$];
    }
    set operation(value) {
      this[operation$] = value;
    }
    matchesRecord(record) {
      function _safeCompare(value1, value2) {
        try {
          if (T$.ComparableL().is(value1) && T$.ComparableL().is(value2)) {
            return core.Comparable.compare(value1, value2);
          }
        } catch (e) {
          let _ = dart.getThrown(e);
        }
        return null;
      }
      dart.fn(_safeCompare, T$.dynamicAnddynamicTointL());
      function _lessThan(value1, value2) {
        let cmp = _safeCompare(value1, value2);
        return cmp != null && dart.notNull(cmp) < 0;
      }
      dart.fn(_lessThan, T$.dynamicAnddynamicToboolL());
      function _greaterThan(value1, value2) {
        let cmp = _safeCompare(value1, value2);
        return cmp != null && dart.notNull(cmp) > 0;
      }
      dart.fn(_greaterThan, T$.dynamicAnddynamicToboolL());
      if (!dart.test(filter_impl.canMatch(this.field, record.value))) {
        return false;
      }
      let fieldValue = record._get(this.field);
      switch (this.operation) {
        case C[4] || CT.C4:
        {
          return !dart.equals(fieldValue, this.value);
        }
        case C[5] || CT.C5:
        {
          return _lessThan(fieldValue, this.value);
        }
        case C[6] || CT.C6:
        {
          return dart.test(_lessThan(fieldValue, this.value)) || dart.equals(fieldValue, this.value);
        }
        case C[7] || CT.C7:
        {
          return _greaterThan(fieldValue, this.value);
        }
        case C[8] || CT.C8:
        {
          return dart.test(_greaterThan(fieldValue, this.value)) || dart.equals(fieldValue, this.value);
        }
        case C[9] || CT.C9:
        {
          return T$.ListL().as(this.value)[$contains](record._get(this.field));
        }
        default:
        {
          dart.throw(dart.str(this) + " not supported");
        }
      }
    }
    toString() {
      return dart.str(this.field) + " " + dart.str(this.operation) + " " + dart.str(this.value);
    }
  };
  (filter_impl.SembastFilterPredicate.new = function(field, operation, value) {
    this[operation$] = operation;
    filter_impl.SembastFilterPredicate.__proto__.new.call(this);
    this.field = field;
    this.value = value;
  }).prototype = filter_impl.SembastFilterPredicate.prototype;
  dart.addTypeTests(filter_impl.SembastFilterPredicate);
  dart.addTypeCaches(filter_impl.SembastFilterPredicate);
  dart.setMethodSignature(filter_impl.SembastFilterPredicate, () => ({
    __proto__: dart.getMethods(filter_impl.SembastFilterPredicate.__proto__),
    matchesRecord: dart.fnType(dart.legacy(core.bool), [dart.legacy(record_snapshot.RecordSnapshot)]),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(filter_impl.SembastFilterPredicate, I[28]);
  dart.setFieldSignature(filter_impl.SembastFilterPredicate, () => ({
    __proto__: dart.getFields(filter_impl.SembastFilterPredicate.__proto__),
    operation: dart.fieldType(dart.legacy(filter_impl.FilterOperation))
  }));
  dart.defineExtensionMethods(filter_impl.SembastFilterPredicate, ['toString']);
  const value$3 = FilterOperation_value;
  filter_impl.FilterOperation = class FilterOperation extends core.Object {
    get value() {
      return this[value$3];
    }
    set value(value) {
      super.value = value;
    }
    toString() {
      switch (this) {
        case C[10] || CT.C10:
        {
          return "=";
        }
        case C[4] || CT.C4:
        {
          return "!=";
        }
        case C[5] || CT.C5:
        {
          return "<";
        }
        case C[6] || CT.C6:
        {
          return "<=";
        }
        case C[7] || CT.C7:
        {
          return ">";
        }
        case C[8] || CT.C8:
        {
          return ">=";
        }
        case C[9] || CT.C9:
        {
          return "IN";
        }
        case C[11] || CT.C11:
        {
          return "MATCHES";
        }
        default:
        {
          dart.throw(dart.str(this) + " not supported");
        }
      }
    }
  };
  (filter_impl.FilterOperation.__ = function(value) {
    this[value$3] = value;
    ;
  }).prototype = filter_impl.FilterOperation.prototype;
  dart.addTypeTests(filter_impl.FilterOperation);
  dart.addTypeCaches(filter_impl.FilterOperation);
  dart.setMethodSignature(filter_impl.FilterOperation, () => ({
    __proto__: dart.getMethods(filter_impl.FilterOperation.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(filter_impl.FilterOperation, I[28]);
  dart.setFieldSignature(filter_impl.FilterOperation, () => ({
    __proto__: dart.getFields(filter_impl.FilterOperation.__proto__),
    value: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineExtensionMethods(filter_impl.FilterOperation, ['toString']);
  dart.defineLazy(filter_impl.FilterOperation, {
    /*filter_impl.FilterOperation.equals*/get equals() {
      return C[10] || CT.C10;
    },
    /*filter_impl.FilterOperation.notEquals*/get notEquals() {
      return C[4] || CT.C4;
    },
    /*filter_impl.FilterOperation.lessThan*/get lessThan() {
      return C[5] || CT.C5;
    },
    /*filter_impl.FilterOperation.lessThanOrEquals*/get lessThanOrEquals() {
      return C[6] || CT.C6;
    },
    /*filter_impl.FilterOperation.greaterThan*/get greaterThan() {
      return C[7] || CT.C7;
    },
    /*filter_impl.FilterOperation.greaterThanOrEquals*/get greaterThanOrEquals() {
      return C[8] || CT.C8;
    },
    /*filter_impl.FilterOperation.inList*/get inList() {
      return C[9] || CT.C9;
    },
    /*filter_impl.FilterOperation.matches*/get matches() {
      return C[11] || CT.C11;
    }
  }, true);
  filter_impl.canMatch = function canMatch(field, recordValue) {
    return T$.MapL().is(recordValue) || field == field$.Field.value || field == field$.Field.key;
  };
  filter_impl.filterMatchesRecord = function filterMatchesRecord(filter, record) {
    if (filter == null) {
      return true;
    }
    return T$.SembastFilterBaseL().as(filter).matchesRecord(new record_snapshot_impl.SembastRecordRawSnapshot.new(record));
  };
  filter.Filter = class Filter extends core.Object {
    static equals(field, value, opts) {
      let anyInList = opts && 'anyInList' in opts ? opts.anyInList : null;
      return new filter_impl.SembastEqualsFilter.new(field, value, anyInList);
    }
    static notEquals(field, value) {
      return new filter_impl.SembastFilterPredicate.new(field, filter_impl.FilterOperation.notEquals, value);
    }
    static notNull(field) {
      return filter.Filter.notEquals(field, null);
    }
    static isNull(field) {
      return filter.Filter.equals(field, null);
    }
    static lessThan(field, value) {
      return new filter_impl.SembastFilterPredicate.new(field, filter_impl.FilterOperation.lessThan, value);
    }
    static lessThanOrEquals(field, value) {
      return new filter_impl.SembastFilterPredicate.new(field, filter_impl.FilterOperation.lessThanOrEquals, value);
    }
    static greaterThan(field, value) {
      return new filter_impl.SembastFilterPredicate.new(field, filter_impl.FilterOperation.greaterThan, value);
    }
    static greaterThanOrEquals(field, value) {
      return new filter_impl.SembastFilterPredicate.new(field, filter_impl.FilterOperation.greaterThanOrEquals, value);
    }
    static inList(field, list) {
      return new filter_impl.SembastFilterPredicate.new(field, filter_impl.FilterOperation.inList, list);
    }
    static matches(field, pattern, opts) {
      let anyInList = opts && 'anyInList' in opts ? opts.anyInList : null;
      return filter.Filter.matchesRegExp(field, core.RegExp.new(pattern), {anyInList: anyInList});
    }
    static matchesRegExp(field, regExp, opts) {
      let anyInList = opts && 'anyInList' in opts ? opts.anyInList : null;
      return new filter_impl.SembastMatchesFilter.new(field, regExp, anyInList);
    }
    static or(filters) {
      return new filter_impl.SembastCompositeFilter.or(filters);
    }
    static and(filters) {
      return new filter_impl.SembastCompositeFilter.and(filters);
    }
    static byKey(key) {
      return filter.Filter.equals(field$.Field.key, key);
    }
    static custom(matches) {
      return new filter_impl.SembastCustomFilter.new(matches);
    }
  };
  (filter.Filter[dart.mixinNew] = function() {
  }).prototype = filter.Filter.prototype;
  dart.addTypeTests(filter.Filter);
  dart.addTypeCaches(filter.Filter);
  dart.setLibraryUri(filter.Filter, I[29]);
  filter['SembastFilterCombination||'] = function SembastFilterCombination$124$124($this, other) {
    return new filter_impl.SembastCompositeFilter.or(T$.JSArrayOfFilterL().of([$this, other]));
  };
  filter['SembastFilterCombination|&'] = function SembastFilterCombination$124$38($this, other) {
    return new filter_impl.SembastCompositeFilter.and(T$.JSArrayOfFilterL().of([$this, other]));
  };
  finder.Finder = class Finder extends core.Object {
    static new(opts) {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      let sortOrders = opts && 'sortOrders' in opts ? opts.sortOrders : null;
      let limit = opts && 'limit' in opts ? opts.limit : null;
      let offset = opts && 'offset' in opts ? opts.offset : null;
      let start = opts && 'start' in opts ? opts.start : null;
      let end = opts && 'end' in opts ? opts.end : null;
      return new finder_impl.SembastFinder.new({filter: filter, sortOrders: sortOrders, limit: limit, offset: offset, start: start, end: end});
    }
  };
  (finder.Finder[dart.mixinNew] = function() {
  }).prototype = finder.Finder.prototype;
  dart.addTypeTests(finder.Finder);
  dart.addTypeCaches(finder.Finder);
  dart.setLibraryUri(finder.Finder, I[30]);
  var name = dart.privateName(store_ref_impl, "StoreRefMixin.name");
  const _is_StoreRefMixin_default = Symbol('_is_StoreRefMixin_default');
  store_ref_impl.StoreRefMixin$ = dart.generic((K, V) => {
    var KL = () => (KL = dart.constFn(dart.legacy(K)))();
    var SembastRecordRefOfKL$VL = () => (SembastRecordRefOfKL$VL = dart.constFn(record_ref_impl.SembastRecordRef$(KL(), VL())))();
    var IterableOfKL = () => (IterableOfKL = dart.constFn(core.Iterable$(KL())))();
    var IterableLOfKL = () => (IterableLOfKL = dart.constFn(dart.legacy(IterableOfKL())))();
    var SembastRecordsRefOfKL$VL = () => (SembastRecordsRefOfKL$VL = dart.constFn(records_ref_impl.SembastRecordsRef$(KL(), VL())))();
    var VL = () => (VL = dart.constFn(dart.legacy(V)))();
    class StoreRefMixin extends core.Object {}
    StoreRefMixin[dart.mixinOn] = Object => {
      class StoreRefMixin extends Object {
        get name() {
          return this[name];
        }
        set name(value) {
          this[name] = value;
        }
        record(key) {
          KL().as(key);
          if (key == null) {
            dart.throw(new core.ArgumentError.new("Record key cannot be null"));
          }
          return new (SembastRecordRefOfKL$VL()).new(this, key);
        }
        records(keys) {
          IterableLOfKL().as(keys);
          return new (SembastRecordsRefOfKL$VL()).new(this, keys);
        }
        toString() {
          return "Store(" + dart.str(this.name) + ")";
        }
        get hashCode() {
          return dart.hashCode(this.name);
        }
        _equals(other) {
          if (other == null) return false;
          if (T$.StoreRefL().is(other)) {
            return other.name == this.name;
          }
          return false;
        }
        cast(RK, RV) {
          if (dart.legacy(store_ref.StoreRef$(dart.legacy(RK), dart.legacy(RV))).is(this)) {
            return dart.legacy(store_ref.StoreRef$(dart.legacy(RK), dart.legacy(RV))).as(this);
          }
          return store_ref.StoreRef$(dart.legacy(RK), dart.legacy(RV)).new(this.name);
        }
      }
      dart.defineExtensionMethods(StoreRefMixin, ['toString', '_equals']);
      dart.defineExtensionAccessors(StoreRefMixin, ['hashCode']);
      return StoreRefMixin;
    };
    (StoreRefMixin[dart.mixinNew] = function() {
      this[name] = null;
    }).prototype = StoreRefMixin.prototype;
    dart.addTypeTests(StoreRefMixin);
    StoreRefMixin.prototype[_is_StoreRefMixin_default] = true;
    dart.addTypeCaches(StoreRefMixin);
    StoreRefMixin[dart.implements] = () => [store_ref.StoreRef$(dart.legacy(K), dart.legacy(V)), core.Object];
    dart.setMethodSignature(StoreRefMixin, () => ({
      __proto__: dart.getMethods(StoreRefMixin.__proto__),
      record: dart.fnType(dart.legacy(record_ref.RecordRef$(dart.legacy(K), dart.legacy(V))), [dart.legacy(core.Object)]),
      records: dart.fnType(dart.legacy(records_ref.RecordsRef$(dart.legacy(K), dart.legacy(V))), [dart.legacy(core.Object)]),
      toString: dart.fnType(dart.legacy(core.String), []),
      [$toString]: dart.fnType(dart.legacy(core.String), []),
      _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
      [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
      cast: dart.gFnType((RK, RV) => [dart.legacy(store_ref.StoreRef$(dart.legacy(RK), dart.legacy(RV))), []])
    }));
    dart.setGetterSignature(StoreRefMixin, () => ({
      __proto__: dart.getGetters(StoreRefMixin.__proto__),
      hashCode: dart.legacy(core.int),
      [$hashCode]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(StoreRefMixin, I[31]);
    dart.setFieldSignature(StoreRefMixin, () => ({
      __proto__: dart.getFields(StoreRefMixin.__proto__),
      name: dart.fieldType(dart.legacy(core.String))
    }));
    return StoreRefMixin;
  });
  store_ref_impl.StoreRefMixin = store_ref_impl.StoreRefMixin$();
  dart.addTypeTests(store_ref_impl.StoreRefMixin, _is_StoreRefMixin_default);
  const _is_SembastStoreRef_default = Symbol('_is_SembastStoreRef_default');
  store_ref_impl.SembastStoreRef$ = dart.generic((K, V) => {
    const Object_StoreRefMixin$36 = class Object_StoreRefMixin extends core.Object {};
    (Object_StoreRefMixin$36.new = function() {
      store_ref_impl.StoreRefMixin$(dart.legacy(K), dart.legacy(V))[dart.mixinNew].call(this);
    }).prototype = Object_StoreRefMixin$36.prototype;
    dart.applyMixin(Object_StoreRefMixin$36, store_ref_impl.StoreRefMixin$(dart.legacy(K), dart.legacy(V)));
    class SembastStoreRef extends Object_StoreRefMixin$36 {}
    (SembastStoreRef.new = function(name) {
      SembastStoreRef.__proto__.new.call(this);
      if (name == null) {
        dart.throw(new core.ArgumentError.new("Store reference name cannot be null. Use StoreRef.main() to get the main store"));
      }
      this.name = name;
    }).prototype = SembastStoreRef.prototype;
    dart.addTypeTests(SembastStoreRef);
    SembastStoreRef.prototype[_is_SembastStoreRef_default] = true;
    dart.addTypeCaches(SembastStoreRef);
    dart.setLibraryUri(SembastStoreRef, I[31]);
    return SembastStoreRef;
  });
  store_ref_impl.SembastStoreRef = store_ref_impl.SembastStoreRef$();
  dart.addTypeTests(store_ref_impl.SembastStoreRef, _is_SembastStoreRef_default);
  const _is_StoreFactoryMixin_default = Symbol('_is_StoreFactoryMixin_default');
  store_ref_impl.StoreFactoryMixin$ = dart.generic((K, V) => {
    var KL = () => (KL = dart.constFn(dart.legacy(K)))();
    var StoreRefOfKL$VL = () => (StoreRefOfKL$VL = dart.constFn(store_ref.StoreRef$(KL(), VL())))();
    var VL = () => (VL = dart.constFn(dart.legacy(V)))();
    class StoreFactoryMixin extends core.Object {}
    StoreFactoryMixin[dart.mixinOn] = Object => class StoreFactoryMixin extends Object {
      store(name = null) {
        if (name == null) {
          return StoreRefOfKL$VL().main();
        } else {
          return StoreRefOfKL$VL().new(name);
        }
      }
    };
    (StoreFactoryMixin[dart.mixinNew] = function() {
    }).prototype = StoreFactoryMixin.prototype;
    dart.addTypeTests(StoreFactoryMixin);
    StoreFactoryMixin.prototype[_is_StoreFactoryMixin_default] = true;
    dart.addTypeCaches(StoreFactoryMixin);
    StoreFactoryMixin[dart.implements] = () => [store_ref.StoreFactory$(dart.legacy(K), dart.legacy(V)), core.Object];
    dart.setMethodSignature(StoreFactoryMixin, () => ({
      __proto__: dart.getMethods(StoreFactoryMixin.__proto__),
      store: dart.fnType(dart.legacy(store_ref.StoreRef$(dart.legacy(K), dart.legacy(V))), [], [dart.legacy(core.String)])
    }));
    dart.setLibraryUri(StoreFactoryMixin, I[31]);
    return StoreFactoryMixin;
  });
  store_ref_impl.StoreFactoryMixin = store_ref_impl.StoreFactoryMixin$();
  dart.addTypeTests(store_ref_impl.StoreFactoryMixin, _is_StoreFactoryMixin_default);
  const _is_StoreFactoryBase_default = Symbol('_is_StoreFactoryBase_default');
  store_ref_impl.StoreFactoryBase$ = dart.generic((K, V) => {
    const Object_StoreFactoryMixin$36 = class Object_StoreFactoryMixin extends core.Object {};
    (Object_StoreFactoryMixin$36.new = function() {
    }).prototype = Object_StoreFactoryMixin$36.prototype;
    dart.applyMixin(Object_StoreFactoryMixin$36, store_ref_impl.StoreFactoryMixin$(dart.legacy(K), dart.legacy(V)));
    class StoreFactoryBase extends Object_StoreFactoryMixin$36 {}
    (StoreFactoryBase.new = function() {
      ;
    }).prototype = StoreFactoryBase.prototype;
    dart.addTypeTests(StoreFactoryBase);
    StoreFactoryBase.prototype[_is_StoreFactoryBase_default] = true;
    dart.addTypeCaches(StoreFactoryBase);
    dart.setLibraryUri(StoreFactoryBase, I[31]);
    return StoreFactoryBase;
  });
  store_ref_impl.StoreFactoryBase = store_ref_impl.StoreFactoryBase$();
  dart.addTypeTests(store_ref_impl.StoreFactoryBase, _is_StoreFactoryBase_default);
  store_ref_impl['SembastStoreRefExtensionImpl|findImmutableRecords'] = function SembastStoreRefExtensionImpl$124findImmutableRecords(K, V, $this, databaseClient, opts) {
    let finder = opts && 'finder' in opts ? opts.finder : null;
    return async.async(T$.ListLOfImmutableSembastRecordL(), function* SembastStoreRefExtensionImpl$124findImmutableRecords() {
      let client = database_client_impl.getClient(databaseClient);
      return yield client.getSembastStore($this).txnFindRecords(client.sembastTransaction, finder);
    });
  };
  store_ref_impl['SembastStoreRefExtensionImpl|get#findImmutableRecords'] = function SembastStoreRefExtensionImpl$124get$35findImmutableRecords(K, V, $this) {
    return dart.fn((databaseClient, opts) => {
      let finder = opts && 'finder' in opts ? opts.finder : null;
      return store_ref_impl['SembastStoreRefExtensionImpl|findImmutableRecords'](dart.legacy(K), dart.legacy(V), $this, databaseClient, {finder: finder});
    }, T$.DatabaseClientL__ToFutureLOfListLOfImmutableSembastRecordL());
  };
  store_ref_impl['SembastStoreRefExtension|drop'] = function SembastStoreRefExtension$124drop(K, V, $this, databaseClient) {
    let client = database_client_impl.getClient(databaseClient);
    return client.inTransaction(dart.dynamic, dart.fn(txn => client.sembastDatabase.txnDeleteStore(txn, $this.name), T$.SembastTransactionLToFutureL()));
  };
  store_ref_impl['SembastStoreRefExtension|get#drop'] = function SembastStoreRefExtension$124get$35drop(K, V, $this) {
    return dart.fn(databaseClient => store_ref_impl['SembastStoreRefExtension|drop'](dart.legacy(K), dart.legacy(V), $this, databaseClient), T$.DatabaseClientLToFutureL());
  };
  store_ref_impl['SembastStoreRefExtension|findFirst'] = function SembastStoreRefExtension$124findFirst(K, V, $this, databaseClient, opts) {
    let finder = opts && 'finder' in opts ? opts.finder : null;
    return async.async(dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V))), function* SembastStoreRefExtension$124findFirst() {
      let client = database_client_impl.getClient(databaseClient);
      let record = (yield client.getSembastStore($this).txnFindRecord(client.sembastTransaction, finder));
      if (record == null) {
        return null;
      } else {
        return new (record_snapshot_impl.SembastRecordSnapshot$(dart.legacy(K), dart.legacy(V))).fromRecord(record);
      }
    });
  };
  store_ref_impl['SembastStoreRefExtension|get#findFirst'] = function SembastStoreRefExtension$124get$35findFirst(K, V, $this) {
    return dart.fn((databaseClient, opts) => {
      let finder = opts && 'finder' in opts ? opts.finder : null;
      return store_ref_impl['SembastStoreRefExtension|findFirst'](dart.legacy(K), dart.legacy(V), $this, databaseClient, {finder: finder});
    }, dart.fnType(dart.legacy(async.Future$(dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V))))), [T$.DatabaseClientL()], {finder: T$.FinderL()}, {}));
  };
  store_ref_impl['SembastStoreRefExtension|find'] = function SembastStoreRefExtension$124find(K, V, $this, databaseClient, opts) {
    let finder = opts && 'finder' in opts ? opts.finder : null;
    return async.async(dart.legacy(core.List$(dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V))))), function* SembastStoreRefExtension$124find() {
      let records = (yield store_ref_impl['SembastStoreRefExtensionImpl|findImmutableRecords'](dart.legacy(K), dart.legacy(V), $this, databaseClient, {finder: finder}));
      return record_impl.immutableListToSnapshots(dart.legacy(K), dart.legacy(V), records);
    });
  };
  store_ref_impl['SembastStoreRefExtension|get#find'] = function SembastStoreRefExtension$124get$35find(K, V, $this) {
    return dart.fn((databaseClient, opts) => {
      let finder = opts && 'finder' in opts ? opts.finder : null;
      return store_ref_impl['SembastStoreRefExtension|find'](dart.legacy(K), dart.legacy(V), $this, databaseClient, {finder: finder});
    }, dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V))))))), [T$.DatabaseClientL()], {finder: T$.FinderL()}, {}));
  };
  store_ref_impl['SembastStoreRefExtension|query'] = function SembastStoreRefExtension$124query(K, V, $this, opts) {
    let finder = opts && 'finder' in opts ? opts.finder : null;
    return new (query_ref_impl.SembastQueryRef$(dart.legacy(K), dart.legacy(V))).new($this, T$.SembastFinderL().as(finder));
  };
  store_ref_impl['SembastStoreRefExtension|get#query'] = function SembastStoreRefExtension$124get$35query(K, V, $this) {
    return dart.fn(opts => {
      let finder = opts && 'finder' in opts ? opts.finder : null;
      return store_ref_impl['SembastStoreRefExtension|query'](dart.legacy(K), dart.legacy(V), $this, {finder: finder});
    }, dart.fnType(dart.legacy(query_ref.QueryRef$(dart.legacy(K), dart.legacy(V))), [], {finder: T$.FinderL()}, {}));
  };
  store_ref_impl['SembastStoreRefExtension|findKey'] = function SembastStoreRefExtension$124findKey(K, V, $this, databaseClient, opts) {
    let finder = opts && 'finder' in opts ? opts.finder : null;
    return async.async(dart.legacy(K), function* SembastStoreRefExtension$124findKey() {
      let client = database_client_impl.getClient(databaseClient);
      let key = (yield client.getSembastStore($this).txnFindKey(client.sembastTransaction, finder));
      return dart.legacy(K).as(key);
    });
  };
  store_ref_impl['SembastStoreRefExtension|get#findKey'] = function SembastStoreRefExtension$124get$35findKey(K, V, $this) {
    return dart.fn((databaseClient, opts) => {
      let finder = opts && 'finder' in opts ? opts.finder : null;
      return store_ref_impl['SembastStoreRefExtension|findKey'](dart.legacy(K), dart.legacy(V), $this, databaseClient, {finder: finder});
    }, dart.fnType(dart.legacy(async.Future$(dart.legacy(K))), [T$.DatabaseClientL()], {finder: T$.FinderL()}, {}));
  };
  store_ref_impl['SembastStoreRefExtension|findKeys'] = function SembastStoreRefExtension$124findKeys(K, V, $this, databaseClient, opts) {
    let finder = opts && 'finder' in opts ? opts.finder : null;
    return async.async(dart.legacy(core.List$(dart.legacy(K))), function* SembastStoreRefExtension$124findKeys() {
      let client = database_client_impl.getClient(databaseClient);
      let keys = (yield client.getSembastStore($this).txnFindKeys(client.sembastTransaction, finder));
      return keys[$cast](dart.legacy(K));
    });
  };
  store_ref_impl['SembastStoreRefExtension|get#findKeys'] = function SembastStoreRefExtension$124get$35findKeys(K, V, $this) {
    return dart.fn((databaseClient, opts) => {
      let finder = opts && 'finder' in opts ? opts.finder : null;
      return store_ref_impl['SembastStoreRefExtension|findKeys'](dart.legacy(K), dart.legacy(V), $this, databaseClient, {finder: finder});
    }, dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(K))))), [T$.DatabaseClientL()], {finder: T$.FinderL()}, {}));
  };
  store_ref_impl['SembastStoreRefExtension|stream'] = function SembastStoreRefExtension$124stream(K, V, $this, databaseClient, opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    let client = database_client_impl.getClient(databaseClient);
    return client.getSembastStore($this).txnGetStream(dart.legacy(K), dart.legacy(V), client.sembastTransaction, filter);
  };
  store_ref_impl['SembastStoreRefExtension|get#stream'] = function SembastStoreRefExtension$124get$35stream(K, V, $this) {
    return dart.fn((databaseClient, opts) => {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return store_ref_impl['SembastStoreRefExtension|stream'](dart.legacy(K), dart.legacy(V), $this, databaseClient, {filter: filter});
    }, dart.fnType(dart.legacy(async.Stream$(dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(K), dart.legacy(V))))), [T$.DatabaseClientL()], {filter: T$.FilterL()}, {}));
  };
  store_ref_impl['SembastStoreRefExtension|count'] = function SembastStoreRefExtension$124count(K, V, $this, databaseClient, opts) {
    let filter = opts && 'filter' in opts ? opts.filter : null;
    let client = database_client_impl.getClient(databaseClient);
    return client.getSembastStore($this).txnCount(client.sembastTransaction, filter);
  };
  store_ref_impl['SembastStoreRefExtension|get#count'] = function SembastStoreRefExtension$124get$35count(K, V, $this) {
    return dart.fn((databaseClient, opts) => {
      let filter = opts && 'filter' in opts ? opts.filter : null;
      return store_ref_impl['SembastStoreRefExtension|count'](dart.legacy(K), dart.legacy(V), $this, databaseClient, {filter: filter});
    }, T$.DatabaseClientL__ToFutureLOfintL());
  };
  store_ref_impl['SembastStoreRefExtension|add'] = function SembastStoreRefExtension$124add(K, V, $this, databaseClient, value) {
    return async.async(dart.legacy(K), function* SembastStoreRefExtension$124add() {
      let client = database_client_impl.getClient(databaseClient);
      value = client.sembastDatabase.sanitizeInputValue(dart.legacy(V), value);
      return yield client.inTransaction(dart.legacy(K), dart.fn(txn => client.getSembastStore($this).txnAdd(dart.legacy(K), dart.legacy(V), client.sembastTransaction, value), dart.fnType(dart.legacy(async.Future$(dart.legacy(K))), [T$.SembastTransactionL()])));
    });
  };
  store_ref_impl['SembastStoreRefExtension|get#add'] = function SembastStoreRefExtension$124get$35add(K, V, $this) {
    return dart.fn((databaseClient, value) => store_ref_impl['SembastStoreRefExtension|add'](dart.legacy(K), dart.legacy(V), $this, databaseClient, value), dart.fnType(dart.legacy(async.Future$(dart.legacy(K))), [T$.DatabaseClientL(), dart.legacy(V)]));
  };
  store_ref_impl['SembastStoreRefExtension|addAll'] = function SembastStoreRefExtension$124addAll(K, V, $this, databaseClient, values) {
    return async.async(dart.legacy(core.List$(dart.legacy(K))), function* SembastStoreRefExtension$124addAll() {
      let client = database_client_impl.getClient(databaseClient);
      let sanitizedValues = values[$map](dart.legacy(V), dart.fn(value => client.sembastDatabase.sanitizeInputValue(dart.legacy(V), value), dart.fnType(dart.legacy(V), [dart.legacy(V)])));
      let keys = _interceptors.JSArray$(dart.legacy(K)).of([]);
      yield client.inTransaction(core.Null, dart.fn(txn => async.async(core.Null, function*() {
        let store = client.getSembastStore($this);
        for (let value of sanitizedValues) {
          keys[$add](yield store.txnAdd(dart.legacy(K), dart.legacy(V), client.sembastTransaction, value));
        }
      }), T$.SembastTransactionLToFutureLOfNull()));
      return keys;
    });
  };
  store_ref_impl['SembastStoreRefExtension|get#addAll'] = function SembastStoreRefExtension$124get$35addAll(K, V, $this) {
    return dart.fn((databaseClient, values) => store_ref_impl['SembastStoreRefExtension|addAll'](dart.legacy(K), dart.legacy(V), $this, databaseClient, values), dart.fnType(dart.legacy(async.Future$(dart.legacy(core.List$(dart.legacy(K))))), [T$.DatabaseClientL(), dart.legacy(core.List$(dart.legacy(V)))]));
  };
  store_ref_impl['SembastStoreRefExtension|update'] = function SembastStoreRefExtension$124update(K, V, $this, databaseClient, value, opts) {
    let finder = opts && 'finder' in opts ? opts.finder : null;
    let client = database_client_impl.getClient(databaseClient);
    value = client.sembastDatabase.sanitizeInputValue(dart.legacy(V), value, {update: true});
    return client.inTransaction(T$.intL(), dart.fn(txn => async.async(T$.intL(), function*() {
      return (yield client.getSembastStore($this).txnUpdateWhere(txn, value, {finder: finder}))[$length];
    }), T$.SembastTransactionLToFutureLOfintL()));
  };
  store_ref_impl['SembastStoreRefExtension|get#update'] = function SembastStoreRefExtension$124get$35update(K, V, $this) {
    return dart.fn((databaseClient, value, opts) => {
      let finder = opts && 'finder' in opts ? opts.finder : null;
      return store_ref_impl['SembastStoreRefExtension|update'](dart.legacy(K), dart.legacy(V), $this, databaseClient, value, {finder: finder});
    }, dart.fnType(T$.FutureLOfintL(), [T$.DatabaseClientL(), dart.legacy(V)], {finder: T$.FinderL()}, {}));
  };
  store_ref_impl['SembastStoreRefExtension|delete'] = function SembastStoreRefExtension$124delete(K, V, $this, databaseClient, opts) {
    let finder = opts && 'finder' in opts ? opts.finder : null;
    let client = database_client_impl.getClient(databaseClient);
    return client.inTransaction(T$.intL(), dart.fn(txn => async.async(T$.intL(), function*() {
      return (yield client.getSembastStore($this).txnClear(txn, {finder: finder}))[$length];
    }), T$.SembastTransactionLToFutureLOfintL()));
  };
  store_ref_impl['SembastStoreRefExtension|get#delete'] = function SembastStoreRefExtension$124get$35delete(K, V, $this) {
    return dart.fn((databaseClient, opts) => {
      let finder = opts && 'finder' in opts ? opts.finder : null;
      return store_ref_impl['SembastStoreRefExtension|delete'](dart.legacy(K), dart.legacy(V), $this, databaseClient, {finder: finder});
    }, T$.DatabaseClientL__ToFutureLOfintL$1());
  };
  dart.defineLazy(store_ref_impl, {
    /*store_ref_impl.intMapStoreFactory*/get intMapStoreFactory() {
      return new (T$.StoreFactoryBaseOfintL$MapLOfStringL$dynamic()).new();
    },
    /*store_ref_impl.stringMapStoreFactory*/get stringMapStoreFactory() {
      return new (T$.StoreFactoryBaseOfStringL$MapLOfStringL$dynamic()).new();
    }
  }, true);
  dart.defineLazy(sembast_impl, {
    /*sembast_impl.dbVersionKey*/get dbVersionKey() {
      return "version";
    },
    /*sembast_impl.dbDembastVersionKey*/get dbDembastVersionKey() {
      return "sembast";
    },
    /*sembast_impl.dbDembastCodecSignatureKey*/get dbDembastCodecSignatureKey() {
      return "codec";
    },
    /*sembast_impl.dbRecordKey*/get dbRecordKey() {
      return "key";
    },
    /*sembast_impl.dbStoreNameKey*/get dbStoreNameKey() {
      return "store";
    },
    /*sembast_impl.dbRecordValueKey*/get dbRecordValueKey() {
      return "value";
    },
    /*sembast_impl.dbRecordDeletedKey*/get dbRecordDeletedKey() {
      return "deleted";
    },
    /*sembast_impl.dbMainStore*/get dbMainStore() {
      return "_main";
    },
    /*sembast_impl.mainStoreRef*/get mainStoreRef() {
      return store_ref.StoreRef.new("_main");
    },
    /*sembast_impl.jdbRevisionKey*/get jdbRevisionKey() {
      return "revision";
    },
    /*sembast_impl.jdbDeltaMinRevisionKey*/get jdbDeltaMinRevisionKey() {
      return "deltaMinRevision";
    }
  }, true);
  const _is_RecordSnapshot_default = Symbol('_is_RecordSnapshot_default');
  record_snapshot.RecordSnapshot$ = dart.generic((K, V) => {
    class RecordSnapshot extends core.Object {}
    (RecordSnapshot.new = function() {
      ;
    }).prototype = RecordSnapshot.prototype;
    dart.addTypeTests(RecordSnapshot);
    RecordSnapshot.prototype[_is_RecordSnapshot_default] = true;
    dart.addTypeCaches(RecordSnapshot);
    dart.setLibraryUri(RecordSnapshot, I[32]);
    return RecordSnapshot;
  });
  record_snapshot.RecordSnapshot = record_snapshot.RecordSnapshot$();
  dart.addTypeTests(record_snapshot.RecordSnapshot, _is_RecordSnapshot_default);
  const _is_RecordsRef_default = Symbol('_is_RecordsRef_default');
  records_ref.RecordsRef$ = dart.generic((K, V) => {
    class RecordsRef extends core.Object {}
    (RecordsRef.new = function() {
      ;
    }).prototype = RecordsRef.prototype;
    dart.addTypeTests(RecordsRef);
    RecordsRef.prototype[_is_RecordsRef_default] = true;
    dart.addTypeCaches(RecordsRef);
    dart.setLibraryUri(RecordsRef, I[33]);
    return RecordsRef;
  });
  records_ref.RecordsRef = records_ref.RecordsRef$();
  dart.addTypeTests(records_ref.RecordsRef, _is_RecordsRef_default);
  const _is_StoreRef_default = Symbol('_is_StoreRef_default');
  store_ref.StoreRef$ = dart.generic((K, V) => {
    class StoreRef extends core.Object {
      static new(name) {
        return new (store_ref_impl.SembastStoreRef$(dart.legacy(K), dart.legacy(V))).new(name);
      }
      static main() {
        return new (store_ref_impl.SembastStoreRef$(dart.legacy(K), dart.legacy(V))).new("_main");
      }
    }
    (StoreRef[dart.mixinNew] = function() {
    }).prototype = StoreRef.prototype;
    dart.addTypeTests(StoreRef);
    StoreRef.prototype[_is_StoreRef_default] = true;
    dart.addTypeCaches(StoreRef);
    dart.setLibraryUri(StoreRef, I[34]);
    return StoreRef;
  });
  store_ref.StoreRef = store_ref.StoreRef$();
  dart.addTypeTests(store_ref.StoreRef, _is_StoreRef_default);
  const _is_StoreFactory_default = Symbol('_is_StoreFactory_default');
  store_ref.StoreFactory$ = dart.generic((K, V) => {
    class StoreFactory extends core.Object {}
    (StoreFactory.new = function() {
      ;
    }).prototype = StoreFactory.prototype;
    dart.addTypeTests(StoreFactory);
    StoreFactory.prototype[_is_StoreFactory_default] = true;
    dart.addTypeCaches(StoreFactory);
    dart.setLibraryUri(StoreFactory, I[34]);
    return StoreFactory;
  });
  store_ref.StoreFactory = store_ref.StoreFactory$();
  dart.addTypeTests(store_ref.StoreFactory, _is_StoreFactory_default);
  dart.defineLazy(store_ref, {
    /*store_ref.intMapStoreFactory*/get intMapStoreFactory() {
      return new (T$.StoreFactoryBaseOfintL$MapLOfStringL$dynamic()).new();
    },
    /*store_ref.stringMapStoreFactory*/get stringMapStoreFactory() {
      return new (T$.StoreFactoryBaseOfStringL$MapLOfStringL$dynamic()).new();
    }
  }, true);
  const _is_RecordRef_default = Symbol('_is_RecordRef_default');
  record_ref.RecordRef$ = dart.generic((K, V) => {
    class RecordRef extends core.Object {}
    (RecordRef.new = function() {
      ;
    }).prototype = RecordRef.prototype;
    dart.addTypeTests(RecordRef);
    RecordRef.prototype[_is_RecordRef_default] = true;
    dart.addTypeCaches(RecordRef);
    dart.setLibraryUri(RecordRef, I[35]);
    return RecordRef;
  });
  record_ref.RecordRef = record_ref.RecordRef$();
  dart.addTypeTests(record_ref.RecordRef, _is_RecordRef_default);
  record_impl.SembastRecord = class SembastRecord extends record_snapshot.RecordSnapshot {};
  (record_impl.SembastRecord.new = function() {
    ;
  }).prototype = record_impl.SembastRecord.prototype;
  dart.addTypeTests(record_impl.SembastRecord);
  dart.addTypeCaches(record_impl.SembastRecord);
  dart.setLibraryUri(record_impl.SembastRecord, I[36]);
  var _toBaseMap = dart.privateName(record_impl, "_toBaseMap");
  record_impl.SembastRecordHelperMixin = class SembastRecordHelperMixin extends core.Object {};
  record_impl.SembastRecordHelperMixin[dart.mixinOn] = Object => {
    class SembastRecordHelperMixin extends Object {
      sembastClone(opts) {
        let t73, t73$;
        let store = opts && 'store' in opts ? opts.store : null;
        let key = opts && 'key' in opts ? opts.key : null;
        let ref = opts && 'ref' in opts ? opts.ref : null;
        let value = opts && 'value' in opts ? opts.value : null;
        let deleted = opts && 'deleted' in opts ? opts.deleted : null;
        return new record_impl.ImmutableSembastRecord.new((t73 = ref, t73 == null ? this.ref : t73), (t73$ = value, t73$ == null ? this.value : t73$), {deleted: deleted});
      }
      sembastCloneAsDeleted() {
        return new record_impl.ImmutableSembastRecord.new(this.ref, null, {deleted: true});
      }
      [_toBaseMap]() {
        let map = new (T$.IdentityMapOfStringL$dynamic()).new();
        map[$_set]("key", this.key);
        if (this.deleted === true) {
          map[$_set]("deleted", true);
        }
        if (this.ref.store != null && !dart.equals(this.ref.store, sembast_impl.mainStoreRef)) {
          map[$_set]("store", this.ref.store.name);
        }
        return map;
      }
      toDatabaseRowMap() {
        let map = this[_toBaseMap]();
        if (this.value != null && !dart.test(this.deleted)) {
          map[$_set]("value", this.value);
        }
        return map;
      }
      get hashCode() {
        return this.key == null ? 0 : dart.hashCode(this.key);
      }
      _equals(o) {
        if (o == null) return false;
        if (T$.SembastRecordL().is(o)) {
          return this.key == null ? false : dart.equals(this.key, o.key);
        }
        return false;
      }
    }
    dart.defineExtensionMethods(SembastRecordHelperMixin, ['_equals']);
    dart.defineExtensionAccessors(SembastRecordHelperMixin, ['hashCode']);
    return SembastRecordHelperMixin;
  };
  (record_impl.SembastRecordHelperMixin[dart.mixinNew] = function() {
  }).prototype = record_impl.SembastRecordHelperMixin.prototype;
  dart.addTypeTests(record_impl.SembastRecordHelperMixin);
  dart.addTypeCaches(record_impl.SembastRecordHelperMixin);
  record_impl.SembastRecordHelperMixin[dart.implements] = () => [record_impl.SembastRecord, core.Object];
  dart.setMethodSignature(record_impl.SembastRecordHelperMixin, () => ({
    __proto__: dart.getMethods(record_impl.SembastRecordHelperMixin.__proto__),
    sembastClone: dart.fnType(dart.legacy(record_impl.ImmutableSembastRecord), [], {deleted: dart.legacy(core.bool), key: dart.dynamic, ref: dart.legacy(record_ref.RecordRef), store: dart.legacy(store_impl.SembastStore), value: dart.dynamic}, {}),
    sembastCloneAsDeleted: dart.fnType(dart.legacy(record_impl.ImmutableSembastRecord), []),
    [_toBaseMap]: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toDatabaseRowMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.dynamic]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.dynamic])
  }));
  dart.setGetterSignature(record_impl.SembastRecordHelperMixin, () => ({
    __proto__: dart.getGetters(record_impl.SembastRecordHelperMixin.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(record_impl.SembastRecordHelperMixin, I[36]);
  var rawValue$ = dart.privateName(record_impl, "SembastRecordValue.rawValue");
  const _is_SembastRecordValue_default = Symbol('_is_SembastRecordValue_default');
  record_impl.SembastRecordValue$ = dart.generic(V => {
    var VL = () => (VL = dart.constFn(dart.legacy(V)))();
    class SembastRecordValue extends core.Object {
      get rawValue() {
        return this[rawValue$];
      }
      set rawValue(value) {
        this[rawValue$] = VL().as(value);
      }
    }
    (SembastRecordValue.new = function() {
      this[rawValue$] = null;
      ;
    }).prototype = SembastRecordValue.prototype;
    dart.addTypeTests(SembastRecordValue);
    SembastRecordValue.prototype[_is_SembastRecordValue_default] = true;
    dart.addTypeCaches(SembastRecordValue);
    dart.setLibraryUri(SembastRecordValue, I[36]);
    dart.setFieldSignature(SembastRecordValue, () => ({
      __proto__: dart.getFields(SembastRecordValue.__proto__),
      rawValue: dart.fieldType(dart.legacy(V))
    }));
    return SembastRecordValue;
  });
  record_impl.SembastRecordValue = record_impl.SembastRecordValue$();
  dart.addTypeTests(record_impl.SembastRecordValue, _is_SembastRecordValue_default);
  var _deleted = dart.privateName(record_impl, "SembastRecordMixin._deleted");
  var _deleted$ = dart.privateName(record_impl, "_deleted");
  record_impl.SembastRecordMixin = class SembastRecordMixin extends core.Object {};
  record_impl.SembastRecordMixin[dart.mixinOn] = Object => class SembastRecordMixin extends Object {
    get [_deleted$]() {
      return this[_deleted];
    }
    set [_deleted$](value) {
      this[_deleted] = value;
    }
    get deleted() {
      return this[_deleted$] === true;
    }
    set deleted(deleted) {
      return this[_deleted$] = deleted;
    }
    set value(value) {
      return this.rawValue = utils.sanitizeValueIfMap(value);
    }
  };
  (record_impl.SembastRecordMixin[dart.mixinNew] = function() {
    this[_deleted] = null;
  }).prototype = record_impl.SembastRecordMixin.prototype;
  dart.addTypeTests(record_impl.SembastRecordMixin);
  dart.addTypeCaches(record_impl.SembastRecordMixin);
  record_impl.SembastRecordMixin[dart.implements] = () => [record_impl.SembastRecord, record_impl.SembastRecordValue, core.Object];
  dart.setGetterSignature(record_impl.SembastRecordMixin, () => ({
    __proto__: dart.getGetters(record_impl.SembastRecordMixin.__proto__),
    deleted: dart.legacy(core.bool)
  }));
  dart.setSetterSignature(record_impl.SembastRecordMixin, () => ({
    __proto__: dart.getSetters(record_impl.SembastRecordMixin.__proto__),
    deleted: dart.legacy(core.bool),
    value: dart.dynamic
  }));
  dart.setLibraryUri(record_impl.SembastRecordMixin, I[36]);
  dart.setFieldSignature(record_impl.SembastRecordMixin, () => ({
    __proto__: dart.getFields(record_impl.SembastRecordMixin.__proto__),
    [_deleted$]: dart.fieldType(dart.legacy(core.bool))
  }));
  var _makeRevision = dart.privateName(record_impl, "_makeRevision");
  const value$4 = Symbol("value");
  const Object_SembastRecordMixin$36 = class Object_SembastRecordMixin extends core.Object {};
  (Object_SembastRecordMixin$36.new = function() {
    record_impl.SembastRecordMixin[dart.mixinNew].call(this);
  }).prototype = Object_SembastRecordMixin$36.prototype;
  dart.applyMixin(Object_SembastRecordMixin$36, record_impl.SembastRecordMixin);
  const Object_SembastRecordHelperMixin$36 = class Object_SembastRecordHelperMixin extends Object_SembastRecordMixin$36 {};
  (Object_SembastRecordHelperMixin$36.new = function() {
    Object_SembastRecordHelperMixin$36.__proto__.new.call(this);
  }).prototype = Object_SembastRecordHelperMixin$36.prototype;
  dart.applyMixin(Object_SembastRecordHelperMixin$36, record_impl.SembastRecordHelperMixin);
  const Object_RecordSnapshotMixin$36 = class Object_RecordSnapshotMixin extends Object_SembastRecordHelperMixin$36 {};
  (Object_RecordSnapshotMixin$36.new = function() {
    record_snapshot_impl.RecordSnapshotMixin[dart.mixinNew].call(this);
    Object_RecordSnapshotMixin$36.__proto__.new.call(this);
  }).prototype = Object_RecordSnapshotMixin$36.prototype;
  dart.applyMixin(Object_RecordSnapshotMixin$36, record_snapshot_impl.RecordSnapshotMixin);
  record_impl.ImmutableSembastRecord = class ImmutableSembastRecord extends Object_RecordSnapshotMixin$36 {
    set value(value) {
      dart.throw(new core.StateError.new("Record is immutable. Clone to modify it"));
    }
    get value() {
      return utils.immutableValue(super.value);
    }
    [_makeRevision]() {
      return record_impl.ImmutableSembastRecord._lastRevision = dart.notNull(record_impl.ImmutableSembastRecord._lastRevision) + 1;
    }
    toString() {
      let map = this.toDatabaseRowMap();
      if (this.revision != null) {
        map[$_set]("revision", this.revision);
      }
      return dart.toString(map);
    }
    set [value$4](x) {
      super.value = x;
    }
  };
  (record_impl.ImmutableSembastRecord.fromDatabaseRowMap = function(db, map) {
    record_impl.ImmutableSembastRecord.__proto__.new.call(this);
    let storeName = T$.StringL().as(map[$_get]("store"));
    let storeRef = storeName == null ? sembast_impl.mainStoreRef : store_ref.StoreRef.new(storeName);
    this.ref = storeRef.record(map[$_get]("key"));
    this[value$4] = utils.sanitizeValueIfMap(map[$_get]("value"));
    this[_deleted$] = dart.equals(map[$_get]("deleted"), true);
    this.revision = this[_makeRevision]();
  }).prototype = record_impl.ImmutableSembastRecord.prototype;
  (record_impl.ImmutableSembastRecord.new = function(ref, value, opts) {
    let deleted = opts && 'deleted' in opts ? opts.deleted : null;
    record_impl.ImmutableSembastRecord.__proto__.new.call(this);
    this.ref = ref;
    this[value$4] = value;
    this[_deleted$] = deleted;
    this.revision = this[_makeRevision]();
  }).prototype = record_impl.ImmutableSembastRecord.prototype;
  dart.addTypeTests(record_impl.ImmutableSembastRecord);
  dart.addTypeCaches(record_impl.ImmutableSembastRecord);
  dart.setMethodSignature(record_impl.ImmutableSembastRecord, () => ({
    __proto__: dart.getMethods(record_impl.ImmutableSembastRecord.__proto__),
    [_makeRevision]: dart.fnType(dart.legacy(core.int), [])
  }));
  dart.setLibraryUri(record_impl.ImmutableSembastRecord, I[36]);
  dart.defineExtensionMethods(record_impl.ImmutableSembastRecord, ['toString']);
  dart.defineLazy(record_impl.ImmutableSembastRecord, {
    /*record_impl.ImmutableSembastRecord._lastRevision*/get _lastRevision() {
      return 0;
    },
    set _lastRevision(_) {}
  }, true);
  record_impl.ImmutableSembastRecordJdb = class ImmutableSembastRecordJdb extends record_impl.ImmutableSembastRecord {};
  (record_impl.ImmutableSembastRecordJdb.new = function(ref, value, opts) {
    let deleted = opts && 'deleted' in opts ? opts.deleted : null;
    let revision = opts && 'revision' in opts ? opts.revision : null;
    record_impl.ImmutableSembastRecordJdb.__proto__.new.call(this, ref, value, {deleted: deleted});
    this.revision = revision;
  }).prototype = record_impl.ImmutableSembastRecordJdb.prototype;
  dart.addTypeTests(record_impl.ImmutableSembastRecordJdb);
  dart.addTypeCaches(record_impl.ImmutableSembastRecordJdb);
  dart.setLibraryUri(record_impl.ImmutableSembastRecordJdb, I[36]);
  var record$0 = dart.privateName(record_impl, "TxnRecord.record");
  const Object_SembastRecordHelperMixin$36$ = class Object_SembastRecordHelperMixin extends core.Object {};
  (Object_SembastRecordHelperMixin$36$.new = function() {
  }).prototype = Object_SembastRecordHelperMixin$36$.prototype;
  dart.applyMixin(Object_SembastRecordHelperMixin$36$, record_impl.SembastRecordHelperMixin);
  record_impl.TxnRecord = class TxnRecord extends Object_SembastRecordHelperMixin$36$ {
    get record() {
      return this[record$0];
    }
    set record(value) {
      this[record$0] = value;
    }
    _get(field) {
      return this.record._get(field);
    }
    get deleted() {
      return this.record.deleted;
    }
    get key() {
      return this.record.key;
    }
    get value() {
      return this.record.value;
    }
    get ref() {
      return this.record.ref;
    }
    cast(RK, RV) {
      return this.record.cast(dart.legacy(RK), dart.legacy(RV));
    }
    get nonDeletedRecord() {
      return dart.test(this.deleted) ? null : this.record;
    }
  };
  (record_impl.TxnRecord.new = function(record) {
    this[record$0] = record;
    ;
  }).prototype = record_impl.TxnRecord.prototype;
  dart.addTypeTests(record_impl.TxnRecord);
  dart.addTypeCaches(record_impl.TxnRecord);
  record_impl.TxnRecord[dart.implements] = () => [record_impl.SembastRecord];
  dart.setMethodSignature(record_impl.TxnRecord, () => ({
    __proto__: dart.getMethods(record_impl.TxnRecord.__proto__),
    _get: dart.fnType(dart.dynamic, [dart.legacy(core.String)]),
    cast: dart.gFnType((RK, RV) => [dart.legacy(record_snapshot.RecordSnapshot$(dart.legacy(RK), dart.legacy(RV))), []])
  }));
  dart.setGetterSignature(record_impl.TxnRecord, () => ({
    __proto__: dart.getGetters(record_impl.TxnRecord.__proto__),
    deleted: dart.legacy(core.bool),
    key: dart.dynamic,
    value: dart.dynamic,
    ref: dart.legacy(record_ref.RecordRef),
    nonDeletedRecord: dart.legacy(record_impl.ImmutableSembastRecord)
  }));
  dart.setLibraryUri(record_impl.TxnRecord, I[36]);
  dart.setFieldSignature(record_impl.TxnRecord, () => ({
    __proto__: dart.getFields(record_impl.TxnRecord.__proto__),
    record: dart.fieldType(dart.legacy(record_impl.ImmutableSembastRecord))
  }));
  record_impl.isMapRecord = function isMapRecord(map) {
    let key = map[$_get]("key");
    return key != null;
  };
  record_impl.makeImmutableRecordJdb = function makeImmutableRecordJdb(record) {
    if (T$.ImmutableSembastRecordJdbL().is(record)) {
      return record;
    } else if (record == null) {
      return null;
    }
    return new record_impl.ImmutableSembastRecordJdb.new(record.ref, utils.cloneValue(record.value), {deleted: record.deleted});
  };
  record_impl.makeImmutableRecordSnapshot = function makeImmutableRecordSnapshot(record) {
    if (T$.ImmutableSembastRecordL().is(record)) {
      return record;
    } else if (T$.SembastRecordSnapshotL().is(record)) {
      return record;
    } else if (record == null) {
      return null;
    }
    return new record_snapshot_impl.SembastRecordSnapshot.new(record.ref, utils.cloneValue(record.value));
  };
  record_impl.immutableListToSnapshots = function immutableListToSnapshots(K, V, records) {
    let t73;
    t73 = records[$map](dart.legacy(record_snapshot_impl.SembastRecordSnapshot$(dart.legacy(K), dart.legacy(V))), dart.fn(immutable => new (record_snapshot_impl.SembastRecordSnapshot$(dart.legacy(K), dart.legacy(V))).fromRecord(immutable), dart.fnType(dart.legacy(record_snapshot_impl.SembastRecordSnapshot$(dart.legacy(K), dart.legacy(V))), [T$.ImmutableSembastRecordL()])));
    return t73 == null ? null : t73[$toList]({growable: false});
  };
  var snapshot = dart.privateName(boundary_impl, "SembastBoundary.snapshot");
  var values$ = dart.privateName(boundary_impl, "SembastBoundary.values");
  var include$ = dart.privateName(boundary_impl, "SembastBoundary.include");
  var _toDebugMap$ = dart.privateName(boundary_impl, "_toDebugMap");
  boundary_impl.SembastBoundary = class SembastBoundary extends core.Object {
    get snapshot() {
      return this[snapshot];
    }
    set snapshot(value) {
      super.snapshot = value;
    }
    get values() {
      return this[values$];
    }
    set values(value) {
      this[values$] = value;
    }
    get include() {
      return this[include$];
    }
    set include(value) {
      this[include$] = value;
    }
    [_toDebugMap$]() {
      let debugMap = new (T$.IdentityMapOfStringL$dynamic()).new();
      if (this.values != null) {
        debugMap[$_set]("values", dart.toString(this.values));
      } else if (this.snapshot != null) {
        debugMap[$_set]("snapshot", dart.toString(this.snapshot));
      }
      debugMap[$_set]("include", this.include);
      return debugMap;
    }
    toString() {
      return dart.toString(this[_toDebugMap$]());
    }
  };
  (boundary_impl.SembastBoundary.new = function(opts) {
    let record = opts && 'record' in opts ? opts.record : null;
    let include = opts && 'include' in opts ? opts.include : null;
    let values = opts && 'values' in opts ? opts.values : null;
    this[values$] = values;
    this[include$] = include === true;
    this[snapshot] = record_impl.makeImmutableRecordSnapshot(record);
    ;
  }).prototype = boundary_impl.SembastBoundary.prototype;
  dart.addTypeTests(boundary_impl.SembastBoundary);
  dart.addTypeCaches(boundary_impl.SembastBoundary);
  boundary_impl.SembastBoundary[dart.implements] = () => [boundary.Boundary];
  dart.setMethodSignature(boundary_impl.SembastBoundary, () => ({
    __proto__: dart.getMethods(boundary_impl.SembastBoundary.__proto__),
    [_toDebugMap$]: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)), []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(boundary_impl.SembastBoundary, I[37]);
  dart.setFieldSignature(boundary_impl.SembastBoundary, () => ({
    __proto__: dart.getFields(boundary_impl.SembastBoundary.__proto__),
    snapshot: dart.finalFieldType(dart.legacy(record_snapshot.RecordSnapshot)),
    values: dart.fieldType(dart.legacy(core.List)),
    include: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(boundary_impl.SembastBoundary, ['toString']);
  boundary.Boundary = class Boundary extends core.Object {
    static new(opts) {
      let record = opts && 'record' in opts ? opts.record : null;
      let include = opts && 'include' in opts ? opts.include : null;
      let values = opts && 'values' in opts ? opts.values : null;
      return new boundary_impl.SembastBoundary.new({record: record, include: include, values: values});
    }
  };
  (boundary.Boundary[dart.mixinNew] = function() {
  }).prototype = boundary.Boundary.prototype;
  dart.addTypeTests(boundary.Boundary);
  dart.addTypeCaches(boundary.Boundary);
  dart.setLibraryUri(boundary.Boundary, I[38]);
  dart.trackLibraries("packages/sembast/src/sembast_codec.dart", {
    "package:sembast/src/sembast_codec.dart": sembast_codec,
    "package:sembast/src/api/database.dart": database,
    "package:sembast/src/api/codec.dart": codec,
    "package:sembast/src/records_ref_impl.dart": records_ref_impl,
    "package:sembast/src/record_ref_impl.dart": record_ref_impl,
    "package:sembast/src/sembast_codec_impl.dart": sembast_codec_impl,
    "package:sembast/src/database_content.dart": database_content,
    "package:sembast/src/query_ref_impl.dart": query_ref_impl,
    "package:sembast/src/api/query_ref.dart": query_ref,
    "package:sembast/src/listener.dart": listener,
    "package:sembast/src/meta.dart": meta$,
    "package:sembast/src/storage.dart": storage,
    "package:sembast/src/sembast_jdb.dart": sembast_jdb,
    "package:sembast/src/json_encodable_codec.dart": json_encodable_codec,
    "package:sembast/src/jdb.dart": jdb,
    "package:sembast/src/api/field.dart": field$,
    "package:sembast/src/api/v2/database.dart": database$,
    "package:sembast/src/api/v2/sembast.dart": sembast,
    "package:sembast/src/api/v2/factory.dart": factory,
    "package:sembast/src/api/factory.dart": factory$,
    "package:sembast/src/database_factory_mixin.dart": database_factory_mixin,
    "package:sembast/src/api/protected/jdb.dart": jdb$,
    "package:sembast/src/database_impl.dart": database_impl,
    "package:sembast/src/database_client_impl.dart": database_client_impl,
    "package:sembast/src/transaction_impl.dart": transaction_impl,
    "package:sembast/src/store_impl.dart": store_impl,
    "package:sembast/src/finder_impl.dart": finder_impl,
    "package:sembast/src/sort_order_impl.dart": sort_order_impl,
    "package:sembast/src/api/sort_order.dart": sort_order,
    "package:sembast/src/utils.dart": utils,
    "package:sembast/src/record_snapshot_impl.dart": record_snapshot_impl,
    "package:sembast/src/filter_impl.dart": filter_impl,
    "package:sembast/src/api/filter.dart": filter,
    "package:sembast/src/api/finder.dart": finder,
    "package:sembast/src/store_ref_impl.dart": store_ref_impl,
    "package:sembast/src/sembast_impl.dart": sembast_impl,
    "package:sembast/src/api/record_snapshot.dart": record_snapshot,
    "package:sembast/src/api/records_ref.dart": records_ref,
    "package:sembast/src/api/store_ref.dart": store_ref,
    "package:sembast/src/api/record_ref.dart": record_ref,
    "package:sembast/src/record_impl.dart": record_impl,
    "package:sembast/src/boundary_impl.dart": boundary_impl,
    "package:sembast/src/api/boundary.dart": boundary,
    "package:sembast/src/api/sembast.dart": sembast$,
    "package:sembast/sembast.dart": sembast$0
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["sembast_codec.dart","api/codec.dart","records_ref_impl.dart","record_ref_impl.dart","sembast_codec_impl.dart","database_content.dart","query_ref_impl.dart","api/query_ref.dart","listener.dart","meta.dart","storage.dart","sembast_jdb.dart","database_factory_mixin.dart","json_encodable_codec.dart","jdb.dart","api/field.dart","api/v2/database.dart","api/v2/factory.dart","database_impl.dart","database_client_impl.dart","transaction_impl.dart","store_impl.dart","finder_impl.dart","sort_order_impl.dart","api/sort_order.dart","utils.dart","record_snapshot_impl.dart","filter_impl.dart","api/filter.dart","api/finder.dart","store_ref_impl.dart","sembast_impl.dart","api/record_snapshot.dart","api/records_ref.dart","api/store_ref.dart","api/record_ref.dart","record_impl.dart","boundary_impl.dart","api/boundary.dart"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6EAMmE;AAC7D,uBAAe,+BACR,iBACI,0BACS,2DAA6B,QAAQ;AAC7D,UAAO,aAAY;EACrB;;MAGa,iCAAmB;YAC5B,wCAAyB,sCAAC,sCAAoB;;;;;;UCQtB;UACe;UACd;AACvB,qEACe,SAAS,SACb,KAAK,sBACQ,kBAAkB;IAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QCpBhC;;;;;;QAEP;;;;;;aAGwB;AAAU,gBAAA,AAAM,mBAAO,AAAI,iBAAC,KAAK;QAAE;eAItC;AACvB,uBAAS,+BAAU,cAAc;AACrC,gBAAO,AAAO,OAAD,6BAAe,QAAC;AACvB,+BAAe,AAAO,MAAD,iBAAiB;AAC1C,kBAAO,AAAa,aAAD,cAAc,GAAG,EAAE;;QAE1C;qBAKmB;AAD4B;AAEzC,yBAAS,+BAAU,cAAc;AAErC,kBAAO,AACF,AACA,OAFQ,iBACQ,8CACM,AAAO,MAAD,qBAAqB;UACxD;;YAGmC;yBAAwB;AACzD,cAAI,AAAO,MAAD,aAAW,AAAK;AAC6C,YAArE,WAAM,2BAAc;;AAElB,uBAAS,+BAAU,cAAc;AACrC,gBAAO,AAAO,OAAD,4BAAe,QAAC;;AAC3B,kBAAQ,MAAM,AAAO,AAAuB,MAAxB,iBAAiB,sBAAiB,GAAG,EAAE,MAAM,EAAE;gCAAK,OAClE;UACP;QACH;YAGmC;yBAAwB;cACjD;AACR,cAAI,AAAO,MAAD,aAAW,AAAK;AAC6C,YAArE,WAAM,2BAAc;;AAElB,uBAAS,+BAAU,cAAc;AACrC,gBAAO,AAAO,OAAD,4BAAe,QAAC;;AAC3B,kBAAQ,MAAM,AACL,AACA,MAFW,iBACK,sBACN,GAAG,EAAE,MAAM,EAAE,mBAAa,KAAK;gCAAC,OAC7C;UACP;QACH;eAGsC;yBAAwB;AAC5D,cAAI,AAAO,MAAD,aAAW,AAAK;AAC6C,YAArE,WAAM,2BAAc;;AAElB,uBAAS,+BAAU,cAAc;AACrC,gBAAO,AAAO,OAAD,4BAAe,QAAC;;AAC3B,kBAAQ,MAAM,AACL,AACA,MAFW,iBACK,yBACH,GAAG,EAAE,MAAM,EAAE;gCAAK,OAClC;UACP;QACH;YAGmC;AAAhB;AACf,kBACK,AACA,EAFJ,MAAM,kBAAa,MAAM,eACjB,QAAC;;AAAa,2BAAQ;kCAAR,OAAU;kEACX;UAAM;;;;AAGX,gBAAA,AAAgC,sDAArB,OAAO,YAAK,gBAAG,aAAI;QAAE;;;AAKnD,cAAS,0EAAL;AACF,kBAAY,2EAAL;;AAET,gBAAO,AAAM,AAAe,yFAAQ,OAAM;QAC5C;;;;;;MArFe;MAEP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCAyFyB,OAAmB;AAApD;AACE,UAAI,AAAK,IAAD;AAC2C,QAAjD,WAAM,2BAAc;;AAEJ,MAAb,aAAQ,KAAK;AACsB,MAAnC,YAAO,AAAK,IAAD,qBAAkB;IACpC;;;;;;;;;;;;;;;;;;;;QC5Fe;;;;;;QAEb;;;;;;;;AAGmB,gBAAA,AAA8B,qDAApB,OAAO,YAAK,gBAAG,YAAG;QAAE;;AAKjD,cAAS,wEAAL;AACF,kBAAY,yEAAL;;AAET,gBAAO,AAAM,AAAe,0DAAW,mBAAJ;QACrC;;AAGoB,gBAAI,eAAJ;QAAY;;cAGf;AACf,cAAU,mBAAN,KAAK;AACP,kBAAmB,AAAS,aAArB,AAAM,KAAD,QAAU,eAAmB,YAAV,AAAM,KAAD,MAAQ;;AAE9C,gBAAO;QACT;;;;;;;MAzBe;MAEb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qCA6B8B,OAAS;AAAzC;AACoB,MAAb,aAAQ,KAAK;AACJ,MAAT,WAAM,GAAG;IAChB;;;;;;;;;sHAQgC;AAAU,wGAA4B,KAAK;EAAC;;AAAvD,mBAAW,sGAAX,KAAK;EAAkD;4GAK/C,gBAAkB;AAAlC;AACP,mBAAS,+BAAU,cAAc;AACsB,MAA3D,QAAQ,AAAO,AAAgB,MAAjB,oDAAuC,KAAK;AAC1D,YAAO,OAAM,AAAO,MAAD,+BAAe,QAAC,OAC1B,AAAO,AAAuB,MAAxB,iBAAiB,kDAAc,GAAG,EAAE,KAAK,EAAE;IAE5D;;;AANU,oBAAmB,gBAAkB,kGAArC,cAAc,EAAd,KAAK;EAMf;4GAO6B,gBAAkB;QAAa;AAA/C;AACP,mBAAS,+BAAU,cAAc;AACqC,MAA1E,QAAQ,AAAO,AAAgB,MAAjB,oDAAuC,KAAK,WAAU,KAAK;AACzE,YAIG,mBAJI,MAAM,AAAO,MAAD,6BAAe,QAAC,OAC1B,AACF,AACA,MAFQ,iBACQ,oBACT,GAAG,EAAE,KAAK,EAAE,mBAAY,KAAK;IAE7C;;;AARU,oBAAmB,gBAAkB;UAAa;AAAlD,mHAAc,EAAd,KAAK,UAAL,KAAK;;EAQf;kHAQgC,gBAAkB;AAAlC;AACV,mBAAS,+BAAU,cAAc;AACoC,MAAzE,QAAQ,AAAO,AAAgB,MAAjB,oDAAuC,KAAK,WAAU;AACpE,YAEG,mBAFI,MAAM,AAAO,MAAD,6BAAe,QAAC,OAC1B,AAAO,AAAuB,MAAxB,iBAAiB,uBAAiB,GAAG,EAAE,KAAK,EAAE;IAE/D;;;AANU,oBAAsB,gBAAkB,qGAAxC,cAAc,EAAd,KAAK;EAMf;4GAG6B;AAAhB;;AACT,YAAC,MAAM,gGAAY,cAAc;0BAAC,OAAG;IAAK;;;AADpC,mBAAmB,0GAAnB,cAAc;EACsB;4HAI3B;AADqB;;AAElC,mBAAS,+BAAU,cAAc;AAEjC,oBAAS,MAAM,AACd,AACA,MAFoB,iBACJ,0BACH,AAAO,MAAD,qBAAqB;AAC7C,YAAO,MAAM;2BAAN,OAAQ;IACjB;;;AAR6B,mBACV,kHADU,cAC9B;EAOC;0HAKiD;AAC3C,aAAK,0BAAY,QAAQ;AACE;AAkB7B,IAjBF,OAAO,AAAG,AAAS,EAAV,sEAAoC;AAgBxC,QAdH,AAcC;AADG,UAZF,MAAM,AAAG,AAAiB,EAAlB,0CAA+B;AAErC;AAEM,8BAAW,MAAM,gGAAY,QAAQ;AACzC;AAC6C,gBAA3C,WAAM,AAAoC,uBAAzB,IAAI,oBAAG,QAAQ;;AAEhB,cAAlB,AAAK,IAAD,KAAK,QAAQ;;kBACV;kBAAO;AACkB,cAAhC,AAAK,IAAD,UAAU,KAAK,EAAE,UAAU;;UAElC;QACF;;AAEH,UAAO,AAAK,KAAD;EACb;;AAtB6B,mBAAoB,2GAApB,QAAQ;EAsBrC;kHAGmC;AAC7B,iBAAS,+BAAU,cAAc;AACrC,UAAO,AACF,AACA,OAFQ,iBACQ,6BACA,AAAO,MAAD,qBAAqB;EAClD;;AALa,mBAAsB,6GAAtB,cAAc;EAK3B;kHAG6B;AACvB,iBAAS,+BAAU,cAAc;AACrC,UAAO,AAAO,OAAD,6BAAe,QAAC,OACpB,AAAO,AAAuB,MAAxB,iBAAiB,uBAAiB,GAAG,EAAE;EAExD;;AALO,mBAAsB,6GAAtB,cAAc;EAKrB;;;;;IClJa;;;;;;IAEgB;;;;;;IAGV;;;;;;;AAWE,YAAA,AAA0B,4BAAX,kBAAS;IAAE;;;;QAP3B;QACD;QACc;IAFb;IACD;IAEM,6BACI,MAAnB,kBAAkB,EAAlB,cAAsB;;EAAgC;;;;;;;;;;;;;;;;;sEAOb;AACnD,QAAI,KAAK;AACP,YAAwB,+CAAC,aAAa,AAAM,KAAD;;AAE7C,UAAO;EACT;kFAG6C;;AAC3C,eAAI,KAAK,gBAAL,OAAO;AACT,aAAO,AAAM,KAAD;4BAAC,OAAO,YAAO,sCAAmB,KAAK;;AAErD,UAAO;EACT;kFAIiB,OAAc;;AAC7B,QAAI,KAAK,YAAY,gBAAgB;AACnC;AACM,4BAAS,AAAM,KAAD,sBAAC,OAAO,WAAO,gBAAgB;AACjD,YAAW,aAAP,MAAM;AACR,gBAAO,AAAO,OAAD;;;YAER;;;AAEX,UAAO;EACT;sFAK6C,OAAc;;AACzD,QAAqB,OAAjB,KAAK,gBAAL,OAAO,0BAAqB,AAAiB,gBAAD;AAE9C,YAAO;;AAEL,0BAAkB,sCAAmB,KAAK;AAC1C,2BAAmB,4CAAyB,KAAK,EAAE,gBAAgB;AACnE,kBAAU;AACd,QAAI,AAAgB,eAAD;AACjB,UAAI,gBAAgB;AACH,QAAf,UAAU;;UAEP,KAAI,AAAiB,gBAAD;AACV,MAAf,UAAU;;AAEV,UAAK,AAAgB,eAAD,aAAW,AAAiB,gBAAD,uBAC1C,AAAiB,gBAAD;AACJ,QAAf,UAAU;;AAGV,YAAI,AAAiB,AAAK,gBAAN,mBAAe,AAAgB,AAAK,eAAN;AACjC,UAAf,UAAU;cACL,kBAAI,AAAiB,AAAO,gBAAR,mBACvB,AAAgB,AAAO,eAAR;AACF,UAAf,UAAU;;;;AAKhB,SAAK,OAAO;AACqD,MAA/D,WAAwB,6CAAa;;EAEzC;;;;ICvFiB;;;;;;;AASiC,YAAA,AAAK;IAAM;WAGd;AAC3C,eAAS,SAAU,QAAO;AACb,QAAX,SAAI,MAAM;;IAEd;QAGgC;AACL,MAAzB,AAAI,kBAAC,AAAO,MAAD,MAAQ,MAAM;IAC3B;WAG8B;AAAQ,YAAA,AAAI,mBAAC,GAAG;IAAC;;AAG1B,YAAiC,UAA9B,AAAM,mBAAK,eAAG,AAAQ;IAAQ;;gDArBpC;IAHZ,aAAwC;IAG5B;;EAAM;;;;;;;;;;;;;;;;;;;;;;;;AA+BD,YAAA,AAAK;IAAU;;AAGD,YAAA,AAAK;IAAM;WAGH;AAC3C,eAAS,SAAU,QAAO;AACP,QAAjB,eAAU,MAAM;;IAEpB;cAGsC;AAChC,kBAAQ,AAAO,AAAI,MAAL;AACd,oBAAU,cAAS,KAAK;AACT,MAAnB,AAAQ,OAAD,KAAK,MAAM;IACpB;aAG+B;;AACzB,qBAAsB,MAAZ,kBAAK,KAAK,QAAN,iBAAQ,qBAAI,sCAAa,KAAK,GAA9B;AAClB,YAAO,QAAO;IAChB;UAG4B;AAAU,YAAA,AAAI,mBAAC,KAAK;IAAC;;AAG5B,YAAS,UAAP;IAAO;;;IAhCxB,aAA+B;;EAiCvC;;;;;;;;;;;;;;;;;;;;;;;;gBAK4B;AACN,MAAlB,AAAK,oBAAO,KAAK;IACnB;;AAIc,MAAZ,AAAK;IACP;;AAIE,oBAAI;AACE,2BAAe,AAAK,AAAO;AACA,QAA/B,AAAK,oBAAO,AAAa,YAAD;AACxB,cAAO,aAAY;;AAErB,YAAO;IACT;;;;;EACF;;;;;;;;;;;;;AAOoC;IAAQ;iBAGd;AACN,MAApB,AAAS,qBAAI,MAAM;AACK,MAAxB,eAAU,AAAO,MAAD;IAClB;uBAGiC,OAA2B;AACI,MAA9D,AAAgB,cAAP,KAAK,SAAS,AAAQ,OAAD,qCAAK,QAAC,UAAW,AAAO,MAAD;AAC7B,MAAxB,AAAS,wBAAO,OAAO;IACzB;;;IAfM,iBAAsB;;;EAgB9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MCvGuB;;;;;;MAID;;;;;;;AAaC,cAAiB,UAAf,cAAK,eAAE,eAAM;MAAE;kBAGkB;AAClD,iBAAK,0BAAY,QAAQ;AAEC;AAyB5B,QAxBF,OAAO,AAAG,AAAS,EAAV,+BAAmB,iBAAgB;AAM1C;AAcI,cAbF,MAAM,AAAG,AAAiB,EAAlB,0CAA+B;;AAEjC,mCAAc,MACb,gFAD0B,6BAAN,aACC,QAAQ,6CAClB,OAAQ;AAIxB;AACyD,kBAAvD,WAAM,AAAgD,uBAArC,IAAI,oBAAI,AAAY,WAAD,aAAQ,kBAAK;;AAGT,gBAA1C,MAAM,AAAK,IAAD,KAAK,WAAW,EAAE,AAAG,EAAD;cAC/B;;kBACM;kBAAO;AACkB,cAAhC,AAAK,IAAD,UAAU,KAAK,EAAE,UAAU;;UAElC;AACD,cAAO,AAAK,KAAD;MACb;mBAG+D;AAC3D,cAAM,6DAAN,YAAW,MAAM,WAAU;MAAO;kBAGkB;AACpD,cAAM,kEAAN,YAAgB,MAAM,WAAU;MAAO;iBAGM;;AAC/C,8CAAI,OAAQ,eAAS;AACnB,gBAAO,AACF,oCADkB,YAAO,iCAAqB,yBACnC,QAAQ;;AAE1B,cAAO,AACF,kBADc,QAAQ,gCAClB,QAAC,kBAAS,AAAK,IAAD,iBAAc,AAAK,IAAD,WAAS;MACpD;;oCA3DS,OAES;;MAFT;MAGI,gBAAkB,8BAAhB,MAAM,gBAAN,OAAQ;;IAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICHzB;;;;;;;;;;;;ICNM;AAGa,IAAf,YAAQ,mCAAF,aAAE,oCAAF;EACR;;;;;;;;;MAPW,gCAAO;YAAG;;;;;;;;;;;;;;;;;;;;MAaL;;;;;;MAGY;;;;;;MAUD;;;;;;;AANA,cAAA,AAAa;MAAO;;AAG1B,cAAA,AAAkB;MAAQ;;AAQnB,cAAA,AAAS;MAAM;;;AAGX,cAAe,8DAAf,OAAQ;MAA2B;;;AAIvC,cAA1B;6BAAmB;MACrB;;AAwBiD,cAAA,AAAkB;MAAM;;AAElD,cAAU,YAAT,4BAAY,AAAkB;MAAW;UAIhC,aAAwB;AAD/C;;AAER,yBAAK;AACH;;AAIwB,UAA1B,qBAAe,WAAW;AACtB,qBAAO,yBAAa,oBAAc;AAEtC,yBAAK;AACH;;AAI0D,gBAA5D;+BAAmB,QAAI,iDAA+B,IAAI;QAC5D;;eAGsB,OAAkB;AACtC,uBAAK;AACH;;AAE2C,QAA7C,AAAkB,iCAAS,KAAK,EAAE,UAAU;MAC9C;aAMqC,SAAoB;AAD5C;;AAEX,yBAAK;AACH;;AAGE,2BAAa;AAGb,4BAAc,wCAAkC;AAEhD,qBAAW,8BAAK,AAAQ,OAAD,qBAAK,QAAC,UAAW,AAAO,MAAD;AAElD,mBAAK,OAAO;AACV,0BAAI,AAAK,IAAD,UAAmB,WAAT,QAAQ;AACP,cAAjB,aAAa;AACb,oBAAO;;AAET,kBAAO;;;AAIsB,UAA/B,AAAY,WAAD,eAAa,MAAM;AAE9B,mBAAS,YAAa,QAAO;AAC3B,2BAAK;AACH;;AAIE,0BAA6B,WAAlB,AAAU,SAAD,uBAEpB,6CAAiC,aAAQ,SAAS;AAEtD,gBAAI,OAAO;AACQ,cAAjB,aAAa;AAKC,cAHd,AAAY,WAAD,UACP,oDAAgB,WAAW,EAAE,SAAS,GACX,yCAAvB,OAAQ,mCAAR,uCACJ,SAAS;;AAGf,2BAA8B,iBAA1B,UAAU,kBAAV,OAAY,sBAAZ,gBAA6B;AACH,cAA5B,MAAM,AAAW,UAAD;;;AAGpB,wBAAI;AACF;;AAEF,cAAI,UAAU;AACsB,YAAlC,MAAM,SAAI,WAAW,EAAE,UAAU;;QAErC;;;AAGqB,cAAA,AAAyB,iCAAL,aAAG;MAAE;;AAI5C,sBAAI;AACF;AACoC,YAAlC,WAAM,AAA2B,kCAAL;;AAEpB,UAAV,AAAQ;;MAEZ;;4CAzHyC,UAAe;UACpC;MA1ByB;MASlB;MACE;MAe2B;MACpC;AADpB;AAiBI,MAbF,0BACI,iEAAuD;AAEzD;AACyB,YAAvB,WAAM,AAAgB,uBAAL;;AAEO,UAA1B,AAAS,QAAD,aAAa;AACd,UAAP;uCACW;AACX;AACyB,YAAvB,WAAM,AAAgB,uBAAL;;AAET,UAAV,AAAQ;;IAEZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6GsB;;;;;;MAGN;;;;;;MAGX;;;;;;;AAKsB,QAAzB,AAAkB;MACpB;;AAGqB,cAAA,AAAkB;MAAQ;;AAqBJ,cAAA,AAAkB;MAAM;;AAG5C,cAAU,YAAT,4BAAY,AAAkB;MAAW;UAGzC;;AACtB,uBAAK;AACH;;AAEmB,QAArB,sBAAiB;AAC4B,QAA7C,AAAkB,mCAAI,QAAQ,gBAAR,OAAU;MAClC;eAGsB,OAAkB;AACtC,uBAAK;AACH;;AAE2C,QAA7C,AAAkB,iCAAS,KAAK,EAAE,UAAU;MAC9C;;AAGqB,cAAA,AAAgC,wCAAL,aAAG;MAAE;;AAInD,sBAAI;AACF;AACoC,YAAlC,WAAM,AAA2B,kCAAL;;AAEpB,UAAV,AAAQ;;MAEZ;;6CAnD0C,UAAe;UACrC;MAbf,uBAAiB;MACiB;MAWkB;MACrC;AADpB;AAcI,MAZF,0BAAoB,0DAAiD;AACnE;AACyB,YAAvB,WAAM,AAAgB,uBAAL;;AAGQ,UAA3B,AAAS,QAAD,cAAc;AACf,UAAP;uCACW;AACX;AACyB,YAAvB,WAAM,AAAgB,uBAAL;;AAET,UAAV,AAAQ;;IAEZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA0Ce;;;;;;oBASK,WAA0C;AACxD,gBAAM,AAAU,SAAD;AACf,iBAAO,AAAQ,uBAAC,GAAG;AACvB,UAAI,AAAK,IAAD;AAC6B,QAAnC,OAAiC;AACb,QAApB,AAAQ,uBAAC,GAAG,EAAI,IAAI;;AAER,MAAd,AAAK,IAAD,OAAK,IAAI;AACb,YAAO,KAAI;IACb;mBAIkC;AACd,MAAlB,AAAS,qBAAI,IAAI;AACjB,YAAO,KAAI;IACb;gBAGyC;AAC3B,MAAZ,AAAK,IAAD;AACiB,MAArB,AAAS,wBAAO,IAAI;IACtB;iBAG2C;AAC7B,MAAZ,AAAK,IAAD;AACA,gBAAM,AAAK,AAAU,IAAX;AACV,iBAAO,AAAQ,uBAAC,GAAG;AACvB,UAAI,IAAI;AACW,QAAjB,AAAK,IAAD,UAAQ,IAAI;AAChB,sBAAI,AAAK,IAAD;AACc,UAApB,AAAS,yBAAO,GAAG;;;IAGzB;;AAGoC,YAAA,AAAS;IAAI;+BAI7B;;AAClB,YAAO,AAAQ,uBAAC,AAAU,SAAD;2BAAV,OAAiB;IAClC;yBAGkC;AAAQ,YAAA,AAAS,+BAAY,GAAG;IAAC;sBAGpC;AAC3B,YAAiB,WAAjB,oCAAoB,0BAAqB,GAAG;IAAC;;AAGpB,YAAA,AAAS;IAAU;;AAI9C,YAAO,AAAS;IAClB;;AAGoB,YAAiB,WAAjB,AAAS,wCAAW,AAAS;IAAO;;AAItD,eAAS,OAAQ,AAAS;AACxB,iBAAS,mBAAoB,KAAI;AACL,UAA1B,AAAiB,gBAAD;;;AAGpB,eAAS,kBAAmB;AACD,QAAzB,AAAgB,eAAD;;IAEnB;;yCA9EmB;IAJb,kBAAoD;IACpD,iBAAoC;IAGvB;;EAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsFF,YAAA,AAAQ;IAAU;;AAGrB,YAAA,AAAQ;IAAO;oBAG4B;UAChC;AACzB,iBACA,6EAA+B,MAAM,SAAS,aAAY,QAAQ;AAClE,qBAAW,AAAU,SAAD;AACpB,kBAAQ,AAAO,qBAAC,QAAQ;AAC5B,UAAI,AAAM,KAAD;AACwB,QAA/B,QAAQ,+BAAc,QAAQ;AACL,QAAzB,AAAO,qBAAC,QAAQ,EAAI,KAAK;;AAE3B,YAAO,AAAM,MAAD,2CAAiB,SAAS,EAAE,IAAI;IAC9C;mBAG4D;UAC7B;AACzB,iBAAO,8CAAS,QAAQ,aAAY,QAAQ;AACxB,MAAxB,wDAAmB,IAAI;AACvB,YAAO,KAAI;IACb;mBAG4D;UAC7B;AACzB,gBAAe,gFAAT,QAAQ;AACd,iBAAO,4EAA8B,MAAM,GAAG,aAAY,QAAQ;AACtE,YAAO,KAAI;IACb;6BAG4D;AACtD,qBAAW,AAAK,AAAS,IAAV;AACf,kBAAQ,AAAO,qBAAC,QAAQ;AAC5B,UAAI,AAAM,KAAD;AACwB,QAA/B,QAAQ,+BAAc,QAAQ;AACL,QAAzB,AAAO,qBAAC,QAAQ,EAAI,KAAK;;AAED,MAA1B,AAAM,KAAD,0CAAgB,IAAI;IAC3B;iBAG2C;AAC7B,MAAZ,AAAK,IAAD;AACA,sBAAY,AAAK,IAAD;AAChB,qBAAW,AAAU,SAAD;AACpB,kBAAQ,AAAO,qBAAC,QAAQ;AAC5B,UAAI,KAAK;AACiB,QAAxB,AAAM,KAAD,cAAc,IAAI;AACvB,sBAAI,AAAM,KAAD;AACiB,UAAxB,AAAQ,uBAAO,QAAQ;;;IAG7B;gBAGyC;AAC3B,MAAZ,AAAK,IAAD;AACA,qBAAW,AAAK,AAAS,IAAV;AACf,kBAAQ,AAAO,qBAAC,QAAQ;AAC5B,UAAI,KAAK;AACgB,QAAvB,AAAM,KAAD,aAAa,IAAI;AACtB,sBAAI,AAAM,KAAD;AACiB,UAAxB,AAAQ,uBAAO,QAAQ;;;IAG7B;oBAIoB;;AAClB,YAAO,AAAO,AACT,qBADU,SAAS,uDACE,SAAS;2BAA9B,OACC;IACR;aAGgC;AAAQ,YAAA,AAAO,sBAAC,GAAG;IAAC;;AAGnB,YAAA,AAAQ;IAAI;;AAWzC,MAPF,AAAQ,AAAO,iCAAQ,QAAC;AAGpB,QAFF,AAAc,AAAS,aAAV,qBAAkB,QAAC;AACT,UAArB,AAAc,aAAD;;AAIb,QAFF,AAAc,AAAS,AAAO,aAAjB,+BAAyB,QAAC;AAC8B,UAAnE,AAAgB,eAAD,WAAS,QAAC,kBAAmB,AAAe,cAAD;;;AAG/C,MAAf,AAAQ;IACV;yBAGoC;;AAChC,kCAAS,AAAO,MAAD,uBAAf,OAAwB,sBAAkB,AAAO,MAAD;YAAhD,gBAAyD;IAAK;;;IAzG5D,gBAAmC;;EA0G3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IC/bM;;;;;;IAGA;;;;;;IAGG;;;;;;qBAUmB;AACxB,YAAO,AAAY,IAAT,YAAY,AAAG,GAAA;IAC3B;;AAOM,gBAAuB,yDACX,yBACO;AAEvB,UAAI;AAC8C,QAAhD,AAAG,GAAA,iBAA+B;;AAEpC,YAAO,IAAG;IACZ;;AAIE,YAAe,eAAR;IACT;;iCA7BiB;IANb,uBAAiB;;;AAOe,IAAlC,eAA4B,aAAlB,AAAG,GAAA;AACmC,IAAhD,sBAA0C,aAAzB,AAAG,GAAA;AACsC,IAA1D,sBAAiD,gBAAhC,AAAG,GAAA;EACtB;;QAQqB;QAAc;IAlB/B,uBAAiB;IAkBA;IAAc;;EAAgB;;;;;;;;;;;;;;;;;;;;ECLrD;;;;;eAwB2B;AAAS,8BAAY,0BAAC,IAAI;IAAE;;;;EACvD;;;;;;;;;;;IAKY;;;;;;IAGA;;;;;;;gDAGiB,UAAe;IAAf;IAAe;;EAAuB;;;;;;;;;;;;;IAMvD;;;;;;IAGA;;;;;;IAGC;;;;;;;AAQP,YAAA,AAAgE,wBAArD,yBAAgB,oBAAO,qBAAY,uBAAU;IAAQ;;4DAJ3D,kBAAuB,cAAmB;IAA1C;IAAuB;IAAmB;;EAAQ;;;;;;;;;;;;;;;;;;;EAkE7D;;;;yDA1DgC;AAC9B,UAA+B,UAArB,KAAK,IAAC;EAClB;6EAGgD,OAAW;;AACvD;;AACI,eAAK,0BAAkB,KAAK;AAC5B,kBAAQ,UAAU;;;;uDAGS;;AAAS;;AACxC;AACA,kBAAQ,AAAK,IAAD;;;EAAQ;;;;;;;IC5EL;;;;;;IAGL;;;;;;IAGQ;;;;;;IAGP;;;;;;;AAQS;IAAI;;AAGb;AACX;AAE+B,UAA7B,MAAM,AAAW,uBAAO;;cACjB;AACP,wBAAI;AAC6B,YAA/B,WAAM,AAAwB,4BAAR,aAAI,eAAE,CAAC;;;MAGnC;;;AAIQ,gBAAuB,8CAAC,QAAQ,WAAM,OAAkB,cAAX;AACnD,YAAO,AAAI,IAAD;IACZ;;AAGiB;AACf;AACE,cAAI,AAAY;AACd,2BAAK,MAAM,AAAW,uBAAO;AAC3B,oBAAO;;AAEkD,YAA3D,oBAAc,MAAM,AAAW,qBAAK,qBAAe;;AAErD,gBAAO;;cACA;AACP,wBAAI;AAC2B,YAA7B,WAAM,AAAsB,0BAAR,aAAI,eAAE,CAAC;;AAE7B,gBAAO;;MAEX;;;AAGmB;AAC4C,QAAjD,2BAAZ,oBAAgB,MAAM,AAAW,qBAAK,qBAAe,kBAAzC;MACd;;;AAGqC;;AAC/B,qBAAgD,OAAvC,MAAM,AAAY,sDAAqB,OAAG;AACvD,YAAU,aAAN,KAAK;AACP,iBAAO,KAAK;gCAAL,OAAO;;AAEhB,cAAO;MACT;;;;AAIE;AACsB,cAApB;6BAAa;;YACN;AACP,sBAAI;AAC4B,UAA9B,WAAM,AAAuB,2BAAR,aAAI,eAAE,CAAC;;;IAGlC;;AAGgC,YAAA,AAAY;IAAO;eAGb;AAArB;AAEsB,QAArC,MAAM,AAAY,4BAAW,OAAO;MACtC;;yBAGwC;AAAR;AAC9B,cAA2D,EAAnD,MAAM,AAAY,uCAAsB,KAAK,EAAE;MACzD;;4BAG8C;AAAR;AACpC,cAA8D,EAAtD,MAAM,AAAY,0CAAyB,KAAK,EAAE;MAC5D;;oBAG2C;AAAL;AACpC,cAAO,OAAM,AAAY,AAA+B,sCAAV,QAAQ;MACxD;;;AAI6C;IAAI;;AAGf,YAAA,AAAY;IAAc;;AAG/B,YAAA,AAAY;IAAa;oBAGa;AAC/D,YAAA,AAAY,kCAAgB,KAAK;IAAC;;AAKpC,YAAO;IACT;;AAGoB,YAAA,AAAY;IAAS;;AAGJ,YAAA,AAAY;IAAqB;;gDAlH/C,YAAiB,MAAW;IAXvC;IAQD,cAAQ,AAAwB,qCAAmB;IAGvC;IAAiB;IAAW;;EAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECqF7D;;;;;;;;4BASa,MAA0B;AAE/B,mBAAS,2BAAsB,IAAI,EAAE,OAAO;AAChD,YAAO,AAAO,OAAD;IACf;iBAGqC;UAC5B;UACoB;UACZ;UACA;AACf,YAAO,8BACH,IAAI,EACJ,6DACa,OAAO,oBACE,gBAAgB,QAC5B,IAAI,SACH,KAAK;IACtB;0BAIW,MAA0B;AAC/B,mBAAS,mCAA8B,IAAI;AAC/C,UAAI,AAAO,MAAD;AACwC,QAAhD,SAAS,kDAAmB,MAAM,IAAI,EAAE,OAAO;AACZ,QAAnC,2BAAsB,IAAI,EAAE,MAAM;;AAEpC,YAAO,OAAM;IACf;kCAGwD;AACtD,UAAI,IAAI;AACN,cAAO,AAAoB,mCAAC,IAAI;;AAEhC,cAAO;;IAEX;6BAGqC;AACnC,UAAI,IAAI;AAC2B,QAAjC,AAAqB,oCAAO,IAAI;;IAEpC;0BAGkC,MAAyB;AACzD,UAAI,IAAI;AACN,YAAI,AAAO,MAAD;AACyB,UAAjC,AAAqB,oCAAO,IAAI;;AAEG,UAAnC,AAAoB,kCAAC,IAAI,EAAI,MAAM;;;IAGzC;mBAG6B;AAAR;AAEf,qBAAS,mCAA8B,IAAI;AAC/C,YAAI,MAAM,YAAY,AAAO,MAAD;AAIxB,UAFF,MAAM,AAAO,AAAK,MAAN,iCAAmB,cACtB,AAAO,MAAD;;AAGjB,cAAO,uBAAiB,IAAI;MAC9B;;;AAGY;;AACN,sBAAU,oCAA8B,AAAqB,gDACnD;AACd,iBAAS,SAAU,QAAO;AACM,UAA9B,aAAM,AAAO,MAAD,yBAAC,OAAU;;MAE3B;;;;IAnFM,6BAAmD;;;;;;;;;;;;;;;;;;;;;;;;;;;IDgCxC;;;;;;gBAM8B;AAAe,mDAC1D,UAAU,EACV,sCAAkB,iBAAY,AAAW,UAAD,OAAO,AAAW,UAAD;IAAU;qBAGxC;AAAR;AACrB,cAAO,AAA0C,uCAAxB,iBAAY,IAAI,EAAE;MAC7C;;;AAGuB;IAAI;;;IAbH;AAAxB;;EAAmC;;;;;;;;;;;;;;;;;;;;;;IAmBV;;;;;;IAGC;;;;;;IAGhB;;;;;;;;QAIU;QACD;QACA;IAFC;IACD;IACA;;EAAS;;;;;;;;;;;;;;IAMD;;;;;;IAGjB;;;;;;IAGC;;;;;;;AAOP,YAAA,AAA4D,wBAAhD,AAAM,uBAAS,oBAAO,iBAAQ,uBAAU;IAAQ;;;QAJ1B;QAAY;QAAe;IAA3B;IAAY;IAAe;;EAAS;;;;;;;;;;;;;;;;;MA9L/D,mBAAO;;;;;;YEHM;AACpB,kDAAgB,KAAK,EAAE,AAAM,AAAU;IAAO;;;IAJpC;AAAd;;EAAoB;;;;;;;;;;;;;YAaI;AAAU,oDAAkB,KAAK,EAAE,AAAM;IAAU;;;IAH7D;AAAd;;EAAoB;;;;;;;;;;;;;;;;AAmCI;IAAQ;;AAKR;IAAQ;iBAGN;AACxB,UAAI;AACF,iBAAS,UAAW,AAAU;AAC5B,wBAAI,AAAQ,OAAD,QAAQ,KAAK;AACtB,kBAAO;;;;AAIb,YAAO;IACT;;;QA1BiD;IAHjB;IASvB;IAKA;AAXT;AACgD,IAA9C,kBAAY,8CAAyB,QAAQ;AACpB,IAAzB,iBAAW,sCAAS;AACK,IAAzB,iBAAW,sCAAS;EACtB;;;;;;;;;;;;;;;;;;;oFAtB+B;AAC3B,oBAAwC;AAC5C,QAAI,QAAQ;AACV,eAAS,UAAW,SAAQ;AAC1B,cAAO,AAAS,AAAe,SAAf,QAAC,AAAQ,OAAD,mCACpB,AAA4C,yCAAd,AAAQ,OAAD;AACR,QAAjC,AAAS,SAAA,QAAC,AAAQ,OAAD,OAAS,OAAO;;;AAGrC,UAAO,UAAS;EAClB;4EAsC8B;AAC5B,QAAI,AAAI,AAAO,GAAR,cAAW;AACZ,gBAAM,AAAI,AAAK,GAAN;AACb,UAAQ,gBAAJ,GAAG;AACL,cAAO,AAAI,IAAD,cAAY;;AAEM,MAA9B,WAAoB,6BAAM,GAAG;;AAE/B,UAAO;EACT;oEAEiC,OAAoC;;AACnE,kBAAI,wBAAkB,KAAK;AACzB,YAAO,MAAK;;AAGd,aAAS,UAAW,SAAQ;AAC1B,oBAAI,AAAQ,OAAD,QAAQ,KAAK;AACtB,cAAwB,+CAAC,AAAkB,eAAd,AAAQ,OAAD,QAAS,AAAQ,OAAD,QAAQ,KAAK;;;AAIrE,QAAU,aAAN,KAAK;AACH,gBAAM,KAAK;AACf,oBAAI,0CAAqB,GAAG;AAC1B,cAAwB,+CAAC,KAAK,GAAG;;AAE/B;AAUF,MATF,AAAI,GAAD,WAAS,SAAC,KAAK;AAChB,aAAU,gBAAJ,GAAG;AACuB,UAA9B,WAAoB,6BAAM,GAAG;;AAE3B,wBAAY,sCAAiB,IAAI,EAAE,QAAQ;AAC/C,4BAAe,SAAS,EAAE,IAAI;AACY,UAAxC,AAAM,KAAD,WAAL,QAAU,yCAA0B,GAAG,IAAjC;AACgB,UAAjB,WAAL,KAAK,WAAC,GAAG,EAAI,SAAS;;;AAG1B,YAAO,KAAK;YAAL,eAAS,GAAG;UACd,KAAU,cAAN,KAAK;AACV,iBAAO,KAAK;AACZ;AACJ,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAK,IAAD,YAAS,IAAA,AAAC,CAAA;AAC5B,mBAAO,AAAI,IAAA,QAAC,CAAC;AACb,wBAAY,sCAAiB,IAAI,EAAE,QAAQ;AAC/C,4BAAe,SAAS,EAAE,IAAI;AACH,UAAzB,AAAM,KAAD,WAAL,QAAe,eAAK,IAAI,IAAlB;AACc,UAAf,WAAL,KAAK,WAAC,CAAC,EAAI,SAAS;;;AAGxB,aAAO,KAAK;YAAL,gBAAS,IAAI;;AAEY,MAAhC,WAAoB,6BAAM,KAAK;;EAEnC;kEAGgC,OAAoC;AAC1D;AACR;AAC+C,MAA7C,YAAY,sCAAiB,KAAK,EAAE,QAAQ;;UACpB;AAAxB;AAE+D,QAD/D,WAAoB,6BAAM,AAAE,CAAD,iBACkB,SAAvB,iBAAf,AAAE,CAAD,oBAA0B,kBAAK,KAAK,GAAG;;;;AAIjD,QAAc,aAAV,SAAS,MAAuB,8BAAV,SAAS;AACY,MAA7C,YAAsB,YAAV,SAAS;;AAEvB,UAAO,UAAS;EAClB;gEAGY,OAAuC;;AACjD,kBAAI,wBAAkB,KAAK;AACzB,YAAO,MAAK;UACP,KAAU,aAAN,KAAK;AACV,gBAAM,KAAK;AACf,oBAAI,0CAAqB,GAAG;AACtB,mBAAuB,AAAW,gBAA1B,AAAI,AAAK,GAAN,6BAAiC;AAChD,YAAI,AAAK,IAAD,KAAI;AACV,gBAAO,AAAI,AAAO,IAAR;;AAER,sBAAU,AAAQ,QAAA,QAAC,IAAI;AAC3B,YAAI,OAAO;AACL,6BAAe,AAAM,AAAO,KAAR;AACxB;AACE,kBAAO,AAAQ,QAAD,QAAQ,YAAY;;gBAC3B;AACyD,YAAhE,WAA+D,SAAvD,CAAC,8BAAa,YAAY,mBAAgB,iBAAb,YAAY;;;;AAKnD;AAOF,MANF,AAAI,GAAD,WAAS,SAAC,KAAK;AACZ,wBAAY,oCAAe,IAAI,EAAE,QAAQ;AAC7C,4BAAe,SAAS,EAAE,IAAI;AACY,UAAxC,AAAM,KAAD,WAAL,QAAU,yCAA0B,GAAG,IAAjC;AACgB,UAAjB,WAAL,KAAK,WAAC,GAAG,EAAI,SAAS;;;AAG1B,YAAO,KAAK;YAAL,eAAS,GAAG;UACd,KAAU,cAAN,KAAK;AACV,iBAAO,KAAK;AACZ;AACJ,eAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAK,IAAD,YAAS,IAAA,AAAC,CAAA;AAC5B,mBAAO,AAAI,IAAA,QAAC,CAAC;AACb,wBAAY,oCAAe,IAAI,EAAE,QAAQ;AAC7C,4BAAe,SAAS,EAAE,IAAI;AACH,UAAzB,AAAM,KAAD,WAAL,QAAe,eAAK,IAAI,IAAlB;AACc,UAAf,WAAL,KAAK,WAAC,CAAC,EAAI,SAAS;;;AAGxB,aAAO,KAAK;YAAL,gBAAS,IAAI;;AAEY,MAAhC,WAAoB,6BAAM,KAAK;;EAEnC;sEAIY,OAAuC;AACzC;AACR;AAC6C,MAA3C,YAAY,oCAAe,KAAK,EAAE,QAAQ;;UAClB;AAAxB;AAE+D,QAD/D,WAAoB,6BAAM,AAAE,CAAD,iBACkB,SAAvB,iBAAf,AAAE,CAAD,oBAA0B,kBAAK,KAAK,GAAG;;;;AAIjD,QAAc,aAAV,SAAS,MAAuB,8BAAV,SAAS;AACY,MAA7C,YAAsB,YAAV,SAAS;;AAEvB,UAAO,UAAS;EAClB;;MAGM,qDAAgC;YAClC,4DAA6B;;;;;;ECzMjC;;;;;;;IAKS;;;;;;IAGC;;;;;;;AAGa,YAAA,AAAc,gBAAX,WAAE,gBAAG;IAAM;;AAI7B,gBAAuB,8CACzB,MAAM,SACN,SAAS;AAEX,YAAO,IAAG;IACZ;;;IAfO;IAGC;;EAaV;;;;;;;;;;;;;;;;;;;AAeM,YAAA,AAA+D,gBAA5D,WAAE,gBAAG,eAAM,eAAE,0BAAgB,oBAAR,cAAW,gBAAS,eAAe;IAAI;;;;EAIrE;;;;;;;;;;;;;;;IAKM;;;;;;IAGM;;;;;;IAGF;;;;;;IAGH;;;;;;;;IATD;IAGM;IAGF;IAGH;;EACP;;;;;;;;;;;;;;;IAKM;;;;;;IAGM;;;;;;;AAIc,YAAA,AAAU;IAAG;;;AAMhB;YAAO,eAAP,eAAW,AAAU,AAAO;IAAK;;AAGjC,YAAA,AAAsB,gBAAnB,WAAE,gBAAG,eAAM,eAAE;IAAM;;AAGvB,YAAA,AAAU;IAAO;;;IAnBjC;IAGM;IAMF;;EAWV;;;;;;;;;;;;;;;;;;;;;IAKgB;;;;;;IAEH;;;;;;IAEK;;;;;;;;QAGO;QAAY;QAAc;IAA1B;IAAY;IAAc;AAAjD;;EAAyD;;;;;;;;;;;;;EAiD3D;;;;;;;EAYA;;;;;;;EC5JA;;;;;MAJgB,kBAAK;YAAG;;;MAGR,gBAAG;YAAG;;;;;;;IAOP;;;;;;;AAOQ,YAAA,AAAoB,0BAAP;IAAO;;;IANjB;;EAAO;;;;;;;;;;;;;;;MAGb,wBAAM;;;;;;kBAaI;AAAU,6BAAU,KAAK;IAAC;;;;EAHpC;;;;;;;ECHpB;;;;;;;;ECQA;;;;;;;;;IL1BY;;;;;;IAGqB;;;;;;IAGZ;;;;;;IAGA;;;;;;;AAYb,gBAAuB;AAC3B,UAAI;AACsB,QAAxB,AAAG,GAAA,QAAC,WAAa;;AAEnB,UAAI;AACgB,QAAlB,AAAG,GAAA,QAAC,QAAU;;AAEhB,UAAI;AACkB,QAApB,AAAG,GAAA,QAAC,SAAW;;AAEjB,YAAO,AAAI,IAAD;IACZ;;;QAnBO;QACA;QACA;QACA;IAHA;IACA;IACA;IACA;;EACL;;;;;;;;;;;;;;;;;;;;;;;;IAqB2B;;;;;;IAGhB;;;;;;IAGA;;;;;;IAGa;;;;;;IAGpB;;;;;;IAGU;;;;;;gBASmB;AAAS,YAAA,AAAQ,0BAAY;IAAK;;AAInE,YAAO,AAAK,wCAAa;AACvB,YAAI,AAAS;AACL,yBAAW,iBAAY;AAEL,UAAnB,gBAAW,QAAQ;;AAGA,QAA1B,AAAS,2BAAa;AAEM,QAA5B,MAAM,AAAS,mBAAK;AAGqB,QAAzC,AAAQ,mCAAsB,WAAM;AACpC,cAAO;MACR;IACH;;AAG0B;AACxB,YAAI;AACoC,UAAtC,AAAQ,sCAAyB;;AAEnC,cAAO;MACT;;;AAGqB,YAAA,AAAqC,kCAAhB,aAAI,gBAAG,gBAAO;IAAE;;4DApClC,SAAc,MAAW;;IAZpC;IAMP,aAAO;IAGG;IAGQ;IAAc;IAAW;AAEO,IAA7C,wBAAT,iBAA2B,0CAAd,OAAS,WAAT,eAA8B,iDAAlC;EACX;;;;;;;;;;;;;;;;;;;;;;;;;;;IMjCI;;;;;;IAGY;;;;;;IAGX;;;;;;IAGA;;;;;;;;AAGoB,0DAAY;YAAZ,gBAA0B;IAAK;;;IAZpD;IAGY;IAGX;IAGA;;EAIP;;;;;;;;;;;;;;;;;;;EAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAOqB;;;;;;IAGR;;;;;;IAeA;;;;;;IAGA;;;;;;IAGA;;;;;;IAGL;;;;;;IAi8BA;;;;;;IAqMF;;;;;;;AAppCyB;IAAW;;AAiBrB,YAAA,AAAa;IAAI;;AASjB,YAAA,AAAM;IAAO;;;AASO;kCAAY;IAAO;;AAO5B;IAAU;;AAUH,YAAA,AAAQ;IAAM;;AAGhB,YAAA,AAAQ,AAAO,6CAAI,QAAC,SAAU,AAAM,KAAD;IAAM;;AAGjC,YAAA,AAAQ,AAC9C,AACA,iCADM,QAAC,SAAU,AAAM,AAAU,KAAX,yEAClB,QAAC,SAAU,AAAM,KAAD;IAAM;;AAYJ,MAAzB,AAAkB;AACU,MAA5B,AAAqB;AAGrB,eAAS,QAAS;AACA,QAAhB,AAAM,KAAD;;IAET;gBAGoC;AAElC,UAAI,AAAI,GAAD;AACgC,QAArC,WAAM,mBAAU;;AAEH,MAAf;IACF;;AAQ6C;IAAY;mBAEjB;AACpC,kCAAgB,AAAO,AAAI,MAAL;IAAW;sBAKJ;;AAC/B,YAAO,AAAqB,oBAAR,MAAM,2BAAoB,MAAM,gBAAN,OAAQ;IACxD;uBAKkD;;AAC5C,kBAAQ,mBAAa,MAAM;AACvB,qBAAW,AAAM,KAAD,2BAA2B,MAAM,AAAO,MAAD;AAC/D,UAAa,mCAAT,QAAQ;AACV,YAAI,QAAQ;AAEV,cAAI,AAAS,QAAD;AACV,gBAA2B,cAAN,MAAhB,AAAO,MAAD,WAAC,cAAY,yBAAK,AAAS,QAAD;AACjB,cAAlB,gBAAW,MAAM;AACjB,oBAAO;;;AAGX,gBAAO;;;AAGO,MAAlB,gBAAW,MAAM;AACjB,YAAO;IACT;eAGuC;AACE,MAAvC,AAAqB,mBAAR,MAAM,aAAa,MAAM;IACxC;;AAGc;AAGV,QAFF,MAAM,uBAAkB,cACf;MAEX;;oBAG2B;AAAQ,YAAA,AAAW,yBAAO,qBAAgB,GAAG;IAAE;2BAGvB;;AAC7C,mBAAS,AAAoB,iCAAO,AAAW,wBAAO,IAAI;AAC9D,UAAW,8BAAP,MAAM;AACR,cAAO,OAAM;;AAEf,UAAW,aAAP,MAAM;AACR,cAAO,MAAM;6BAAN,OAAQ;;AAEjB,YAAO;IACT;;AAIyC,2CAAwB;IAAO;sBAIZ;AACxD,YAAA,AAAM,MAAD;IAAe;yBAGgB;AAAR;AAC9B,YAAI;AAEE,2BAAa,AAAoB,kCAAC,KAAK;AAC3C,cAAI,AAAW,UAAD;AAC8C,YAA1D,cAAa,MAAM,AAAY,uCAAqB,KAAK;;AAG7C,YAAZ,aAAU,aAAV,UAAU;;AAG4B,UAAxC,AAAoB,kCAAC,KAAK,EAAI,UAAU;AAExC,gBAAO,WAAU;;AAEnB,cAAO;MACT;;4BAG8C;AAC5C,UAAI;AACF,cAAO,AAAY,2CAAwB,KAAK;;AAElD,YAAO;IACT;;AAKiB;;AACf,uBAAO,AAAa;AACpB,uBAA0B,8CAAtB,OAAY,gBAAZ,eAAyB;AACrB,2BAAa,AAAW;AAExB,gFAAa;AACf,iCAAwC,aAAzB,AAAY,kCAAe;;;AACrB,UAAzB,MAAM,AAAW,UAAD;AACe,UAA/B,MAAM,AAAW,UAAD;AAEV,sBAAgB;AAEtB,gBAAO,iBAAsB;AAAR;AACF,cAAjB,MAAM;AACgB,cAAtB,AAAoB,UAAV,aAAU,aAApB,AAAW,UAAD,cAAU;AACpB,4BAAI;AACiB,gBAAnB,WAAM,AAAY,mBAAL,IAAI;;AAEJ,cAAf,AAAM,KAAD,OAAK,IAAI;YAChB;;;AAEA,gBAAO,WAA8B;AAAtB;AACN;AACP;AACgC,gBAA9B,UAAU,qBAAgB,GAAG;AACA,gBAA7B,MAAM,cAAc,CAAC,OAAO;;oBACrB;oBAAG;AAEA,gBAAV,WAAM,GAAG;AACD,gBAAR,WAAM,CAAC;AACE,gBAAT,WAAM,EAAE;AACD,gBAAP;;YAEJ;;;AAGgD,UAAhD,MAAM,cAAc,CAAC,AAAK,oBAAO,AAAM;AAEnC,uBAAS;AACb,mBAAS,QAAS,OAAM;AAChB,0BAAU,uBAAkB,KAAK;AACvC,qBAAS,SAAU,QAAO;AACiB,cAAzC,MAAM,QAAQ,CAAC,AAAO,MAAD;;;AAGU,UAAnC,MAAM,AAAW,UAAD,aAAa,KAAK;AACL,UAA7B,MAAM,AAAW;AAEO,UAAxB,oBAAc,UAAU;cAEnB,gBAA2B,+CAAvB,OAAa,gBAAb,eAA0B;AACR,UAA3B,MAAM,AAAY;;MAEtB;;;;AAIQ,uBAAwB;AAE1B,mBAAS;AACb,eAAS,QAAS,OAAM;AAClB,sBAAU,AAAM,KAAD;AAEnB,uBAAwB,cAApB,OAAO,gBAAP,OAAS,mBAAT,eAAuB;AACC,UAA1B,AAAW,UAAD,UAAQ,OAAO;;;AAIzB,0EAAgB;AAChB,2BAAa,UAAU;AACvB,0BAAY;AACZ,8BAAgB;AAChB,yBAAW;;;AAEf,YAAO,cAAa;IACtB;;;AAGM,oBAAU;AACd,eAAS,QAAS;AACZ,sBAAU,AAAM,KAAD;AACnB,uBAAwB,cAApB,OAAO,gBAAP,OAAS,mBAAT,eAAuB;AACqB,UAA9C,AAAQ,OAAD,oBAAoB,AAAM,KAAD,MAAM,OAAO;;;AAGjD,YAAO,QAAO;IAChB;;;AAeM,oBAAU;AAEV,uBAAa,AAAQ,OAAD;AAEpB,kEAAa;AAAc,yBAAa,UAAU;;;AAEtD,oBAAI,AAAW,UAAD;AACZ,cAAK;;AACH,mBAAS,SAAU,WAAU;AACrB,yBAAS,uBAAkB,MAAM;AAEvC,2BAA0B,8CAAtB,OAAY,gBAAZ,eAAyB;AAC3B,4BAAI,MAAM;AACuB,wBAA/B;gBAAY,0BAAiB,aAAjB,2BAAiB;;AAER,sBAAvB;cAAY,kBAAS,aAAT,mBAAS;;;;;AAKZ,QAAf,aAAa;;AAIf,oBAAI,AAAkB;AACpB,iBAAS,QAAS;AACK,UAArB,AAAQ,wBAAO,KAAK;;;AAKxB,oBAAI,AAAS;AACX,iBAAS,eAAgB,AAAQ,QAAD;AAC1B,wBAAU,AAAa,YAAD;AACtB,sBAAQ,AAAa,YAAD;AAExB,cAAwB,QAApB,OAAO,iBAAP,OAAS,uBAAc;AAGrB,2BAAgB,AAAS,uBAAS,KAAK;AAC3C,gBAAI,QAAQ;AACV,4BAAI,AAAS,QAAD;AACN,2CACA,AAAwB,uCAAS,KAAK;AACN,gBAApC,AAAqB,oBAAD,QAAQ,OAAO;;AAEnC,yBAAS,SAAU,QAAO;AACxB,gCAAI,AAAS,QAAD,sBAAsB,AAAO,MAAD;AACG,oBAAzC,AAAwB,wCAAU,MAAM;;;;;;;;AAStD,YAAO,WAAU;IACnB;yBAG4C;AAAjB;AACzB,sBAAI,AAAW,UAAD;AACN,sBAAgB;AAEtB,cAAI;AAEF,qBAAS,SAAU,WAAU;AACvB,wBAAM,AAAO,AAAO,MAAR;AACT;AACP;AACgC,gBAA9B,UAAU,qBAAgB,GAAG;AAC7B,8BAAI;AACoB,kBAAtB,WAAM,AAAe,mBAAR,OAAO;;AAEJ,gBAAlB,AAAM,KAAD,OAAK,OAAO;;oBACV;oBAAG;AACA,gBAAV,WAAM,GAAG;AACD,gBAAR,WAAM,CAAC;AACE,gBAAT,WAAM,EAAE;AACD,gBAAP;;;AAG+B,YAAnC,MAAM,AAAW,6BAAY,KAAK;;;MAGxC;;kBAIuB,KAAkC;AADP;AAGI,QAApD,UAAU,wCAAkC,OAAO;AAC/C,4BACA,0CAAoC,AAAQ,OAAD,WAAS;AACxD,iBAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAQ,OAAD,YAAS,IAAA,AAAC,CAAA;AACmB,UAAtD,AAAa,aAAA,QAAC,CAAC,EAAI,MAAM,kBAAa,GAAG,EAAE,AAAO,OAAA,QAAC,CAAC;;AAEtD,cAAO,cAAa;MACtB;;iBAIuB,KAA4B;AACjD,YAAO,AAAqB,oBAAR,MAAM,eAAe,GAAG,EAAE,MAAM;IACtD;sBAG4C;AAC1C,YAAO,AAAqB,oBAAR,MAAM,iBAAiB,MAAM,AAAO,MAAD;IACzD;WAK6C;AAAtB;;AAErB,mBAAI,OAAO,gBAAP,OAAS;AACuB,UAAlC,AAAW,2BAAW,AAAQ,OAAD;;AAER,QAAvB,AAAQ,OAAD,WAAP,UAAY,mBAAJ;AACK,QAAb,MAAM;AACN,YAAI;AACF,gBAAO,AAAW,AAAQ,sCAAa,qBAC1B,AAAQ,OAAD,4BACE,AAAQ,OAAD,0BAClB,AAAQ,OAAD,cACR,AAAQ,OAAD;;AAGnB,cAAO,WAAK,OAAO;MACrB;;;AAGE,UAAI,AAAW;AACE,QAAf,gBAAU;;IAEd;gBAE8B;AAC5B,UAAI,AAAU,SAAD;AACX,cAAO,oBAAa;;AAEhB,oBAAQ,gCAAa,MAAM,SAAS;AACd,QAA1B,AAAO,sBAAC,SAAS,EAAI,KAAK;AAC1B,cAAO,MAAK;;IAEhB;cAK8B;AACf;AACb,UAAI,AAAU,SAAD;AACO,QAAlB,QAAQ;;AAEkB,QAA1B,QAAQ,AAAO,sBAAC,SAAS;;AAE3B,YAAO,MAAK;IACd;iBAIuB,KAAY;AAC7B,kBAAQ,eAAU,SAAS;AAC/B,YAAO,AAAI,IAAD,YAAY,KAAK;IAC7B;;AAGE,oBAAI;AAC8B,QAAhC,WAAwB;;IAE5B;aAM6B;AACf,MAAZ;AACI,kBAAQ,eAAU,SAAS;AACD,MAA9B,AAAM,KAAD,WAAL,QAAU,gBAAU,SAAS,IAAvB;AAEN,YAAO,MAAK;IACd;oBAOsC;AACxB,MAAZ;AACI,kBAAQ,eAAU,AAAI,GAAD;AACI,MAA7B,AAAM,KAAD,WAAL,QAAU,gBAAU,AAAI,GAAD,SAAjB;AAEN,YAAO,MAAK;IACd;gBAIuB,KAAY;AAC7B,kBAAQ,qBAAmB,uBAAS,SAAS;AACjD,YAAO,AAAI,IAAD,YAAY,KAAK;IAC7B;gBAK0B;AACxB,YAAO,gCAAY,QAAC,OACX,oBAAmB,4BAAJ,GAAG,GAAwB,SAAS;IAE9D;mBAGyC,KAAY;AAAhC;AACf,oBAAQ,kBAAa,GAAG,EAAE,SAAS;AACvC,YAAI,KAAK;AACwB,UAA/B,MAAM,AAAM,AAAM,KAAP,gBAAgB,GAAG;AAE9B,2BAAI,AAAM,KAAD,QAAU;AACe,YAAhC,AAAkB,8BAAI,SAAS;;;MAGrC;;qBAGyC,KAAY;AAChB,MAAnC,AAAkB,iCAAO,SAAS;IACpC;;AAGY;AAE0C,QAApD,MAAM,AAAgB,6CAAa;AAAY;QAAI;AAEtB,QAA7B,MAAM,uBAAkB;MAC1B;;SAK0C;AAArB;;AAGf,yDAAO,OAAY;AACnB,sBAAU,AAAQ,OAAD;AACjB,wBAAY,IAAI;AAGpB,sBAAI;AACF,gBAAO;;AAIT,YAAI,AAAQ,OAAD;AACT,cAAI,AAAQ,AAAM,AAAU,OAAjB;AACT,gBAAI,AAAQ,AAAM,OAAP;AAE4B,cADrC,WAAwB,6CACpB;;;AAGN,gBAAI,AAAQ,AAAM,AAAM,OAAb;AAEiC,cAD1C,WAAwB,6CACpB;;;;AAuQR,QAlQF,MAAM,AAAa,6CAAa;;AAEf,UAAf,gBAAU;AAEV;AACO;AAEL,kBAAO,yBAA0B,YAAgB;AAArB;AACT,gBAAjB,mBAAa;AACb;AAqBI,kBApBF,MAAM,+BAAY,QAAC;;AACb;AACJ;AAEwB,sBAAtB,yBAAmB,GAAG;AAIsC,sBAF5D,OAAO,uBAAiB,6BACX,UAAU,kBACH,4CAAyB,AAAQ,OAAD;AAIpD,0BAAI,AAAQ,OAAD;AAEwB,wBADjC,UAAS,aAAM,OAAO,QACZ,UAAU,QAAE,UAAU,EADO,qBACnC;;;AAGiB,sBAAvB,yBAAmB;;AAErB,0BAAO,OAAM;kBACd;;AAEiB,kBAAlB,mBAAa;;cAGjB;;;AAEA,kBAAO;AAAS;AAEG,gBAAjB;AAM4D,gBAF5D,AAAK,IAAD,WAAJ,OAAS,6BACI,mBACO,4CAAyB,AAAQ,OAAD,YAF/C;AAIS,gBAAR,sBAAN,cAAU,IAAI,GAAR;AAEF,yCAAqB;AAEnB,iCAAa,AAAK,IAAD;AAEvB,oBAAI,AAAW,UAAD,KAAI;AACS,kBAAzB,qBAAqB;AAGR,kBAAb,AAAQ,OAAD,WAAP,UAAY,IAAJ;AAIoD,kBAF5D,OAAO,6BACM,OAAO,kBACA,4CAAyB,AAAQ,OAAD;;AAGpD,sBAAK,OAAO,YAAc,OAAO,IAAI,UAAU;AACpB,oBAAzB,qBAAqB;;;AAKX,gBAAd,gBAAU;AAEV,oBAAI,kBAAkB;AAC4B,kBAAhD,MAAM,qBAAqB,CAAC,UAAU,EAAE,OAAO;;AAErC,gBAAZ,cAAQ,IAAI;cACd;;;AAGA,kBAAO;AAAa;AAClB,oBAAS,YAAL,IAAI,EAAiB;AACjB,+BAAQ,MAAM,AAAa;AACjC,iCAAK,KAAK;AAE4C,oBADpD,WAAwB,iDACpB,AAA+C,4CAAf,aAAI;;AAII,kBAA9C,AAAW,2BAAwB;;AAEnC,sBAAS,YAAL,IAAI,EAAiB;AACI,oBAA3B,MAAM,AAAa;AAG2B,oBAA9C,AAAW,2BAAwB;;AAEJ,kBAAjC,MAAM,AAAa;;cAEvB;;;AAEqB,YAArB,MAAM,aAAa;AACnB,0BAAI,AAAa;AACf,oBAAK;AAE+B,gBAAlC,oBAAc;AACF,gBAAZ,cAAQ;AACS,gBAAjB,mBAAa;AACE,gBAAf,AAAQ;AACS,gBAAjB;AACgB,gBAAhB,AAAS;AACsB,gBAA/B,AAAwB;;;AAG1B,6BAA0B,8CAAtB,OAAY,gBAAZ,eAAyB;AACvB,gCAAY;AAEhB,sBAAO,WAAsB;sBAAa;AAA7B;;AACS,oBAApB,kBAAkB;AACd,wCAAgB;AAEpB;0DAAuB,KAAK;;;8BAAb;AAAe;AACL,kCAAvB;4BAAY,gBAAS,aAAT,iBAAS;AAEA;AAGrB,iCAAK,aAAa;AAGhB;AAC2D,gCAAzD,OAA+B,OAAN,aAAlB,AAAK,oBAAO,IAAI,mBAAQ,OAAG;;oCACd;AAApB;;;;AACF,4CAAS,qBAAU,GAAG;AAEI,gCAAxB,OAAY,uBAAQ,GAAG;AAIgB,gCADvC,8CACI,AAAQ,OAAD,QAAQ,AAAK,IAAD;AACH,gCAApB,gBAAgB;AAChB;;AAGA,oCAAc,YAAV,SAAS,EAAiB,0CACD,OAAzB,AAAQ,OAAD,sBAAC,OAAO;AACD,kCAAhB,YAAY;AACZ;;AAEsD,kCAAtD;;;;AAKN;AAEoC,8BAAlC,MAAM,4BAAuB,IAAI;;kCACb;AAApB;AAEA;AAC2D,kCAAzD,OAA+B,MAAN,aAAlB,AAAK,oBAAO,IAAI,kBAAQ,OAAG;;sCACd;AAApB;AACA,wCAAc,YAAV,SAAS,EAAiB;AACZ,sCAAhB,YAAY;AACZ,qDAAa,MAAT,QAAQ,EAAR,cAAY;AAEd;;AAEO,wCAAP;;;AAGK,sCAAP;;;;;;;;AAKN,0CAAI,wBAAY,GAAG;AAEX,2CACqB,0DAAmB,MAAM,GAAG;AACvD,4CAAI,sBAAgB,MAAM;AACO,uCAA/B;gCAAY,yBAAiB,aAAjB,0BAAiB;;AAEb,8BAAlB,gBAAW,MAAM;kCACZ,eAAS,qBAAU,GAAG;AAEH,8BAAxB,OAAY,uBAAQ,GAAG;AAIgB,8BADvC,8CACI,AAAQ,OAAD,QAAQ,AAAK,IAAD;;AAGvB,kCAAc,YAAV,SAAS,EAAiB,0CAC1B,AAAQ,AAAM,OAAP;AACO,gCAAhB,YAAY;AACZ;;AAEsD,gCAAtD;;;;;;wBA7ES;;;kBAiFjB;;;AAEA;AACsD,kBAApD,MAAM,QAAO,AAAW,yCAAuB;;sBACxC;AAES,kBAAhB,YAAY;AAE4B,kBAAxC,MAAM,QAAO,AAAW;;AAI1B,oBAAI,SAAS,IAAI,AAAK,IAAD;AACM,kBAAzB,MAAM,AAAW;AACc,kBAA/B,MAAM,AAAW;;AAKL,kBAAZ,cAAQ,IAAI;AAEZ,gCAAI,uBAAgB,SAAS;AACT,oBAAlB,MAAM;;;oBAGL,gBAA2B,+CAAvB,OAAa,gBAAb,eAA0B;AACf,gBAApB,kBAAkB;AACd,2BAAM,MAAM,AAAY;AAE5B,8BAAS,qBAAU,GAAG;AAEI,kBAAxB,OAAY,uBAAQ,GAAG;;AAGJ,gBAArB,MAAM;AAMJ,gBAHF,8CACI,AAAY,AAAe,wCAAO,QAAC;AACb,kBAAxB,oBAAe,QAAQ;;AAEb,gBAAZ,cAAQ,IAAI;;AAGd,oBAAO,UAAS;;AAIC,cAAjB;AACY,cAAZ,OAAO;AACP,oBAAO,UAAS;;;gBAEX;AAEY,YAAnB,MAAM;AACC,YAAP;;QAEH;AACY,QAAb,MAAM;AACN,cAAO;MACT;;;AAGoB;;AAE4B,QAA9C,sBAAe,MAAM,AAAY;AACjC,4CAAwB,AAAY;;;gBAArB;;AACT,2BAAS,8CAA0B,AAAM,KAAD,SAAS,AAAM,KAAD,kBAC7C,AAAM,KAAD,oBAAoB,AAAM,KAAD;AACpB,oBAAvB;cAAY,gBAAS,aAAT,iBAAS;AAErB,6BAAkB,OAAd,AAAM,KAAD,UAAC,eAAW;AACY,wBAA/B;gBAAY,0BAAiB,aAAjB,2BAAiB;;AAEb,cAAlB,gBAAW,MAAM;;;;UARJ;;MAUjB;;mCAGkD;AAChD,qBAAK,AAAO,MAAD;AACU,QAAnB;;AAEiB,QAAjB;;IAEJ;mBAG0B;AAAL;AACf,sBAAS,MAAM,wCAAY,QAAC;AAC9B,gBAAO,OAAM,uBAAkB,QAAQ;QACxC;AACmC,QAApC,mCAA6B,MAAM;MACrC;;yCAE+D;AAE7D,oBAAI,AAAS,mCAAqB,AAAO,MAAD;AACG,QAAzC,AAAwB,wCAAU,MAAM;;IAE5C;sBAK8C;AAAL;;AAClC;AACD,2BAA2B,0BAAb,cAAgB;AAC9B,gCAAmB,MAAM,AAAY;AAEzC,YAAgB,aAAZ,WAAW,kBAAI,gBAAgB;AACrB,UAAZ,QAAQ;AACJ,yBAAU,MAAM,AAAY,mCAA4B,OAAZ,WAAW,EAAX,eAAe;AAE/D,yBAAK;AACH,qBAAS,QAAS,QAAO;AAEvB,kBAAI,AAAM,KAAD;AACH,6BAAS,8CAA0B,AAAM,KAAD,SAAS,AAAM,KAAD,kBAC7C,AAAM,KAAD,oBAAoB,AAAM,KAAD;AAE3C,8BAAI,wBAAmB,MAAM;AAEe,kBAA1C,yCAAmC,MAAM;;;;AAIxB,YAAvB,qBAAe,QAAQ;;;AAGZ,UAAb,QAAQ;AAC0B,UAAlC,oBAAc;AACV,wBAAqC;AACzC,8CAAwB,AAAY;;;kBAArB;;AACT,6BAAS,8CAA0B,AAAM,KAAD,SAAS,AAAM,KAAD,kBAC7C,AAAM,KAAD,oBAAoB,AAAM,KAAD;AACpB,wBAAvB;gBAAY,kBAAS,aAAT,mBAAS;AAErB,+BAAkB,QAAd,AAAM,KAAD,UAAC,gBAAW;AACY,0BAA/B;kBAAY,0BAAiB,aAAjB,2BAAiB;;AAEZ,gBAAnB,AAAQ,OAAD,OAAK,MAAM;;;;YARL;;AAYf,mBAAS,QAAS;AACO,YAAvB,AAAM,AAAU,KAAX;;AAEP,mBAAS,SAAU,QAAO;AACN,YAAlB,gBAAW,MAAM;;;AAGrB,cAAO,+CAAuB,KAAK;MACrC;;;AAGkB;AACD,QAAf,gBAAU;AACI,QAAd,gBAAU;AAEV,YAAI;AACiB,UAAnB,AAAY;;AAEwB,QAAtC,MAAM,AAAW;MACnB;;;AAGY;;AAGqC,cAA/C;6BAAuC;AACK,QAA5C,8CAAwC;AAExC,cAAO,AAAW,AAAK,iDAAa;AAElB,UAAhB,AAAS;AAEI,UAAb,MAAM;AAEa,UAAnB,MAAM;QACP;MACH;;;AAIM,gBAAuB;AAC3B,UAAI;AACgB,QAAlB,AAAG,GAAA,QAAC,QAAU;;AAEhB,UAAI;AACsB,QAAxB,AAAG,GAAA,QAAC,WAAa;;AAEnB,UAAI;AACI,qBAA+B;AACrC,iBAAS,QAAS,AAAQ;AACE,UAA1B,AAAO,MAAD,OAAK,AAAM,KAAD;;AAEI,QAAtB,AAAG,GAAA,QAAC,UAAY,MAAM;;AAExB,UAAI;AACsC,QAAxC,AAAG,GAAA,QAAC,cAAgB,AAAY;;AAElC,YAAO,IAAG;IACZ;;AAiBE,YAAQ,AAAoB,6BACO,aAA9B,AAAY,uCAAoB,KACE,AAAwB,aAAtD,AAAY,oDAAoB,AAAY,+BAAY;IACnE;;AAIE,YAAgB,eAAT;IACT;sBAG2C;AAAnB;AAEtB,sBAAI,AAAsB,yCAAW,AAAO,MAAD;AACzC;;AAkBA,QAhBF,MAAM,AAAa,0CAAa;AAC9B,wBAAI,AAAsB;AACpB,uBAAY,eAAK;AAErB,qBAAS,YAAa,KAAI;AACxB;AACmB,gBAAjB,MAAe,WAAT,SAAS;;oBACR;AACqB,gBAA5B,WAAM,AAAqB,+BAAF,CAAC;;AAEW,cAAvC,AAAsB,oCAAO,SAAS;;;AAG1C,cAAI,MAAM;AACM,YAAd,MAAM,AAAM,MAAA;;QAEf;MACH;;mBAIkD;AAD1B;AAGtB,YAAI;AACF,gBAAO,OAAM,AAAM,MAAA,CAAC;;AAEX;AAGP,wBAAY;AAGZ,yBAAa;AACK;AACpB;AACF;AACE,cAAI,UAAU;AAMV,YALF,MAAM,AAAgB,6CAAa;AAC7B,4BACA,MAAM,uBAAkB,AAA2B,0BAAD;AAElB,cAApC,mCAA6B,MAAM;YACpC;AACiB,YAAlB,aAAa;;AAiHb,UA/GF,UAAS,MAAM,AAAgB,AAwG5B,kDAxGyC;;AACO,YAAjD,qBAAe,4CAAmB,MAAQ,eAAF,aAAE,gBAAF;AAGxC,kBAAK;;AACc,cAAjB,YAAY;AAEG,cAAf;AAEmC,8DAAnC,OAAc;6BAAd,OAAyB;AAGN,cAAnB,qBAAe;;;AAGf;AAEF;AAEiE,cAA/D,gBAAe,MAAM,mCAAe,cAAM,AAAM,MAAA,CAAC;AAGjD,kBAAI;AACE,oCAAgB;AAGpB,8BAAI,AAAc,aAAD,4BAAiB,AAAc,aAAD;AAEzC,gCAAyB;AAC7B,2BAAS,SAAU,AAAc,cAAD;AAC1B,oEAAQ;AAAiB,sCAAY,MAAM;;;AAC7B,oBAAlB,AAAQ,OAAD,OAAK,KAAK;;AAEb,oCAA4B;;AAChC,kCAAI,SAAS,GAAE,mCAAiB,AAAc,aAAD;;;AAI7C,kBAFF,AAAqB,qCAAQ,SAAC,OAAO;AACwB,oBAA3D,AAAY,WAAD,OAAK,oCAA4B,KAAK,EAAE,MAAM;;AAEvD,8BAAQ,oDACE,AAAc,aAAD,oBACd,OAAO,eACH,WAAW;AAGxB,gCAAS,MAAM,AAAW,gCAAgB,KAAK;AAEnD,iCAAK,AAAO,MAAD;AACQ,oBAAjB,aAAa;AACsB,oBAAnC,6BAA6B,MAAM;AACd,oBAArB,mBAAmB;;AAEW,oBAA9B,qBAAe,AAAO,MAAD;;;;AAKE,cAA7B,aAAa;;kBACN;AACc,cAArB,mBAAmB;AACZ,cAAP;;AAGA,6BAA0B,8CAAtB,OAAY,gBAAZ,eAAyB;AACrB,iCAAgD,kBAAnC,UAAU,kBAAV,OAAY,mCAAZ,OAAwB,wBAAc;AAEzD,oBAAI,UAAU,cAAI,SAAS;AACzB,wBAAO;AAAe;;AAOpB,oCAAI,SAAS;AAEyC,wBADpD,MAAM,AACD,4BAAW,AAAK,oBAAO,AAAe;AACpB,8BAAvB;wBAAY,gBAAS,aAAT,iBAAS;;AAEvB,0BAAuC,iBAAnC,UAAU,iBAAV,OAAY,kCAAZ,OAAwB,wBAAc;AACS,wBAAjD,MAAM,0BAAqB,AAAW,UAAD;;AAOvC,qCAAK,+BAAc;AACC,wBAAlB,MAAM;;oBAEV;;;AAEA,gCAAI,SAAS;AACY,oBAAvB,MAAM,eAAe;;AAEqB,oBAA1C,AAAsB,iCAAI,eAAe;;;;;AAM5B,YAArB,mBAAmB;AAEnB,kBAAO,aAAY;UACpB,2FAAe;AACS,YAAvB;AAEA,2BAAK,SAAS;AAEiB,cAA7B,MAAM,uBAAkB;;UAE3B;iBACM,UAAU;AACnB,cAAO,OAAM;MACf;;;AAImB,MAAjB;IACF;;;AAMwB,0DAAY;YAAZ,gBAA2B;IAAK;;AAG9B,wCAAgB;IAAW;;;AAG7B;kCAAY;IAAW;qBAGN;AACvC,UAAI,WAAW,yBAAY,WAAW,EAAI;AAE0E,QADlH,WAAM,wBACF;;IAER;;AAGuC;IAAI;qBAIkB;AACzD,8CAAY,QAAC,OAAQ,AAAM,MAAA,CAAK,4BAAJ,GAAG;IAAwB;;AAKvD,YAAiB,6BAAjB;IAAsC;;AAKxC,eAAS,QAAS,AAAS;AACrB,4BAAgB,AAAS,uBAAS,KAAK;AACpB,QAAvB,AAAc,aAAD;;IAEjB;;AAGsB;AACpB,eAAO;AACD,6BAAe,AAAwB;AAC3C,cAAI,AAAa,YAAD;AACd;;AAEE,8BAAgB,AAAS,uBAAS,AAAa,YAAD;AAClD,cAAI,aAAa;AAyDb,YAvDF,MAAM,AAAiB,8CAAa;AAClC,uBAAS,SAAU,AAAa,aAAD;AACzB,4BAAQ,AAAc,aAAD,kDAAsB,AAAO,MAAD;AACrD,oBAAI,KAAK;AACP,2BAAS,OAAQ,MAAK;AACpB,6BAAK;AACH;AACuC,wBAArC,WAAM,AAA8B,uBAAnB,IAAI,yBAAQ,MAAM;;AAErC,qCAAK,AAAO,MAAD;AACO,wBAAhB,AAAK,IAAD,KAAK,MAAM;;AAED,wBAAd,AAAK,IAAD,KAAK;;;;AAIb,kCAAI,AAAK,IAAD;AAES,sBAAf,aAAa;;AAMX,sBAFF,AAAiB,8CAAa;AACb,wBAAf,aAAa;sBACd;;;;;AAOT,uBAAS,QAAS,0CACd,AAAc,aAAD;AACf,sBAAO;AAAY;AACjB;AAEsE,sBADpE,WACI,AAA+D,uBAApD,KAAK,yBAAS,AAAa,AAAQ,YAAT,qBAAgB;;AAEP,oBAApD,MAAM,AAAM,KAAD,QAAQ,AAAa,YAAD,UAAU;AACzC;AAEqE,sBADnE,WACI,AAA8D,sBAApD,KAAK,yBAAS,AAAa,AAAQ,YAAT,qBAAgB;;kBAE5D;;;AAEA,8BAAI,AAAM,KAAD;AACa,kBAApB,MAAM,YAAY;;AAMhB,kBAFF,AAAiB,8CAAa;AACR,oBAApB,MAAM,YAAY;kBACnB;;;YAGN;;;MAGP;;kBAGsB;AACpB,UAAI,AAAM,KAAD;AACP,cAAO;YACF,KAAU,aAAN,KAAK,KAAiB,gBAAN,KAAK,KAAoB,cAAN,KAAK;AACjD,cAAO,MAAK;YACP,KAAU,cAAN,KAAK;AACd,cAAO,MAAK;YACP,KAAU,aAAN,KAAK;AACd,aAAY,8BAAN,KAAK;AAET,gBAAO,AAAM,MAAD;;AAEd,cAAO,MAAK;;AAEd,oBAAI,AAAY,AAAM,AAAmB,uDAAa,KAAK;AACzD,cAAO,MAAK;;AAG6C,MAD3D,WAAoB,6BAChB,KAAK,EAAE,MAAM,AAAyC,mBAA3B,iBAAN,KAAK,KAAa;IAC7C;;;AAGyC,oEAAa,2BAAb,OAAoB;YAApB,iBAA6B;IAAI;;;AAItE,oEAAa,2BAAb,OAAoB;YAApB,iBACA;IAAgC;oBAGJ;AAAU,YAAA,AAAoB,kCAAO,KAAK;IAAC;sBAGzC;AAAU,YAAA,AAAoB,kCAAO,KAAK;IAAC;aAGzD,OAAY;AAC9B,oBAAI,MAAM;AACR,sBAAI,kCAA4B,KAAK;AACnC;;YAEG,eAAI,wBAAkB,KAAK;AAChC;;AAGF,UAAU,cAAN,KAAK;AACP,iBAAS,OAAQ,MAAK;AACA,UAApB,aAAO,IAAI,EAAE,MAAM;;AAErB;YACK,KAAU,aAAN,KAAK;AACd,iBAAS,OAAQ,AAAM,MAAD;AACA,UAApB,aAAO,IAAI,EAAE,MAAM;;AAErB;;AAEF,oBAAI,AAAoB,uCAAa,KAAK;AACxC;;AAIyD,MAD3D,WAAoB,6BAChB,KAAK,EAAE,MAAM,AAAyC,mBAA3B,iBAAN,KAAK,KAAa;IAC7C;0BAGgC;UAAa;AAC3B,MAAhB,AAAO,MAAD,WAAN,SAAW,QAAJ;AACP,oBAAI,MAAM,KAAW,oBAAN,KAAK;AAC8C,QAAhE,WAAoB,6BAAM,KAAK,EAAgC,SAA5B,KAAK;;AAErB,MAArB,aAAO,KAAK,EAAE,MAAM;AACpB,UAAU,cAAN,KAAK;AACP;AACE,gBAA6B,mBAAtB,AAAM,KAAD;;cACL;AAE6E,UADpF,WAAoB,6BAAM,KAAK,EAAE,AAAuB,mBAAhB,iCAAC,kBACrC,AAA+E,0DAA1B,iBAAN,KAAK,KAAa,qBAAQ,KAAK;;YAE/E,KAAU,aAAN,KAAK;AACd;AAEE,gBAAqC,mBAA9B,AAAM,KAAD;;cACL;AAEmF,UAD1F,WAAoB,6BAAM,KAAK,EAAE,AAAuB,mBAAhB,iCAAC,kBACrC,AAAqF,gEAA1B,iBAAN,KAAK,KAAa,qBAAQ,KAAK;;;AAG5F,YAAa,mBAAN,KAAK;IACd;;gDA7xCqB,YAAkB;IAzE5B,aAAO,AAAgB,6BAAmB;IAIrC;IACL;IACa;IACpB;IAQO,qBAAe;IAGf,wBAAkB;IAGlB,yBAAmB;IAGxB,kBAAW;IAOb,eAAS;IAER;IAMA,mBAAa;IACb;IACA,gBAAU;IACV,gBAAU;IAOH;IAKC;IACP,iBAAgC;IAChC,0BAA4B;IAG5B,6BAAoC;IA4CvB;IAkMb,gCAA0B;IAgrB1B,8BAA2C;IAE9B;IAmMf,8BAAa,iCAAqB,OAAO;IArlCxB;IAAkB;AACrC,QAAiB,yBAAb;AAC0C,MAA5C,mBAA0B,yBAAb;UACR,KAAiB,oBAAb;AAC+B,MAAxC,oBAA2B,oBAAb;;EAElB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA6xCI;;;;;;IAGA;;;;;;IAEA;;;;;;;AAoBE,gBAAuB;AAC3B,UAAI;AAC0B,QAA5B,AAAG,GAAA,QAAC,aAAe;;AAErB,UAAI;AAC0C,QAA5C,AAAG,GAAA,QAAC,qBAAuB;;AAE7B,UAAI;AACgC,QAAlC,AAAG,GAAA,QAAC,gBAAkB;;AAExB,YAAO,IAAG;IACZ;;AAGqB,YAAS,eAAT;IAAmB;;;IAvCpC,kBAAY;IAGZ,0BAAoB;IAEpB,qBAAe;;EAGC;wDAGY;IAX5B,kBAAY;IAGZ,0BAAoB;IAEpB,qBAAe;AAOjB,QAAI,AAAG,GAAA,QAAC;AAC6B,MAAnC,iBAA6B,aAAjB,AAAG,GAAA,QAAC;;AAElB,QAAI,AAAG,GAAA,QAAC;AACmC,MAAzC,oBAAmC,aAApB,AAAG,GAAA,QAAC;;AAErB,QAAI,AAAG,GAAA,QAAC;AAC6C,MAAnD,yBAA6C,aAAzB,AAAG,GAAA,QAAC;;EAE5B;;;;;;;;;;;;;;;;;;;IAwBW;;;;;;;;QAGqB;;;EAAO;;;;;;;;mDA77CJ;AAAa,UAAS,0BAAT,QAAQ;EAAmB;;MAHlE,2BAAa;YAAG;;;;;;ECF3B;;;;sDAjB+C;AAC3C,UAAO,gCAAP,MAAM;EAAyB;;;;;;;;;;;ICWvB;;;;;;;AANI;IAAG;;AAYO,YAAA,AAAU;IAAW;;AAGrB,YAAA,AAAU;IAAM;;AAItC,YAAO,AAAsD,mBAAhD,yBAAK,AAAU,8BAAc,eAAe;IAC3D;eAGgD;AAC5C,YAAA,AAAM,MAAD,WAAW,iDAAwB,MAAM,KAAK,IAAI;IAAI;gBAGrC;AACtB,YAAA,AAAS,8BAAe,MAAM,SAAS;IAAC;;AAGZ;IAAe;qBAIc;AADnC;AAEtB,cAAA,AAAM,OAAA,CAAC;MAAK;;;AAG6B;IAAI;oBAGX;AAClC,YAAA,AAAS,AAA4B,2BAAhB,MAAM,AAAI,GAAD;IAAY;;sDAlCtB,iBAAsB;IAHpC,kBAAY;IAGE;IAAsB;;EAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAwCzB;;;;;;IAGN;;;;;;;AAOjB,YAAe,UAAN;IACX;;2DAL6B,oBAAyB;IAAzB;IAAyB;;EAAM;;;;;;;;;;;;;;;;;;;;;;ICrDtC;;;;;;IAGW;;;;;;IAQ7B;;;;;;IAKiC;;;;;;IAIb;;;;;;;AAZL,YAAA,AAAI;IAAI;qBAec;AACrC,YAAA,AAAS,gCAAiB,WAAW;IAAC;;AAQG,YAAA,AAAS;IAAkB;mBAIlB;AAClD,YAAA,AAAS,2CAAY,MAAM;IAAC;WAKU,KAAS,OAAW;UACpD;AADY;AAEH,QAAjB,MAAM;AACN,cAAO,iBAAW,GAAG,EAAE,KAAK,EAAE,GAAG,UAAS,KAAK;MACjD;;4BAGuD;AAApB;AAC7B;AACJ;AAEiD,UAA/C,OAAM,MAAM,AAAS,mCAAqB;AACtB,UAApB,AAAI,GAAD,WAAH,MAAU,kBAAF,aAAE,mBAAF,IAAJ;2BACG,MAAM,qBAAgB,GAAG,EAAE,GAAG;AACvC,cAAO,IAAG;MACZ;;+BAG6D;AAApB;AAChC;AACP;AAEoD,UAAlD,OAAM,MAAM,AAAS,sCAAwB;AAClB,UAA3B,AAAI,GAAD,WAAH,MAAQ,gCAAJ;2BACG,MAAM,qBAAgB,GAAG,EAAE,GAAG;AACvC,cAAO,IAAG;MACZ;;iBAK0C,KAAS,OAAU;AAAvC;AACH,QAAjB,MAAM;AAGN,YAAI,AAAI,GAAD;AAGL,cAAI,AAAE;AAC4C,YAAhD,MAA4C,kBAAtC,MAAM,gCAA2B,GAAG;;AAEtC,0BAAS,MAAM,6BAAwB,GAAG;AAC9C;AACmB,cAAjB,MAAa,kBAAP,MAAM;;kBACL;AAE2G,cADlH,WAAM,2BACF,AAA6G,+BAA1F,iCAAC;;;cAGvB,eAAI,MAAM,qBAAgB,GAAG,EAAE,GAAG;AACvC,gBAAO;;AAGwB,QAAjC,MAAM,gBAAW,GAAG,EAAE,KAAK,EAAE,GAAG;AAChC,cAAO,IAAG;MACZ;;eAG8C,KAAS,OAAW;UACxD;AADgB;;AAED;AACvB,YAAI,AAAM,KAAD,KAAI;AACwB,UAAnC,SAAS,sBAAiB,GAAG,EAAE,GAAG;AAG6B,UAA/D,QAAQ,wBAAW,MAAM,gBAAN,OAAQ,YAAO,KAAK,oBAAmB;;AAIjC,UAAzB,QAAQ,iBAAW,KAAK;;AAE6B,QAAvD,SAAS,2CAAuB,AAAI,gBAAO,GAAG,GAAG,KAAK;AAEhB,QAAtC,SAAS,sBAAiB,GAAG,EAAE,MAAM;AACrC,sBAAI,AAAS;AACc,UAAzB,WAAwB,SAAhB,GAAG,uBAAM,MAAM;;AAEzB,cAAO,AAAO,OAAD;MACf;;cAG0C,KAAU,QAAa;UACvD;AADY;AAEd,2BAAe;AACrB,iBAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAO,MAAD,YAAS,IAAA,AAAC,CAAA;AACmC,UAArE,AAAa,YAAD,OAAK,MAAM,YAAO,GAAG,EAAE,AAAM,MAAA,QAAC,CAAC,GAAG,AAAI,IAAA,QAAC,CAAC,WAAU,KAAK;;AAErE,cAAO,aAAY;MACrB;;cAG0C,KAAU,QAAa;AAA3C;AACd,yBAAa;AACnB,iBAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAO,MAAD,YAAS,IAAA,AAAC,CAAA;AACmB,UAArD,AAAW,UAAD,OAAK,MAAM,wCAAO,GAAG,EAAE,AAAM,MAAA,QAAC,CAAC,GAAG,AAAI,IAAA,QAAC,CAAC;;AAEpD,cAAO,WAAU;MACnB;;cAMuB,KAAa,OAAe;AAD1B;AAEN,QAAjB,MAAM;AAEF,6BAAiB,sBAAiB,GAAG,EAAE,GAAG;AAC9C,YAAI,AAAe,cAAD;AAChB,gBAAO;;AAGL,0BAAc,iBAAW,AAAe,cAAD,QAAQ,KAAK;AACpD,qBAAS,2CAAuB,AAAI,gBAAO,GAAG,GAAG,WAAW;AAEnC,QAA7B,sBAAiB,GAAG,EAAE,MAAM;AAC5B,sBAAI,AAAS;AACiB,UAA5B,WAA2B,SAAnB,GAAG,0BAAS,MAAM;;AAE5B,cAAO,AAAO,OAAD;MACf;;uBAMuB,aAAoB;AACF;AAWrC,MAVF,OAAO,qHAAiD;AASpD,UARF,AAMG,oBANY,WAAW,EAAE,2BAAe,MAAM,IAAG,QAAC;AACnD,0BAAI,AAAK,IAAD;AACN,oBAAO;;AAEoB,YAA7B,AAAK,IAAD,KAAK,AAAO,MAAD;AACf,kBAAO;gEACO;AACF,YAAZ,AAAK,IAAD;;;AAIR,YAAO,AAAK,KAAD;IACb;;;AAKI,YAAA,AAAU;2BAAA,OAAQ,wBAAiB;IAAM;;;AAKS,mEAAY,8BAAZ,OAChD,yCAAI,QAAC,aAAc,AAAU,SAAD;6BADoB,OAEhD,0BAAiB;IAAM;;AAGY,YAAA,AAAW,2BAC9C,OACA,2BAAqB,AAAW,qCAAkB;IAAM;mBAKrB,KAAY,QACJ;AAD5B;AAEnB,iBAAK,qBAA4B,QAA+B;AAC9D,wBAAI,AAAO,MAAD;AACR,kBAAO;;AAEL,8BAAuB,uBAAP,MAAM;AAC1B,gBAAO,8CAAiC,aAAa,EAAE,MAAM;;;AAI/D,sBAAI,6BAAuB,GAAG;AAExB,wBAAU;AACd,mBAAS,SAAU,QAAO;AACxB,0BAAI;AACe,cAAjB,MAAM;;AAGR,0BAAI,oBAAoB,CAAC,MAAM,EAAE,MAAM;AACrC,kBAAI,AAAM,AAAS,MAAT,CAAC,MAAM,MAAK;AACpB;;;;;AAMJ,sBAAU;AACd,iBAAS,SAAU,QAAO;AAExB,wBAAI;AACe,YAAjB,MAAM;;AAGR,wBAAI,6BAAuB,GAAG;AAC5B,0BAAI,AAAW,AAAK,kCAAS,AAAO,MAAD;AAEjC;;;AAGJ,wBAAI,oBAAoB,CAAC,MAAM,EAAE,MAAM;AACrC,gBAAI,AAAM,AAAS,MAAT,CAAC,MAAM,MAAK;AACpB;;;;MAIR;;eAGqC,KAAY;AAAhC;;AACb,eAAC,MAAM,mBAAc,GAAG,EAAE,MAAM;6BAAC,OAAG;MAAG;;kBAIpB,KAAY;AADS;AAEL,QAArC,SAAS,iCAAqB,MAAM;AAChC,uBAAU,MAAM,oBAAe,GAAG,EAAE,MAAM;AAC9C,sBAAI,AAAQ,OAAD;AACT,gBAAO,AAAQ,QAAD;;AAEhB,cAAO;MACT;;mBAIuB,KAAY;AADgB;;AAGpB;AACiB;AAK1C,4BAAuB,uBAAP,MAAM;AACtB,4BAAqD,uBAAtC,aAAa,gBAAb,OAAe,gCAAf,OAA2B,oBAA3B,gBAAyC;AACxD,4BAAgB,WAAC,YAAY;AAC7B;AACJ,YAAI,aAAa;AAG8C,UAD7D,oBACI;;AAEgC,UAApC,UAAkC;;AAGpC,iBAAK,UAAiC;;AACpC,cAAI,aAAa;AAEf,uBAAI,aAAa,gBAAb,OAAe;AACY,cAA7B,AAAwB,uBAAD,WAAvB,0BAA4B,IAAJ;AACxB,kBAA8B,cAAH,OAAvB,uBAAuB,0EAAK,AAAc,aAAD;AAE3C,sBAAO;;;AAGX,yBAAI,aAAa,kBAAb,OAAe;AACjB,kBAA6B,aAAzB,AAAkB,iBAAD,YAA+B,aAApB,AAAc,aAAD,UAAS;AAEd,gBAAtC,AAAiB,iBAAA,MAAC,AAAO,MAAD,MAAQ,MAAM;AACtC,sBAAO;;;AAG2B,YAAtC,AAAiB,iBAAA,MAAC,AAAO,MAAD,MAAQ,MAAM;;AAEnB,YAAnB,AAAQ,OAAD,OAAK,MAAM;;AAEpB,gBAAO;;;AAG0C,QAAnD,MAAM,oBAAe,GAAG,EAAE,aAAa,EAAE,SAAS;AAClD,YAAI,aAAa;AAC2C,UAA1D,UAAU,AAAkB,AAAO,iBAAR,4BAAyB;;AAGtD,YAAI,MAAM;AAER,wBAAI,YAAY;AACd,0BAAI;AACE,yBAAO,mBAAK,AAAS;AAI8B,cAHvD,MAAM,AAAK,IAAD,oCACN,OAAO,EACP,SAAe,SAAuB,YAClC,AAAc,aAAD,gBAAgB,OAAO,EAAE,OAAO;;AAGF,cADnD,AAAQ,OAAD,QAAM,SAAC,SAAS,YACnB,AAAc,aAAD,gBAAgB,OAAO,EAAE,OAAO;;AAIL,YAA9C,UAAU,yBAAa,OAAO,EAAE,aAAa;;;;AAKjD,cAAO,QAAO;MAChB;;gBAG4C,KAAY;AAAhC;AAClB,uBAAU,MAAM,oBAAe,GAAG,EAAE,MAAM;AAC9C,cAAO,AAAQ,AAA0C,QAA3C,qBAAK,QAAe,UAAW,AAAO,MAAD;MACrD;;sBAK8C;AAEtC,mBAAS,AAAS,AAAa,sBAAZ,AAAO,MAAD;AAC/B,oBAAI,AAAO,MAAD;AACoB,QAA5B,AAAU,wBAAO,AAAO,MAAD;;AAEO,QAA9B,AAAS,sBAAC,AAAO,MAAD,MAAQ,MAAM;;AAEhC,YAAO,OAAM;IACf;eAGuC;AACjC,gBAAM,AAAO,MAAD;AACS,MAAzB,uBAAkB,MAAM;AAExB,UAAQ,aAAJ,GAAG;AACL,YAAQ,aAAJ,GAAG,iBAAG;AACQ,UAAhB,kBAAa,GAAG;;;IAGtB;iBAIuB,KAA4B;AADR;AAExB,QAAjB,MAAM;AACN,cAAO,uBAAiB,GAAG,EAAE,MAAM;MACrC;;qBAIuB,KAA4B;AAC1B;AACvB,UAAI,AAAS;AACmC,QAA9C,gBAAgB,mCAAuB,MAAM;;AAEvB,QAAtB,gBAAgB,MAAM;;AAIxB,UAAI,AAAc,AAAI,aAAL;AAG6B,QAA5C,AAAc,aAAD,OAAO,AAAI,gBAAS,kBAAF,aAAE,mBAAF;;AAG3B,wBAAY,AAAc,aAAD;AAC7B,YAAc,aAAV,SAAS;AACL,uBAAS,SAAS;AACxB,cAAW,aAAP,MAAM,iBAAG;AACQ,YAAnB,kBAAa,MAAM;;;;AAKJ,MAArB,sBAAiB,GAAG;AACiB,MAA1B,0BAAX,kBAAmC,iDAAxB;AAE6C,MAAxD,AAAU,uBAAC,AAAc,aAAD,MAAQ,8BAAU,aAAa;AAGK,MAA5D,AAAS,+BAAiB,GAAG,EAAE,AAAc,AAAI,AAAM,aAAX;AAE5C,YAAO,cAAa;IACtB;8BAOuB,KAAS;;AACP;AAGF,MAArB,sBAAiB,GAAG;AACpB,oBAAI,6BAAuB,GAAG;AACI,QAAhC,gBAAS,AAAU,uBAAC,GAAG,iBAAJ,OAAO;;AAGH,MAAzB,AAAO,MAAD,WAAN,SAAW,AAAS,sBAAC,GAAG,IAAjB;AAEP,oBAAI,AAAS;AACiD,QAA5D,WAA2D,SAAlD,AAAS,oCAAmB,mBAAM,MAAM,uBAAM,GAAG;;AAE5D,YAAO,OAAM;IACf;iBAIuB,KAAK;AADe;AAErC,qBAAS,sBAAiB,GAAG,EAAE,GAAG;AAEtC,sBAAI;AACe,UAAjB,MAAM;;AAER,cAAO,OAAM;MACf;;oBAGgD,KAAK;AAAzB;;AACtB,qBAAS,+BAA0B,GAAG,EAAE,GAAG;AAE/C,sBAAI;AACe,UAAjB,MAAM;;AAER,cAAwB,QAAhB,MAAM,gBAAN,OAAQ,iBAAW;MAC7B;;qBAG2D,KAAK;AAC1D,mBAAS,+BAA0B,GAAG,EAAE,GAAG;AAC/C,UAAI,AAAO,MAAD,sBAAY,AAAO,MAAD;AAC1B,cAAO;;AAET,YAAO,OAAM;IACf;wBAIuB,KAAc;AADmB;AAEhD,sBAAkC;AAExC,iBAAS,MAAO,KAAI;AACd,uBAAS,+BAA0B,GAAG,EAAE,GAAG;AAC/C,cAAI,MAAM;AACR,2BAAK,AAAO,MAAD;AACU,cAAnB,AAAQ,OAAD,OAAK,MAAM;;AAED,cAAjB,AAAQ,OAAD,OAAK;;;AAGG,YAAjB,AAAQ,OAAD,OAAK;;AAEd,wBAAI;AACe,YAAjB,MAAM;;;AAGV,cAAO,QAAO;MAChB;;gCAIuB,KAAsB;AADiB;AAEtD,wBAAkC;AAExC,iBAAS,MAAO,AAAK,KAAD;AACd,0BAAY,+BAA0B,GAAG,EAAE,GAAG;AAClD,cAAI,SAAS,uBAAc,AAAU,SAAD;AAC8B,YAAhE,AAAU,SAAD,OAAK,6FAAuC,SAAS;;AAE3C,YAAnB,AAAU,SAAD,OAAK;;AAEhB,wBAAI;AACe,YAAjB,MAAM;;;AAGV,cAAO,UAAS;MAClB;;WAG0C,KAAK;AAAzB;;AACN,sBAAS,MAAM,kBAAa,GAAG,EAAE,GAAG;AAClD,cAAO,MAAM;6BAAN,OAAQ;MACjB;;aAGwC,KAAY;AAAhC;AACd,oBAAQ;AAEZ,YAAI,AAAO,MAAD;AAEiB,UAAzB,QAAA,AAAM,KAAD,gBAAI,AAAU;AAGnB,wBAAI,6BAAuB,GAAG;AAY1B,YAXF,AAAW,0BAAQ,SAAC,KAAK;;AACnB,6BAAwB,MAAd,AAAM,KAAD,UAAC,cAAW;AAC/B,4BAAI,AAAU,6BAAY,GAAG;AAC3B,8BAAI,OAAO;AACF,kBAAP,QAAA,AAAK,KAAA;;;AAGP,+BAAK,OAAO;AACH,kBAAP,QAAA,AAAK,KAAA;;;;;;AAUX,UAHF,MAAM,oBAAe,GAAG,EAAE,2BAAe,MAAM,IAAG,QAAC;AAC1C,YAAP,QAAA,AAAK,KAAA;AACL,kBAAO;;;AAGX,cAAO,MAAK;MACd;;cAG6C,KAAS;AAA7B;AACnB,qBAAS,+BAA0B,GAAG,EAAE,GAAG;AAC9B,QAAjB,MAAM;AACN,YAAI,AAAO,MAAD;AACR,gBAAO;;AAIH,sBAAQ,AAAO,MAAD;AACY,UAA9B,MAAM,kBAAa,GAAG,EAAE,KAAK;AAC7B,gBAAO,AAAO,OAAD;;MAEjB;;iBAG6C,KAAc;AAAlC;AACjB,sBAAkC;AAClC,0BAAc;AAGmB,QAAvC,OAAY,eAAK,IAAI,aAAY;AACjC,iBAAS,MAAO,KAAI;AACD,UAAjB,MAAM;AACF,uBAAS,+BAA0B,GAAG,EAAE,GAAG;AAC/C,cAAI,MAAM,uBAAa,AAAO,MAAD;AAEvB,wBAAQ,AAAO,MAAD;AAEA,YAAlB,AAAQ,OAAD,OAAK,KAAK;AACG,YAApB,AAAY,WAAD,OAAK,GAAG;;AAEE,YAArB,AAAY,WAAD,OAAK;;;AAIpB,sBAAI,AAAQ,OAAD;AACiC,UAA1C,MAAM,AAAS,4BAAc,GAAG,EAAE,OAAO;;AAE3C,cAAO,YAAW;MACpB;;iBAIuB,KAAU,QAAa;AADrB;AAEjB,2BAAe;AACrB,iBAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAO,MAAD,YAAS,IAAA,AAAC,CAAA;AACwB,UAA1D,AAAa,YAAD,OAAK,MAAM,eAAU,GAAG,EAAE,AAAM,MAAA,QAAC,CAAC,GAAG,AAAI,IAAA,QAAC,CAAC;;AAEzD,cAAO,aAAY;MACrB;;6BAE+C;AAC7C,YAAO,AAAyC,IAAtC,YAAgB,YAAJ,GAAG,EAAI,4BAAsB;IACrD;mBAGuC,KAAK;AAC1C,oBAAI,AAAU,6BAAY,GAAG;AAC3B,cAAO;YACF,eAAI,6BAAuB,GAAG;AACnC,cAAO,AAAW,+BAAY,GAAG;;AAEjC,cAAO;;IAEX;;AAKmB,MAAjB,kBAAa;IACf;;AAMM,gBAAuB;AAC3B,UAAI;AACgB,QAAlB,AAAG,GAAA,QAAC,QAAU;;AAEhB,UAAI;AAC6B,QAA/B,AAAG,GAAA,QAAC,SAAW,AAAU;;AAE3B,YAAO,IAAG;IACZ;;AAIE,YAAc,UAAL;IACX;aAGyC;UAAa;AAAjC;AACnB,YAAI,AAAO,MAAD;AACJ,4BAAc;AAClB,wBAAI,6BAAuB,GAAG;AAE0B,YADtD,AAAY,WAAD,UAAQ,MAAM,kBACrB,GAAG,EAAO,eAAK,AAAW,mCAAgB;;AAE1C,qBAAO,AAAU;AAE+C,UADtE,AACK,WADM,UACC,MAAM,kBAAa,GAAG,EAAO,eAAK,IAAI,aAAY;AAC9D,gBAAO,YAAW;;AAEd,sBAAO,MAAM,iBAAY,GAAG,EAAE,MAAM;AACxC,gBAAO,OAAM,kBAAa,GAAG,EAAO,eAAK,IAAI,aAAY;;MAE7D;;mBAG+C,KAAa;UAChD;AADe;AAErB,oBAAO,MAAM,iBAAY,GAAG,EAAE,MAAM;AACxC,iBAAS,MAAO,KAAI;AACwB,UAA1C,MAAM,YAAO,GAAG,EAAE,KAAK,EAAE,GAAG,UAAS;;AAEvC,cAAO,KAAI;MACb;;;AAM0B,YAAA,AAAS;IAAa;;AAGxB,YAAA,AAAS;IAAW;;AAGpB,YAAA,AAAS;IAAW;;0CA5oB1B,UAAiB;IAjB/B,mBAAa;IAKoB,kBACjC;IAGoB;IAQN;IACR,YAAE,uBAA2B,IAAI;;EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gFA+oBC,QAAuB;;AACpE,eAAI,MAAM,gBAAN,OAAQ;AACV,qBAAK,AAAO,MAAD,QAAQ,MAAM,EAAE,AAAO,MAAD;AAC/B,cAAO;;;AAGX,gBAAI,MAAM,iBAAN,OAAQ;AACV,qBAAK,AAAO,MAAD,MAAM,MAAM,EAAE,AAAO,MAAD;AAC7B,cAAO;;;AAGX,UAAO;EACT;;;;;;;;IC7pBS;;;;;;IAGH;;;;;;IAGA;;;;;;IAYK;;;;;;IAGA;;;;;;IAGO;;;;;;kBAGQ;AACE,MAAxB,kBAAa,6BAAC,SAAS;IACzB;YAG0B,SAAuB;AAC3C,mBAAS;AACb,UAAI;AACF,iBAAS,QAAS;AAC8C,UAA9D,SAAgB,AAAqB,0BAA3B,KAAK,UAA8B,OAAO,EAAE,OAAO;AAE7D,cAAI,MAAM,KAAI;AACZ;;;;AAIN,YAAO,OAAM;IACf;mBAGiC,SAAuB;AAChD,mBAAS,aAAQ,OAAO,EAAE,OAAO;AACvC,UAAI,AAAO,MAAD,KAAI;AACZ,cAAO,kBAAW,AAAQ,OAAD,MAAM,AAAQ,OAAD;;AAExC,YAAO,OAAM;IACf;sBAKqC,QAAiB;;AAChD,mBAAS;AACb,UAAI;AACF,iBAAS,IAAI,GAAG,AAAE,CAAD,gBAAG,AAAW,2BAAQ,IAAA,AAAC,CAAA;AAChC,sBAAQ,AAAU,uBAAC,CAAC;AAE4C,UADtE,SACW,AAAqB,0BAA3B,KAAK,oBAAwC,MAAM,EAAE,QAAQ,EAAE,CAAC;AAErE,cAAI,MAAM,KAAI;AACZ;;;;AAIN,UAAI,AAAO,MAAD,KAAI;AAEN,8BAA2B,yBAAT,QAAQ;AAChC,mBAAI,AAAgB,eAAD,yBAAC,OAAU;AAE5B,gBAAO,kBAAW,AAAO,MAAD,MAAM,AAAgB,AAAS,eAAV;;;AAIjD,YAAO,OAAM;IACf;WAG2B,QAAiB;AACpC,mBAAS,uBAAkB,MAAM,EAAE,QAAQ;AACjD,UAAI,AAAO,MAAD,KAAI,eAAK,AAAS,QAAD;AACzB,cAAO;;AAET,YAAc,cAAP,MAAM,IAAG;IAClB;SAGyB,QAAiB;AAClC,mBAAS,uBAAkB,MAAM,EAAE,QAAQ;AACjD,UAAI,AAAO,MAAD,KAAI,eAAK,AAAS,QAAD;AACzB,cAAO;;AAET,YAAc,cAAP,MAAM,IAAG;IAClB;;;UAGkB;AAChB,YAAO,4BACK,yBACI,yBAEC,MAAN,KAAK,EAAL,cAAc,2BAEb,oBACD,iBACF;IACX;;AAIE,YAAO,4BACK,yBAAoB,wBAAmB,iBAAY;IACjE;;AAIE,YAAO,AAOH,sBAPa;;AACf,YAAI,qBAAwB,WAAR,UAAU;AAC9B,YAAI,yBAA0B,WAAN,QAAQ;AAChC,YAAI,qBAAwB,WAAR,UAAU;AAC9B,YAAI,oBAAsB,WAAP,SAAS;AAC5B,YAAI,oBAAsB,WAAP,SAAS;AAC5B,YAAI,kBAAoB,WAAP,SAAS;;cAC1B;IACJ;;;QAxHU;QACD;QACA;QACA;QACA;QACA;IASO,oBAAa;IAdnB;IACD;IACA;IACA;IACA;IACA;;EAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2FA/CE,QAAuB;AACvC,QAAI,AAAO,MAAD;AACR,YAAO;;AAET,mBAAK,uCAA4B,MAAM,EAAE,MAAM;AAC7C,YAAO;;AAET,mBAAK,gCAAoB,AAAO,MAAD,SAAS,MAAM;AAC5C,YAAO;;AAET,UAAO;EACT;mDAIiC,SAAuB;AACtD,QAAI,MAAM;AAER,UAAI,AAAO,MAAD;AACqD,QAA7D,UAAU,AAAQ,OAAD,WAAS,oBAAI,AAAO,MAAD,SAAS,AAAQ,OAAD;;AAGtD,UAAI,AAAO,MAAD;AACuD,QAA/D,UAAU,AAAQ,OAAD,WAAS,GAAG,oBAAI,AAAO,MAAD,QAAQ,AAAQ,OAAD;;;AAG1D,UAAO,QAAO;EAChB;mEA2I0C;AACxC,QAAI,MAAM;AACR,UAAY,AAAkB,uBAAzB,MAAM,YAA4B;AACa,QAAlD,SAAiB,AAAkB,uBAAzB,MAAM,gBAAgC;;;AAGlB,MAAhC,SAAS,0CAAqB;;AAEhC,UAAc,wBAAP,MAAM;EACf;;;;;;IClLa;;;;;;IAEE;;;;;;IAGF;;;;;;YAWgB,SAAwB;AAC3C,mBAAS,sBAAiB,OAAO,EAAE,OAAO;AAChD,uBAAO,kBAAY,MAAM,GAAG,cAAC,MAAM;IACrC;sBAGqC,QAAiB,UAAc;AAC5D,mBAAS,gCAA2B,MAAM,EAAE,QAAQ,EAAE,KAAK;AACjE,uBAAO,kBAAY,MAAM,GAAG,cAAC,MAAM;IACrC;+BAImB,QAAuB;AACpC,mBAAS,AAAM,MAAA,MAAC;AAChB,mBAAS,AAAQ,QAAA,MAAC;AACtB,YAAO,4BAAsB,MAAM,EAAE,MAAM;IAC7C;+BAImB,QAAiB,UAAc;AAC1C,4BAA2B,yBAAT,QAAQ;AAChC,UAAI,AAAgB,eAAD;AACb,oBAAQ,AAAgB,AAAM,eAAP,eAAQ,KAAK;AACxC,cAAO,4BAAsB,AAAM,MAAA,MAAC,aAAQ,KAAK;YAC5C,KAAI,AAAgB,eAAD;AACxB,cAAO,iCAA2B,MAAM,EAAE,AAAgB,eAAD;;AAEI,MAA/D,WAAM,2BAAc;IACtB;qBAGoC,SAAwB;AACtD,mBAAS,AAAO,OAAA,MAAC;AACjB,mBAAS,AAAO,OAAA,MAAC;AACrB,YAAO,4BAAsB,MAAM,EAAE,MAAM;IAC7C;0BAGkC,QAAgB;AAChD,UAAI,AAAO,MAAD;AACR,YAAI,AAAO,MAAD;AACR,gBAAO;;AAET,sBAAI;AACF,gBAAO;;AAEP,gBAAO,EAAC;;YAEL,KAAI,AAAO,MAAD;AACf,sBAAI;AACF,gBAAO,EAAC;;AAER,gBAAO;;;AAGX,YAAO,oBAAa,MAAM,EAAE,MAAM;IACpC;;AAGQ,gBAAuB;;AACtB,mBAAL,sBAAO,kBAAY,QAAQ;AAC3B,YAAI,AAAS,kBAAG,MAAgB,WAAV,YAAY;;;AAEpC,YAAO,IAAG;IACZ;;AAIE,YAAqB,eAAd;IACT;;mDA5EsB,OAAa,kBAAgB;IAA7B;IACN,mBAAE,AAAU,SAAD,KAAI;IAChB,kBAAE,AAAS,QAAD,KAAI;;EAAI;;;;;;;;;;;;;;;;;;;;;;;;;eCRR,OACf,kBAAuB;AAC/B,YAAO,0CAAiB,KAAK,EAAE,SAAS,EAAE,QAAQ;IACpD;;;;;;;;;;;;;ACuSkB,cAAA,AAAM;MAAM;WAMZ;AAAU,cAA6B,SAA7B,qBAAe,AAAK,mBAAC,KAAK;MAAO;WAGvC;YAAO;;AAAU,mBAAM,wBAAW;;MAAY;iBAGrD;AAAc,0BAAM,wBAAW;MAAY;;kCAThC;MAAc,cAAE,AAAK,IAAD,qBAAkB;;IAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiB9C;MAAI;WAMP;AAAQ,cAA0B,SAA1B,qBAAe,AAAI,mBAAC,GAAG;MAAO;WAGvC;YAAO;gBAAP;gBAAO;AAAU,mBAAM,wBAAW;;MAAY;;AAGlD,0BAAM,wBAAW;MAAY;;AAGrB,cAAA,AAAK;MAAI;aAGjB;AAAQ,0BAAM,wBAAW;MAAY;;iCAfpC;MAAY,cAAE,AAAI,GAAD;;IAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2CAjUhC;AACf,SAAU,gBAAJ,GAAG;AACP,YAAO;;AAGT,QAAS,AAAW,gBAAf,GAAG,aAAqB;AAC3B,YAAO;;AAET,UAAO;EACT;yCAGgB;AACd,QAAI,AAAM,KAAD;AACP,YAAO;UACF,KAAU,aAAN,KAAK,KAAiB,gBAAN,KAAK,KAAoB,cAAN,KAAK;AACjD,YAAO;UACF,KAAU,cAAN,KAAK;AACd,eAAS,OAAQ,MAAK;AACpB,uBAAK,iBAAW,IAAI;AAClB,gBAAO;;;AAGX,YAAO;UACF,KAAU,aAAN,KAAK;AACd,eAAS,QAAS,AAAM,MAAD;AACrB,uBAAK,kBAAY,AAAM,KAAD;AACpB,gBAAO;;AAET,uBAAK,iBAAW,AAAM,KAAD;AACnB,gBAAO;;;AAGX,YAAO;;AAEP,YAAO;;EAEX;yCAGuB,MAAc;AAAS,8BAAa,IAAI,EAAE,IAAI;EAAC;qDAIvC,SAAgC;AAC3D,4BAAW,AAAQ,OAAD,MAAM,AAAQ,OAAD;EAAK;6CAmBf,QAAgB;;AACvC;AACE,UAAW,oBAAP,MAAM,KAAyB,oBAAP,MAAM;AAChC,cAAkB,yBAAQ,MAAM,EAAE,MAAM;YACnC,KAAW,cAAP,MAAM,KAAmB,cAAP,MAAM;AAC3B,oBAAQ,MAAM;AACd,oBAAQ,MAAM;AAEpB,iBAAS,IAAI,GAAG,AAAE,CAAD,GAAG,oBAAI,AAAO,MAAD,WAAS,AAAO,MAAD,YAAU,IAAA,AAAC,CAAA;AAChD,oBAAM,mBAAa,AAAK,KAAA,QAAC,CAAC,GAAG,AAAK,KAAA,QAAC,CAAC;AAC1C,cAAI,AAAI,GAAD,KAAI;AACT;;AAEF,gBAAO,IAAG;;AAGZ,cAAO,oBAAa,AAAM,KAAD,WAAS,AAAM,KAAD;YAClC,KAAW,cAAP,MAAM,KAAmB,cAAP,MAAM;AACjC,cAAO,mBAAY,MAAM,EAAE,MAAM;;;UAE5B;;AAIL,cAAM,uBAAiB,MAAM,EAAE,MAAM;AACzC,QAAI,AAAI,GAAD;AAEL,WAAa,gBAAP,MAAM,MAAwB,gBAAP,MAAM;AACjC,cAAO,2BAAa,MAAM,gBAAN,OAAQ,6BAAY,MAAM,iBAAN,OAAQ;;;AAGpD,YAAO,GAAG;UAAH,iBAAO;EAChB;2CAGqB,QAAa;AAChC,kBAAI,MAAM;AACR,oBAAI,MAAM;AACR,cAAO;;AAET,YAAO;;AAET,qBAAO,MAAM,IAAG,CAAC,IAAI;EACvB;qDAmB6B,QAAgB;AAE3C,QAAI,AAAO,MAAD;AACR,UAAI,AAAO,MAAD;AACR,cAAO;;AAGP,cAAO,EAAC;;UAEL,KAAI,AAAO,MAAD;AACf,YAAO;UACF,KAAW,cAAP,MAAM;AAEf,UAAW,cAAP,MAAM;AACR,cAAO;;AAEP,cAAO,EAAC;;UAEL,KAAW,cAAP,MAAM;AACf,YAAO;UACF,KAAW,aAAP,MAAM;AAEf,UAAW,aAAP,MAAM;AACR,cAAO;;AAEP,cAAO,EAAC;;UAEL,KAAW,aAAP,MAAM;AACf,YAAO;UACF,KAAW,mBAAP,MAAM;AAEf,UAAW,mBAAP,MAAM;AACR,cAAO;;AAEP,cAAO,EAAC;;UAEL,KAAW,mBAAP,MAAM;AACf,YAAO;UACF,KAAW,gBAAP,MAAM;AAEf,UAAW,gBAAP,MAAM;AACR,cAAO;;AAEP,cAAO,EAAC;;UAEL,KAAW,gBAAP,MAAM;AACf,YAAO;UACF,KAAW,cAAP,MAAM;AAEf,UAAW,cAAP,MAAM;AACR,cAAO;;AAEP,cAAO,EAAC;;UAEL,KAAW,cAAP,MAAM;AACf,YAAO;UACF,KAAW,cAAP,MAAM;AAEf,UAAW,cAAP,MAAM;AACR,cAAO;;AAEP,cAAO,EAAC;;UAEL,KAAW,cAAP,MAAM;AACf,YAAO;UACF,KAAW,aAAP,MAAM;AAEf,UAAW,cAAP,MAAM;AACR,cAAO;;AAEP,cAAO,EAAC;;UAEL,KAAW,aAAP,MAAM;AACf,YAAO;;AAET,UAAO;EACT;mCAEiC;AAC3B,mBAA4B;AAK9B,IAJF,AAAI,GAAD,WAAS,SAAC,KAAK;AAChB,uBAAI,KAAK,EAAe;AACoB,QAA1C,AAAQ,QAAA,QAAK,gBAAJ,GAAG,GAAc,gBAAU,KAAK;;;AAG7C,UAAO,SAAQ;EACjB;uCAE0B;AACxB,QAAU,aAAN,KAAK;AACP,YAAO,eAAQ,KAAK;;AAEtB,UAAO,MAAK;EACd;wCAGgB;AACd,QAAQ,gBAAJ,GAAG;AACL,YAAO,IAAG;;AAEZ,QAAQ,aAAJ,GAAG;AACL,YAAO,IAAG;;AAEZ,QAAI,AAAI,GAAD;AACL,YAAO,IAAG;;AAGiE,IAD7E,WAAwB,yCACpB,AAAwE,kBAAlE,GAAG,wBAAgB,AAAI,GAAD,WAAW,AAA2B,oBAAd,iBAAJ,GAAG,KAAiB;EAC1E;iDAG4B;AAC1B,UAAa,AAAO,cAAb,KAAK,KAAiB,kBAAN,KAAK;EAC9B;yCAG2B;AACzB,QAAU,aAAN,KAAK;AACP,YAAO,AAAM,MAAD,mCACR,SAAC,KAAK,UAAU,wCAAa,gBAAJ,GAAG,GAAY,iBAAW,KAAK;;AAE9D,QAAU,kBAAN,KAAK;AACP,YAAO,AAAM,AAAkC,MAAnC,qBAAK,QAAC,SAAU,iBAAW,KAAK;;AAE9C,UAAO,MAAK;EACd;yDAGmC;;AACjC,QAAU,aAAN,KAAK;AACP,WAAY,8BAAN,KAAK;AACT,cAAO,KAAK;6BAAL,OAAO;;;AAGlB,UAAO,MAAK;EACd;uDAG+B;AAC7B,QAAI,AAAM,KAAD;AACP,YAAO;UACF,KAAU,aAAN,KAAK,KAAiB,gBAAN,KAAK,KAAoB,cAAN,KAAK;AACjD,YAAO;;AAET,UAAO;EACT;2EAGyC;AACvC,kBAAI,wBAAkB,KAAK;AACzB,YAAO;UACF,KAAU,oBAAN,KAAK;AACd,YAAO;;AAET,UAAO;EACT;iDAG+B;AAC7B,QAAU,aAAN,KAAK;AACP,YAAO,8CAA8B,KAAK;UACrC,KAAU,kBAAN,KAAK;AACd,YAAO,6BAAc,KAAK;;AAE5B,UAAO,MAAK;EACd;wDAiD0B,KAAsB;AACtC,gBAAQ,GAAG;AACnB,aAAW,OAAQ,MAAK;AACtB,UAAU,aAAN,KAAK;AACY,QAAnB,QAAa,WAAL,KAAK,WAAC,IAAI;;AAElB,cAAO;;;AAGX,UAAa,mBAAN,KAAK;EACd;8DAG6B,KAAsB;AAEjD,QAAQ,sBAAJ,GAAG;AAC6B,MAAlC,MAAW,AAAiB,sBAArB,GAAG;;AAEJ,gBAAQ,GAAG;AACnB,aAAS,OAAQ,MAAK;AACpB,UAAU,aAAN,KAAK;AACY,QAAnB,QAAa,WAAL,KAAK,WAAC,IAAI;;AAElB,cAAO;;;AAGX,UAAa,mBAAN,KAAK;EACd;wDAG6B,KAAkB,OAAS;AACtD,aAAS,IAAI,GAAG,AAAE,CAAD,GAAgB,aAAb,AAAM,KAAD,aAAU,GAAG,IAAA,AAAC,CAAA;AAC/B,iBAAO,AAAK,KAAA,QAAC,CAAC;AACZ,gBAAM,AAAG,GAAA,QAAC,IAAI;AACtB,WAAU,aAAJ,GAAG;AACkB,QAAzB,MAAuB;AACR,QAAf,AAAG,GAAA,QAAC,IAAI,EAAI,GAAG;;AAED,MAAhB,MAAU,aAAJ,GAAG;;AAEY,IAAvB,AAAG,GAAA,QAAC,AAAM,KAAD,SAAS,KAAK;EACzB;yDAG+B;;AACvB,kBAAuB,cAAd,KAAK,gBAAL,OAAO,aAAP,eAAiB;AAChC,QAAW,aAAP,MAAM,IAAG;AACX,YAAO;;AAET,UAAO,AAAM,AAAc,AAAmB,MAAlC,cAAY,OAAM,yBAC1B,AAAM,AAAuB,KAAxB,cAAmB,aAAP,MAAM,IAAG,OAAM;EACtC;yCAEyB;AAAU,UAAA,AAAU,gBAAP,KAAK;EAAE;uCAGrB;AACtB,QAAI,AAAM,KAAD;AACP,YAAO;;AAET,kBAAI,yBAAmB,KAAK;AAC1B,YAAO,kBAAW,KAAK;UAClB,KAAI,AAAM,KAAD,YAAU;AACxB,YAAO,kBAAW,KAAK;;AAEzB,UAAO,MAAK;EACd;6CAE2B;AAAU,UAAA,AAAM,MAAD,aAAW,GAAG,AAAM,AAAO,KAAR,UAAU;EAAE;+CAGvC;AAChC,kBAAI,yBAAmB,KAAK;AAC1B,YAAO,2BAAC,mBAAa,KAAK;;AAE5B,UAAO,wBAAiB,KAAK;EAC/B;qDAGqC;AAAU,UAAA,AAAM,MAAD,SAAO;EAAI;wDAGrC,KAAY;AACpC,UAAO,wCAAiB,GAAG,EAAE,oBAAc,KAAK;EAClD;8DAG6B,KAAY;AACvC,UAAO,2CAAoB,GAAG,EAAE,oBAAc,KAAK;EACrD;wDAG6B,KAAY,OAAS;AACE,IAAlD,uCAAiB,GAAG,EAAE,oBAAc,KAAK,GAAG,KAAK;EACnD;yCAG2B,eAAuB;QACxC;AACiB,IAAzB,AAAgB,eAAD,WAAf,kBAAoB,QAAJ;AAEhB,QAAI,AAAS,QAAD;AACV,YAAO,cAAa;;AAGtB,SAAoB,aAAd,aAAa;AACjB,YAAO,iBAAU,QAAQ;;AAE3B,SAAe,aAAT,QAAQ;AACZ,YAAO,SAAQ;;AAGX,oBAAsC,8BAA1B,iBAAW,aAAa;AACtC,qBAAa,SAAS;AAG1B,aAAK,MAAM,KAAK;AACV,sBAAgB,gBAAJ,GAAG;AAEN;AACb,oBAAI,eAAe;AACK,QAAtB,WAAW,0BAAC,SAAS;;AAEc,QAAnC,WAAW,oBAAc,SAAS;;AAEpC,UAAI,AAAS,AAAO,QAAR,cAAW;AACE,QAAvB,YAAY,AAAQ,QAAA,QAAC;AAErB,YAAU,YAAN,KAAK,EAAe;AACM,UAA5B,AAAW,UAAD,UAAQ,SAAS;;AAIE,UAA7B,AAAU,UAAA,QAAC,SAAS,EAAI,KAAK;;;AAG/B,YAAU,YAAN,KAAK,EAAe;AAClB,oBAAM,UAAU;AACpB,mBAAS,OAAQ,AAAS,SAAD,WAAS,GAAmB,aAAhB,AAAS,QAAD,aAAU;AAC7C,sBAAM,AAAG,GAAA,QAAC,IAAI;AACtB,gBAAQ,aAAJ,GAAG;AACI,cAAT,MAAM,GAAG;;AAEC,cAAV,MAAM;AACN;;;AAGJ,cAAI,GAAG;AACoB,YAAzB,AAAI,GAAD,UAAQ,AAAS,QAAD;;;AAGjB,oBAAM,UAAU;AACpB,mBAAW,OAAQ,AAAS,SAAD,WAAS,GAAmB,aAAhB,AAAS,QAAD,aAAU;AAC/C,sBAAM,AAAG,GAAA,QAAC,IAAI;AACtB,gBAAQ,aAAJ,GAAG;AACI,cAAT,MAAM,GAAG;;AAGgB,cAAzB,MAAuB;AACR,cAAf,AAAG,GAAA,QAAC,IAAI,EAAI,GAAG;AACC,cAAhB,MAAU,aAAJ,GAAG;;;AAGT,4BAAc,UAAU;AACZ,UAAhB,aAAa,GAAG;AACW,UAA3B,KAAK,CAAC,AAAS,QAAD,SAAO,KAAK;AACF,UAAxB,aAAa,WAAW;;;;;AAKE,IAAtB,AAAQ,aAAjB,QAAQ,YAAiB,KAAK;AAC/B,UAAO,UAAS;EAClB;iFAMwD;AACtD,QAAW,4BAAP,MAAM;AACR,YAAO,OAAM;UACR,KAAW,6BAAP,MAAM;AACf,YAAO,AAAO,OAAD,4BACT,8EACgB,SAAC,MAAM;AACS,UAAlC,AAAK,IAAD,KAAe,4CAAS,IAAI;;;AAG+B,MAAjE,WAAM,2BAAc,AAA4C,mCAAb,iBAAP,MAAM;;EAEtD;;MAthBM,qBAAe;YAAG,AAAI,kBAAW;;;;;;;;;;;;;;;QCDjC;;;;;;QAGY;;;;;;QAUd;;;;;;;AAPW,gBAAA,AAAI;QAAG;;AAGL;QAAQ;;AAOF,gBAAgB,UAAd,YAAG,eAAE;QAAS;aAMV;AAAU,+BAAS,KAAK;QAAC;iBAG5B;AACtB,cAAI,AAAM,KAAD,IAAU;AACjB,kBAAO;gBACF,KAAI,AAAM,KAAD,IAAU;AACxB,kBAAO;;AAEP,kBAAO,sCAAuB,aAAN,aAAc,KAAK;;QAE/C;oBAG2B;AACzB,cAAI,AAAM,KAAD,IAAU;AACjB,kBAAO;gBACF,KAAI,AAAM,KAAD,IAAU;AACxB,kBAAO;;AAEP,kBAAO,yCAA0B,aAAN,aAAc,KAAK;;QAElD;;AAIE,cAAS,kFAAL;AACF,kBAAY,mFAAL;;AAET,gBAA0B,yFAAnB,AAAI,iDAA8B,mBAAN;QACrC;;;;;;MApDI;MAGY;MAUd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iDA6CsD;;AAAxD;AACgC,MAA9B,kBAAM,AAAO,MAAD,oBAAC,OAAK;AACU,MAA5B,gBAAwB,QAAb,AAAO,MAAD;IACnB;0CAGsC,KAAO;AAA7C;AACgB,MAAT,WAAM,GAAG;AACE,MAAhB,gBAAW,KAAK;IAClB;;;;;;;;;;;;;;;;;MAQgC;;;;;;WAQL;AAAU,cAAA,AAAS,2BAAY,KAAK;MAAC;;AAIjD,cAAA,AAAS;MAAQ;;AAI5B,0GAAiC,AAAS;MAAe;;AAGhD,cAAA,AAAS;MAAG;;AAGE,cAAA,AAAS;MAAG;;6CAnBO;MAC/B,kBAAW,iCAAT,QAAQ;;IAA6B;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECjExD;;;;;;;IAK6C;;;;;;kBAMT;;AAChC;AAEE,cAAe,MAAM;cAAd,AAAO;;YACP;AAEP,cAAO;;IAEX;;;IAXyB;;EAAQ;;;;;;;;;;;;;;;IAiB5B;;;;;;;;;;;;;;;;;;;;;IAMG;;;;;;;;;;;;;;;;;;;;;IAMD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBAc2B;AAChC,qBAAK,qBAAS,YAAO,AAAO,MAAD;AACzB,cAAO;;AAEL,uBAAa,AAAM,MAAA,MAAC;AACxB,UAAI,AAAU,mBAAG;AACf,YAAe,kBAAX,UAAU;AACZ,mBAAS,YAAa,WAAU;AAC9B,gBAAc,YAAV,SAAS,EAAI;AACf,oBAAO;;;;AAIb,cAAO;;AAEP,cAAkB,aAAX,UAAU,EAAI;;IAEzB;;AAIE,YAAyB,UAAhB,cAAK,kBAAK;IACrB;;kDA7B2B,OAAe,OAAY;AAAtD;AACoB,IAAb,aAAQ,KAAK;AACA,IAAb,aAAQ,KAAK;AACQ,IAArB,iBAAY,SAAS;EAC5B;;;;;;;;;;;;;;;;;;;;;;;;IAgCa;;;;;;kBASqB;AAChC,qBAAK,qBAAS,YAAO,AAAO,MAAD;AACzB,cAAO;;AAGL,uBAAa,AAAM,MAAA,MAAC;AAExB,YAAK,WAAiB;AACpB,YAAU,gBAAN,KAAK;AACP,gBAAO,AAAO,sBAAS,KAAK;;AAE9B,cAAO;;;AAGT,UAAI,AAAU,mBAAG;AACf,YAAe,kBAAX,UAAU;AACZ,mBAAS,YAAa,WAAU;AAC9B,0BAAI,QAAQ,CAAC,SAAS;AACpB,oBAAO;;;;AAIb,cAAO;;AAEP,cAAO,SAAQ,CAAC,UAAU;;IAE9B;;AAIE,YAA+B,UAAtB,cAAK,uBAAU;IAC1B;;mDArC4B,OAAY,QAAa;IAAb;AAAxC;AACoB,IAAb,aAAQ,KAAK;AACQ,IAArB,iBAAY,SAAS;EAC5B;;;;;;;;;;;;;;;;;;IAwCK;;;;;;IAKQ;;;;;;;AAHI,wBAAC;IAAK;kBAYW;AAChC,eAAS,SAAU;AACjB,sBAAY,AAAsB,2BAA7B,MAAM,gBAAqC,MAAM;AACpD,wBAAI;AACF,kBAAO;;;AAGT,wBAAI;AACF,kBAAO;;;;AAKb,YAAO;IACT;;AAIE,YAAO,AAAQ,qBAAK,AAA2B,iBAAvB,cAAQ,QAAQ,QAAK;IAC/C;;;IAzB+B;IAAiB,cAAE;;EAAK;;IAGvB;IAAiB,cAAE;;EAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA6BvC;;;;;;kBASkB;AAChC,eAAI,aAAqB,QAAgB;AACvC;AACE,cAAW,oBAAP,MAAM,KAAyB,oBAAP,MAAM;AAChC,kBAAkB,yBAAQ,MAAM,EAAE,MAAM;;;cAEnC;;AACT,cAAO;;;AAGT,eAAK,UAAkB,QAAgB;AACjC,kBAAM,YAAY,CAAC,MAAM,EAAE,MAAM;AACrC,cAAO,AAAY,IAAT,YAAgB,aAAJ,GAAG,IAAG;;;AAG9B,eAAK,aAAqB,QAAgB;AACpC,kBAAM,YAAY,CAAC,MAAM,EAAE,MAAM;AACrC,cAAO,AAAY,IAAT,YAAgB,aAAJ,GAAG,IAAG;;;AAG9B,qBAAK,qBAAS,YAAO,AAAO,MAAD;AACzB,cAAO;;AAGL,uBAAa,AAAM,MAAA,MAAC;AACxB,cAAQ;;;AAEJ,gBAAkB,cAAX,UAAU,EAAI;;;;AAGrB,gBAAO,UAAS,CAAC,UAAU,EAAE;;;;AAE7B,gBAAoC,WAA7B,SAAS,CAAC,UAAU,EAAE,gBAAqB,YAAX,UAAU,EAAI;;;;AAGrD,gBAAO,aAAY,CAAC,UAAU,EAAE;;;;AAGhC,gBAAuC,WAAhC,YAAY,CAAC,UAAU,EAAE,gBAAqB,YAAX,UAAU,EAAI;;;;AAGxD,gBAAc,AAAS,eAAf,uBAAwB,AAAM,MAAA,MAAC;;;;AAEV,UAA7B,WAA6B,SAApB,QAAK;;;IAEpB;;AAIE,YAAiC,UAAxB,cAAK,eAAE,kBAAS,eAAE;IAC7B;;qDAxD8B,OAAY,WAAmB;IAAnB;AAA1C;AACoB,IAAb,aAAQ,KAAK;AACA,IAAb,aAAQ,KAAK;EACpB;;;;;;;;;;;;;;;;;IA2DU;;;;;;;AA8BR,cAAQ;;;AAEJ,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEP,gBAAO;;;;AAEsB,UAA7B,WAA6B,SAApB,QAAK;;;IAEpB;;;IAhD6B;;EAAM;;;;;;;;;;;;;;;MAGN,kCAAM;;;MAGN,qCAAS;;;MAGT,oCAAQ;;;MAGR,4CAAgB;;;MAGhB,uCAAW;;;MAGX,+CAAmB;;;MAGnB,kCAAM;;;MAGN,mCAAO;;;;2CAnRjB,OAAe;AAChC,UAAa,AAAkC,cAA9C,WAAW,KAAa,AAAM,KAAD,IAAU,sBAAW,AAAM,KAAD,IAAU;EAAI;iEAG1C,QAAuB;AACrD,QAAI,AAAO,MAAD;AACR,YAAO;;AAIT,UAAe,AACV,4BADG,MAAM,gBACK,sDAAyB,MAAM;EACpD;;kBCT+B,OAAO;UAAa;AAC/C,YAAO,yCAAoB,KAAK,EAAE,KAAK,EAAE,SAAS;IACpD;qBAGgC,OAAO;AACrC,YAAO,4CAAuB,KAAK,EAAkB,uCAAW,KAAK;IACvE;mBAG8B;AAAU,YAAO,yBAAU,KAAK,EAAE;IAAK;kBAGxC;AAAU,YAAO,sBAAO,KAAK,EAAE;IAAK;oBAGlC,OAAO;AACpC,YAAO,4CAAuB,KAAK,EAAkB,sCAAU,KAAK;IACtE;4BAIuC,OAAO;AAC5C,YAAO,4CACH,KAAK,EAAkB,8CAAkB,KAAK;IACpD;uBAGkC,OAAO;AACvC,YAAO,4CAAuB,KAAK,EAAkB,yCAAa,KAAK;IACzE;+BAG0C,OAAO;AAC/C,YAAO,4CACH,KAAK,EAAkB,iDAAqB,KAAK;IACvD;kBAG6B,OAAY;AACvC,YAAO,4CAAuB,KAAK,EAAkB,oCAAQ,IAAI;IACnE;mBAM8B,OAAc;UAAe;AACvD,YAAO,6BAAc,KAAK,EAAE,gBAAO,OAAO,eAAc,SAAS;IAAC;yBAMlC,OAAc;UAAc;AAC9D,YAAO,0CAAqB,KAAK,EAAE,MAAM,EAAE,SAAS;IACtD;cAK+B;AAAY,YAAuB,2CAAG,OAAO;IAAC;eAK7C;AAC5B,YAAuB,4CAAI,OAAO;IAAC;iBAKlB;AAAQ,YAAO,sBAAa,kBAAK,GAAG;IAAC;kBAIC;AACvD,qDAAoB,OAAO;IAAC;;;;;;;0FAQP;AAAU,UAAuB,2CAAG,iCAAO,KAAK;EAAE;yFAKlD;AAAU,UAAuB,4CAAI,iCAAO,KAAK;EAAE;;;UC9DhE;UACQ;UACZ;UACA;UACK;UACA;AACX,YAAO,4CACK,MAAM,cACF,UAAU,SACf,KAAK,UACJ,MAAM,SACP,KAAK,OACP,GAAG;IACd;;;;;;;;;;;;;;;;;;;QCtBO;;;;;;;kBAGkB;AACvB,cAAI,AAAI,GAAD;AAC2C,YAAhD,WAAM,2BAAc;;AAEtB,gBAAO,qCAAuB,MAAM,GAAG;QACzC;;6BAGqC;AACnC,gBAAO,sCAAwB,MAAM,IAAI;QAC3C;;AAGqB,gBAAA,AAAc,qBAAN,aAAI;QAAE;;AAGf,gBAAK,eAAL;QAAa;;cAGhB;AACf,cAAU,kBAAN,KAAK;AACP,kBAAO,AAAM,AAAK,MAAN,SAAS;;AAEvB,gBAAO;QACT;;AAKE,cAAS,sEAAL;AACF,kBAAY,uEAAL;;AAET,gBAAO,2DAAiB;QAC1B;;;;;;;MApCO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCAZgB;AAAvB;AACE,UAAI,AAAK,IAAD;AAE+E,QADrF,WAAM,2BACF;;AAEU,MAAX,YAAO,IAAI;IAClB;;;;;;;;;;;;;;;;YAuN6B;AAC3B,YAAI,AAAK,IAAD;AACN,gBAAO;;AAEP,gBAAO,uBAAe,IAAI;;MAE9B;;;;;;;;;;;;;;;;;;;;;;;;;;IAIyD;;;;;;;;;mJAhLtC;QACP;AAF6C;AAGjD,mBAAS,+BAAU,cAAc;AAEvC,YAAO,OAAM,AACR,AACA,MAFc,uCAEC,AAAO,MAAD,qBAAqB,MAAM;IACvD;;;AARqC,oBAClB;UACP;AAFyB,sIAAc,WAAd,MAAM;;EAQ3C;2GAQ2B;AACnB,iBAAS,+BAAU,cAAc;AACvC,UAAO,AAAO,OAAD,6BAAe,QAAC,OACpB,AAAO,AAAgB,MAAjB,gCAAgC,GAAG,EAAE;EAEtD;;AALO,mBAAoB,yGAApB,cAAc;EAKrB;qHAKsD;QAC1C;AAD0B;AAE9B,mBAAS,+BAAU,cAAc;AAEnC,oBAAS,MAAM,AACd,AACA,MAFoB,sCAEN,AAAO,MAAD,qBAAqB,MAAM;AACpD,UAAI,AAAO,MAAD;AACR,cAAO;;AAEP,cAAO,8FAAuC,MAAM;;IAExD;;;AAZ6B,oBAAyB;UAC1C;AADiB,uHAAc,WAAd,MAAM;;EAYnC;2GAOuD;QAC3C;AAD2B;AAEjC,qBAAU,MAAM,2GAAqB,cAAc,WAAU,MAAM;AACvE,YAAO,sEAA+B,OAAO;IAC/C;;;AAJmC,oBAAoB;UAC3C;AADuB,kHAAc,WAAd,MAAM;;EAIzC;;QAK6B;AAC3B,UAAO,kFAA6B,uBAAP,MAAM;EACrC;;AAFe;UAAc;AAAd,oHAAM;;EAErB;iHAOiC;QAAwB;AAAxC;AACT,mBAAS,+BAAU,cAAc;AAEnC,iBAAM,MAAM,AACX,AACA,MAFiB,mCAEN,AAAO,MAAD,qBAAqB,MAAM;AACjD,YAAW,mBAAJ,GAAG;IACZ;;;AAPU,oBAAuB;UAAwB;AAA/C,qHAAc,WAAd,MAAM;;EAOhB;mHAOwC;QAC5B;AADY;AAEhB,mBAAS,+BAAU,cAAc;AAEnC,kBAAO,MAAM,AACZ,AACA,MAFkB,oCAEN,AAAO,MAAD,qBAAqB,MAAM;AAClD,YAAO,AAAK,KAAD;IACb;;;AARgB,oBAAwB;UAC5B;AADI,sHAAc,WAAd,MAAM;;EAQtB;+GAGmD;QACvC;AACJ,iBAAS,+BAAU,cAAc;AAEvC,UAAO,AACF,AACA,OAFQ,qEAEK,AAAO,MAAD,qBAAqB,MAAM;EACrD;;AAP6B,oBAAsB;UACvC;AADiB,oHAAc,WAAd,MAAM;;EAOnC;6GAKiC;QAAwB;AACjD,iBAAS,+BAAU,cAAc;AAEvC,UAAO,AACF,AACA,OAFQ,iCAEC,AAAO,MAAD,qBAAqB,MAAM;EACjD;;AANY,oBAAqB;UAAwB;AAA7C,mHAAc,WAAd,MAAM;;EAMlB;yGAK6B,gBAAkB;AAAlC;AACL,mBAAS,+BAAU,cAAc;AACoB,MAA3D,QAAQ,AAAO,AAAgB,MAAjB,oDAAuC,KAAK;AAC1D,YAAO,OAAM,AAAO,MAAD,+BAAe,QAAC,OAC1B,AACF,AACA,MAFQ,+DAEK,AAAO,MAAD,qBAAqB,KAAK;IAEtD;;;AARU,oBAAmB,gBAAkB,gGAArC,cAAc,EAAd,KAAK;EAQf;+GAKsC,gBAAwB;AAAxC;AACd,mBAAS,+BAAU,cAAc;AACnC,4BAAkB,AACjB,MADuB,uBACnB,QAAC,SAAU,AAAO,AAAgB,MAAjB,oDAAuC,KAAK;AAClE,iBAAU;AAMZ,MALF,MAAM,AAAO,MAAD,0BAAe,QAAC;AACtB,oBAAQ,AAAO,MAAD;AAClB,iBAAS,QAAS,gBAAe;AACqC,UAApE,AAAK,IAAD,OAAK,MAAM,AAAM,KAAD,wCAAc,AAAO,MAAD,qBAAqB,KAAK;;MAErE;AACD,YAAO,KAAI;IACb;;;AAZgB,oBAAsB,gBAAwB,oGAA9C,cAAc,EAAd,MAAM;EAYtB;+GAKkC,gBAAkB;QAAe;AAC3D,iBAAS,+BAAU,cAAc;AACkC,IAAzE,QAAQ,AAAO,AAAgB,MAAjB,oDAAuC,KAAK,WAAU;AACpE,UAAO,AAAO,OAAD,0BAAe,QAAC;AAC3B,YAGK,EAHG,MAAM,AACL,AACA,MAFW,uCAEI,GAAG,EAAE,KAAK,WAAU,MAAM;IAEnD;EACH;;AATY,oBAAsB,gBAAkB;UAAe;AAAvD,oHAAc,EAAd,KAAK,WAAL,MAAM;;EASlB;+GAKkC;QAAwB;AAClD,iBAAS,+BAAU,cAAc;AACvC,UAAO,AAAO,OAAD,0BAAe,QAAC;AAC3B,YACK,EADG,MAAM,AAAO,AAAsB,MAAvB,iCAAgC,GAAG,WAAU,MAAM;IAExE;EACH;;AANY,oBAAsB;UAAwB;AAA9C,oHAAc,WAAd,MAAM;;EAMlB;;MAmBI,iCAAkB;YAAG;;MAGrB,oCAAqB;YAAG;;;;MC1PjB,yBAAY;;;MAGZ,gCAAmB;;;MAGnB,uCAA0B;;;MAG1B,wBAAW;;;MAGX,2BAAc;;;MAGd,6BAAgB;;;MAGhB,+BAAkB;;;MAGlB,wBAAW;;;MAGlB,yBAAY;YAAG;;MAGR,2BAAc;;;MAGd,mCAAsB;;;;;;;;;ICZnC;;;;;;;;;;;;;;ICmCA;;;;;;;;;;;;iBChC0B;AAAS,yFAAgB,IAAI;MAAC;;AAG3B;MAA4B;;;;;;;;;;;;;;;;;IAUzD;;;;;;;;;;MAGM,4BAAkB;YAAG;;MAGrB,+BAAqB;YAAG;;;;;;;;IC7B9B;;;;;;;;;;;;ECCA;;;;;;;;;;YAQoB;YACN;YACoB;YACpB;YACH;AACP,cAAO,6CAA2B,MAAJ,GAAG,EAAH,cAAY,kBAAW,OAAN,KAAK,EAAL,eAAc,8BAChD,OAAO;MACtB;;AAIE,cAAO,4CAAuB,UAAK,gBAAe;MACpD;;AAGM,kBAAuB;AACL,QAAtB,AAAG,GAAA,eAAgB;AAEnB,YAAI,AAAQ,iBAAG;AACiB,UAA9B,AAAG,GAAA,mBAAuB;;AAE5B,YAAI,AAAI,uCAAiB,AAAI,gBAAS;AACA,UAApC,AAAG,GAAA,iBAAmB,AAAI,AAAM;;AAElC,cAAO,IAAG;MACZ;;AAIM,kBAAM;AAGV,YAAI,iCAAkB;AACS,UAA7B,AAAG,GAAA,iBAAqB;;AAE1B,cAAO,IAAG;MACZ;;AAGoB,cAAA,AAAI,oBAAU,IAAQ,cAAJ;MAAY;;YAGjC;AACf,YAAM,uBAAF,CAAC;AACH,gBAAO,AAAI,oBAAU,QAAa,YAAJ,UAAO,AAAE,CAAD;;AAExC,cAAO;MACT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAME;;;;;;;;;;IACJ;;;;;;;;;;;;;;;;;IAIO;;;;;;;AAGe,YAAA,AAAS,qBAAG;IAAI;gBAEnB;AAAY,+BAAW,OAAO;;cAErC;AAAU,6BAAW,yBAAmB,KAAK;IAAC;;;IAPnD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAwBK;AACmD,MAA3D,WAAM,wBAAW;IACnB;;AAGqB,kCAAqB;IAAM;;AAK9C,YAAS,oDAAF,aAAE,oDAAF;IACT;;AA6BM,gBAAM;AACV,UAAI;AACwB,QAA1B,AAAG,GAAA,QAAC,YAAc;;AAEpB,YAAW,eAAJ,GAAG;IACZ;;;;;oEA/BmD,IAAQ;AAA3D;AACQ,oBAAgC,gBAApB,AAAG,GAAA;AACf,mBAAW,AAAU,SAAD,WACpB,4BACA,uBAA2B,SAAS;AACH,IAAvC,WAAM,AAAS,QAAD,QAAQ,AAAG,GAAA;AAC8B,IAAjD,gBAAQ,yBAAmB,AAAG,GAAA;AACM,IAA1C,kBAAmC,YAAxB,AAAG,GAAA,oBAAwB;AACZ,IAA1B,gBAAW;EACb;qDAOmD,KAAa;QACtD;AADV;AAEgB,IAAT,WAAM,GAAG;AACK,IAAb,gBAAQ,KAAK;AACD,IAAlB,kBAAW,OAAO;AACQ,IAA1B,gBAAW;EACb;;;;;;;;;;MA7BW,gDAAa;YAAG;;;;;wDAlBS,KAAa;QACvC;QAAa;AACjB,mEAAM,GAAG,EAAE,KAAK,YAAW,OAAO;AACd,IAAnB,gBAAW,QAAQ;EAC1B;;;;;;;;;;IA0DuB;;;;;;SAMI;AAAU,YAAA,AAAM,kBAAC,KAAK;IAAC;;AAG9B,YAAA,AAAO;IAAO;;AAGf,YAAA,AAAO;IAAG;;AAGR,YAAA,AAAO;IAAK;;AAGZ,YAAA,AAAO;IAAG;;AAGU,YAAA,AAAO;IAAc;;AAGf,uCAAU,OAAO;IAAM;;;IArBvD;;EAAO;;;;;;;;;;;;;;;;;;;;;;iDA2BH;AACf,cAAM,AAAG,GAAA;AACb,UAAQ,AAAI,IAAD;EACb;uEAI2B;AACzB,QAAW,mCAAP,MAAM;AACR,YAAO,OAAM;UACR,KAAI,AAAO,MAAD;AAEf,YAAO;;AAGT,UAAO,+CAA0B,AAAO,MAAD,MAAM,iBAAW,AAAO,MAAD,mBACjD,AAAO,MAAD;EACrB;iFAG0D;AACxD,QAAW,gCAAP,MAAM;AACR,YAAO,OAAM;UACR,KAAW,+BAAP,MAAM;AACf,YAAO,OAAM;UACR,KAAI,AAAO,MAAD;AAEf,YAAO;;AAET,UAAO,oDAAsB,AAAO,MAAD,MAAM,iBAAW,AAAO,MAAD;EAC5D;iFAIiC;;AAC/B,UAAO,AACF,OADS,iGACL,QAAC,aAAc,6FAAuC,SAAS;yBAAnE,OACC,wBAAiB;EACzB;;;;;;ICzNuB;;;;;;IAGP;;;;;;IA2BT;;;;;;;AAhBG,qBAA4B;AAClC,UAAI;AACoC,QAAtC,AAAQ,QAAA,QAAC,UAAmB,cAAP;YAChB,KAAI;AACiC,QAA1C,AAAQ,QAAA,QAAC,YAAuB,cAAT;;AAEI,MAA7B,AAAQ,QAAA,QAAC,WAAa;AACtB,YAAO,SAAQ;IACjB;;AAIE,YAAqB,eAAd;IACT;;;QAlBgC;QAAa;QAAc;;IAC7C,iBAAE,AAAQ,OAAD,KAAI;IACZ,iBAAE,wCAA4B,MAAM;;EAAC;;;;;;;;;;;;;;;;;;;;UCEhC;UAAa;UAAuB;AACtD,YAAO,gDAAwB,MAAM,WAAW,OAAO,UAAU,MAAM;IACzE","file":"../../../../../../../../../../../packages/sembast/src/sembast_codec.dart.lib.js"}');
  // Exports:
  return {
    src__sembast_codec: sembast_codec,
    src__api__database: database,
    src__api__codec: codec,
    src__records_ref_impl: records_ref_impl,
    src__record_ref_impl: record_ref_impl,
    src__sembast_codec_impl: sembast_codec_impl,
    src__database_content: database_content,
    src__query_ref_impl: query_ref_impl,
    src__api__query_ref: query_ref,
    src__listener: listener,
    src__meta: meta$,
    src__storage: storage,
    src__sembast_jdb: sembast_jdb,
    src__json_encodable_codec: json_encodable_codec,
    src__jdb: jdb,
    src__api__field: field$,
    src__api__v2__database: database$,
    src__api__v2__sembast: sembast,
    src__api__v2__factory: factory,
    src__api__factory: factory$,
    src__database_factory_mixin: database_factory_mixin,
    src__api__protected__jdb: jdb$,
    src__database_impl: database_impl,
    src__database_client_impl: database_client_impl,
    src__transaction_impl: transaction_impl,
    src__store_impl: store_impl,
    src__finder_impl: finder_impl,
    src__sort_order_impl: sort_order_impl,
    src__api__sort_order: sort_order,
    src__utils: utils,
    src__record_snapshot_impl: record_snapshot_impl,
    src__filter_impl: filter_impl,
    src__api__filter: filter,
    src__api__finder: finder,
    src__store_ref_impl: store_ref_impl,
    src__sembast_impl: sembast_impl,
    src__api__record_snapshot: record_snapshot,
    src__api__records_ref: records_ref,
    src__api__store_ref: store_ref,
    src__api__record_ref: record_ref,
    src__record_impl: record_impl,
    src__boundary_impl: boundary_impl,
    src__api__boundary: boundary,
    src__api__sembast: sembast$,
    sembast: sembast$0
  };
}));

//# sourceMappingURL=sembast_codec.dart.lib.js.map
